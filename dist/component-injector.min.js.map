{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///component-injector.min.js","webpack:///webpack/bootstrap 4761c9881ba98e27ffed","webpack:///./src/component-injector.ts","webpack:///./~/rxjs/Subscription.js","webpack:///./~/rxjs/symbol/rxSubscriber.js","webpack:///./~/rxjs/util/root.js","webpack:///./~/rxjs/Observable.js","webpack:///./~/rxjs/Observer.js","webpack:///./~/rxjs/Subscriber.js","webpack:///./~/rxjs/symbol/observable.js","webpack:///./~/rxjs/util/errorObject.js","webpack:///./~/rxjs/util/isFunction.js","webpack:///./~/@angular/core/bundles/core.umd.js","webpack:///./~/rxjs/Subject.js","webpack:///./~/rxjs/SubjectSubscription.js","webpack:///./~/rxjs/util/ObjectUnsubscribedError.js","webpack:///./~/rxjs/util/UnsubscriptionError.js","webpack:///./~/rxjs/util/isArray.js","webpack:///./~/rxjs/util/isObject.js","webpack:///./~/rxjs/util/toSubscriber.js","webpack:///./~/rxjs/util/tryCatch.js"],"names":["root","factory","exports","module","define","amd","a","i","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__decorate","decorators","target","key","desc","d","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","k","v","metadata","value","core_1","ComponentInjector","resolver","prototype","inject","container","componentSelector","injectedComponent","componentFactory","getComponentFactory","injectComponentFactory","console","warn","setProperties","componentRef","properties","property","hasOwnProperty","instance","remove","destroy","factories","Array","from","find","component","selector","factoryClass","resolveComponentFactory","createComponent","Injectable","ComponentFactoryResolver","flattenUnsubscriptionErrors","errors","reduce","errs","err","concat","UnsubscriptionError_1","UnsubscriptionError","isArray_1","isObject_1","isFunction_1","tryCatch_1","errorObject_1","Subscription","unsubscribe","closed","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","_a","index","len","isFunction","trial","tryCatch","errorObject","e","isArray","sub","isObject","push","add","teardown","EMPTY","subscription","_addParent","tmp","Error","subscriptions","subscriptionIndex","indexOf","splice","parent","empty","root_1","Symbol","rxSubscriber","for","$$rxSubscriber","global","__window","window","__self","self","WorkerGlobalScope","__global","_root","toSubscriber_1","observable_1","Observable","subscribe","_isScalar","_subscribe","lift","operator","observable","source","observerOrNext","error","complete","sink","toSubscriber","_trySubscribe","syncErrorThrowable","syncErrorThrown","syncErrorValue","forEach","next","PromiseCtor","_this","Rx","config","Promise","resolve","reject","subscriber","create","__extends","b","__","constructor","Subscription_1","Observer_1","rxSubscriber_1","Subscriber","_super","destinationOrNext","isStopped","destination","SafeSubscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","getSymbolObservable","$$observable","x","rxjs_symbol_observable","rxjs_Subject","rxjs_Observable","scheduleMicroTask","Zone","current","getTypeNameForDebugging","type","isPresent","obj","isBlank","stringify","token","overriddenName","name","res","toString","newLineIndex","substring","looseIdentical","isNaN","isJsObject","o","print","log","getSymbolIterator","_symbolIterator","iterator","keys","getOwnPropertyNames","Map","isPrimitive","extractAnnotation","annotation","applyParams","fnOrArray","String","Function","Number","annotations","annoLength","paramsAnnotations","ii","paramAnnotations","j","defineMetadata","Class","clsDef","undefined","proto","extends","constructorName","_nextClassId","makeDecorator","props","parentClass","chainFn","DecoratorFactory","objOrType","getOwnMetadata","metaCtor","annotationInstance","chainAnnotation","TypeDecorator","cls","makeMetadataCtor","annotationCls","args","_i","prop","argVal","propName","makeParamDecorator","ParamDecoratorFactory","ParamDecorator","unusedKey","parameters","apply","makePropDecorator","PropDecoratorFactory","decoratorInstance","meta","unshift","isDefaultChangeDetectionStrategy","changeDetectionStrategy","ChangeDetectionStrategy","Default","forwardRef","forwardRefFn","__forward_ref__","resolveForwardRef","findFirstClosedCycle","constructResolvingPath","reversed","slice","reverse","tokenStrs","map","join","isType","convertTsickleDecoratorIntoMetadata","decoratorInvocations","decoratorInvocation","decoratorType","annotationArgs","getParentCtor","ctor","parentProto","getPrototypeOf","parentCtor","resolveReflectiveFactory","provider","factoryFn","resolvedDeps","useClass","reflector","_dependenciesFor","useExisting","aliasInstance","ReflectiveDependency","fromKey","ReflectiveKey","get","useFactory","constructDependencies","deps","useValue","_EMPTY_LIST","ResolvedReflectiveFactory","resolveReflectiveProvider","ResolvedReflectiveProvider_","provide","multi","resolveReflectiveProviders","providers","normalized","_normalizeProviders","resolved","resolvedProviderMap","mergeResolvedReflectiveProviders","values","normalizedProvidersMap","existing","multiProvider","MixingMultiProvidersWithRegularProvidersError","resolvedFactories","set","resolvedProvider","Type","InvalidProviderError","typeOrFunc","dependencies","params_1","t","_extractToken","params","some","NoAnnotationError","optional","Inject","_createDependency","visibility","paramMetadata","Optional","Self","SkipSelf","_mapProviders","injector","_providers","getProviderAtIndex","isListLikeIterable","areIterablesEqual","comparator","iterator1","iterator2","item1","item2","done","iterateListLike","item","isPromise","then","isObservable","_appIdRandomProviderFactory","_randomChar","fromCharCode","Math","floor","random","_throwError","getPreviousIndex","addRemoveOffset","moveOffsets","previousIndex","moveOffset","devModeEqual","createRenderComponentType","templateUrl","slotCount","encapsulation","styles","animations","RenderComponentType","nextRenderComponentTypeId","addToArray","array","interpolate","valueCount","constAndInterp","result","_toStringWithNull","inlineInterpolate","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","checkBinding","throwOnChange","oldValue","newValue","ExpressionChangedAfterItHasBeenCheckedError","castByValue","input","pureProxy1","v0","UNINITIALIZED","p0","pureProxy2","v1","p1","pureProxy3","v2","p2","pureProxy4","v3","p3","pureProxy5","v4","p4","pureProxy6","v5","p5","pureProxy7","v6","p6","pureProxy8","v7","p7","pureProxy9","v8","p8","pureProxy10","v9","p9","setBindingDebugInfoForChanges","renderer","el","changes","setBindingDebugInfo","currentValue","camelCaseToDashCase","replace","CAMEL_CASE_REGEXP","toLowerCase","createRenderElement","parentElement","attrs","debugInfo","createElement","setElementAttribute","selectOrCreateRenderHostElement","elementName","rootSelectorOrNode","hostElement","selectRootElement","VERSION","full","subscribeToRenderElement","view","element","eventNamesAndTargets","listener","disposables","createEmptyInlineArray","eventName","eventTarget","disposable","listenGlobal","listen","disposeInlineArray","noop","InlineArray2","InlineArray4","InlineArray8","InlineArray16","InlineArrayDynamic","detectWTF","wtf","trace","events","createScope","signature","flags","leave","scope","returnValue","leaveScope","startTimeRange","rangeType","action","beginTimeRange","endTimeRange","range","noopScope","arg0","arg1","setTestabilityGetter","getter","_testabilityGetter","enableProdMode","_runModeLocked","_devMode","isDevMode","createPlatform","_platform","destroyed","PlatformRef","inits","PLATFORM_INITIALIZER","init","createPlatformFactory","parentPlatformFactory","marker","OpaqueToken","extraProviders","getPlatform","ReflectiveInjector","resolveAndCreate","assertPlatform","requiredToken","platform","destroyPlatform","_callAndReportToErrorHandler","errorHandler","callback","catch","handleError","registerModuleFactory","moduleFactories","moduleType","getModuleFactory","checkNotEmpty","modulePath","exportName","asNativeElements","debugEls","nativeElement","_queryElementChildren","predicate","matches","childNodes","node","DebugElement","_queryNodeChildren","parentNode","getDebugNode","nativeNode","_nativeNodeToDebugNode","indexDebugNode","removeDebugNodeFromIndex","delete","_reflector","_iterableDiffersFactory","defaultIterableDiffers","_keyValueDiffersFactory","defaultKeyValueDiffers","_localeFactory","locale","animate","timing","stylesEntry","EMPTY_STYLE","AnimationStyleMetadata","AnimationAnimateMetadata","group","steps","AnimationGroupMetadata","sequence","AnimationSequenceMetadata","style","tokens","offset","entry","entryOffset","parseFloat","state","stateNameExpr","AnimationStateDeclarationMetadata","keyframes","AnimationKeyframesSequenceMetadata","transition","stateChangeExpr","animationData","AnimationStateTransitionMetadata","trigger","animation","AnimationEntryMetadata","prepareFinalAnimationStyles","previousStyles","newStyles","nullValue","finalStyles","AUTO_STYLE","balanceAnimationKeyframes","collectedStyles","finalStateStyles","limit","firstKeyframe","flatenedFirstKeyframeStyles","flattenStyles","extraFirstKeyframeStyles","hasExtraFirstStyles","keyframeCollectedStyles","StringMapWrapper","merge","finalKeyframe","flatenedFinalKeyframeStyles","extraFinalKeyframeStyles","hasExtraFinalStyles","collectAndResolveStyles","clearStyles","collection","stylesObj","FILL_STYLE_FLAG","renderStyles","setElementStyle","_recursePlayers","player","collectedPlayers","AnimationGroupPlayer","AnimationSequencePlayer","players","globalScope","global$1","assert","condition","Host","_desc","ctorParameters","ANALYZE_FOR_ENTRY_COMPONENTS","Attribute","Query","ContentChildren","first","isViewQuery","descendants","read","ContentChild","ViewChildren","ViewChild","OnPush","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Detached","Errored","Destroyed","Directive","inputs","outputs","host","exportAs","queries","Component","viewProviders","changeDetection","template","styleUrls","interpolation","entryComponents","Pipe","pure","Input","Output","HostBinding","HostListener","LifecycleHooks","OnInit","OnDestroy","DoCheck","OnChanges","AfterContentInit","AfterContentChecked","AfterViewInit","AfterViewChecked","LIFECYCLE_HOOKS_VALUES","ngOnChanges","ngOnInit","ngDoCheck","ngOnDestroy","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","NgModule","declarations","imports","bootstrap","schemas","ViewEncapsulation","Emulated","Native","None","ViewMetadata","_b","Version","split","enumerable","configurable","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","_NullInjector","notFoundValue","Injector","NULL","__extends$1","BaseError","message","nativeError","_nativeError","stack","WrappedError","originalError","AbstractProviderError","constructResolvingMessage","injectors","addKey","NoProviderError","CyclicDependencyError","InstantiationError","originalException","originalStack","_genMessage","parameter","OutOfBoundsError","provider1","provider2","_globalKeyRegistry","numberOfKeys","KeyRegistry","_allKeys","has","newKey","size","DELEGATE_CTOR","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","_zipTypesAndAnnotations","paramTypes","_ownParameters","exec","tsickleCtorParams","ctorParam","fill","_ownAnnotations","ownAnnotations","parentAnnotations","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","lcProperty","setter","method","functionBody","importUri","resolveIdentifier","moduleUrl","runtime","resolveEnum","enumIdentifier","ReflectorReader","identifier","__extends$2","Reflector","reflectionCapabilities","updateCapabilities","caps","UNDEFINED","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","resolveAndCreateChild","createChildFromResolved","resolveAndInstantiate","instantiateResolved","_constructionCounter","keyIds","objs","_getByKey","inj","_instantiateProvider","_new","_getMaxNumberOfObjects","_instantiate","dep","_getByReflectiveDependency","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","_getObjByKeyId","keyId","_throwOrNull","inj_","displayName","ErrorHandler","rethrowError","_console","_findOriginalError","_findOriginalStack","_findContext","_extractMessage","m1","m2","_c","equals","k1","k2","ListWrapper","findLast","arr","removeAll","list","items","flatten","flat","flatItem","APP_INITIALIZER","ApplicationInitStatus","appInits","_done","asyncInitPromises","initResult","_donePromise","all","APP_ID","APP_ID_RANDOM_PROVIDER","APP_BOOTSTRAP_LISTENER","PACKAGE_ROOT_URL","Console","__extends$4","ComponentStillLoadingError","compType","ModuleWithComponentFactories","ngModuleFactory","componentFactories","Compiler","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","getNgContentSelectors","clearCache","clearCacheFor","COMPILER_OPTIONS","CompilerFactory","createCompiler","options","ElementRef","__extends$6","EventEmitter","isAsync","__isAsync","emit","generatorOrNext","schedulerFn","errorFn","completeFn","setTimeout","Subject","NgZone","enableLongStackTrace","_hasPendingMicrotasks","_hasPendingMacrotasks","_isStable","_nesting","_onUnstable","_onMicrotaskEmpty","_onStable","_onErrorEvents","assertZonePatched","outer","inner","fork","forkInnerZoneWithAngularBehavior","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runGuarded","runOutsideAngular","checkStable","isAngularZone","onInvokeTask","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","invoke","onHasTask","hasTaskState","hasTask","change","setHasMicrotask","microTask","setHasMacrotask","macroTask","onHandleError","triggerError","hasMicrotasks","hasMacrotasks","AnimationQueue","_zone","entries","enqueue","flush","_triggerAnimations","shift","hasStarted","play","DefaultIterableDifferFactory","supports","cdRef","trackByFn","DefaultIterableDiffer","trackByIdentity","_trackByFn","_length","_collection","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","forEachItem","record","forEachOperation","nextIt","nextRemove","currentIndex","adjPreviousIndex","_nextRemoved","localMovePreviousIndex","localCurrentIndex","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","check","onDestroy","_reset","itemTrackBy","mayBeDirty","index_1","trackById","_verifyReinsertion","_addIdentityChange","_mismatch","_truncate","isDirty","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","CollectionChangeRecord","reinsertRecord","_addToMoves","_addToRemovals","_unlink","clear","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","previous","additions","moves","removals","identityChanges","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","afterIndex","duplicates","recordList","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_records","_mapHead","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","records","oldSeqRecord","lastOldSeqRecord","lastNewSeqRecord","seqChanged","_forEach","newSeqRecord","_maybeAddToChanges","_removeFromSeq","KeyValueChangeRecord","_addToAdditions","_isInRemovals","_removeFromRemovals","previousValue","lastRecord","rec","_addToChanges","IterableDiffers","copied","extend","iterable","f","KeyValueDiffers","kv","WrappedValue","wrapped","wrap","ValueUnwrapper","hasWrappedValue","unwrap","reset","SimpleChange","isFirstChange","ChangeDetectorRef","markForCheck","detach","detectChanges","checkNoChanges","reattach","keyValDiff","iterableDiff","RenderDebugInfo","providerTokens","references","Renderer","selectorOrNode","createViewRoot","createTemplateAnchor","createText","projectNodes","nodes","attachViewAfter","viewRootNodes","detachView","destroyView","viewAllNodes","renderElement","setElementProperty","propertyName","propertyValue","attributeName","attributeValue","setElementClass","className","isAdd","styleName","styleValue","invokeElementMethod","methodName","setText","renderNode","text","startingStyles","duration","delay","easing","previousPlayers","RootRenderer","renderComponent","componentType","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","Sanitizer","sanitize","__extends$7","currValue","msg","ViewWrappedError","ViewDestroyedError","details","ViewUtils","_renderer","sanitizer","animationQueue","renderComponentType","EMPTY_ARRAY","EMPTY_MAP","InlineArray0","_v0","_v1","_v2","_v3","_v4","_v5","_v6","_v7","_v8","_v9","_v10","_v11","_v12","_v13","_v14","_v15","_values","EMPTY_INLINE_ARRAY","view_utils","freeze","__extends$5","ComponentRef","location","hostView","changeDetectorRef","ComponentRef_","_index","_parentView","_nativeElement","_component","ref","detachAndDestroy","ComponentFactory","_viewClass","_componentType","projectableNodes","vu","createHostView","__extends$8","NoComponentFactoryError","_NullComponentFactoryResolver","CodegenComponentFactoryResolver","_factories","wtfEnabled","wtfCreateScope","wtfLeave","s","wtfStartTimeRange","wtfEndTimeRange","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","_watchAngularEvents","onUnstable","onStable","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","isStable","hasPendingMacrotasks","pop","whenStable","getPendingRequestCount","findBindings","using","exactMatch","findProviders","TestabilityRegistry","_applications","addToWindow","registerApplication","testability","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","_NoopGetTestability","registry","__extends$3","NgProbeToken","bootstrapModuleFactory","moduleFactory","bootstrapModule","compilerOptions","PlatformRef_","_injector","_modules","_destroyListeners","_destroyed","_bootstrapModuleFactoryWithZone","ngZone","ngZoneInjector","moduleRef","exceptionHandler","onError","initStatus","donePromise","_moduleDoBootstrap","_bootstrapModuleWithZone","componentFactoryCallback","compilerFactory","compiler","appRef","ApplicationRef","bootstrapFactories","compFactory","ngDoBootstrap","tick","componentTypes","components","attachView","viewCount","ApplicationRef_","_exceptionHandler","_componentFactoryResolver","_initStatus","_testabilityRegistry","_testability","_bootstrapListeners","_rootComponents","_rootComponentTypes","_views","_runningTick","_enforceNoNewChanges","onMicrotaskEmpty","viewRef","internalView","attachToAppRef","componentOrFactory","compRef","_unloadComponent","_loadComponent","listeners","_tickScope","__extends$9","NgModuleRef","componentFactoryResolver","NgModuleFactory","_injectorClass","_moduleType","parentInjector","_UNDEFINED","NgModuleInjector","createInternal","getInternal","destroyInternal","NgModuleFactoryLoader","load","path","QueryList","_dirty","_results","_emitter","filter","toArray","notifyOnChanges","setDirty","_SEPARATOR","FACTORY_CLASS_SUFFIX","SystemJsNgModuleLoaderConfig","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","_compiler","_config","offlineMode","loadFactory","loadAndCompile","System","import","factoryClassSuffix","__extends$10","TemplateRef","elementRef","createEmbeddedView","TemplateRef_","_nodeIndex","createEmbeddedViewInternal","ViewContainerRef","templateRef","insert","move","ViewContainerRef_","_element","_createComponentInContainerScope","_insertScope","_removeScope","_detachScope","nestedViews","views","contextInjector","viewRef_","moveView","__extends$11","ViewRef","EmbeddedViewRef","rootNodes","ViewRef_","_view","_originalMode","cdMode","flatRootNodes","markPathToRootAsCheckOnce","__extends$12","EventListener","DebugNode","_debugInfo","addChild","attributes","classes","child","removeChild","childIndex","insertChildrenAfter","newChildren","siblingIndex","previousChildren","nextChildren","newChild","query","results","queryAll","queryAllNodes","triggerEventHandler","eventObj","_CORE_PLATFORM_PROVIDERS","platformCore","LOCALE_ID","TRANSLATIONS","TRANSLATIONS_FORMAT","ApplicationModule","ANY_STATE","DEFAULT_STATE","EMPTY_STATE","_players","_onDoneFns","_onStartFns","_finished","_started","parentPlayer","count","total","_onFinish","onDone","onStart","pause","restart","finish","setPosition","getPosition","min","AnimationKeyframe","AnimationPlayer","NoOpAnimationPlayer","_currentIndex","_onNext","start","_activePlayer","__extends$13","definitions","AnimationStateMetadata","AnimationMetadata","timings","AnimationWithStepsMetadata","_steps","AnimationStyles","AnimationTransitionEvent","fromState","toState","totalTime","phaseName","AnimationTransition","_player","_fromState","_toState","_totalTime","_createEvent","DebugDomRootRenderer","_delegate","componentProto","DebugDomRenderer","nativeEl","debugEl","comment","debugParent","debugElement_1","debugNode","debugViewRootNodes_1","rootNode","ViewType","HOST","COMPONENT","EMBEDDED","StaticNodeDebugInfo","componentToken","refTokens","DebugContext","_tplRow","_tplCol","staticNodeDebugInfos","staticNodeInfo","_staticNodeInfo","componentView","parentView","allNodes","varValues","refs_1","refName","varValue","refToken","injectorGet","ViewAnimationMap","_map","_allPlayers","animationName","playersByAnimation","findAllPlayersByElement","existingEntry","getAllPlayers","targetPlayer","AnimationViewContext","_animationQueue","onAllActiveAnimationsDone","activeAnimationPlayers","queueAnimation","getAnimationPlayers","currentPlayer","__extends$15","ElementInjector","__extends$14","_scope_check","EMPTY_CONTEXT","UNDEFINED$1","AppView","clazz","viewUtils","parentIndex","declaredViewContainer","numberOfChecks","_directRenderer","directRenderer","_animationContext","hostInjector","_hasExternalHostElement","_hostInjector","_hostProjectableNodes","templateNodeIndex","lastRootNode","dirtyParentQueriesInternal","nodeIndex","injectorGetInternal","notFoundResult","viewContainer","detachInternal","_renderDetach","projectedViews","visitRootNodesInternal","attachAfter","prevView","_renderAttach","moveAfter","prevNode","nextSibling","insertBefore","appendChild","ngContentIndex","visitProjectedNodes","cb","visitProjectableNodesInternal","internalDetectChanges","throwDestroyedError","detectChangesInternal","markAsCheckOnce","eventHandler","DebugAppView","_currentDebugContext","_resetDebug","_rethrowWithContext","debug","rowNum","colNum","superHandler","event","ViewContainer","detectChangesInNestedViews","destroyNestedViews","visitNestedViewRootNodes","mapNestedViews","nestedViewClass","nestedView","projectedView","viewIndex","__core_private__","Observable_1","Subscriber_1","ObjectUnsubscribedError_1","SubjectSubscription_1","SubjectSubscriber","observers","hasError","thrownError","subject","AnonymousSubject","ObjectUnsubscribedError","copy","SubjectSubscription","asObservable","subscriberIndex","nextOrObserver","tryCatcher","tryCatchTarget"],"mappings":"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","file":"component-injector.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/static/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar core_1 = __webpack_require__(10);\n\tvar ComponentInjector = (function () {\n\t    function ComponentInjector(resolver) {\n\t        this.resolver = resolver;\n\t    }\n\t    /**\n\t     * Inject a component into a ViewContainerRef element\n\t     * @param container ViewContainerRef element where to inject the component\n\t     * @param componentSelector string Selector of the component which should be injected\n\t     * @returns {ComponentRef<any>} Returns ComponentRef of the injected component\n\t     */\n\t    ComponentInjector.prototype.inject = function (container, componentSelector) {\n\t        var injectedComponent;\n\t        var componentFactory = this.getComponentFactory(componentSelector);\n\t        if (componentFactory) {\n\t            injectedComponent = this.injectComponentFactory(container, componentFactory);\n\t        }\n\t        else {\n\t            console.warn('Component [' + componentSelector + '] cannot be found! ' +\n\t                'Make sure it is included in the `entryComponents` list.');\n\t        }\n\t        return injectedComponent ? injectedComponent : null;\n\t    };\n\t    /**\n\t     * Set public properties of the component specified by the componentRef\n\t     * @param componentRef ComponentRef object where should be attached the properties\n\t     * @param properties Object which contains the keys (name of the property) and values (value of the property).\n\t     */\n\t    ComponentInjector.prototype.setProperties = function (componentRef, properties) {\n\t        if (componentRef) {\n\t            for (var property in properties) {\n\t                if (properties.hasOwnProperty(property)) {\n\t                    componentRef.instance[property] = properties[property];\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Remove a component by its ComponentRef\n\t     * @param componentRef ComponentRef which should be removed\n\t     */\n\t    ComponentInjector.prototype.remove = function (componentRef) {\n\t        componentRef.destroy();\n\t        componentRef = null;\n\t    };\n\t    /**\n\t     * Get the component factory class from the _factories list based on its selector string name\n\t     * The list of the _factories is created based on the list of components listed in the entryComponents: [...]\n\t     * section of the @NgModule(...)\n\t     * @param componentSelector string Selector of the component\n\t     * @returns {ComponentFactory<any>|null} Returns the factory of the component or NULL if there is no such component\n\t     */\n\t    ComponentInjector.prototype.getComponentFactory = function (componentSelector) {\n\t        var componentFactory;\n\t        var factories = Array.from(this.resolver['_factories']);\n\t        var factory = factories.find(function (component) {\n\t            return component[1].selector === componentSelector;\n\t        });\n\t        if (factory) {\n\t            var factoryClass = factory[0];\n\t            componentFactory = this.resolver.resolveComponentFactory(factoryClass);\n\t        }\n\t        return componentFactory ? componentFactory : null;\n\t    };\n\t    /**\n\t     * Inject a componentFactory into a container element\n\t     * @param container ViewContainerRef container element where to inject the component\n\t     * @param componentFactory ComponentFactory which should be injected in the  container element\n\t     * @returns {ComponentRef<any>} returns ComponentRef of the injected componentFactory\n\t     */\n\t    ComponentInjector.prototype.injectComponentFactory = function (container, componentFactory) {\n\t        return container.createComponent(componentFactory);\n\t    };\n\t    return ComponentInjector;\n\t}());\n\tComponentInjector = __decorate([\n\t    core_1.Injectable(),\n\t    __metadata(\"design:paramtypes\", [core_1.ComponentFactoryResolver])\n\t], ComponentInjector);\n\texports.ComponentInjector = ComponentInjector;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isArray_1 = __webpack_require__(15);\n\tvar isObject_1 = __webpack_require__(16);\n\tvar isFunction_1 = __webpack_require__(9);\n\tvar tryCatch_1 = __webpack_require__(18);\n\tvar errorObject_1 = __webpack_require__(8);\n\tvar UnsubscriptionError_1 = __webpack_require__(14);\n\t/**\n\t * Represents a disposable resource, such as the execution of an Observable. A\n\t * Subscription has one important method, `unsubscribe`, that takes no argument\n\t * and just disposes the resource held by the subscription.\n\t *\n\t * Additionally, subscriptions may be grouped together through the `add()`\n\t * method, which will attach a child Subscription to the current Subscription.\n\t * When a Subscription is unsubscribed, all its children (and its grandchildren)\n\t * will be unsubscribed as well.\n\t *\n\t * @class Subscription\n\t */\n\tvar Subscription = (function () {\n\t    /**\n\t     * @param {function(): void} [unsubscribe] A function describing how to\n\t     * perform the disposal of resources when the `unsubscribe` method is called.\n\t     */\n\t    function Subscription(unsubscribe) {\n\t        /**\n\t         * A flag to indicate whether this Subscription has already been unsubscribed.\n\t         * @type {boolean}\n\t         */\n\t        this.closed = false;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        this._subscriptions = null;\n\t        if (unsubscribe) {\n\t            this._unsubscribe = unsubscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Disposes the resources held by the subscription. May, for instance, cancel\n\t     * an ongoing Observable execution or cancel any other type of work that\n\t     * started when the Subscription was created.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.unsubscribe = function () {\n\t        var hasErrors = false;\n\t        var errors;\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n\t        this.closed = true;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        // null out _subscriptions first so any child subscriptions that attempt\n\t        // to remove themselves from this subscription will noop\n\t        this._subscriptions = null;\n\t        var index = -1;\n\t        var len = _parents ? _parents.length : 0;\n\t        // if this._parent is null, then so is this._parents, and we\n\t        // don't have to remove ourselves from any parent subscriptions.\n\t        while (_parent) {\n\t            _parent.remove(this);\n\t            // if this._parents is null or index >= len,\n\t            // then _parent is set to null, and the loop exits\n\t            _parent = ++index < len && _parents[index] || null;\n\t        }\n\t        if (isFunction_1.isFunction(_unsubscribe)) {\n\t            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\t            if (trial === errorObject_1.errorObject) {\n\t                hasErrors = true;\n\t                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n\t                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n\t            }\n\t        }\n\t        if (isArray_1.isArray(_subscriptions)) {\n\t            index = -1;\n\t            len = _subscriptions.length;\n\t            while (++index < len) {\n\t                var sub = _subscriptions[index];\n\t                if (isObject_1.isObject(sub)) {\n\t                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\t                    if (trial === errorObject_1.errorObject) {\n\t                        hasErrors = true;\n\t                        errors = errors || [];\n\t                        var err = errorObject_1.errorObject.e;\n\t                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n\t                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n\t                        }\n\t                        else {\n\t                            errors.push(err);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (hasErrors) {\n\t            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n\t        }\n\t    };\n\t    /**\n\t     * Adds a tear down to be called during the unsubscribe() of this\n\t     * Subscription.\n\t     *\n\t     * If the tear down being added is a subscription that is already\n\t     * unsubscribed, is the same reference `add` is being called on, or is\n\t     * `Subscription.EMPTY`, it will not be added.\n\t     *\n\t     * If this subscription is already in an `closed` state, the passed\n\t     * tear down logic will be executed immediately.\n\t     *\n\t     * @param {TeardownLogic} teardown The additional logic to execute on\n\t     * teardown.\n\t     * @return {Subscription} Returns the Subscription used or created to be\n\t     * added to the inner subscriptions list. This Subscription can be used with\n\t     * `remove()` to remove the passed teardown logic from the inner subscriptions\n\t     * list.\n\t     */\n\t    Subscription.prototype.add = function (teardown) {\n\t        if (!teardown || (teardown === Subscription.EMPTY)) {\n\t            return Subscription.EMPTY;\n\t        }\n\t        if (teardown === this) {\n\t            return this;\n\t        }\n\t        var subscription = teardown;\n\t        switch (typeof teardown) {\n\t            case 'function':\n\t                subscription = new Subscription(teardown);\n\t            case 'object':\n\t                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n\t                    return subscription;\n\t                }\n\t                else if (this.closed) {\n\t                    subscription.unsubscribe();\n\t                    return subscription;\n\t                }\n\t                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n\t                    var tmp = subscription;\n\t                    subscription = new Subscription();\n\t                    subscription._subscriptions = [tmp];\n\t                }\n\t                break;\n\t            default:\n\t                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n\t        }\n\t        var subscriptions = this._subscriptions || (this._subscriptions = []);\n\t        subscriptions.push(subscription);\n\t        subscription._addParent(this);\n\t        return subscription;\n\t    };\n\t    /**\n\t     * Removes a Subscription from the internal list of subscriptions that will\n\t     * unsubscribe during the unsubscribe process of this Subscription.\n\t     * @param {Subscription} subscription The subscription to remove.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.remove = function (subscription) {\n\t        var subscriptions = this._subscriptions;\n\t        if (subscriptions) {\n\t            var subscriptionIndex = subscriptions.indexOf(subscription);\n\t            if (subscriptionIndex !== -1) {\n\t                subscriptions.splice(subscriptionIndex, 1);\n\t            }\n\t        }\n\t    };\n\t    Subscription.prototype._addParent = function (parent) {\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents;\n\t        if (!_parent || _parent === parent) {\n\t            // If we don't have a parent, or the new parent is the same as the\n\t            // current parent, then set this._parent to the new parent.\n\t            this._parent = parent;\n\t        }\n\t        else if (!_parents) {\n\t            // If there's already one parent, but not multiple, allocate an Array to\n\t            // store the rest of the parent Subscriptions.\n\t            this._parents = [parent];\n\t        }\n\t        else if (_parents.indexOf(parent) === -1) {\n\t            // Only add the new parent to the _parents list if it's not already there.\n\t            _parents.push(parent);\n\t        }\n\t    };\n\t    Subscription.EMPTY = (function (empty) {\n\t        empty.closed = true;\n\t        return empty;\n\t    }(new Subscription()));\n\t    return Subscription;\n\t}());\n\texports.Subscription = Subscription;\n\tfunction flattenUnsubscriptionErrors(errors) {\n\t    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n\t}\n\t//# sourceMappingURL=Subscription.js.map\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(3);\n\tvar Symbol = root_1.root.Symbol;\n\texports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n\t    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\t/**\n\t * @deprecated use rxSubscriber instead\n\t */\n\texports.$$rxSubscriber = exports.rxSubscriber;\n\t//# sourceMappingURL=rxSubscriber.js.map\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t// CommonJS / Node have global context exposed as \"global\" variable.\n\t// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n\t// the global \"global\" var for now.\n\tvar __window = typeof window !== 'undefined' && window;\n\tvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n\t    self instanceof WorkerGlobalScope && self;\n\tvar __global = typeof global !== 'undefined' && global;\n\tvar _root = __window || __global || __self;\n\texports.root = _root;\n\t// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n\t// This is needed when used with angular/tsickle which inserts a goog.module statement.\n\t// Wrap in IIFE\n\t(function () {\n\t    if (!_root) {\n\t        throw new Error('RxJS could not find any global context (window, self, global)');\n\t    }\n\t})();\n\t//# sourceMappingURL=root.js.map\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(3);\n\tvar toSubscriber_1 = __webpack_require__(17);\n\tvar observable_1 = __webpack_require__(7);\n\t/**\n\t * A representation of any set of values over any amount of time. This the most basic building block\n\t * of RxJS.\n\t *\n\t * @class Observable<T>\n\t */\n\tvar Observable = (function () {\n\t    /**\n\t     * @constructor\n\t     * @param {Function} subscribe the function that is  called when the Observable is\n\t     * initially subscribed to. This function is given a Subscriber, to which new values\n\t     * can be `next`ed, or an `error` method can be called to raise an error, or\n\t     * `complete` can be called to notify of a successful completion.\n\t     */\n\t    function Observable(subscribe) {\n\t        this._isScalar = false;\n\t        if (subscribe) {\n\t            this._subscribe = subscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Creates a new Observable, with this Observable as the source, and the passed\n\t     * operator defined as the new observable's operator.\n\t     * @method lift\n\t     * @param {Operator} operator the operator defining the operation to take on the observable\n\t     * @return {Observable} a new observable with the Operator applied\n\t     */\n\t    Observable.prototype.lift = function (operator) {\n\t        var observable = new Observable();\n\t        observable.source = this;\n\t        observable.operator = operator;\n\t        return observable;\n\t    };\n\t    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n\t        var operator = this.operator;\n\t        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n\t        if (operator) {\n\t            operator.call(sink, this.source);\n\t        }\n\t        else {\n\t            sink.add(this._trySubscribe(sink));\n\t        }\n\t        if (sink.syncErrorThrowable) {\n\t            sink.syncErrorThrowable = false;\n\t            if (sink.syncErrorThrown) {\n\t                throw sink.syncErrorValue;\n\t            }\n\t        }\n\t        return sink;\n\t    };\n\t    Observable.prototype._trySubscribe = function (sink) {\n\t        try {\n\t            return this._subscribe(sink);\n\t        }\n\t        catch (err) {\n\t            sink.syncErrorThrown = true;\n\t            sink.syncErrorValue = err;\n\t            sink.error(err);\n\t        }\n\t    };\n\t    /**\n\t     * @method forEach\n\t     * @param {Function} next a handler for each value emitted by the observable\n\t     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n\t     * @return {Promise} a promise that either resolves on observable completion or\n\t     *  rejects with the handled error\n\t     */\n\t    Observable.prototype.forEach = function (next, PromiseCtor) {\n\t        var _this = this;\n\t        if (!PromiseCtor) {\n\t            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t                PromiseCtor = root_1.root.Rx.config.Promise;\n\t            }\n\t            else if (root_1.root.Promise) {\n\t                PromiseCtor = root_1.root.Promise;\n\t            }\n\t        }\n\t        if (!PromiseCtor) {\n\t            throw new Error('no Promise impl found');\n\t        }\n\t        return new PromiseCtor(function (resolve, reject) {\n\t            // Must be declared in a separate statement to avoid a RefernceError when\n\t            // accessing subscription below in the closure due to Temporal Dead Zone.\n\t            var subscription;\n\t            subscription = _this.subscribe(function (value) {\n\t                if (subscription) {\n\t                    // if there is a subscription, then we can surmise\n\t                    // the next handling is asynchronous. Any errors thrown\n\t                    // need to be rejected explicitly and unsubscribe must be\n\t                    // called manually\n\t                    try {\n\t                        next(value);\n\t                    }\n\t                    catch (err) {\n\t                        reject(err);\n\t                        subscription.unsubscribe();\n\t                    }\n\t                }\n\t                else {\n\t                    // if there is NO subscription, then we're getting a nexted\n\t                    // value synchronously during subscription. We can just call it.\n\t                    // If it errors, Observable's `subscribe` will ensure the\n\t                    // unsubscription logic is called, then synchronously rethrow the error.\n\t                    // After that, Promise will trap the error and send it\n\t                    // down the rejection path.\n\t                    next(value);\n\t                }\n\t            }, reject, resolve);\n\t        });\n\t    };\n\t    Observable.prototype._subscribe = function (subscriber) {\n\t        return this.source.subscribe(subscriber);\n\t    };\n\t    /**\n\t     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n\t     * @method Symbol.observable\n\t     * @return {Observable} this instance of the observable\n\t     */\n\t    Observable.prototype[observable_1.observable] = function () {\n\t        return this;\n\t    };\n\t    // HACK: Since TypeScript inherits static properties too, we have to\n\t    // fight against TypeScript here so Subject can have a different static create signature\n\t    /**\n\t     * Creates a new cold Observable by calling the Observable constructor\n\t     * @static true\n\t     * @owner Observable\n\t     * @method create\n\t     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n\t     * @return {Observable} a new cold observable\n\t     */\n\t    Observable.create = function (subscribe) {\n\t        return new Observable(subscribe);\n\t    };\n\t    return Observable;\n\t}());\n\texports.Observable = Observable;\n\t//# sourceMappingURL=Observable.js.map\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\texports.empty = {\n\t    closed: true,\n\t    next: function (value) { },\n\t    error: function (err) { throw err; },\n\t    complete: function () { }\n\t};\n\t//# sourceMappingURL=Observer.js.map\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isFunction_1 = __webpack_require__(9);\n\tvar Subscription_1 = __webpack_require__(1);\n\tvar Observer_1 = __webpack_require__(5);\n\tvar rxSubscriber_1 = __webpack_require__(2);\n\t/**\n\t * Implements the {@link Observer} interface and extends the\n\t * {@link Subscription} class. While the {@link Observer} is the public API for\n\t * consuming the values of an {@link Observable}, all Observers get converted to\n\t * a Subscriber, in order to provide Subscription-like capabilities such as\n\t * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n\t * implementing operators, but it is rarely used as a public API.\n\t *\n\t * @class Subscriber<T>\n\t */\n\tvar Subscriber = (function (_super) {\n\t    __extends(Subscriber, _super);\n\t    /**\n\t     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n\t     * defined Observer or a `next` callback function.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     */\n\t    function Subscriber(destinationOrNext, error, complete) {\n\t        _super.call(this);\n\t        this.syncErrorValue = null;\n\t        this.syncErrorThrown = false;\n\t        this.syncErrorThrowable = false;\n\t        this.isStopped = false;\n\t        switch (arguments.length) {\n\t            case 0:\n\t                this.destination = Observer_1.empty;\n\t                break;\n\t            case 1:\n\t                if (!destinationOrNext) {\n\t                    this.destination = Observer_1.empty;\n\t                    break;\n\t                }\n\t                if (typeof destinationOrNext === 'object') {\n\t                    if (destinationOrNext instanceof Subscriber) {\n\t                        this.destination = destinationOrNext;\n\t                        this.destination.add(this);\n\t                    }\n\t                    else {\n\t                        this.syncErrorThrowable = true;\n\t                        this.destination = new SafeSubscriber(this, destinationOrNext);\n\t                    }\n\t                    break;\n\t                }\n\t            default:\n\t                this.syncErrorThrowable = true;\n\t                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n\t                break;\n\t        }\n\t    }\n\t    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n\t    /**\n\t     * A static factory for a Subscriber, given a (potentially partial) definition\n\t     * of an Observer.\n\t     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n\t     * Observer represented by the given arguments.\n\t     */\n\t    Subscriber.create = function (next, error, complete) {\n\t        var subscriber = new Subscriber(next, error, complete);\n\t        subscriber.syncErrorThrowable = false;\n\t        return subscriber;\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `next` from\n\t     * the Observable, with a value. The Observable may call this method 0 or more\n\t     * times.\n\t     * @param {T} [value] The `next` value.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.next = function (value) {\n\t        if (!this.isStopped) {\n\t            this._next(value);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `error` from\n\t     * the Observable, with an attached {@link Error}. Notifies the Observer that\n\t     * the Observable has experienced an error condition.\n\t     * @param {any} [err] The `error` exception.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._error(err);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive a valueless notification of type\n\t     * `complete` from the Observable. Notifies the Observer that the Observable\n\t     * has finished sending push-based notifications.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._complete();\n\t        }\n\t    };\n\t    Subscriber.prototype.unsubscribe = function () {\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.isStopped = true;\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    Subscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t    };\n\t    Subscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._unsubscribeAndRecycle = function () {\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        this.unsubscribe();\n\t        this.closed = false;\n\t        this.isStopped = false;\n\t        this._parent = _parent;\n\t        this._parents = _parents;\n\t        return this;\n\t    };\n\t    return Subscriber;\n\t}(Subscription_1.Subscription));\n\texports.Subscriber = Subscriber;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SafeSubscriber = (function (_super) {\n\t    __extends(SafeSubscriber, _super);\n\t    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n\t        _super.call(this);\n\t        this._parentSubscriber = _parentSubscriber;\n\t        var next;\n\t        var context = this;\n\t        if (isFunction_1.isFunction(observerOrNext)) {\n\t            next = observerOrNext;\n\t        }\n\t        else if (observerOrNext) {\n\t            next = observerOrNext.next;\n\t            error = observerOrNext.error;\n\t            complete = observerOrNext.complete;\n\t            if (observerOrNext !== Observer_1.empty) {\n\t                context = Object.create(observerOrNext);\n\t                if (isFunction_1.isFunction(context.unsubscribe)) {\n\t                    this.add(context.unsubscribe.bind(context));\n\t                }\n\t                context.unsubscribe = this.unsubscribe.bind(this);\n\t            }\n\t        }\n\t        this._context = context;\n\t        this._next = next;\n\t        this._error = error;\n\t        this._complete = complete;\n\t    }\n\t    SafeSubscriber.prototype.next = function (value) {\n\t        if (!this.isStopped && this._next) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (!_parentSubscriber.syncErrorThrowable) {\n\t                this.__tryOrUnsub(this._next, value);\n\t            }\n\t            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (this._error) {\n\t                if (!_parentSubscriber.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else if (!_parentSubscriber.syncErrorThrowable) {\n\t                this.unsubscribe();\n\t                throw err;\n\t            }\n\t            else {\n\t                _parentSubscriber.syncErrorValue = err;\n\t                _parentSubscriber.syncErrorThrown = true;\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.complete = function () {\n\t        var _this = this;\n\t        if (!this.isStopped) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (this._complete) {\n\t                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n\t                if (!_parentSubscriber.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(wrappedComplete);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            this.unsubscribe();\n\t            throw err;\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            parent.syncErrorValue = err;\n\t            parent.syncErrorThrown = true;\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    SafeSubscriber.prototype._unsubscribe = function () {\n\t        var _parentSubscriber = this._parentSubscriber;\n\t        this._context = null;\n\t        this._parentSubscriber = null;\n\t        _parentSubscriber.unsubscribe();\n\t    };\n\t    return SafeSubscriber;\n\t}(Subscriber));\n\t//# sourceMappingURL=Subscriber.js.map\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(3);\n\tfunction getSymbolObservable(context) {\n\t    var $$observable;\n\t    var Symbol = context.Symbol;\n\t    if (typeof Symbol === 'function') {\n\t        if (Symbol.observable) {\n\t            $$observable = Symbol.observable;\n\t        }\n\t        else {\n\t            $$observable = Symbol('observable');\n\t            Symbol.observable = $$observable;\n\t        }\n\t    }\n\t    else {\n\t        $$observable = '@@observable';\n\t    }\n\t    return $$observable;\n\t}\n\texports.getSymbolObservable = getSymbolObservable;\n\texports.observable = getSymbolObservable(root_1.root);\n\t/**\n\t * @deprecated use observable instead\n\t */\n\texports.$$observable = exports.observable;\n\t//# sourceMappingURL=observable.js.map\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t// typeof any so that it we don't have to cast when comparing a result to the error object\n\texports.errorObject = { e: {} };\n\t//# sourceMappingURL=errorObject.js.map\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction isFunction(x) {\n\t    return typeof x === 'function';\n\t}\n\texports.isFunction = isFunction;\n\t//# sourceMappingURL=isFunction.js.map\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * @license Angular v2.4.10\n\t * (c) 2010-2017 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(7), __webpack_require__(11), __webpack_require__(4)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/symbol/observable', 'rxjs/Subject', 'rxjs/Observable'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.rxjs_symbol_observable,global.Rx,global.Rx));\n\t}(this, function (exports,rxjs_symbol_observable,rxjs_Subject,rxjs_Observable) { 'use strict';\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var /** @type {?} */ globalScope;\n\t    if (typeof window === 'undefined') {\n\t        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n\t            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n\t            globalScope = (self);\n\t        }\n\t        else {\n\t            globalScope = (global);\n\t        }\n\t    }\n\t    else {\n\t        globalScope = (window);\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function scheduleMicroTask(fn) {\n\t        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n\t    }\n\t    // Need to declare a new variable for global here since TypeScript\n\t    // exports the original value of the symbol.\n\t    var /** @type {?} */ global$1 = globalScope;\n\t    /**\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    function getTypeNameForDebugging(type) {\n\t        return type['name'] || typeof type;\n\t    }\n\t    // TODO: remove calls to assert in production environment\n\t    // Note: Can't just export this and import in in other files\n\t    // as `assert` is a reserved keyword in Dart\n\t    global$1.assert = function assert(condition) {\n\t        // TODO: to be fixed properly via #2830, noop for now\n\t    };\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPresent(obj) {\n\t        return obj != null;\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isBlank(obj) {\n\t        return obj == null;\n\t    }\n\t    /**\n\t     * @param {?} token\n\t     * @return {?}\n\t     */\n\t    function stringify(token) {\n\t        if (typeof token === 'string') {\n\t            return token;\n\t        }\n\t        if (token == null) {\n\t            return '' + token;\n\t        }\n\t        if (token.overriddenName) {\n\t            return \"\" + token.overriddenName;\n\t        }\n\t        if (token.name) {\n\t            return \"\" + token.name;\n\t        }\n\t        var /** @type {?} */ res = token.toString();\n\t        var /** @type {?} */ newLineIndex = res.indexOf('\\n');\n\t        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function looseIdentical(a, b) {\n\t        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n\t    }\n\t    /**\n\t     * @param {?} o\n\t     * @return {?}\n\t     */\n\t    function isJsObject(o) {\n\t        return o !== null && (typeof o === 'function' || typeof o === 'object');\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function print(obj) {\n\t        // tslint:disable-next-line:no-console\n\t        console.log(obj);\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function warn(obj) {\n\t        console.warn(obj);\n\t    }\n\t    var /** @type {?} */ _symbolIterator = null;\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function getSymbolIterator() {\n\t        if (!_symbolIterator) {\n\t            if (((globalScope)).Symbol && Symbol.iterator) {\n\t                _symbolIterator = Symbol.iterator;\n\t            }\n\t            else {\n\t                // es6-shim specific logic\n\t                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);\n\t                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n\t                    var /** @type {?} */ key = keys[i];\n\t                    if (key !== 'entries' && key !== 'size' &&\n\t                        ((Map)).prototype[key] === Map.prototype['entries']) {\n\t                        _symbolIterator = key;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return _symbolIterator;\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPrimitive(obj) {\n\t        return !isJsObject(obj);\n\t    }\n\t\n\t    var /** @type {?} */ _nextClassId = 0;\n\t    var /** @type {?} */ Reflect = global$1.Reflect;\n\t    /**\n\t     * @param {?} annotation\n\t     * @return {?}\n\t     */\n\t    function extractAnnotation(annotation) {\n\t        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {\n\t            // it is a decorator, extract annotation\n\t            annotation = annotation.annotation;\n\t        }\n\t        return annotation;\n\t    }\n\t    /**\n\t     * @param {?} fnOrArray\n\t     * @param {?} key\n\t     * @return {?}\n\t     */\n\t    function applyParams(fnOrArray, key) {\n\t        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||\n\t            fnOrArray === Number || fnOrArray === Array) {\n\t            throw new Error(\"Can not use native \" + stringify(fnOrArray) + \" as constructor\");\n\t        }\n\t        if (typeof fnOrArray === 'function') {\n\t            return fnOrArray;\n\t        }\n\t        if (Array.isArray(fnOrArray)) {\n\t            var /** @type {?} */ annotations = fnOrArray;\n\t            var /** @type {?} */ annoLength = annotations.length - 1;\n\t            var /** @type {?} */ fn = fnOrArray[annoLength];\n\t            if (typeof fn !== 'function') {\n\t                throw new Error(\"Last position of Class method array must be Function in key \" + key + \" was '\" + stringify(fn) + \"'\");\n\t            }\n\t            if (annoLength != fn.length) {\n\t                throw new Error(\"Number of annotations (\" + annoLength + \") does not match number of arguments (\" + fn.length + \") in the function: \" + stringify(fn));\n\t            }\n\t            var /** @type {?} */ paramsAnnotations = [];\n\t            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {\n\t                var /** @type {?} */ paramAnnotations = [];\n\t                paramsAnnotations.push(paramAnnotations);\n\t                var /** @type {?} */ annotation = annotations[i];\n\t                if (Array.isArray(annotation)) {\n\t                    for (var /** @type {?} */ j = 0; j < annotation.length; j++) {\n\t                        paramAnnotations.push(extractAnnotation(annotation[j]));\n\t                    }\n\t                }\n\t                else if (typeof annotation === 'function') {\n\t                    paramAnnotations.push(extractAnnotation(annotation));\n\t                }\n\t                else {\n\t                    paramAnnotations.push(annotation);\n\t                }\n\t            }\n\t            Reflect.defineMetadata('parameters', paramsAnnotations, fn);\n\t            return fn;\n\t        }\n\t        throw new Error(\"Only Function or Array is supported in Class definition for key '\" + key + \"' is '\" + stringify(fnOrArray) + \"'\");\n\t    }\n\t    /**\n\t     * Provides a way for expressing ES6 classes with parameter annotations in ES5.\n\t     *\n\t     * ## Basic Example\n\t     *\n\t     * ```\n\t     * var Greeter = ng.Class({\n\t     *   constructor: function(name) {\n\t     *     this.name = name;\n\t     *   },\n\t     *\n\t     *   greet: function() {\n\t     *     alert('Hello ' + this.name + '!');\n\t     *   }\n\t     * });\n\t     * ```\n\t     *\n\t     * is equivalent to ES6:\n\t     *\n\t     * ```\n\t     * class Greeter {\n\t     *   constructor(name) {\n\t     *     this.name = name;\n\t     *   }\n\t     *\n\t     *   greet() {\n\t     *     alert('Hello ' + this.name + '!');\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * or equivalent to ES5:\n\t     *\n\t     * ```\n\t     * var Greeter = function (name) {\n\t     *   this.name = name;\n\t     * }\n\t     *\n\t     * Greeter.prototype.greet = function () {\n\t     *   alert('Hello ' + this.name + '!');\n\t     * }\n\t     * ```\n\t     *\n\t     * ### Example with parameter annotations\n\t     *\n\t     * ```\n\t     * var MyService = ng.Class({\n\t     *   constructor: [String, [new Optional(), Service], function(name, myService) {\n\t     *     ...\n\t     *   }]\n\t     * });\n\t     * ```\n\t     *\n\t     * is equivalent to ES6:\n\t     *\n\t     * ```\n\t     * class MyService {\n\t     *   constructor(name: string, \\@Optional() myService: Service) {\n\t     *     ...\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * ### Example with inheritance\n\t     *\n\t     * ```\n\t     * var Shape = ng.Class({\n\t     *   constructor: (color) {\n\t     *     this.color = color;\n\t     *   }\n\t     * });\n\t     *\n\t     * var Square = ng.Class({\n\t     *   extends: Shape,\n\t     *   constructor: function(color, size) {\n\t     *     Shape.call(this, color);\n\t     *     this.size = size;\n\t     *   }\n\t     * });\n\t     * ```\n\t     * \\@stable\n\t     * @param {?} clsDef\n\t     * @return {?}\n\t     */\n\t    function Class(clsDef) {\n\t        var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');\n\t        var /** @type {?} */ proto = constructor.prototype;\n\t        if (clsDef.hasOwnProperty('extends')) {\n\t            if (typeof clsDef.extends === 'function') {\n\t                ((constructor)).prototype = proto =\n\t                    Object.create(((clsDef.extends)).prototype);\n\t            }\n\t            else {\n\t                throw new Error(\"Class definition 'extends' property must be a constructor function was: \" + stringify(clsDef.extends));\n\t            }\n\t        }\n\t        for (var key in clsDef) {\n\t            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {\n\t                proto[key] = applyParams(clsDef[key], key);\n\t            }\n\t        }\n\t        if (this && this.annotations instanceof Array) {\n\t            Reflect.defineMetadata('annotations', this.annotations, constructor);\n\t        }\n\t        var /** @type {?} */ constructorName = constructor['name'];\n\t        if (!constructorName || constructorName === 'constructor') {\n\t            ((constructor))['overriddenName'] = \"class\" + _nextClassId++;\n\t        }\n\t        return (constructor);\n\t    }\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} props\n\t     * @param {?=} parentClass\n\t     * @param {?=} chainFn\n\t     * @return {?}\n\t     */\n\t    function makeDecorator(name, props, parentClass, chainFn) {\n\t        if (chainFn === void 0) { chainFn = null; }\n\t        var /** @type {?} */ metaCtor = makeMetadataCtor([props]);\n\t        /**\n\t         * @param {?} objOrType\n\t         * @return {?}\n\t         */\n\t        function DecoratorFactory(objOrType) {\n\t            if (!(Reflect && Reflect.getOwnMetadata)) {\n\t                throw 'reflect-metadata shim is required when using class decorators';\n\t            }\n\t            if (this instanceof DecoratorFactory) {\n\t                metaCtor.call(this, objOrType);\n\t                return this;\n\t            }\n\t            var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);\n\t            var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];\n\t            chainAnnotation.push(annotationInstance);\n\t            var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {\n\t                var /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];\n\t                annotations.push(annotationInstance);\n\t                Reflect.defineMetadata('annotations', annotations, cls);\n\t                return cls;\n\t            });\n\t            TypeDecorator.annotations = chainAnnotation;\n\t            TypeDecorator.Class = Class;\n\t            if (chainFn)\n\t                chainFn(TypeDecorator);\n\t            return TypeDecorator;\n\t        }\n\t        if (parentClass) {\n\t            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n\t        }\n\t        DecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n\t        ((DecoratorFactory)).annotationCls = DecoratorFactory;\n\t        return DecoratorFactory;\n\t    }\n\t    /**\n\t     * @param {?} props\n\t     * @return {?}\n\t     */\n\t    function makeMetadataCtor(props) {\n\t        return function ctor() {\n\t            var _this = this;\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            props.forEach(function (prop, i) {\n\t                var /** @type {?} */ argVal = args[i];\n\t                if (Array.isArray(prop)) {\n\t                    // plain parameter\n\t                    _this[prop[0]] = argVal === undefined ? prop[1] : argVal;\n\t                }\n\t                else {\n\t                    for (var propName in prop) {\n\t                        _this[propName] =\n\t                            argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];\n\t                    }\n\t                }\n\t            });\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} props\n\t     * @param {?=} parentClass\n\t     * @return {?}\n\t     */\n\t    function makeParamDecorator(name, props, parentClass) {\n\t        var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n\t        /**\n\t         * @param {...?} args\n\t         * @return {?}\n\t         */\n\t        function ParamDecoratorFactory() {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            if (this instanceof ParamDecoratorFactory) {\n\t                metaCtor.apply(this, args);\n\t                return this;\n\t            }\n\t            var /** @type {?} */ annotationInstance = new ((_a = ((ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n\t            ((ParamDecorator)).annotation = annotationInstance;\n\t            return ParamDecorator;\n\t            /**\n\t             * @param {?} cls\n\t             * @param {?} unusedKey\n\t             * @param {?} index\n\t             * @return {?}\n\t             */\n\t            function ParamDecorator(cls, unusedKey, index) {\n\t                var /** @type {?} */ parameters = Reflect.getOwnMetadata('parameters', cls) || [];\n\t                // there might be gaps if some in between parameters do not have annotations.\n\t                // we pad with nulls.\n\t                while (parameters.length <= index) {\n\t                    parameters.push(null);\n\t                }\n\t                parameters[index] = parameters[index] || [];\n\t                parameters[index].push(annotationInstance);\n\t                Reflect.defineMetadata('parameters', parameters, cls);\n\t                return cls;\n\t            }\n\t            var _a;\n\t        }\n\t        if (parentClass) {\n\t            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n\t        }\n\t        ParamDecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n\t        ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n\t        return ParamDecoratorFactory;\n\t    }\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} props\n\t     * @param {?=} parentClass\n\t     * @return {?}\n\t     */\n\t    function makePropDecorator(name, props, parentClass) {\n\t        var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n\t        /**\n\t         * @param {...?} args\n\t         * @return {?}\n\t         */\n\t        function PropDecoratorFactory() {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            if (this instanceof PropDecoratorFactory) {\n\t                metaCtor.apply(this, args);\n\t                return this;\n\t            }\n\t            var /** @type {?} */ decoratorInstance = new ((_a = ((PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n\t            return function PropDecorator(target, name) {\n\t                var /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};\n\t                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n\t                meta[name].unshift(decoratorInstance);\n\t                Reflect.defineMetadata('propMetadata', meta, target.constructor);\n\t            };\n\t            var _a;\n\t        }\n\t        if (parentClass) {\n\t            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n\t        }\n\t        PropDecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n\t        ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n\t        return PropDecoratorFactory;\n\t    }\n\t\n\t    /**\n\t     * Inject decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Inject = makeParamDecorator('Inject', [['token', undefined]]);\n\t    /**\n\t     * Optional decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Optional = makeParamDecorator('Optional', []);\n\t    /**\n\t     * Injectable decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Injectable = (makeDecorator('Injectable', []));\n\t    /**\n\t     * Self decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Self = makeParamDecorator('Self', []);\n\t    /**\n\t     * SkipSelf decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ SkipSelf = makeParamDecorator('SkipSelf', []);\n\t    /**\n\t     * Host decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Host = makeParamDecorator('Host', []);\n\t\n\t    var OpaqueToken = (function () {\n\t        /**\n\t         * @param {?} _desc\n\t         */\n\t        function OpaqueToken(_desc) {\n\t            this._desc = _desc;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        OpaqueToken.prototype.toString = function () { return \"Token \" + this._desc; };\n\t        OpaqueToken.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        OpaqueToken.ctorParameters = function () { return [\n\t            null,\n\t        ]; };\n\t        return OpaqueToken;\n\t    }());\n\t\n\t    /**\n\t     * This token can be used to create a virtual provider that will populate the\n\t     * `entryComponents` fields of components and ng modules based on its `useValue`.\n\t     * All components that are referenced in the `useValue` value (either directly\n\t     * or in a nested array or map) will be added to the `entryComponents` property.\n\t     *\n\t     * ### Example\n\t     * The following example shows how the router can populate the `entryComponents`\n\t     * field of an NgModule based on the router configuration which refers\n\t     * to components.\n\t     *\n\t     * ```typescript\n\t     * // helper function inside the router\n\t     * function provideRoutes(routes) {\n\t     *   return [\n\t     *     {provide: ROUTES, useValue: routes},\n\t     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n\t     *   ];\n\t     * }\n\t     *\n\t     * // user code\n\t     * let routes = [\n\t     *   {path: '/root', component: RootComp},\n\t     *   {path: '/teams', component: TeamsComp}\n\t     * ];\n\t     *\n\t     * @NgModule({\n\t     *   providers: [provideRoutes(routes)]\n\t     * })\n\t     * class ModuleWithRoutes {}\n\t     * ```\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');\n\t    /**\n\t     * Attribute decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);\n\t    /**\n\t     * Base class for query metadata.\n\t     *\n\t     * See {\\@link ContentChildren}, {\\@link ContentChild}, {\\@link ViewChildren}, {\\@link ViewChild} for\n\t     * more information.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var Query = (function () {\n\t        function Query() {\n\t        }\n\t        return Query;\n\t    }());\n\t    /**\n\t     * ContentChildren decorator and metadata.\n\t     *\n\t     *  @stable\n\t     *  @Annotation\n\t     */\n\t    var /** @type {?} */ ContentChildren = (makePropDecorator('ContentChildren', [\n\t        ['selector', undefined], {\n\t            first: false,\n\t            isViewQuery: false,\n\t            descendants: false,\n\t            read: undefined,\n\t        }\n\t    ], Query));\n\t    /**\n\t     * ContentChild decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ ContentChild = makePropDecorator('ContentChild', [\n\t        ['selector', undefined], {\n\t            first: true,\n\t            isViewQuery: false,\n\t            descendants: true,\n\t            read: undefined,\n\t        }\n\t    ], Query);\n\t    /**\n\t     * ViewChildren decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ ViewChildren = makePropDecorator('ViewChildren', [\n\t        ['selector', undefined], {\n\t            first: false,\n\t            isViewQuery: true,\n\t            descendants: true,\n\t            read: undefined,\n\t        }\n\t    ], Query);\n\t    /**\n\t     * ViewChild decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ ViewChild = makePropDecorator('ViewChild', [\n\t        ['selector', undefined], {\n\t            first: true,\n\t            isViewQuery: true,\n\t            descendants: true,\n\t            read: undefined,\n\t        }\n\t    ], Query);\n\t\n\t    var ChangeDetectionStrategy = {};\n\t    ChangeDetectionStrategy.OnPush = 0;\n\t    ChangeDetectionStrategy.Default = 1;\n\t    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\n\t    ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\n\t    var ChangeDetectorStatus = {};\n\t    ChangeDetectorStatus.CheckOnce = 0;\n\t    ChangeDetectorStatus.Checked = 1;\n\t    ChangeDetectorStatus.CheckAlways = 2;\n\t    ChangeDetectorStatus.Detached = 3;\n\t    ChangeDetectorStatus.Errored = 4;\n\t    ChangeDetectorStatus.Destroyed = 5;\n\t    ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\n\t    ChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\n\t    ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\n\t    ChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\n\t    ChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\n\t    ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\n\t    /**\n\t     * @param {?} changeDetectionStrategy\n\t     * @return {?}\n\t     */\n\t    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n\t        return isBlank(changeDetectionStrategy) ||\n\t            changeDetectionStrategy === ChangeDetectionStrategy.Default;\n\t    }\n\t\n\t    /**\n\t     * Directive decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Directive = (makeDecorator('Directive', {\n\t        selector: undefined,\n\t        inputs: undefined,\n\t        outputs: undefined,\n\t        host: undefined,\n\t        providers: undefined,\n\t        exportAs: undefined,\n\t        queries: undefined\n\t    }));\n\t    /**\n\t     * Component decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Component = (makeDecorator('Component', {\n\t        selector: undefined,\n\t        inputs: undefined,\n\t        outputs: undefined,\n\t        host: undefined,\n\t        exportAs: undefined,\n\t        moduleId: undefined,\n\t        providers: undefined,\n\t        viewProviders: undefined,\n\t        changeDetection: ChangeDetectionStrategy.Default,\n\t        queries: undefined,\n\t        templateUrl: undefined,\n\t        template: undefined,\n\t        styleUrls: undefined,\n\t        styles: undefined,\n\t        animations: undefined,\n\t        encapsulation: undefined,\n\t        interpolation: undefined,\n\t        entryComponents: undefined\n\t    }, Directive));\n\t    /**\n\t     * Pipe decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Pipe = (makeDecorator('Pipe', {\n\t        name: undefined,\n\t        pure: true,\n\t    }));\n\t    /**\n\t     * Input decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);\n\t    /**\n\t     * Output decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);\n\t    /**\n\t     * HostBinding decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);\n\t    /**\n\t     * HostListener decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var LifecycleHooks = {};\n\t    LifecycleHooks.OnInit = 0;\n\t    LifecycleHooks.OnDestroy = 1;\n\t    LifecycleHooks.DoCheck = 2;\n\t    LifecycleHooks.OnChanges = 3;\n\t    LifecycleHooks.AfterContentInit = 4;\n\t    LifecycleHooks.AfterContentChecked = 5;\n\t    LifecycleHooks.AfterViewInit = 6;\n\t    LifecycleHooks.AfterViewChecked = 7;\n\t    LifecycleHooks[LifecycleHooks.OnInit] = \"OnInit\";\n\t    LifecycleHooks[LifecycleHooks.OnDestroy] = \"OnDestroy\";\n\t    LifecycleHooks[LifecycleHooks.DoCheck] = \"DoCheck\";\n\t    LifecycleHooks[LifecycleHooks.OnChanges] = \"OnChanges\";\n\t    LifecycleHooks[LifecycleHooks.AfterContentInit] = \"AfterContentInit\";\n\t    LifecycleHooks[LifecycleHooks.AfterContentChecked] = \"AfterContentChecked\";\n\t    LifecycleHooks[LifecycleHooks.AfterViewInit] = \"AfterViewInit\";\n\t    LifecycleHooks[LifecycleHooks.AfterViewChecked] = \"AfterViewChecked\";\n\t    var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = [\n\t        LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,\n\t        LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,\n\t        LifecycleHooks.AfterViewChecked\n\t    ];\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called when any data-bound property of a directive changes.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n\t     *\n\t     * \\@description\n\t     * `ngOnChanges` is called right after the data-bound properties have been checked and before view\n\t     * and content children are checked if at least one of them has changed.\n\t     * The `changes` parameter contains the changed properties.\n\t     *\n\t     * See {\\@linkDocs guide/lifecycle-hooks#onchanges \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var OnChanges = (function () {\n\t        function OnChanges() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        OnChanges.prototype.ngOnChanges = function (changes) { };\n\t        return OnChanges;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called after data-bound properties of a directive are\n\t     * initialized.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n\t     *\n\t     * \\@description\n\t     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\n\t     * first time, and before any of its children have been checked. It is invoked only once when the\n\t     * directive is instantiated.\n\t     *\n\t     * See {\\@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var OnInit = (function () {\n\t        function OnInit() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        OnInit.prototype.ngOnInit = function () { };\n\t        return OnInit;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called when Angular dirty checks a directive.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n\t     *\n\t     * \\@description\n\t     * `ngDoCheck` gets called to check the changes in the directives in addition to the default\n\t     * algorithm. The default change detection algorithm looks for differences by comparing\n\t     * bound-property values by reference across change detection runs.\n\t     *\n\t     * Note that a directive typically should not use both `DoCheck` and {\\@link OnChanges} to respond to\n\t     * changes on the same input, as `ngOnChanges` will continue to be called when the default change\n\t     * detector detects changes.\n\t     *\n\t     * See {\\@link KeyValueDiffers} and {\\@link IterableDiffers} for implementing custom dirty checking\n\t     * for collections.\n\t     *\n\t     * See {\\@linkDocs guide/lifecycle-hooks#docheck \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var DoCheck = (function () {\n\t        function DoCheck() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        DoCheck.prototype.ngDoCheck = function () { };\n\t        return DoCheck;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called when a directive, pipe or service is destroyed.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n\t     *\n\t     * \\@description\n\t     * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the\n\t     * instance is destroyed.\n\t     *\n\t     * See {\\@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var OnDestroy = (function () {\n\t        function OnDestroy() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        OnDestroy.prototype.ngOnDestroy = function () { };\n\t        return OnDestroy;\n\t    }());\n\t    /**\n\t     *\n\t     * \\@whatItDoes Lifecycle hook that is called after a directive's content has been fully\n\t     * initialized.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n\t     *\n\t     * \\@description\n\t     * See {\\@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var AfterContentInit = (function () {\n\t        function AfterContentInit() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AfterContentInit.prototype.ngAfterContentInit = function () { };\n\t        return AfterContentInit;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called after every check of a directive's content.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n\t     *\n\t     * \\@description\n\t     * See {\\@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var AfterContentChecked = (function () {\n\t        function AfterContentChecked() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AfterContentChecked.prototype.ngAfterContentChecked = function () { };\n\t        return AfterContentChecked;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called after a component's view has been fully\n\t     * initialized.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n\t     *\n\t     * \\@description\n\t     * See {\\@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var AfterViewInit = (function () {\n\t        function AfterViewInit() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AfterViewInit.prototype.ngAfterViewInit = function () { };\n\t        return AfterViewInit;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called after every check of a component's view.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n\t     *\n\t     * \\@description\n\t     * See {\\@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var AfterViewChecked = (function () {\n\t        function AfterViewChecked() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AfterViewChecked.prototype.ngAfterViewChecked = function () { };\n\t        return AfterViewChecked;\n\t    }());\n\t\n\t    /**\n\t     * Defines a schema that will allow:\n\t     * - any non-Angular elements with a `-` in their name,\n\t     * - any properties on elements with a `-` in their name which is the common rule for custom\n\t     * elements.\n\t     *\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ CUSTOM_ELEMENTS_SCHEMA = {\n\t        name: 'custom-elements'\n\t    };\n\t    /**\n\t     * Defines a schema that will allow any property on any element.\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ NO_ERRORS_SCHEMA = {\n\t        name: 'no-errors-schema'\n\t    };\n\t    /**\n\t     * NgModule decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ NgModule = (makeDecorator('NgModule', {\n\t        providers: undefined,\n\t        declarations: undefined,\n\t        imports: undefined,\n\t        exports: undefined,\n\t        entryComponents: undefined,\n\t        bootstrap: undefined,\n\t        schemas: undefined,\n\t        id: undefined,\n\t    }));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var ViewEncapsulation = {};\n\t    ViewEncapsulation.Emulated = 0;\n\t    ViewEncapsulation.Native = 1;\n\t    ViewEncapsulation.None = 2;\n\t    ViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\n\t    ViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\n\t    ViewEncapsulation[ViewEncapsulation.None] = \"None\";\n\t    /**\n\t     * Metadata properties available for configuring Views.\n\t     *\n\t     * For details on the `\\@Component` annotation, see {\\@link Component}.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * \\@Component({\n\t     *   selector: 'greet',\n\t     *   template: 'Hello {{name}}!',\n\t     * })\n\t     * class Greet {\n\t     *   name: string;\n\t     *\n\t     *   constructor() {\n\t     *     this.name = 'World';\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * @deprecated Use Component instead.\n\t     *\n\t     * {\\@link Component}\n\t     */\n\t    var ViewMetadata = (function () {\n\t        /**\n\t         * @param {?=} __0\n\t         */\n\t        function ViewMetadata(_a) {\n\t            var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;\n\t            this.templateUrl = templateUrl;\n\t            this.template = template;\n\t            this.styleUrls = styleUrls;\n\t            this.styles = styles;\n\t            this.encapsulation = encapsulation;\n\t            this.animations = animations;\n\t            this.interpolation = interpolation;\n\t        }\n\t        return ViewMetadata;\n\t    }());\n\t\n\t    /**\n\t     * \\@whatItDoes Represents the version of Angular\n\t     *\n\t     * \\@stable\n\t     */\n\t    var Version = (function () {\n\t        /**\n\t         * @param {?} full\n\t         */\n\t        function Version(full) {\n\t            this.full = full;\n\t        }\n\t        Object.defineProperty(Version.prototype, \"major\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.full.split('.')[0]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(Version.prototype, \"minor\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.full.split('.')[1]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(Version.prototype, \"patch\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.full.split('.').slice(2).join('.'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return Version;\n\t    }());\n\t    /**\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ VERSION = new Version('2.4.10');\n\t\n\t    /**\n\t     * Allows to refer to references which are not yet defined.\n\t     *\n\t     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n\t     * DI is declared,\n\t     * but not yet defined. It is also used when the `token` which we use when creating a query is not\n\t     * yet defined.\n\t     *\n\t     * ### Example\n\t     * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n\t     * \\@experimental\n\t     * @param {?} forwardRefFn\n\t     * @return {?}\n\t     */\n\t    function forwardRef(forwardRefFn) {\n\t        ((forwardRefFn)).__forward_ref__ = forwardRef;\n\t        ((forwardRefFn)).toString = function () { return stringify(this()); };\n\t        return (((forwardRefFn)));\n\t    }\n\t    /**\n\t     * Lazily retrieves the reference value from a forwardRef.\n\t     *\n\t     * Acts as the identity function when given a non-forward-ref value.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n\t     *\n\t     * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n\t     *\n\t     * See: {\\@link forwardRef}\n\t     * \\@experimental\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    function resolveForwardRef(type) {\n\t        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n\t            type.__forward_ref__ === forwardRef) {\n\t            return ((type))();\n\t        }\n\t        else {\n\t            return type;\n\t        }\n\t    }\n\t\n\t    var /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();\n\t    var /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\t    var _NullInjector = (function () {\n\t        function _NullInjector() {\n\t        }\n\t        /**\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        _NullInjector.prototype.get = function (token, notFoundValue) {\n\t            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n\t            if (notFoundValue === _THROW_IF_NOT_FOUND) {\n\t                throw new Error(\"No provider for \" + stringify(token) + \"!\");\n\t            }\n\t            return notFoundValue;\n\t        };\n\t        return _NullInjector;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Injector interface\n\t     * \\@howToUse\n\t     * ```\n\t     * const injector: Injector = ...;\n\t     * injector.get(...);\n\t     * ```\n\t     *\n\t     * \\@description\n\t     * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n\t     *\n\t     * `Injector` returns itself when given `Injector` as a token:\n\t     * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var Injector = (function () {\n\t        function Injector() {\n\t        }\n\t        /**\n\t         * Retrieves an instance from the injector based on the provided token.\n\t         * If not found:\n\t         * - Throws {\\@link NoProviderError} if no `notFoundValue` that is not equal to\n\t         * Injector.THROW_IF_NOT_FOUND is given\n\t         * - Returns the `notFoundValue` otherwise\n\t         * @abstract\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        Injector.prototype.get = function (token, notFoundValue) { };\n\t        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\t        Injector.NULL = new _NullInjector();\n\t        return Injector;\n\t    }());\n\t\n\t    var __extends$1 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var BaseError = (function (_super) {\n\t        __extends$1(BaseError, _super);\n\t        /**\n\t         * @param {?} message\n\t         */\n\t        function BaseError(message) {\n\t            _super.call(this, message);\n\t            // Errors don't use current this, instead they create a new instance.\n\t            // We have to do forward all of our api to the nativeInstance.\n\t            // TODO(bradfordcsmith): Remove this hack when\n\t            //     google/closure-compiler/issues/2102 is fixed.\n\t            var nativeError = new Error(message);\n\t            this._nativeError = nativeError;\n\t        }\n\t        Object.defineProperty(BaseError.prototype, \"message\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._nativeError.message; },\n\t            /**\n\t             * @param {?} message\n\t             * @return {?}\n\t             */\n\t            set: function (message) { this._nativeError.message = message; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(BaseError.prototype, \"name\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._nativeError.name; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(BaseError.prototype, \"stack\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return ((this._nativeError)).stack; },\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) { ((this._nativeError)).stack = value; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        BaseError.prototype.toString = function () { return this._nativeError.toString(); };\n\t        return BaseError;\n\t    }(Error));\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var WrappedError = (function (_super) {\n\t        __extends$1(WrappedError, _super);\n\t        /**\n\t         * @param {?} message\n\t         * @param {?} error\n\t         */\n\t        function WrappedError(message, error) {\n\t            _super.call(this, message + \" caused by: \" + (error instanceof Error ? error.message : error));\n\t            this.originalError = error;\n\t        }\n\t        Object.defineProperty(WrappedError.prototype, \"stack\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))\n\t                    .stack;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return WrappedError;\n\t    }(BaseError));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * @param {?} keys\n\t     * @return {?}\n\t     */\n\t    function findFirstClosedCycle(keys) {\n\t        var /** @type {?} */ res = [];\n\t        for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n\t            if (res.indexOf(keys[i]) > -1) {\n\t                res.push(keys[i]);\n\t                return res;\n\t            }\n\t            res.push(keys[i]);\n\t        }\n\t        return res;\n\t    }\n\t    /**\n\t     * @param {?} keys\n\t     * @return {?}\n\t     */\n\t    function constructResolvingPath(keys) {\n\t        if (keys.length > 1) {\n\t            var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n\t            var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n\t            return ' (' + tokenStrs.join(' -> ') + ')';\n\t        }\n\t        return '';\n\t    }\n\t    /**\n\t     * Base class for all errors arising from misconfigured providers.\n\t     * \\@stable\n\t     */\n\t    var AbstractProviderError = (function (_super) {\n\t        __extends(AbstractProviderError, _super);\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} key\n\t         * @param {?} constructResolvingMessage\n\t         */\n\t        function AbstractProviderError(injector, key, constructResolvingMessage) {\n\t            _super.call(this, 'DI Error');\n\t            this.keys = [key];\n\t            this.injectors = [injector];\n\t            this.constructResolvingMessage = constructResolvingMessage;\n\t            this.message = this.constructResolvingMessage(this.keys);\n\t        }\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} key\n\t         * @return {?}\n\t         */\n\t        AbstractProviderError.prototype.addKey = function (injector, key) {\n\t            this.injectors.push(injector);\n\t            this.keys.push(key);\n\t            this.message = this.constructResolvingMessage(this.keys);\n\t        };\n\t        return AbstractProviderError;\n\t    }(BaseError));\n\t    /**\n\t     * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n\t     * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n\t     *\n\t     * ```typescript\n\t     * class A {\n\t     *   constructor(b:B) {}\n\t     * }\n\t     *\n\t     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var NoProviderError = (function (_super) {\n\t        __extends(NoProviderError, _super);\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} key\n\t         */\n\t        function NoProviderError(injector, key) {\n\t            _super.call(this, injector, key, function (keys) {\n\t                var first = stringify(keys[0].token);\n\t                return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n\t            });\n\t        }\n\t        return NoProviderError;\n\t    }(AbstractProviderError));\n\t    /**\n\t     * Thrown when dependencies form a cycle.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n\t     *\n\t     * ```typescript\n\t     * var injector = Injector.resolveAndCreate([\n\t     *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n\t     *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n\t     * ]);\n\t     *\n\t     * expect(() => injector.get(\"one\")).toThrowError();\n\t     * ```\n\t     *\n\t     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n\t     * \\@stable\n\t     */\n\t    var CyclicDependencyError = (function (_super) {\n\t        __extends(CyclicDependencyError, _super);\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} key\n\t         */\n\t        function CyclicDependencyError(injector, key) {\n\t            _super.call(this, injector, key, function (keys) {\n\t                return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n\t            });\n\t        }\n\t        return CyclicDependencyError;\n\t    }(AbstractProviderError));\n\t    /**\n\t     * Thrown when a constructing type returns with an Error.\n\t     *\n\t     * The `InstantiationError` class contains the original error plus the dependency graph which caused\n\t     * this object to be instantiated.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n\t     *\n\t     * ```typescript\n\t     * class A {\n\t     *   constructor() {\n\t     *     throw new Error('message');\n\t     *   }\n\t     * }\n\t     *\n\t     * var injector = Injector.resolveAndCreate([A]);\n\t     * try {\n\t     *   injector.get(A);\n\t     * } catch (e) {\n\t     *   expect(e instanceof InstantiationError).toBe(true);\n\t     *   expect(e.originalException.message).toEqual(\"message\");\n\t     *   expect(e.originalStack).toBeDefined();\n\t     * }\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var InstantiationError = (function (_super) {\n\t        __extends(InstantiationError, _super);\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} originalException\n\t         * @param {?} originalStack\n\t         * @param {?} key\n\t         */\n\t        function InstantiationError(injector, originalException, originalStack, key) {\n\t            _super.call(this, 'DI Error', originalException);\n\t            this.keys = [key];\n\t            this.injectors = [injector];\n\t        }\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} key\n\t         * @return {?}\n\t         */\n\t        InstantiationError.prototype.addKey = function (injector, key) {\n\t            this.injectors.push(injector);\n\t            this.keys.push(key);\n\t        };\n\t        Object.defineProperty(InstantiationError.prototype, \"message\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ first = stringify(this.keys[0].token);\n\t                return this.originalError.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(this.keys) + \".\";\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(InstantiationError.prototype, \"causeKey\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.keys[0]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return InstantiationError;\n\t    }(WrappedError));\n\t    /**\n\t     * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n\t     * creation.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n\t     *\n\t     * ```typescript\n\t     * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var InvalidProviderError = (function (_super) {\n\t        __extends(InvalidProviderError, _super);\n\t        /**\n\t         * @param {?} provider\n\t         */\n\t        function InvalidProviderError(provider) {\n\t            _super.call(this, \"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n\t        }\n\t        return InvalidProviderError;\n\t    }(BaseError));\n\t    /**\n\t     * Thrown when the class has no annotation information.\n\t     *\n\t     * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n\t     * need to be injected into the constructor.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n\t     *\n\t     * ```typescript\n\t     * class A {\n\t     *   constructor(b) {}\n\t     * }\n\t     *\n\t     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n\t     * ```\n\t     *\n\t     * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n\t     *\n\t     * ```typescript\n\t     * class B {}\n\t     *\n\t     * class A {\n\t     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n\t     * }\n\t     *\n\t     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var NoAnnotationError = (function (_super) {\n\t        __extends(NoAnnotationError, _super);\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @param {?} params\n\t         */\n\t        function NoAnnotationError(typeOrFunc, params) {\n\t            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));\n\t        }\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @param {?} params\n\t         * @return {?}\n\t         */\n\t        NoAnnotationError._genMessage = function (typeOrFunc, params) {\n\t            var /** @type {?} */ signature = [];\n\t            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n\t                var /** @type {?} */ parameter = params[i];\n\t                if (!parameter || parameter.length == 0) {\n\t                    signature.push('?');\n\t                }\n\t                else {\n\t                    signature.push(parameter.map(stringify).join(' '));\n\t                }\n\t            }\n\t            return 'Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n\t                signature.join(', ') + '). ' +\n\t                'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n\t                stringify(typeOrFunc) + '\\' is decorated with Injectable.';\n\t        };\n\t        return NoAnnotationError;\n\t    }(BaseError));\n\t    /**\n\t     * Thrown when getting an object by index.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n\t     *\n\t     * ```typescript\n\t     * class A {}\n\t     *\n\t     * var injector = Injector.resolveAndCreate([A]);\n\t     *\n\t     * expect(() => injector.getAt(100)).toThrowError();\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var OutOfBoundsError = (function (_super) {\n\t        __extends(OutOfBoundsError, _super);\n\t        /**\n\t         * @param {?} index\n\t         */\n\t        function OutOfBoundsError(index) {\n\t            _super.call(this, \"Index \" + index + \" is out-of-bounds.\");\n\t        }\n\t        return OutOfBoundsError;\n\t    }(BaseError));\n\t    /**\n\t     * Thrown when a multi provider and a regular provider are bound to the same token.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * expect(() => Injector.resolveAndCreate([\n\t     *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n\t     *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n\t     * ])).toThrowError();\n\t     * ```\n\t     */\n\t    var MixingMultiProvidersWithRegularProvidersError = (function (_super) {\n\t        __extends(MixingMultiProvidersWithRegularProvidersError, _super);\n\t        /**\n\t         * @param {?} provider1\n\t         * @param {?} provider2\n\t         */\n\t        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n\t            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +\n\t                provider2.toString());\n\t        }\n\t        return MixingMultiProvidersWithRegularProvidersError;\n\t    }(BaseError));\n\t\n\t    /**\n\t     * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n\t     *\n\t     * Keys have:\n\t     * - a system-wide unique `id`.\n\t     * - a `token`.\n\t     *\n\t     * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n\t     * the\n\t     * injector to store created objects in a more efficient way.\n\t     *\n\t     * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n\t     * resolving\n\t     * providers.\n\t     * \\@experimental\n\t     */\n\t    var ReflectiveKey = (function () {\n\t        /**\n\t         * Private\n\t         * @param {?} token\n\t         * @param {?} id\n\t         */\n\t        function ReflectiveKey(token, id) {\n\t            this.token = token;\n\t            this.id = id;\n\t            if (!token) {\n\t                throw new Error('Token must be defined!');\n\t            }\n\t        }\n\t        Object.defineProperty(ReflectiveKey.prototype, \"displayName\", {\n\t            /**\n\t             * Returns a stringified token.\n\t             * @return {?}\n\t             */\n\t            get: function () { return stringify(this.token); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * Retrieves a `Key` for a token.\n\t         * @param {?} token\n\t         * @return {?}\n\t         */\n\t        ReflectiveKey.get = function (token) {\n\t            return _globalKeyRegistry.get(resolveForwardRef(token));\n\t        };\n\t        Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n\t            /**\n\t             * @return {?} the number of keys registered in the system.\n\t             */\n\t            get: function () { return _globalKeyRegistry.numberOfKeys; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return ReflectiveKey;\n\t    }());\n\t    /**\n\t     * \\@internal\n\t     */\n\t    var KeyRegistry = (function () {\n\t        function KeyRegistry() {\n\t            this._allKeys = new Map();\n\t        }\n\t        /**\n\t         * @param {?} token\n\t         * @return {?}\n\t         */\n\t        KeyRegistry.prototype.get = function (token) {\n\t            if (token instanceof ReflectiveKey)\n\t                return token;\n\t            if (this._allKeys.has(token)) {\n\t                return this._allKeys.get(token);\n\t            }\n\t            var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n\t            this._allKeys.set(token, newKey);\n\t            return newKey;\n\t        };\n\t        Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._allKeys.size; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return KeyRegistry;\n\t    }());\n\t    var /** @type {?} */ _globalKeyRegistry = new KeyRegistry();\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * @whatItDoes Represents a type that a Component or other object is instances of.\n\t     *\n\t     * @description\n\t     *\n\t     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n\t     * the `MyCustomComponent` constructor function.\n\t     *\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ Type = Function;\n\t    /**\n\t     * @param {?} v\n\t     * @return {?}\n\t     */\n\t    function isType(v) {\n\t        return typeof v === 'function';\n\t    }\n\t\n\t    /**\n\t     * Attention: This regex has to hold even if the code is minified!\n\t     */\n\t    var /** @type {?} */ DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{\\s*(\"use strict\";)?\\s*(return\\s+)?\\S+\\.apply\\(this,\\s*arguments\\)/;\n\t    var ReflectionCapabilities = (function () {\n\t        /**\n\t         * @param {?=} reflect\n\t         */\n\t        function ReflectionCapabilities(reflect) {\n\t            this._reflect = reflect || global$1.Reflect;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n\t        /**\n\t         * @param {?} t\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.factory = function (t) { return function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            return new (t.bind.apply(t, [void 0].concat(args)))();\n\t        }; };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} paramTypes\n\t         * @param {?} paramAnnotations\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {\n\t            var /** @type {?} */ result;\n\t            if (typeof paramTypes === 'undefined') {\n\t                result = new Array(paramAnnotations.length);\n\t            }\n\t            else {\n\t                result = new Array(paramTypes.length);\n\t            }\n\t            for (var /** @type {?} */ i = 0; i < result.length; i++) {\n\t                // TS outputs Object for parameters without types, while Traceur omits\n\t                // the annotations. For now we preserve the Traceur behavior to aid\n\t                // migration, but this can be revisited.\n\t                if (typeof paramTypes === 'undefined') {\n\t                    result[i] = [];\n\t                }\n\t                else if (paramTypes[i] != Object) {\n\t                    result[i] = [paramTypes[i]];\n\t                }\n\t                else {\n\t                    result[i] = [];\n\t                }\n\t                if (paramAnnotations && isPresent(paramAnnotations[i])) {\n\t                    result[i] = result[i].concat(paramAnnotations[i]);\n\t                }\n\t            }\n\t            return result;\n\t        };\n\t        /**\n\t         * @param {?} type\n\t         * @param {?} parentCtor\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {\n\t            // If we have no decorators, we only have function.length as metadata.\n\t            // In that case, to detect whether a child class declared an own constructor or not,\n\t            // we need to look inside of that constructor to check whether it is\n\t            // just calling the parent.\n\t            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n\t            // that sets 'design:paramtypes' to []\n\t            // if a class inherits from another class but has no ctor declared itself.\n\t            if (DELEGATE_CTOR.exec(type.toString())) {\n\t                return null;\n\t            }\n\t            // Prefer the direct API.\n\t            if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {\n\t                return ((type)).parameters;\n\t            }\n\t            // API of tsickle for lowering decorators to properties on the class.\n\t            var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;\n\t            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n\t                // Newer tsickle uses a function closure\n\t                // Retain the non-function case for compatibility with older tsickle\n\t                var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n\t                var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n\t                var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) {\n\t                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n\t                });\n\t                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n\t            }\n\t            // API for metadata created by invoking the decorators.\n\t            if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {\n\t                var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);\n\t                var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);\n\t                if (paramTypes || paramAnnotations) {\n\t                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n\t                }\n\t            }\n\t            // If a class has no decorators, at least create metadata\n\t            // based on function.length.\n\t            // Note: We know that this is a real constructor as we checked\n\t            // the content of the constructor above.\n\t            return new Array(((type.length))).fill(undefined);\n\t        };\n\t        /**\n\t         * @param {?} type\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.parameters = function (type) {\n\t            // Note: only report metadata if we have at least one class decorator\n\t            // to stay in sync with the static reflector.\n\t            if (!isType(type)) {\n\t                return [];\n\t            }\n\t            var /** @type {?} */ parentCtor = getParentCtor(type);\n\t            var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\n\t            if (!parameters && parentCtor !== Object) {\n\t                parameters = this.parameters(parentCtor);\n\t            }\n\t            return parameters || [];\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @param {?} parentCtor\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {\n\t            // Prefer the direct API.\n\t            if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {\n\t                var /** @type {?} */ annotations = ((typeOrFunc)).annotations;\n\t                if (typeof annotations === 'function' && annotations.annotations) {\n\t                    annotations = annotations.annotations;\n\t                }\n\t                return annotations;\n\t            }\n\t            // API of tsickle for lowering decorators to properties on the class.\n\t            if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {\n\t                return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);\n\t            }\n\t            // API for metadata created by invoking the decorators.\n\t            if (this._reflect && this._reflect.getOwnMetadata) {\n\t                return this._reflect.getOwnMetadata('annotations', typeOrFunc);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\n\t            if (!isType(typeOrFunc)) {\n\t                return [];\n\t            }\n\t            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n\t            var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n\t            var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n\t            return parentAnnotations.concat(ownAnnotations);\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @param {?} parentCtor\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {\n\t            // Prefer the direct API.\n\t            if (((typeOrFunc)).propMetadata &&\n\t                ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n\t                var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;\n\t                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n\t                    propMetadata = propMetadata.propMetadata;\n\t                }\n\t                return propMetadata;\n\t            }\n\t            // API of tsickle for lowering decorators to properties on the class.\n\t            if (((typeOrFunc)).propDecorators &&\n\t                ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n\t                var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;\n\t                var /** @type {?} */ propMetadata_1 = ({});\n\t                Object.keys(propDecorators_1).forEach(function (prop) {\n\t                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n\t                });\n\t                return propMetadata_1;\n\t            }\n\t            // API for metadata created by invoking the decorators.\n\t            if (this._reflect && this._reflect.getOwnMetadata) {\n\t                return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n\t            if (!isType(typeOrFunc)) {\n\t                return {};\n\t            }\n\t            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n\t            var /** @type {?} */ propMetadata = {};\n\t            if (parentCtor !== Object) {\n\t                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);\n\t                Object.keys(parentPropMetadata_1).forEach(function (propName) {\n\t                    propMetadata[propName] = parentPropMetadata_1[propName];\n\t                });\n\t            }\n\t            var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n\t            if (ownPropMetadata) {\n\t                Object.keys(ownPropMetadata).forEach(function (propName) {\n\t                    var /** @type {?} */ decorators = [];\n\t                    if (propMetadata.hasOwnProperty(propName)) {\n\t                        decorators.push.apply(decorators, propMetadata[propName]);\n\t                    }\n\t                    decorators.push.apply(decorators, ownPropMetadata[propName]);\n\t                    propMetadata[propName] = decorators;\n\t                });\n\t            }\n\t            return propMetadata;\n\t        };\n\t        /**\n\t         * @param {?} type\n\t         * @param {?} lcProperty\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\n\t            return type instanceof Type && lcProperty in type.prototype;\n\t        };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.getter = function (name) { return ((new Function('o', 'return o.' + name + ';'))); };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.setter = function (name) {\n\t            return ((new Function('o', 'v', 'return o.' + name + ' = v;')));\n\t        };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.method = function (name) {\n\t            var /** @type {?} */ functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n\t            return ((new Function('o', 'args', functionBody)));\n\t        };\n\t        /**\n\t         * @param {?} type\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.importUri = function (type) {\n\t            // StaticSymbol\n\t            if (typeof type === 'object' && type['filePath']) {\n\t                return type['filePath'];\n\t            }\n\t            // Runtime type\n\t            return \"./\" + stringify(type);\n\t        };\n\t        /**\n\t         * @param {?} name\n\t         * @param {?} moduleUrl\n\t         * @param {?} runtime\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };\n\t        /**\n\t         * @param {?} enumIdentifier\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\n\t        return ReflectionCapabilities;\n\t    }());\n\t    /**\n\t     * @param {?} decoratorInvocations\n\t     * @return {?}\n\t     */\n\t    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n\t        if (!decoratorInvocations) {\n\t            return [];\n\t        }\n\t        return decoratorInvocations.map(function (decoratorInvocation) {\n\t            var /** @type {?} */ decoratorType = decoratorInvocation.type;\n\t            var /** @type {?} */ annotationCls = decoratorType.annotationCls;\n\t            var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n\t            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} ctor\n\t     * @return {?}\n\t     */\n\t    function getParentCtor(ctor) {\n\t        var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);\n\t        var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\n\t        // Note: We always use `Object` as the null value\n\t        // to simplify checking later on.\n\t        return parentCtor || Object;\n\t    }\n\t\n\t    /**\n\t     * Provides read-only access to reflection data about symbols. Used internally by Angular\n\t     * to power dependency injection and compilation.\n\t     * @abstract\n\t     */\n\t    var ReflectorReader = (function () {\n\t        function ReflectorReader() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.parameters = function (typeOrFunc) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.annotations = function (typeOrFunc) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.importUri = function (typeOrFunc) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} name\n\t         * @param {?} moduleUrl\n\t         * @param {?} runtime\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} identifier\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.resolveEnum = function (identifier, name) { };\n\t        return ReflectorReader;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$2 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Provides access to reflection data about symbols. Used internally by Angular\n\t     * to power dependency injection and compilation.\n\t     */\n\t    var Reflector = (function (_super) {\n\t        __extends$2(Reflector, _super);\n\t        /**\n\t         * @param {?} reflectionCapabilities\n\t         */\n\t        function Reflector(reflectionCapabilities) {\n\t            _super.call(this);\n\t            this.reflectionCapabilities = reflectionCapabilities;\n\t        }\n\t        /**\n\t         * @param {?} caps\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\n\t        /**\n\t         * @param {?} type\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.parameters = function (typeOrFunc) {\n\t            return this.reflectionCapabilities.parameters(typeOrFunc);\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.annotations = function (typeOrFunc) {\n\t            return this.reflectionCapabilities.annotations(typeOrFunc);\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.propMetadata = function (typeOrFunc) {\n\t            return this.reflectionCapabilities.propMetadata(typeOrFunc);\n\t        };\n\t        /**\n\t         * @param {?} type\n\t         * @param {?} lcProperty\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n\t            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n\t        };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };\n\t        /**\n\t         * @param {?} type\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\n\t        /**\n\t         * @param {?} name\n\t         * @param {?} moduleUrl\n\t         * @param {?} runtime\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {\n\t            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);\n\t        };\n\t        /**\n\t         * @param {?} identifier\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.resolveEnum = function (identifier, name) {\n\t            return this.reflectionCapabilities.resolveEnum(identifier, name);\n\t        };\n\t        return Reflector;\n\t    }(ReflectorReader));\n\t\n\t    /**\n\t     * The {@link Reflector} used internally in Angular to access metadata\n\t     * about symbols.\n\t     */\n\t    var /** @type {?} */ reflector = new Reflector(new ReflectionCapabilities());\n\t\n\t    /**\n\t     * `Dependency` is used by the framework to extend DI.\n\t     * This is internal to Angular and should not be used directly.\n\t     */\n\t    var ReflectiveDependency = (function () {\n\t        /**\n\t         * @param {?} key\n\t         * @param {?} optional\n\t         * @param {?} visibility\n\t         */\n\t        function ReflectiveDependency(key, optional, visibility) {\n\t            this.key = key;\n\t            this.optional = optional;\n\t            this.visibility = visibility;\n\t        }\n\t        /**\n\t         * @param {?} key\n\t         * @return {?}\n\t         */\n\t        ReflectiveDependency.fromKey = function (key) {\n\t            return new ReflectiveDependency(key, false, null);\n\t        };\n\t        return ReflectiveDependency;\n\t    }());\n\t    var /** @type {?} */ _EMPTY_LIST = [];\n\t    var ResolvedReflectiveProvider_ = (function () {\n\t        /**\n\t         * @param {?} key\n\t         * @param {?} resolvedFactories\n\t         * @param {?} multiProvider\n\t         */\n\t        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n\t            this.key = key;\n\t            this.resolvedFactories = resolvedFactories;\n\t            this.multiProvider = multiProvider;\n\t        }\n\t        Object.defineProperty(ResolvedReflectiveProvider_.prototype, \"resolvedFactory\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.resolvedFactories[0]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return ResolvedReflectiveProvider_;\n\t    }());\n\t    /**\n\t     * An internal resolved representation of a factory function created by resolving {\\@link\n\t     * Provider}.\n\t     * \\@experimental\n\t     */\n\t    var ResolvedReflectiveFactory = (function () {\n\t        /**\n\t         * @param {?} factory\n\t         * @param {?} dependencies\n\t         */\n\t        function ResolvedReflectiveFactory(factory, dependencies) {\n\t            this.factory = factory;\n\t            this.dependencies = dependencies;\n\t        }\n\t        return ResolvedReflectiveFactory;\n\t    }());\n\t    /**\n\t     * Resolve a single provider.\n\t     * @param {?} provider\n\t     * @return {?}\n\t     */\n\t    function resolveReflectiveFactory(provider) {\n\t        var /** @type {?} */ factoryFn;\n\t        var /** @type {?} */ resolvedDeps;\n\t        if (provider.useClass) {\n\t            var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n\t            factoryFn = reflector.factory(useClass);\n\t            resolvedDeps = _dependenciesFor(useClass);\n\t        }\n\t        else if (provider.useExisting) {\n\t            factoryFn = function (aliasInstance) { return aliasInstance; };\n\t            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n\t        }\n\t        else if (provider.useFactory) {\n\t            factoryFn = provider.useFactory;\n\t            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n\t        }\n\t        else {\n\t            factoryFn = function () { return provider.useValue; };\n\t            resolvedDeps = _EMPTY_LIST;\n\t        }\n\t        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n\t    }\n\t    /**\n\t     * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n\t     *\n\t     * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n\t     * convenience provider syntax.\n\t     * @param {?} provider\n\t     * @return {?}\n\t     */\n\t    function resolveReflectiveProvider(provider) {\n\t        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);\n\t    }\n\t    /**\n\t     * Resolve a list of Providers.\n\t     * @param {?} providers\n\t     * @return {?}\n\t     */\n\t    function resolveReflectiveProviders(providers) {\n\t        var /** @type {?} */ normalized = _normalizeProviders(providers, []);\n\t        var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n\t        var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n\t        return Array.from(resolvedProviderMap.values());\n\t    }\n\t    /**\n\t     * Merges a list of ResolvedProviders into a list where\n\t     * each key is contained exactly once and multi providers\n\t     * have been merged.\n\t     * @param {?} providers\n\t     * @param {?} normalizedProvidersMap\n\t     * @return {?}\n\t     */\n\t    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n\t        for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n\t            var /** @type {?} */ provider = providers[i];\n\t            var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n\t            if (existing) {\n\t                if (provider.multiProvider !== existing.multiProvider) {\n\t                    throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);\n\t                }\n\t                if (provider.multiProvider) {\n\t                    for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n\t                        existing.resolvedFactories.push(provider.resolvedFactories[j]);\n\t                    }\n\t                }\n\t                else {\n\t                    normalizedProvidersMap.set(provider.key.id, provider);\n\t                }\n\t            }\n\t            else {\n\t                var /** @type {?} */ resolvedProvider = void 0;\n\t                if (provider.multiProvider) {\n\t                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n\t                }\n\t                else {\n\t                    resolvedProvider = provider;\n\t                }\n\t                normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n\t            }\n\t        }\n\t        return normalizedProvidersMap;\n\t    }\n\t    /**\n\t     * @param {?} providers\n\t     * @param {?} res\n\t     * @return {?}\n\t     */\n\t    function _normalizeProviders(providers, res) {\n\t        providers.forEach(function (b) {\n\t            if (b instanceof Type) {\n\t                res.push({ provide: b, useClass: b });\n\t            }\n\t            else if (b && typeof b == 'object' && ((b)).provide !== undefined) {\n\t                res.push(/** @type {?} */ (b));\n\t            }\n\t            else if (b instanceof Array) {\n\t                _normalizeProviders(b, res);\n\t            }\n\t            else {\n\t                throw new InvalidProviderError(b);\n\t            }\n\t        });\n\t        return res;\n\t    }\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @param {?} dependencies\n\t     * @return {?}\n\t     */\n\t    function constructDependencies(typeOrFunc, dependencies) {\n\t        if (!dependencies) {\n\t            return _dependenciesFor(typeOrFunc);\n\t        }\n\t        else {\n\t            var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });\n\t            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @return {?}\n\t     */\n\t    function _dependenciesFor(typeOrFunc) {\n\t        var /** @type {?} */ params = reflector.parameters(typeOrFunc);\n\t        if (!params)\n\t            return [];\n\t        if (params.some(function (p) { return p == null; })) {\n\t            throw new NoAnnotationError(typeOrFunc, params);\n\t        }\n\t        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n\t    }\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @param {?} metadata\n\t     * @param {?} params\n\t     * @return {?}\n\t     */\n\t    function _extractToken(typeOrFunc, metadata, params) {\n\t        var /** @type {?} */ token = null;\n\t        var /** @type {?} */ optional = false;\n\t        if (!Array.isArray(metadata)) {\n\t            if (metadata instanceof Inject) {\n\t                return _createDependency(metadata.token, optional, null);\n\t            }\n\t            else {\n\t                return _createDependency(metadata, optional, null);\n\t            }\n\t        }\n\t        var /** @type {?} */ visibility = null;\n\t        for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {\n\t            var /** @type {?} */ paramMetadata = metadata[i];\n\t            if (paramMetadata instanceof Type) {\n\t                token = paramMetadata;\n\t            }\n\t            else if (paramMetadata instanceof Inject) {\n\t                token = paramMetadata.token;\n\t            }\n\t            else if (paramMetadata instanceof Optional) {\n\t                optional = true;\n\t            }\n\t            else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n\t                visibility = paramMetadata;\n\t            }\n\t        }\n\t        token = resolveForwardRef(token);\n\t        if (token != null) {\n\t            return _createDependency(token, optional, visibility);\n\t        }\n\t        else {\n\t            throw new NoAnnotationError(typeOrFunc, params);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} token\n\t     * @param {?} optional\n\t     * @param {?} visibility\n\t     * @return {?}\n\t     */\n\t    function _createDependency(token, optional, visibility) {\n\t        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n\t    }\n\t\n\t    // Threshold for the dynamic version\n\t    var /** @type {?} */ UNDEFINED = new Object();\n\t    /**\n\t     * A ReflectiveDependency injection container used for instantiating objects and resolving\n\t     * dependencies.\n\t     *\n\t     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n\t     * constructor dependencies.\n\t     *\n\t     * In typical use, application code asks for the dependencies in the constructor and they are\n\t     * resolved by the `Injector`.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n\t     *\n\t     * The following example creates an `Injector` configured to create `Engine` and `Car`.\n\t     *\n\t     * ```typescript\n\t     * \\@Injectable()\n\t     * class Engine {\n\t     * }\n\t     *\n\t     * \\@Injectable()\n\t     * class Car {\n\t     *   constructor(public engine:Engine) {}\n\t     * }\n\t     *\n\t     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n\t     * var car = injector.get(Car);\n\t     * expect(car instanceof Car).toBe(true);\n\t     * expect(car.engine instanceof Engine).toBe(true);\n\t     * ```\n\t     *\n\t     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n\t     * resolve all of the object's dependencies automatically.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ReflectiveInjector = (function () {\n\t        function ReflectiveInjector() {\n\t        }\n\t        /**\n\t         * Turns an array of provider definitions into an array of resolved providers.\n\t         *\n\t         * A resolution is a process of flattening multiple nested arrays and converting individual\n\t         * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Injectable()\n\t         * class Engine {\n\t         * }\n\t         *\n\t         * \\@Injectable()\n\t         * class Car {\n\t         *   constructor(public engine:Engine) {}\n\t         * }\n\t         *\n\t         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n\t         *\n\t         * expect(providers.length).toEqual(2);\n\t         *\n\t         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n\t         * expect(providers[0].key.displayName).toBe(\"Car\");\n\t         * expect(providers[0].dependencies.length).toEqual(1);\n\t         * expect(providers[0].factory).toBeDefined();\n\t         *\n\t         * expect(providers[1].key.displayName).toBe(\"Engine\");\n\t         * });\n\t         * ```\n\t         *\n\t         * See {\\@link ReflectiveInjector#fromResolvedProviders} for more info.\n\t         * @param {?} providers\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.resolve = function (providers) {\n\t            return resolveReflectiveProviders(providers);\n\t        };\n\t        /**\n\t         * Resolves an array of providers and creates an injector from those providers.\n\t         *\n\t         * The passed-in providers can be an array of `Type`, {\\@link Provider},\n\t         * or a recursive array of more providers.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Injectable()\n\t         * class Engine {\n\t         * }\n\t         *\n\t         * \\@Injectable()\n\t         * class Car {\n\t         *   constructor(public engine:Engine) {}\n\t         * }\n\t         *\n\t         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n\t         * expect(injector.get(Car) instanceof Car).toBe(true);\n\t         * ```\n\t         *\n\t         * This function is slower than the corresponding `fromResolvedProviders`\n\t         * because it needs to resolve the passed-in providers first.\n\t         * See {\\@link Injector#resolve} and {\\@link Injector#fromResolvedProviders}.\n\t         * @param {?} providers\n\t         * @param {?=} parent\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.resolveAndCreate = function (providers, parent) {\n\t            if (parent === void 0) { parent = null; }\n\t            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n\t            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n\t        };\n\t        /**\n\t         * Creates an injector from previously resolved providers.\n\t         *\n\t         * This API is the recommended way to construct injectors in performance-sensitive parts.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Injectable()\n\t         * class Engine {\n\t         * }\n\t         *\n\t         * \\@Injectable()\n\t         * class Car {\n\t         *   constructor(public engine:Engine) {}\n\t         * }\n\t         *\n\t         * var providers = ReflectiveInjector.resolve([Car, Engine]);\n\t         * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n\t         * expect(injector.get(Car) instanceof Car).toBe(true);\n\t         * ```\n\t         * \\@experimental\n\t         * @param {?} providers\n\t         * @param {?=} parent\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {\n\t            if (parent === void 0) { parent = null; }\n\t            return new ReflectiveInjector_(providers, parent);\n\t        };\n\t        /**\n\t         * Parent of this injector.\n\t         *\n\t         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t         * -->\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))\n\t         *\n\t         * ```typescript\n\t         * var parent = ReflectiveInjector.resolveAndCreate([]);\n\t         * var child = parent.resolveAndCreateChild([]);\n\t         * expect(child.parent).toBe(parent);\n\t         * ```\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.parent = function () { };\n\t        /**\n\t         * Resolves an array of providers and creates a child injector from those providers.\n\t         *\n\t         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t         * -->\n\t         *\n\t         * The passed-in providers can be an array of `Type`, {\\@link Provider},\n\t         * or a recursive array of more providers.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))\n\t         *\n\t         * ```typescript\n\t         * class ParentProvider {}\n\t         * class ChildProvider {}\n\t         *\n\t         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n\t         * var child = parent.resolveAndCreateChild([ChildProvider]);\n\t         *\n\t         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n\t         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n\t         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n\t         * ```\n\t         *\n\t         * This function is slower than the corresponding `createChildFromResolved`\n\t         * because it needs to resolve the passed-in providers first.\n\t         * See {\\@link Injector#resolve} and {\\@link Injector#createChildFromResolved}.\n\t         * @abstract\n\t         * @param {?} providers\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n\t        /**\n\t         * Creates a child injector from previously resolved providers.\n\t         *\n\t         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t         * -->\n\t         *\n\t         * This API is the recommended way to construct injectors in performance-sensitive parts.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))\n\t         *\n\t         * ```typescript\n\t         * class ParentProvider {}\n\t         * class ChildProvider {}\n\t         *\n\t         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n\t         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n\t         *\n\t         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n\t         * var child = parent.createChildFromResolved(childProviders);\n\t         *\n\t         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n\t         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n\t         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n\t         * ```\n\t         * @abstract\n\t         * @param {?} providers\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n\t        /**\n\t         * Resolves a provider and instantiates an object in the context of the injector.\n\t         *\n\t         * The created object does not get cached by the injector.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Injectable()\n\t         * class Engine {\n\t         * }\n\t         *\n\t         * \\@Injectable()\n\t         * class Car {\n\t         *   constructor(public engine:Engine) {}\n\t         * }\n\t         *\n\t         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\t         *\n\t         * var car = injector.resolveAndInstantiate(Car);\n\t         * expect(car.engine).toBe(injector.get(Engine));\n\t         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n\t         * ```\n\t         * @abstract\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n\t        /**\n\t         * Instantiates an object using a resolved provider in the context of the injector.\n\t         *\n\t         * The created object does not get cached by the injector.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Injectable()\n\t         * class Engine {\n\t         * }\n\t         *\n\t         * \\@Injectable()\n\t         * class Car {\n\t         *   constructor(public engine:Engine) {}\n\t         * }\n\t         *\n\t         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\t         * var carProvider = ReflectiveInjector.resolve([Car])[0];\n\t         * var car = injector.instantiateResolved(carProvider);\n\t         * expect(car.engine).toBe(injector.get(Engine));\n\t         * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n\t         * ```\n\t         * @abstract\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n\t        return ReflectiveInjector;\n\t    }());\n\t    var ReflectiveInjector_ = (function () {\n\t        /**\n\t         * Private\n\t         * @param {?} _providers\n\t         * @param {?=} _parent\n\t         */\n\t        function ReflectiveInjector_(_providers, _parent) {\n\t            if (_parent === void 0) { _parent = null; }\n\t            /** @internal */\n\t            this._constructionCounter = 0;\n\t            this._providers = _providers;\n\t            this._parent = _parent;\n\t            var len = _providers.length;\n\t            this.keyIds = new Array(len);\n\t            this.objs = new Array(len);\n\t            for (var i = 0; i < len; i++) {\n\t                this.keyIds[i] = _providers[i].key.id;\n\t                this.objs[i] = UNDEFINED;\n\t            }\n\t        }\n\t        /**\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\n\t            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n\t            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n\t        };\n\t        Object.defineProperty(ReflectiveInjector_.prototype, \"parent\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} providers\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\n\t            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n\t            return this.createChildFromResolved(ResolvedReflectiveProviders);\n\t        };\n\t        /**\n\t         * @param {?} providers\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\n\t            var /** @type {?} */ inj = new ReflectiveInjector_(providers);\n\t            inj._parent = this;\n\t            return inj;\n\t        };\n\t        /**\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\n\t            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n\t        };\n\t        /**\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\n\t            return this._instantiateProvider(provider);\n\t        };\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {\n\t            if (index < 0 || index >= this._providers.length) {\n\t                throw new OutOfBoundsError(index);\n\t            }\n\t            return this._providers[index];\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._new = function (provider) {\n\t            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n\t                throw new CyclicDependencyError(this, provider.key);\n\t            }\n\t            return this._instantiateProvider(provider);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };\n\t        /**\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\n\t            if (provider.multiProvider) {\n\t                var /** @type {?} */ res = new Array(provider.resolvedFactories.length);\n\t                for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\n\t                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n\t                }\n\t                return res;\n\t            }\n\t            else {\n\t                return this._instantiate(provider, provider.resolvedFactories[0]);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} provider\n\t         * @param {?} ResolvedReflectiveFactory\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {\n\t            var _this = this;\n\t            var /** @type {?} */ factory = ResolvedReflectiveFactory.factory;\n\t            var /** @type {?} */ deps;\n\t            try {\n\t                deps =\n\t                    ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n\t            }\n\t            catch (e) {\n\t                if (e instanceof AbstractProviderError || e instanceof InstantiationError) {\n\t                    e.addKey(this, provider.key);\n\t                }\n\t                throw e;\n\t            }\n\t            var /** @type {?} */ obj;\n\t            try {\n\t                obj = factory.apply(void 0, deps);\n\t            }\n\t            catch (e) {\n\t                throw new InstantiationError(this, e, e.stack, provider.key);\n\t            }\n\t            return obj;\n\t        };\n\t        /**\n\t         * @param {?} dep\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {\n\t            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n\t        };\n\t        /**\n\t         * @param {?} key\n\t         * @param {?} visibility\n\t         * @param {?} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {\n\t            if (key === INJECTOR_KEY) {\n\t                return this;\n\t            }\n\t            if (visibility instanceof Self) {\n\t                return this._getByKeySelf(key, notFoundValue);\n\t            }\n\t            else {\n\t                return this._getByKeyDefault(key, notFoundValue, visibility);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} keyId\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {\n\t            for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\n\t                if (this.keyIds[i] === keyId) {\n\t                    if (this.objs[i] === UNDEFINED) {\n\t                        this.objs[i] = this._new(this._providers[i]);\n\t                    }\n\t                    return this.objs[i];\n\t                }\n\t            }\n\t            return UNDEFINED;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} key\n\t         * @param {?} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {\n\t            if (notFoundValue !== THROW_IF_NOT_FOUND) {\n\t                return notFoundValue;\n\t            }\n\t            else {\n\t                throw new NoProviderError(this, key);\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} key\n\t         * @param {?} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {\n\t            var /** @type {?} */ obj = this._getObjByKeyId(key.id);\n\t            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} key\n\t         * @param {?} notFoundValue\n\t         * @param {?} visibility\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {\n\t            var /** @type {?} */ inj;\n\t            if (visibility instanceof SkipSelf) {\n\t                inj = this._parent;\n\t            }\n\t            else {\n\t                inj = this;\n\t            }\n\t            while (inj instanceof ReflectiveInjector_) {\n\t                var /** @type {?} */ inj_ = (inj);\n\t                var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\n\t                if (obj !== UNDEFINED)\n\t                    return obj;\n\t                inj = inj_._parent;\n\t            }\n\t            if (inj !== null) {\n\t                return inj.get(key.token, notFoundValue);\n\t            }\n\t            else {\n\t                return this._throwOrNull(key, notFoundValue);\n\t            }\n\t        };\n\t        Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n\t                    .join(', ');\n\t                return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\n\t        return ReflectiveInjector_;\n\t    }());\n\t    var /** @type {?} */ INJECTOR_KEY = ReflectiveKey.get(Injector);\n\t    /**\n\t     * @param {?} injector\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function _mapProviders(injector, fn) {\n\t        var /** @type {?} */ res = new Array(injector._providers.length);\n\t        for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\n\t            res[i] = fn(injector.getProviderAtIndex(i));\n\t        }\n\t        return res;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * \\@whatItDoes Provides a hook for centralized exception handling.\n\t     *\n\t     * \\@description\n\t     *\n\t     * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n\t     * intercept error handling, write a custom exception handler that replaces this default as\n\t     * appropriate for your app.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * class MyErrorHandler implements ErrorHandler {\n\t     *   handleError(error) {\n\t     *     // do something with the exception\n\t     *   }\n\t     * }\n\t     *\n\t     * \\@NgModule({\n\t     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n\t     * })\n\t     * class MyModule {}\n\t     * ```\n\t     *\n\t     * \\@stable\n\t     */\n\t    var ErrorHandler = (function () {\n\t        /**\n\t         * @param {?=} rethrowError\n\t         */\n\t        function ErrorHandler(rethrowError) {\n\t            if (rethrowError === void 0) { rethrowError = true; }\n\t            /**\n\t             * @internal\n\t             */\n\t            this._console = console;\n\t            this.rethrowError = rethrowError;\n\t        }\n\t        /**\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        ErrorHandler.prototype.handleError = function (error) {\n\t            var /** @type {?} */ originalError = this._findOriginalError(error);\n\t            var /** @type {?} */ originalStack = this._findOriginalStack(error);\n\t            var /** @type {?} */ context = this._findContext(error);\n\t            this._console.error(\"EXCEPTION: \" + this._extractMessage(error));\n\t            if (originalError) {\n\t                this._console.error(\"ORIGINAL EXCEPTION: \" + this._extractMessage(originalError));\n\t            }\n\t            if (originalStack) {\n\t                this._console.error('ORIGINAL STACKTRACE:');\n\t                this._console.error(originalStack);\n\t            }\n\t            if (context) {\n\t                this._console.error('ERROR CONTEXT:');\n\t                this._console.error(context);\n\t            }\n\t            // We rethrow exceptions, so operations like 'bootstrap' will result in an error\n\t            // when an error happens. If we do not rethrow, bootstrap will always succeed.\n\t            if (this.rethrowError)\n\t                throw error;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        ErrorHandler.prototype._extractMessage = function (error) {\n\t            return error instanceof Error ? error.message : error.toString();\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        ErrorHandler.prototype._findContext = function (error) {\n\t            if (error) {\n\t                return error.context ? error.context :\n\t                    this._findContext(((error)).originalError);\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        ErrorHandler.prototype._findOriginalError = function (error) {\n\t            var /** @type {?} */ e = ((error)).originalError;\n\t            while (e && ((e)).originalError) {\n\t                e = ((e)).originalError;\n\t            }\n\t            return e;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        ErrorHandler.prototype._findOriginalStack = function (error) {\n\t            if (!(error instanceof Error))\n\t                return null;\n\t            var /** @type {?} */ e = error;\n\t            var /** @type {?} */ stack = e.stack;\n\t            while (e instanceof Error && ((e)).originalError) {\n\t                e = ((e)).originalError;\n\t                if (e instanceof Error && e.stack) {\n\t                    stack = e.stack;\n\t                }\n\t            }\n\t            return stack;\n\t        };\n\t        return ErrorHandler;\n\t    }());\n\t\n\t    /**\n\t     * Wraps Javascript Objects\n\t     */\n\t    var StringMapWrapper = (function () {\n\t        function StringMapWrapper() {\n\t        }\n\t        /**\n\t         * @param {?} m1\n\t         * @param {?} m2\n\t         * @return {?}\n\t         */\n\t        StringMapWrapper.merge = function (m1, m2) {\n\t            var /** @type {?} */ m = {};\n\t            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n\t                var k = _a[_i];\n\t                m[k] = m1[k];\n\t            }\n\t            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n\t                var k = _c[_b];\n\t                m[k] = m2[k];\n\t            }\n\t            return m;\n\t        };\n\t        /**\n\t         * @param {?} m1\n\t         * @param {?} m2\n\t         * @return {?}\n\t         */\n\t        StringMapWrapper.equals = function (m1, m2) {\n\t            var /** @type {?} */ k1 = Object.keys(m1);\n\t            var /** @type {?} */ k2 = Object.keys(m2);\n\t            if (k1.length != k2.length) {\n\t                return false;\n\t            }\n\t            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n\t                var /** @type {?} */ key = k1[i];\n\t                if (m1[key] !== m2[key]) {\n\t                    return false;\n\t                }\n\t            }\n\t            return true;\n\t        };\n\t        return StringMapWrapper;\n\t    }());\n\t    var ListWrapper = (function () {\n\t        function ListWrapper() {\n\t        }\n\t        /**\n\t         * @param {?} arr\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        ListWrapper.findLast = function (arr, condition) {\n\t            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n\t                if (condition(arr[i])) {\n\t                    return arr[i];\n\t                }\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @param {?} items\n\t         * @return {?}\n\t         */\n\t        ListWrapper.removeAll = function (list, items) {\n\t            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n\t                var /** @type {?} */ index = list.indexOf(items[i]);\n\t                if (index > -1) {\n\t                    list.splice(index, 1);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @param {?} el\n\t         * @return {?}\n\t         */\n\t        ListWrapper.remove = function (list, el) {\n\t            var /** @type {?} */ index = list.indexOf(el);\n\t            if (index > -1) {\n\t                list.splice(index, 1);\n\t                return true;\n\t            }\n\t            return false;\n\t        };\n\t        /**\n\t         * @param {?} a\n\t         * @param {?} b\n\t         * @return {?}\n\t         */\n\t        ListWrapper.equals = function (a, b) {\n\t            if (a.length != b.length)\n\t                return false;\n\t            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n\t                if (a[i] !== b[i])\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @return {?}\n\t         */\n\t        ListWrapper.flatten = function (list) {\n\t            return list.reduce(function (flat, item) {\n\t                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n\t                return ((flat)).concat(flatItem);\n\t            }, []);\n\t        };\n\t        return ListWrapper;\n\t    }());\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isListLikeIterable(obj) {\n\t        if (!isJsObject(obj))\n\t            return false;\n\t        return Array.isArray(obj) ||\n\t            (!(obj instanceof Map) &&\n\t                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @param {?} comparator\n\t     * @return {?}\n\t     */\n\t    function areIterablesEqual(a, b, comparator) {\n\t        var /** @type {?} */ iterator1 = a[getSymbolIterator()]();\n\t        var /** @type {?} */ iterator2 = b[getSymbolIterator()]();\n\t        while (true) {\n\t            var /** @type {?} */ item1 = iterator1.next();\n\t            var /** @type {?} */ item2 = iterator2.next();\n\t            if (item1.done && item2.done)\n\t                return true;\n\t            if (item1.done || item2.done)\n\t                return false;\n\t            if (!comparator(item1.value, item2.value))\n\t                return false;\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function iterateListLike(obj, fn) {\n\t        if (Array.isArray(obj)) {\n\t            for (var /** @type {?} */ i = 0; i < obj.length; i++) {\n\t                fn(obj[i]);\n\t            }\n\t        }\n\t        else {\n\t            var /** @type {?} */ iterator = obj[getSymbolIterator()]();\n\t            var /** @type {?} */ item = void 0;\n\t            while (!((item = iterator.next()).done)) {\n\t                fn(item.value);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Determine if the argument is shaped like a Promise\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPromise(obj) {\n\t        // allow any Promise/A+ compliant thenable.\n\t        // It's up to the caller to ensure that obj.then conforms to the spec\n\t        return !!obj && typeof obj.then === 'function';\n\t    }\n\t    /**\n\t     * Determine if the argument is an Observable\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isObservable(obj) {\n\t        return !!(obj && obj[rxjs_symbol_observable.$$observable]);\n\t    }\n\t\n\t    /**\n\t     * A function that will be executed when an application is initialized.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ APP_INITIALIZER = new OpaqueToken('Application Initializer');\n\t    /**\n\t     * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var ApplicationInitStatus = (function () {\n\t        /**\n\t         * @param {?} appInits\n\t         */\n\t        function ApplicationInitStatus(appInits) {\n\t            var _this = this;\n\t            this._done = false;\n\t            var asyncInitPromises = [];\n\t            if (appInits) {\n\t                for (var i = 0; i < appInits.length; i++) {\n\t                    var initResult = appInits[i]();\n\t                    if (isPromise(initResult)) {\n\t                        asyncInitPromises.push(initResult);\n\t                    }\n\t                }\n\t            }\n\t            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });\n\t            if (asyncInitPromises.length === 0) {\n\t                this._done = true;\n\t            }\n\t        }\n\t        Object.defineProperty(ApplicationInitStatus.prototype, \"done\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._done; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ApplicationInitStatus.prototype, \"donePromise\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._donePromise; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ApplicationInitStatus.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        ApplicationInitStatus.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\n\t        ]; };\n\t        return ApplicationInitStatus;\n\t    }());\n\t\n\t    /**\n\t     * A DI Token representing a unique string id assigned to the application by Angular and used\n\t     * primarily for prefixing application attributes and CSS styles when\n\t     * {@link ViewEncapsulation#Emulated} is being used.\n\t     *\n\t     * If you need to avoid randomly generated value to be used as an application id, you can provide\n\t     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n\t     * using this token.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ APP_ID = new OpaqueToken('AppId');\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _appIdRandomProviderFactory() {\n\t        return \"\" + _randomChar() + _randomChar() + _randomChar();\n\t    }\n\t    /**\n\t     * Providers that will generate a random APP_ID_TOKEN.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ APP_ID_RANDOM_PROVIDER = {\n\t        provide: APP_ID,\n\t        useFactory: _appIdRandomProviderFactory,\n\t        deps: /** @type {?} */ ([]),\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _randomChar() {\n\t        return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n\t    }\n\t    /**\n\t     * A function that will be executed when a platform is initialized.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');\n\t    /**\n\t     * All callbacks provided via this token will be called for every component that is bootstrapped.\n\t     * Signature of the callback:\n\t     *\n\t     * `(componentRef: ComponentRef) => void`.\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');\n\t    /**\n\t     * A token which indicates the root directory of the application\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');\n\t\n\t    var Console = (function () {\n\t        function Console() {\n\t        }\n\t        /**\n\t         * @param {?} message\n\t         * @return {?}\n\t         */\n\t        Console.prototype.log = function (message) { print(message); };\n\t        /**\n\t         * @param {?} message\n\t         * @return {?}\n\t         */\n\t        Console.prototype.warn = function (message) { warn(message); };\n\t        Console.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        Console.ctorParameters = function () { return []; };\n\t        return Console;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$4 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Indicates that a component is still being loaded in a synchronous compile.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var ComponentStillLoadingError = (function (_super) {\n\t        __extends$4(ComponentStillLoadingError, _super);\n\t        /**\n\t         * @param {?} compType\n\t         */\n\t        function ComponentStillLoadingError(compType) {\n\t            _super.call(this, \"Can't compile synchronously as \" + stringify(compType) + \" is still being loaded!\");\n\t            this.compType = compType;\n\t        }\n\t        return ComponentStillLoadingError;\n\t    }(BaseError));\n\t    /**\n\t     * Combination of NgModuleFactory and ComponentFactorys.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var ModuleWithComponentFactories = (function () {\n\t        /**\n\t         * @param {?} ngModuleFactory\n\t         * @param {?} componentFactories\n\t         */\n\t        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n\t            this.ngModuleFactory = ngModuleFactory;\n\t            this.componentFactories = componentFactories;\n\t        }\n\t        return ModuleWithComponentFactories;\n\t    }());\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _throwError() {\n\t        throw new Error(\"Runtime compiler is not loaded\");\n\t    }\n\t    /**\n\t     * Low-level service for running the angular compiler during runtime\n\t     * to create {\\@link ComponentFactory}s, which\n\t     * can later be used to create and render a Component instance.\n\t     *\n\t     * Each `\\@NgModule` provides an own `Compiler` to its injector,\n\t     * that will use the directives/pipes of the ng module for compilation\n\t     * of components.\n\t     * \\@stable\n\t     */\n\t    var Compiler = (function () {\n\t        function Compiler() {\n\t        }\n\t        /**\n\t         * Compiles the given NgModule and all of its components. All templates of the components listed\n\t         * in `entryComponents`\n\t         * have to be inlined. Otherwise throws a {\\@link ComponentStillLoadingError}.\n\t         * @param {?} moduleType\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };\n\t        /**\n\t         * Compiles the given NgModule and all of its components\n\t         * @param {?} moduleType\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };\n\t        /**\n\t         * Same as {\\@link compileModuleSync} but also creates ComponentFactories for all components.\n\t         * @param {?} moduleType\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n\t            throw _throwError();\n\t        };\n\t        /**\n\t         * Same as {\\@link compileModuleAsync} but also creates ComponentFactories for all components.\n\t         * @param {?} moduleType\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n\t            throw _throwError();\n\t        };\n\t        /**\n\t         * Exposes the CSS-style selectors that have been used in `ngContent` directives within\n\t         * the template of the given component.\n\t         * This is used by the `upgrade` library to compile the appropriate transclude content\n\t         * in the Angular 1 wrapper component.\n\t         * @param {?} component\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };\n\t        /**\n\t         * Clears all caches.\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.clearCache = function () { };\n\t        /**\n\t         * Clears the cache for the given component/ngModule.\n\t         * @param {?} type\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.clearCacheFor = function (type) { };\n\t        Compiler.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        Compiler.ctorParameters = function () { return []; };\n\t        return Compiler;\n\t    }());\n\t    /**\n\t     * Token to provide CompilerOptions in the platform injector.\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ COMPILER_OPTIONS = new OpaqueToken('compilerOptions');\n\t    /**\n\t     * A factory for creating a Compiler\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var CompilerFactory = (function () {\n\t        function CompilerFactory() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        CompilerFactory.prototype.createCompiler = function (options) { };\n\t        return CompilerFactory;\n\t    }());\n\t\n\t    var ElementRef = (function () {\n\t        /**\n\t         * @param {?} nativeElement\n\t         */\n\t        function ElementRef(nativeElement) {\n\t            this.nativeElement = nativeElement;\n\t        }\n\t        return ElementRef;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$6 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Use by directives and components to emit custom Events.\n\t     *\n\t     * ### Examples\n\t     *\n\t     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n\t     * title gets clicked:\n\t     *\n\t     * ```\n\t     * \\@Component({\n\t     *   selector: 'zippy',\n\t     *   template: `\n\t     *   <div class=\"zippy\">\n\t     *     <div (click)=\"toggle()\">Toggle</div>\n\t     *     <div [hidden]=\"!visible\">\n\t     *       <ng-content></ng-content>\n\t     *     </div>\n\t     *  </div>`})\n\t     * export class Zippy {\n\t     *   visible: boolean = true;\n\t     *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n\t     *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n\t     *\n\t     *   toggle() {\n\t     *     this.visible = !this.visible;\n\t     *     if (this.visible) {\n\t     *       this.open.emit(null);\n\t     *     } else {\n\t     *       this.close.emit(null);\n\t     *     }\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * The events payload can be accessed by the parameter `$event` on the components output event\n\t     * handler:\n\t     *\n\t     * ```\n\t     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n\t     * ```\n\t     *\n\t     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n\t     * https://github.com/jhusain/observable-spec\n\t     *\n\t     * Once a reference implementation of the spec is available, switch to it.\n\t     * \\@stable\n\t     */\n\t    var EventEmitter = (function (_super) {\n\t        __extends$6(EventEmitter, _super);\n\t        /**\n\t         * Creates an instance of [EventEmitter], which depending on [isAsync],\n\t         * delivers events synchronously or asynchronously.\n\t         * @param {?=} isAsync\n\t         */\n\t        function EventEmitter(isAsync) {\n\t            if (isAsync === void 0) { isAsync = false; }\n\t            _super.call(this);\n\t            this.__isAsync = isAsync;\n\t        }\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n\t        /**\n\t         * @param {?=} generatorOrNext\n\t         * @param {?=} error\n\t         * @param {?=} complete\n\t         * @return {?}\n\t         */\n\t        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n\t            var /** @type {?} */ schedulerFn;\n\t            var /** @type {?} */ errorFn = function (err) { return null; };\n\t            var /** @type {?} */ completeFn = function () { return null; };\n\t            if (generatorOrNext && typeof generatorOrNext === 'object') {\n\t                schedulerFn = this.__isAsync ? function (value) {\n\t                    setTimeout(function () { return generatorOrNext.next(value); });\n\t                } : function (value) { generatorOrNext.next(value); };\n\t                if (generatorOrNext.error) {\n\t                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n\t                        function (err) { generatorOrNext.error(err); };\n\t                }\n\t                if (generatorOrNext.complete) {\n\t                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n\t                        function () { generatorOrNext.complete(); };\n\t                }\n\t            }\n\t            else {\n\t                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n\t                    function (value) { generatorOrNext(value); };\n\t                if (error) {\n\t                    errorFn =\n\t                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n\t                }\n\t                if (complete) {\n\t                    completeFn =\n\t                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n\t                }\n\t            }\n\t            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n\t        };\n\t        return EventEmitter;\n\t    }(rxjs_Subject.Subject));\n\t\n\t    /**\n\t     * An injectable service for executing work inside or outside of the Angular zone.\n\t     *\n\t     * The most common use of this service is to optimize performance when starting a work consisting of\n\t     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n\t     * Angular. Such tasks can be kicked off via {\\@link runOutsideAngular} and if needed, these tasks\n\t     * can reenter the Angular zone via {\\@link run}.\n\t     *\n\t     * <!-- TODO: add/fix links to:\n\t     *   - docs explaining zones and the use of zones in Angular and change-detection\n\t     *   - link to runOutsideAngular/run (throughout this file!)\n\t     *   -->\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * import {Component, NgZone} from '\\@angular/core';\n\t     * import {NgIf} from '\\@angular/common';\n\t     *\n\t     * \\@Component({\n\t     *   selector: 'ng-zone-demo'.\n\t     *   template: `\n\t     *     <h2>Demo: NgZone</h2>\n\t     *\n\t     *     <p>Progress: {{progress}}%</p>\n\t     *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n\t     *\n\t     *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n\t     *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n\t     *   `,\n\t     * })\n\t     * export class NgZoneDemo {\n\t     *   progress: number = 0;\n\t     *   label: string;\n\t     *\n\t     *   constructor(private _ngZone: NgZone) {}\n\t     *\n\t     *   // Loop inside the Angular zone\n\t     *   // so the UI DOES refresh after each setTimeout cycle\n\t     *   processWithinAngularZone() {\n\t     *     this.label = 'inside';\n\t     *     this.progress = 0;\n\t     *     this._increaseProgress(() => console.log('Inside Done!'));\n\t     *   }\n\t     *\n\t     *   // Loop outside of the Angular zone\n\t     *   // so the UI DOES NOT refresh after each setTimeout cycle\n\t     *   processOutsideOfAngularZone() {\n\t     *     this.label = 'outside';\n\t     *     this.progress = 0;\n\t     *     this._ngZone.runOutsideAngular(() => {\n\t     *       this._increaseProgress(() => {\n\t     *       // reenter the Angular zone and display done\n\t     *       this._ngZone.run(() => {console.log('Outside Done!') });\n\t     *     }}));\n\t     *   }\n\t     *\n\t     *   _increaseProgress(doneCallback: () => void) {\n\t     *     this.progress += 1;\n\t     *     console.log(`Current progress: ${this.progress}%`);\n\t     *\n\t     *     if (this.progress < 100) {\n\t     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n\t     *     } else {\n\t     *       doneCallback();\n\t     *     }\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var NgZone = (function () {\n\t        /**\n\t         * @param {?} __0\n\t         */\n\t        function NgZone(_a) {\n\t            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n\t            this._hasPendingMicrotasks = false;\n\t            this._hasPendingMacrotasks = false;\n\t            this._isStable = true;\n\t            this._nesting = 0;\n\t            this._onUnstable = new EventEmitter(false);\n\t            this._onMicrotaskEmpty = new EventEmitter(false);\n\t            this._onStable = new EventEmitter(false);\n\t            this._onErrorEvents = new EventEmitter(false);\n\t            if (typeof Zone == 'undefined') {\n\t                throw new Error('Angular requires Zone.js prolyfill.');\n\t            }\n\t            Zone.assertZonePatched();\n\t            this.outer = this.inner = Zone.current;\n\t            if (Zone['wtfZoneSpec']) {\n\t                this.inner = this.inner.fork(Zone['wtfZoneSpec']);\n\t            }\n\t            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n\t                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);\n\t            }\n\t            this.forkInnerZoneWithAngularBehavior();\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.assertInAngularZone = function () {\n\t            if (!NgZone.isInAngularZone()) {\n\t                throw new Error('Expected to be in Angular Zone, but it is not!');\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.assertNotInAngularZone = function () {\n\t            if (NgZone.isInAngularZone()) {\n\t                throw new Error('Expected to not be in Angular Zone, but it is!');\n\t            }\n\t        };\n\t        /**\n\t         * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n\t         * the function.\n\t         *\n\t         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n\t         * outside of the Angular zone (typically started via {\\@link runOutsideAngular}).\n\t         *\n\t         * Any future tasks or microtasks scheduled from within this function will continue executing from\n\t         * within the Angular zone.\n\t         *\n\t         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.run = function (fn) { return this.inner.run(fn); };\n\t        /**\n\t         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n\t         * rethrown.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };\n\t        /**\n\t         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n\t         * the function.\n\t         *\n\t         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that\n\t         * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n\t         *\n\t         * Any future tasks or microtasks scheduled from within this function will continue executing from\n\t         * outside of the Angular zone.\n\t         *\n\t         * Use {\\@link run} to reenter the Angular zone and do work that updates the application model.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };\n\t        Object.defineProperty(NgZone.prototype, \"onUnstable\", {\n\t            /**\n\t             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._onUnstable; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"onMicrotaskEmpty\", {\n\t            /**\n\t             * Notifies when there is no more microtasks enqueue in the current VM Turn.\n\t             * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n\t             * For this reason this event can fire multiple times per VM Turn.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._onMicrotaskEmpty; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"onStable\", {\n\t            /**\n\t             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n\t             * implies we are about to relinquish VM turn.\n\t             * This event gets called just once.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._onStable; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"onError\", {\n\t            /**\n\t             * Notify that an error has been delivered.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._onErrorEvents; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"isStable\", {\n\t            /**\n\t             * Whether there are no outstanding microtasks or macrotasks.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._isStable; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"hasPendingMicrotasks\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._hasPendingMicrotasks; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"hasPendingMacrotasks\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._hasPendingMacrotasks; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.checkStable = function () {\n\t            var _this = this;\n\t            if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {\n\t                try {\n\t                    this._nesting++;\n\t                    this._onMicrotaskEmpty.emit(null);\n\t                }\n\t                finally {\n\t                    this._nesting--;\n\t                    if (!this._hasPendingMicrotasks) {\n\t                        try {\n\t                            this.runOutsideAngular(function () { return _this._onStable.emit(null); });\n\t                        }\n\t                        finally {\n\t                            this._isStable = true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {\n\t            var _this = this;\n\t            this.inner = this.inner.fork({\n\t                name: 'angular',\n\t                properties: /** @type {?} */ ({ 'isAngularZone': true }),\n\t                onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n\t                    try {\n\t                        _this.onEnter();\n\t                        return delegate.invokeTask(target, task, applyThis, applyArgs);\n\t                    }\n\t                    finally {\n\t                        _this.onLeave();\n\t                    }\n\t                },\n\t                onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n\t                    try {\n\t                        _this.onEnter();\n\t                        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n\t                    }\n\t                    finally {\n\t                        _this.onLeave();\n\t                    }\n\t                },\n\t                onHasTask: function (delegate, current, target, hasTaskState) {\n\t                    delegate.hasTask(target, hasTaskState);\n\t                    if (current === target) {\n\t                        // We are only interested in hasTask events which originate from our zone\n\t                        // (A child hasTask event is not interesting to us)\n\t                        if (hasTaskState.change == 'microTask') {\n\t                            _this.setHasMicrotask(hasTaskState.microTask);\n\t                        }\n\t                        else if (hasTaskState.change == 'macroTask') {\n\t                            _this.setHasMacrotask(hasTaskState.macroTask);\n\t                        }\n\t                    }\n\t                },\n\t                onHandleError: function (delegate, current, target, error) {\n\t                    delegate.handleError(target, error);\n\t                    _this.triggerError(error);\n\t                    return false;\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.onEnter = function () {\n\t            this._nesting++;\n\t            if (this._isStable) {\n\t                this._isStable = false;\n\t                this._onUnstable.emit(null);\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.onLeave = function () {\n\t            this._nesting--;\n\t            this.checkStable();\n\t        };\n\t        /**\n\t         * @param {?} hasMicrotasks\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {\n\t            this._hasPendingMicrotasks = hasMicrotasks;\n\t            this.checkStable();\n\t        };\n\t        /**\n\t         * @param {?} hasMacrotasks\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };\n\t        /**\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };\n\t        return NgZone;\n\t    }());\n\t\n\t    var AnimationQueue = (function () {\n\t        /**\n\t         * @param {?} _zone\n\t         */\n\t        function AnimationQueue(_zone) {\n\t            this._zone = _zone;\n\t            this.entries = [];\n\t        }\n\t        /**\n\t         * @param {?} player\n\t         * @return {?}\n\t         */\n\t        AnimationQueue.prototype.enqueue = function (player) { this.entries.push(player); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationQueue.prototype.flush = function () {\n\t            var _this = this;\n\t            // given that each animation player may set aside\n\t            // microtasks and rely on DOM-based events, this\n\t            // will cause Angular to run change detection after\n\t            // each request. This sidesteps the issue. If a user\n\t            // hooks into an animation via (@anim.start) or (@anim.done)\n\t            // then those methods will automatically trigger change\n\t            // detection by wrapping themselves inside of a zone\n\t            if (this.entries.length) {\n\t                this._zone.runOutsideAngular(function () {\n\t                    // this code is wrapped into a single promise such that the\n\t                    // onStart and onDone player callbacks are triggered outside\n\t                    // of the digest cycle of animations\n\t                    Promise.resolve(null).then(function () { return _this._triggerAnimations(); });\n\t                });\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationQueue.prototype._triggerAnimations = function () {\n\t            NgZone.assertNotInAngularZone();\n\t            while (this.entries.length) {\n\t                var /** @type {?} */ player = this.entries.shift();\n\t                // in the event that an animation throws an error then we do\n\t                // not want to re-run animations on any previous animations\n\t                // if they have already been kicked off beforehand\n\t                if (!player.hasStarted()) {\n\t                    player.play();\n\t                }\n\t            }\n\t        };\n\t        AnimationQueue.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        AnimationQueue.ctorParameters = function () { return [\n\t            { type: NgZone, },\n\t        ]; };\n\t        return AnimationQueue;\n\t    }());\n\t\n\t    var DefaultIterableDifferFactory = (function () {\n\t        function DefaultIterableDifferFactory() {\n\t        }\n\t        /**\n\t         * @param {?} obj\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n\t        /**\n\t         * @param {?} cdRef\n\t         * @param {?=} trackByFn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {\n\t            return new DefaultIterableDiffer(trackByFn);\n\t        };\n\t        return DefaultIterableDifferFactory;\n\t    }());\n\t    var /** @type {?} */ trackByIdentity = function (index, item) { return item; };\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var DefaultIterableDiffer = (function () {\n\t        /**\n\t         * @param {?=} _trackByFn\n\t         */\n\t        function DefaultIterableDiffer(_trackByFn) {\n\t            this._trackByFn = _trackByFn;\n\t            this._length = null;\n\t            this._collection = null;\n\t            this._linkedRecords = null;\n\t            this._unlinkedRecords = null;\n\t            this._previousItHead = null;\n\t            this._itHead = null;\n\t            this._itTail = null;\n\t            this._additionsHead = null;\n\t            this._additionsTail = null;\n\t            this._movesHead = null;\n\t            this._movesTail = null;\n\t            this._removalsHead = null;\n\t            this._removalsTail = null;\n\t            this._identityChangesHead = null;\n\t            this._identityChangesTail = null;\n\t            this._trackByFn = this._trackByFn || trackByIdentity;\n\t        }\n\t        Object.defineProperty(DefaultIterableDiffer.prototype, \"collection\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._collection; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DefaultIterableDiffer.prototype, \"length\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._itHead; record !== null; record = record._next) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n\t            var /** @type {?} */ nextIt = this._itHead;\n\t            var /** @type {?} */ nextRemove = this._removalsHead;\n\t            var /** @type {?} */ addRemoveOffset = 0;\n\t            var /** @type {?} */ moveOffsets = null;\n\t            while (nextIt || nextRemove) {\n\t                // Figure out which is the next record to process\n\t                // Order: remove, add, move\n\t                var /** @type {?} */ record = !nextRemove ||\n\t                    nextIt &&\n\t                        nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n\t                    nextIt :\n\t                    nextRemove;\n\t                var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n\t                var /** @type {?} */ currentIndex = record.currentIndex;\n\t                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n\t                if (record === nextRemove) {\n\t                    addRemoveOffset--;\n\t                    nextRemove = nextRemove._nextRemoved;\n\t                }\n\t                else {\n\t                    nextIt = nextIt._next;\n\t                    if (record.previousIndex == null) {\n\t                        addRemoveOffset++;\n\t                    }\n\t                    else {\n\t                        // INVARIANT:  currentIndex < previousIndex\n\t                        if (!moveOffsets)\n\t                            moveOffsets = [];\n\t                        var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n\t                        var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;\n\t                        if (localMovePreviousIndex != localCurrentIndex) {\n\t                            for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n\t                                var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n\t                                var /** @type {?} */ index = offset + i;\n\t                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n\t                                    moveOffsets[i] = offset + 1;\n\t                                }\n\t                            }\n\t                            var /** @type {?} */ previousIndex = record.previousIndex;\n\t                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n\t                        }\n\t                    }\n\t                }\n\t                if (adjPreviousIndex !== currentIndex) {\n\t                    fn(record, adjPreviousIndex, currentIndex);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._movesHead; record !== null; record = record._nextMoved) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} collection\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.diff = function (collection) {\n\t            if (isBlank(collection))\n\t                collection = [];\n\t            if (!isListLikeIterable(collection)) {\n\t                throw new Error(\"Error trying to diff '\" + collection + \"'\");\n\t            }\n\t            if (this.check(collection)) {\n\t                return this;\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.onDestroy = function () { };\n\t        /**\n\t         * @param {?} collection\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.check = function (collection) {\n\t            var _this = this;\n\t            this._reset();\n\t            var /** @type {?} */ record = this._itHead;\n\t            var /** @type {?} */ mayBeDirty = false;\n\t            var /** @type {?} */ index;\n\t            var /** @type {?} */ item;\n\t            var /** @type {?} */ itemTrackBy;\n\t            if (Array.isArray(collection)) {\n\t                var /** @type {?} */ list = collection;\n\t                this._length = collection.length;\n\t                for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {\n\t                    item = list[index_1];\n\t                    itemTrackBy = this._trackByFn(index_1, item);\n\t                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n\t                        record = this._mismatch(record, item, itemTrackBy, index_1);\n\t                        mayBeDirty = true;\n\t                    }\n\t                    else {\n\t                        if (mayBeDirty) {\n\t                            // TODO(misko): can we limit this to duplicates only?\n\t                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n\t                        }\n\t                        if (!looseIdentical(record.item, item))\n\t                            this._addIdentityChange(record, item);\n\t                    }\n\t                    record = record._next;\n\t                }\n\t            }\n\t            else {\n\t                index = 0;\n\t                iterateListLike(collection, function (item /** TODO #9100 */) {\n\t                    itemTrackBy = _this._trackByFn(index, item);\n\t                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n\t                        record = _this._mismatch(record, item, itemTrackBy, index);\n\t                        mayBeDirty = true;\n\t                    }\n\t                    else {\n\t                        if (mayBeDirty) {\n\t                            // TODO(misko): can we limit this to duplicates only?\n\t                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n\t                        }\n\t                        if (!looseIdentical(record.item, item))\n\t                            _this._addIdentityChange(record, item);\n\t                    }\n\t                    record = record._next;\n\t                    index++;\n\t                });\n\t                this._length = index;\n\t            }\n\t            this._truncate(record);\n\t            this._collection = collection;\n\t            return this.isDirty;\n\t        };\n\t        Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._additionsHead !== null || this._movesHead !== null ||\n\t                    this._removalsHead !== null || this._identityChangesHead !== null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * Reset the state of the change objects to show no changes. This means set previousKey to\n\t         * currentKey, and clear all of the queues (additions, moves, removals).\n\t         * Set the previousIndexes of moved and added items to their currentIndexes\n\t         * Reset the list of additions, moves and removals\n\t         *\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._reset = function () {\n\t            if (this.isDirty) {\n\t                var /** @type {?} */ record = void 0;\n\t                var /** @type {?} */ nextRecord = void 0;\n\t                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n\t                    record._nextPrevious = record._next;\n\t                }\n\t                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t                    record.previousIndex = record.currentIndex;\n\t                }\n\t                this._additionsHead = this._additionsTail = null;\n\t                for (record = this._movesHead; record !== null; record = nextRecord) {\n\t                    record.previousIndex = record.currentIndex;\n\t                    nextRecord = record._nextMoved;\n\t                }\n\t                this._movesHead = this._movesTail = null;\n\t                this._removalsHead = this._removalsTail = null;\n\t                this._identityChangesHead = this._identityChangesTail = null;\n\t            }\n\t        };\n\t        /**\n\t         * This is the core function which handles differences between collections.\n\t         *\n\t         * - `record` is the record which we saw at this position last time. If null then it is a new\n\t         *   item.\n\t         * - `item` is the current item in the collection\n\t         * - `index` is the position of the item in the collection\n\t         *\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} item\n\t         * @param {?} itemTrackBy\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n\t            // The previous record after which we will append the current one.\n\t            var /** @type {?} */ previousRecord;\n\t            if (record === null) {\n\t                previousRecord = this._itTail;\n\t            }\n\t            else {\n\t                previousRecord = record._prev;\n\t                // Remove the record from the collection since we know it does not match the item.\n\t                this._remove(record);\n\t            }\n\t            // Attempt to see if we have seen the item before.\n\t            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n\t            if (record !== null) {\n\t                // We have seen this before, we need to move it forward in the collection.\n\t                // But first we need to check if identity changed, so we can update in view if necessary\n\t                if (!looseIdentical(record.item, item))\n\t                    this._addIdentityChange(record, item);\n\t                this._moveAfter(record, previousRecord, index);\n\t            }\n\t            else {\n\t                // Never seen it, check evicted list.\n\t                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n\t                if (record !== null) {\n\t                    // It is an item which we have evicted earlier: reinsert it back into the list.\n\t                    // But first we need to check if identity changed, so we can update in view if necessary\n\t                    if (!looseIdentical(record.item, item))\n\t                        this._addIdentityChange(record, item);\n\t                    this._reinsertAfter(record, previousRecord, index);\n\t                }\n\t                else {\n\t                    // It is a new item: add it.\n\t                    record =\n\t                        this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);\n\t                }\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n\t         *\n\t         * Use case: `[a, a]` => `[b, a, a]`\n\t         *\n\t         * If we did not have this check then the insertion of `b` would:\n\t         *   1) evict first `a`\n\t         *   2) insert `b` at `0` index.\n\t         *   3) leave `a` at index `1` as is. <-- this is wrong!\n\t         *   3) reinsert `a` at index 2. <-- this is wrong!\n\t         *\n\t         * The correct behavior is:\n\t         *   1) evict first `a`\n\t         *   2) insert `b` at `0` index.\n\t         *   3) reinsert `a` at index 1.\n\t         *   3) move `a` at from `1` to `2`.\n\t         *\n\t         *\n\t         * Double check that we have not evicted a duplicate item. We need to check if the item type may\n\t         * have already been removed:\n\t         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n\t         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n\t         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n\t         * at the end.\n\t         *\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} item\n\t         * @param {?} itemTrackBy\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n\t            var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n\t            if (reinsertRecord !== null) {\n\t                record = this._reinsertAfter(reinsertRecord, record._prev, index);\n\t            }\n\t            else if (record.currentIndex != index) {\n\t                record.currentIndex = index;\n\t                this._addToMoves(record, index);\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * Get rid of any excess {\\@link CollectionChangeRecord}s from the previous collection\n\t         *\n\t         * - `record` The first excess {\\@link CollectionChangeRecord}.\n\t         *\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._truncate = function (record) {\n\t            // Anything after that needs to be removed;\n\t            while (record !== null) {\n\t                var /** @type {?} */ nextRecord = record._next;\n\t                this._addToRemovals(this._unlink(record));\n\t                record = nextRecord;\n\t            }\n\t            if (this._unlinkedRecords !== null) {\n\t                this._unlinkedRecords.clear();\n\t            }\n\t            if (this._additionsTail !== null) {\n\t                this._additionsTail._nextAdded = null;\n\t            }\n\t            if (this._movesTail !== null) {\n\t                this._movesTail._nextMoved = null;\n\t            }\n\t            if (this._itTail !== null) {\n\t                this._itTail._next = null;\n\t            }\n\t            if (this._removalsTail !== null) {\n\t                this._removalsTail._nextRemoved = null;\n\t            }\n\t            if (this._identityChangesTail !== null) {\n\t                this._identityChangesTail._nextIdentityChange = null;\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} prevRecord\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n\t            if (this._unlinkedRecords !== null) {\n\t                this._unlinkedRecords.remove(record);\n\t            }\n\t            var /** @type {?} */ prev = record._prevRemoved;\n\t            var /** @type {?} */ next = record._nextRemoved;\n\t            if (prev === null) {\n\t                this._removalsHead = next;\n\t            }\n\t            else {\n\t                prev._nextRemoved = next;\n\t            }\n\t            if (next === null) {\n\t                this._removalsTail = prev;\n\t            }\n\t            else {\n\t                next._prevRemoved = prev;\n\t            }\n\t            this._insertAfter(record, prevRecord, index);\n\t            this._addToMoves(record, index);\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} prevRecord\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n\t            this._unlink(record);\n\t            this._insertAfter(record, prevRecord, index);\n\t            this._addToMoves(record, index);\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} prevRecord\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n\t            this._insertAfter(record, prevRecord, index);\n\t            if (this._additionsTail === null) {\n\t                // todo(vicb)\n\t                // assert(this._additionsHead === null);\n\t                this._additionsTail = this._additionsHead = record;\n\t            }\n\t            else {\n\t                // todo(vicb)\n\t                // assert(_additionsTail._nextAdded === null);\n\t                // assert(record._nextAdded === null);\n\t                this._additionsTail = this._additionsTail._nextAdded = record;\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} prevRecord\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n\t            // todo(vicb)\n\t            // assert(record != prevRecord);\n\t            // assert(record._next === null);\n\t            // assert(record._prev === null);\n\t            var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;\n\t            // todo(vicb)\n\t            // assert(next != record);\n\t            // assert(prevRecord != record);\n\t            record._next = next;\n\t            record._prev = prevRecord;\n\t            if (next === null) {\n\t                this._itTail = record;\n\t            }\n\t            else {\n\t                next._prev = record;\n\t            }\n\t            if (prevRecord === null) {\n\t                this._itHead = record;\n\t            }\n\t            else {\n\t                prevRecord._next = record;\n\t            }\n\t            if (this._linkedRecords === null) {\n\t                this._linkedRecords = new _DuplicateMap();\n\t            }\n\t            this._linkedRecords.put(record);\n\t            record.currentIndex = index;\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._remove = function (record) {\n\t            return this._addToRemovals(this._unlink(record));\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._unlink = function (record) {\n\t            if (this._linkedRecords !== null) {\n\t                this._linkedRecords.remove(record);\n\t            }\n\t            var /** @type {?} */ prev = record._prev;\n\t            var /** @type {?} */ next = record._next;\n\t            // todo(vicb)\n\t            // assert((record._prev = null) === null);\n\t            // assert((record._next = null) === null);\n\t            if (prev === null) {\n\t                this._itHead = next;\n\t            }\n\t            else {\n\t                prev._next = next;\n\t            }\n\t            if (next === null) {\n\t                this._itTail = prev;\n\t            }\n\t            else {\n\t                next._prev = prev;\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} toIndex\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n\t            // todo(vicb)\n\t            // assert(record._nextMoved === null);\n\t            if (record.previousIndex === toIndex) {\n\t                return record;\n\t            }\n\t            if (this._movesTail === null) {\n\t                // todo(vicb)\n\t                // assert(_movesHead === null);\n\t                this._movesTail = this._movesHead = record;\n\t            }\n\t            else {\n\t                // todo(vicb)\n\t                // assert(_movesTail._nextMoved === null);\n\t                this._movesTail = this._movesTail._nextMoved = record;\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n\t            if (this._unlinkedRecords === null) {\n\t                this._unlinkedRecords = new _DuplicateMap();\n\t            }\n\t            this._unlinkedRecords.put(record);\n\t            record.currentIndex = null;\n\t            record._nextRemoved = null;\n\t            if (this._removalsTail === null) {\n\t                // todo(vicb)\n\t                // assert(_removalsHead === null);\n\t                this._removalsTail = this._removalsHead = record;\n\t                record._prevRemoved = null;\n\t            }\n\t            else {\n\t                // todo(vicb)\n\t                // assert(_removalsTail._nextRemoved === null);\n\t                // assert(record._nextRemoved === null);\n\t                record._prevRemoved = this._removalsTail;\n\t                this._removalsTail = this._removalsTail._nextRemoved = record;\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} item\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n\t            record.item = item;\n\t            if (this._identityChangesTail === null) {\n\t                this._identityChangesTail = this._identityChangesHead = record;\n\t            }\n\t            else {\n\t                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.toString = function () {\n\t            var /** @type {?} */ list = [];\n\t            this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });\n\t            var /** @type {?} */ previous = [];\n\t            this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });\n\t            var /** @type {?} */ additions = [];\n\t            this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });\n\t            var /** @type {?} */ moves = [];\n\t            this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });\n\t            var /** @type {?} */ removals = [];\n\t            this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });\n\t            var /** @type {?} */ identityChanges = [];\n\t            this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });\n\t            return 'collection: ' + list.join(', ') + '\\n' +\n\t                'previous: ' + previous.join(', ') + '\\n' +\n\t                'additions: ' + additions.join(', ') + '\\n' +\n\t                'moves: ' + moves.join(', ') + '\\n' +\n\t                'removals: ' + removals.join(', ') + '\\n' +\n\t                'identityChanges: ' + identityChanges.join(', ') + '\\n';\n\t        };\n\t        return DefaultIterableDiffer;\n\t    }());\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var CollectionChangeRecord = (function () {\n\t        /**\n\t         * @param {?} item\n\t         * @param {?} trackById\n\t         */\n\t        function CollectionChangeRecord(item, trackById) {\n\t            this.item = item;\n\t            this.trackById = trackById;\n\t            this.currentIndex = null;\n\t            this.previousIndex = null;\n\t            /** @internal */\n\t            this._nextPrevious = null;\n\t            /** @internal */\n\t            this._prev = null;\n\t            /** @internal */\n\t            this._next = null;\n\t            /** @internal */\n\t            this._prevDup = null;\n\t            /** @internal */\n\t            this._nextDup = null;\n\t            /** @internal */\n\t            this._prevRemoved = null;\n\t            /** @internal */\n\t            this._nextRemoved = null;\n\t            /** @internal */\n\t            this._nextAdded = null;\n\t            /** @internal */\n\t            this._nextMoved = null;\n\t            /** @internal */\n\t            this._nextIdentityChange = null;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        CollectionChangeRecord.prototype.toString = function () {\n\t            return this.previousIndex === this.currentIndex ? stringify(this.item) :\n\t                stringify(this.item) + '[' +\n\t                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n\t        };\n\t        return CollectionChangeRecord;\n\t    }());\n\t    var _DuplicateItemRecordList = (function () {\n\t        function _DuplicateItemRecordList() {\n\t            /** @internal */\n\t            this._head = null;\n\t            /** @internal */\n\t            this._tail = null;\n\t        }\n\t        /**\n\t         * Append the record to the list of duplicates.\n\t         *\n\t         * Note: by design all records in the list of duplicates hold the same value in record.item.\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        _DuplicateItemRecordList.prototype.add = function (record) {\n\t            if (this._head === null) {\n\t                this._head = this._tail = record;\n\t                record._nextDup = null;\n\t                record._prevDup = null;\n\t            }\n\t            else {\n\t                // todo(vicb)\n\t                // assert(record.item ==  _head.item ||\n\t                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n\t                this._tail._nextDup = record;\n\t                record._prevDup = this._tail;\n\t                record._nextDup = null;\n\t                this._tail = record;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} trackById\n\t         * @param {?} afterIndex\n\t         * @return {?}\n\t         */\n\t        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._head; record !== null; record = record._nextDup) {\n\t                if ((afterIndex === null || afterIndex < record.currentIndex) &&\n\t                    looseIdentical(record.trackById, trackById)) {\n\t                    return record;\n\t                }\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * Remove one {\\@link CollectionChangeRecord} from the list of duplicates.\n\t         *\n\t         * Returns whether the list of duplicates is empty.\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        _DuplicateItemRecordList.prototype.remove = function (record) {\n\t            // todo(vicb)\n\t            // assert(() {\n\t            //  // verify that the record being removed is in the list.\n\t            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {\n\t            //    if (identical(cursor, record)) return true;\n\t            //  }\n\t            //  return false;\n\t            //});\n\t            var /** @type {?} */ prev = record._prevDup;\n\t            var /** @type {?} */ next = record._nextDup;\n\t            if (prev === null) {\n\t                this._head = next;\n\t            }\n\t            else {\n\t                prev._nextDup = next;\n\t            }\n\t            if (next === null) {\n\t                this._tail = prev;\n\t            }\n\t            else {\n\t                next._prevDup = prev;\n\t            }\n\t            return this._head === null;\n\t        };\n\t        return _DuplicateItemRecordList;\n\t    }());\n\t    var _DuplicateMap = (function () {\n\t        function _DuplicateMap() {\n\t            this.map = new Map();\n\t        }\n\t        /**\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        _DuplicateMap.prototype.put = function (record) {\n\t            var /** @type {?} */ key = record.trackById;\n\t            var /** @type {?} */ duplicates = this.map.get(key);\n\t            if (!duplicates) {\n\t                duplicates = new _DuplicateItemRecordList();\n\t                this.map.set(key, duplicates);\n\t            }\n\t            duplicates.add(record);\n\t        };\n\t        /**\n\t         * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we\n\t         * have already iterated over, we use the afterIndex to pretend it is not there.\n\t         *\n\t         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n\t         * have any more `a`s needs to return the last `a` not the first or second.\n\t         * @param {?} trackById\n\t         * @param {?=} afterIndex\n\t         * @return {?}\n\t         */\n\t        _DuplicateMap.prototype.get = function (trackById, afterIndex) {\n\t            if (afterIndex === void 0) { afterIndex = null; }\n\t            var /** @type {?} */ key = trackById;\n\t            var /** @type {?} */ recordList = this.map.get(key);\n\t            return recordList ? recordList.get(trackById, afterIndex) : null;\n\t        };\n\t        /**\n\t         * Removes a {\\@link CollectionChangeRecord} from the list of duplicates.\n\t         *\n\t         * The list of duplicates also is removed from the map if it gets empty.\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        _DuplicateMap.prototype.remove = function (record) {\n\t            var /** @type {?} */ key = record.trackById;\n\t            var /** @type {?} */ recordList = this.map.get(key);\n\t            // Remove the list of duplicates when it gets empty\n\t            if (recordList.remove(record)) {\n\t                this.map.delete(key);\n\t            }\n\t            return record;\n\t        };\n\t        Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.map.size === 0; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };\n\t        return _DuplicateMap;\n\t    }());\n\t    /**\n\t     * @param {?} item\n\t     * @param {?} addRemoveOffset\n\t     * @param {?} moveOffsets\n\t     * @return {?}\n\t     */\n\t    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n\t        var /** @type {?} */ previousIndex = item.previousIndex;\n\t        if (previousIndex === null)\n\t            return previousIndex;\n\t        var /** @type {?} */ moveOffset = 0;\n\t        if (moveOffsets && previousIndex < moveOffsets.length) {\n\t            moveOffset = moveOffsets[previousIndex];\n\t        }\n\t        return previousIndex + addRemoveOffset + moveOffset;\n\t    }\n\t\n\t    var DefaultKeyValueDifferFactory = (function () {\n\t        function DefaultKeyValueDifferFactory() {\n\t        }\n\t        /**\n\t         * @param {?} obj\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n\t        /**\n\t         * @param {?} cdRef\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };\n\t        return DefaultKeyValueDifferFactory;\n\t    }());\n\t    var DefaultKeyValueDiffer = (function () {\n\t        function DefaultKeyValueDiffer() {\n\t            this._records = new Map();\n\t            this._mapHead = null;\n\t            this._previousMapHead = null;\n\t            this._changesHead = null;\n\t            this._changesTail = null;\n\t            this._additionsHead = null;\n\t            this._additionsTail = null;\n\t            this._removalsHead = null;\n\t            this._removalsTail = null;\n\t        }\n\t        Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._additionsHead !== null || this._changesHead !== null ||\n\t                    this._removalsHead !== null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._mapHead; record !== null; record = record._next) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} map\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.diff = function (map) {\n\t            if (!map) {\n\t                map = new Map();\n\t            }\n\t            else if (!(map instanceof Map || isJsObject(map))) {\n\t                throw new Error(\"Error trying to diff '\" + map + \"'\");\n\t            }\n\t            return this.check(map) ? this : null;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n\t        /**\n\t         * @param {?} map\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.check = function (map) {\n\t            var _this = this;\n\t            this._reset();\n\t            var /** @type {?} */ records = this._records;\n\t            var /** @type {?} */ oldSeqRecord = this._mapHead;\n\t            var /** @type {?} */ lastOldSeqRecord = null;\n\t            var /** @type {?} */ lastNewSeqRecord = null;\n\t            var /** @type {?} */ seqChanged = false;\n\t            this._forEach(map, function (value, key) {\n\t                var /** @type {?} */ newSeqRecord;\n\t                if (oldSeqRecord && key === oldSeqRecord.key) {\n\t                    newSeqRecord = oldSeqRecord;\n\t                    _this._maybeAddToChanges(newSeqRecord, value);\n\t                }\n\t                else {\n\t                    seqChanged = true;\n\t                    if (oldSeqRecord !== null) {\n\t                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);\n\t                        _this._addToRemovals(oldSeqRecord);\n\t                    }\n\t                    if (records.has(key)) {\n\t                        newSeqRecord = records.get(key);\n\t                        _this._maybeAddToChanges(newSeqRecord, value);\n\t                    }\n\t                    else {\n\t                        newSeqRecord = new KeyValueChangeRecord(key);\n\t                        records.set(key, newSeqRecord);\n\t                        newSeqRecord.currentValue = value;\n\t                        _this._addToAdditions(newSeqRecord);\n\t                    }\n\t                }\n\t                if (seqChanged) {\n\t                    if (_this._isInRemovals(newSeqRecord)) {\n\t                        _this._removeFromRemovals(newSeqRecord);\n\t                    }\n\t                    if (lastNewSeqRecord == null) {\n\t                        _this._mapHead = newSeqRecord;\n\t                    }\n\t                    else {\n\t                        lastNewSeqRecord._next = newSeqRecord;\n\t                    }\n\t                }\n\t                lastOldSeqRecord = oldSeqRecord;\n\t                lastNewSeqRecord = newSeqRecord;\n\t                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;\n\t            });\n\t            this._truncate(lastOldSeqRecord, oldSeqRecord);\n\t            return this.isDirty;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._reset = function () {\n\t            if (this.isDirty) {\n\t                var /** @type {?} */ record = void 0;\n\t                // Record the state of the mapping\n\t                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {\n\t                    record._nextPrevious = record._next;\n\t                }\n\t                for (record = this._changesHead; record !== null; record = record._nextChanged) {\n\t                    record.previousValue = record.currentValue;\n\t                }\n\t                for (record = this._additionsHead; record != null; record = record._nextAdded) {\n\t                    record.previousValue = record.currentValue;\n\t                }\n\t                this._changesHead = this._changesTail = null;\n\t                this._additionsHead = this._additionsTail = null;\n\t                this._removalsHead = this._removalsTail = null;\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} lastRecord\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {\n\t            while (record !== null) {\n\t                if (lastRecord === null) {\n\t                    this._mapHead = null;\n\t                }\n\t                else {\n\t                    lastRecord._next = null;\n\t                }\n\t                var /** @type {?} */ nextRecord = record._next;\n\t                this._addToRemovals(record);\n\t                lastRecord = record;\n\t                record = nextRecord;\n\t            }\n\t            for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {\n\t                rec.previousValue = rec.currentValue;\n\t                rec.currentValue = null;\n\t                this._records.delete(rec.key);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} record\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n\t            if (!looseIdentical(newValue, record.currentValue)) {\n\t                record.previousValue = record.currentValue;\n\t                record.currentValue = newValue;\n\t                this._addToChanges(record);\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {\n\t            return record === this._removalsHead || record._nextRemoved !== null ||\n\t                record._prevRemoved !== null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {\n\t            if (this._removalsHead === null) {\n\t                this._removalsHead = this._removalsTail = record;\n\t            }\n\t            else {\n\t                this._removalsTail._nextRemoved = record;\n\t                record._prevRemoved = this._removalsTail;\n\t                this._removalsTail = record;\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} prev\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {\n\t            var /** @type {?} */ next = record._next;\n\t            if (prev === null) {\n\t                this._mapHead = next;\n\t            }\n\t            else {\n\t                prev._next = next;\n\t            }\n\t            record._next = null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {\n\t            var /** @type {?} */ prev = record._prevRemoved;\n\t            var /** @type {?} */ next = record._nextRemoved;\n\t            if (prev === null) {\n\t                this._removalsHead = next;\n\t            }\n\t            else {\n\t                prev._nextRemoved = next;\n\t            }\n\t            if (next === null) {\n\t                this._removalsTail = prev;\n\t            }\n\t            else {\n\t                next._prevRemoved = prev;\n\t            }\n\t            record._prevRemoved = record._nextRemoved = null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n\t            if (this._additionsHead === null) {\n\t                this._additionsHead = this._additionsTail = record;\n\t            }\n\t            else {\n\t                this._additionsTail._nextAdded = record;\n\t                this._additionsTail = record;\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n\t            if (this._changesHead === null) {\n\t                this._changesHead = this._changesTail = record;\n\t            }\n\t            else {\n\t                this._changesTail._nextChanged = record;\n\t                this._changesTail = record;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.toString = function () {\n\t            var /** @type {?} */ items = [];\n\t            var /** @type {?} */ previous = [];\n\t            var /** @type {?} */ changes = [];\n\t            var /** @type {?} */ additions = [];\n\t            var /** @type {?} */ removals = [];\n\t            var /** @type {?} */ record;\n\t            for (record = this._mapHead; record !== null; record = record._next) {\n\t                items.push(stringify(record));\n\t            }\n\t            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n\t                previous.push(stringify(record));\n\t            }\n\t            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n\t                changes.push(stringify(record));\n\t            }\n\t            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t                additions.push(stringify(record));\n\t            }\n\t            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n\t                removals.push(stringify(record));\n\t            }\n\t            return 'map: ' + items.join(', ') + '\\n' +\n\t                'previous: ' + previous.join(', ') + '\\n' +\n\t                'additions: ' + additions.join(', ') + '\\n' +\n\t                'changes: ' + changes.join(', ') + '\\n' +\n\t                'removals: ' + removals.join(', ') + '\\n';\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} obj\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n\t            if (obj instanceof Map) {\n\t                obj.forEach(fn);\n\t            }\n\t            else {\n\t                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n\t            }\n\t        };\n\t        return DefaultKeyValueDiffer;\n\t    }());\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var KeyValueChangeRecord = (function () {\n\t        /**\n\t         * @param {?} key\n\t         */\n\t        function KeyValueChangeRecord(key) {\n\t            this.key = key;\n\t            this.previousValue = null;\n\t            this.currentValue = null;\n\t            /** @internal */\n\t            this._nextPrevious = null;\n\t            /** @internal */\n\t            this._next = null;\n\t            /** @internal */\n\t            this._nextAdded = null;\n\t            /** @internal */\n\t            this._nextRemoved = null;\n\t            /** @internal */\n\t            this._prevRemoved = null;\n\t            /** @internal */\n\t            this._nextChanged = null;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        KeyValueChangeRecord.prototype.toString = function () {\n\t            return looseIdentical(this.previousValue, this.currentValue) ?\n\t                stringify(this.key) :\n\t                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +\n\t                    stringify(this.currentValue) + ']');\n\t        };\n\t        return KeyValueChangeRecord;\n\t    }());\n\t\n\t    /**\n\t     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n\t     * \\@stable\n\t     */\n\t    var IterableDiffers = (function () {\n\t        /**\n\t         * @param {?} factories\n\t         */\n\t        function IterableDiffers(factories) {\n\t            this.factories = factories;\n\t        }\n\t        /**\n\t         * @param {?} factories\n\t         * @param {?=} parent\n\t         * @return {?}\n\t         */\n\t        IterableDiffers.create = function (factories, parent) {\n\t            if (isPresent(parent)) {\n\t                var /** @type {?} */ copied = parent.factories.slice();\n\t                factories = factories.concat(copied);\n\t                return new IterableDiffers(factories);\n\t            }\n\t            else {\n\t                return new IterableDiffers(factories);\n\t            }\n\t        };\n\t        /**\n\t         * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n\t         * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n\t         * {\\@link IterableDiffers} instance.\n\t         *\n\t         * The following example shows how to extend an existing list of factories,\n\t         * which will only be applied to the injector for this component and its children.\n\t         * This step is all that's required to make a new {\\@link IterableDiffer} available.\n\t         *\n\t         * ### Example\n\t         *\n\t         * ```\n\t         * \\@Component({\n\t         *   viewProviders: [\n\t         *     IterableDiffers.extend([new ImmutableListDiffer()])\n\t         *   ]\n\t         * })\n\t         * ```\n\t         * @param {?} factories\n\t         * @return {?}\n\t         */\n\t        IterableDiffers.extend = function (factories) {\n\t            return {\n\t                provide: IterableDiffers,\n\t                useFactory: function (parent) {\n\t                    if (!parent) {\n\t                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n\t                        // to\n\t                        // bootstrap(), which would override default pipes instead of extending them.\n\t                        throw new Error('Cannot extend IterableDiffers without a parent injector');\n\t                    }\n\t                    return IterableDiffers.create(factories, parent);\n\t                },\n\t                // Dependency technically isn't optional, but we can provide a better error message this way.\n\t                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} iterable\n\t         * @return {?}\n\t         */\n\t        IterableDiffers.prototype.find = function (iterable) {\n\t            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });\n\t            if (isPresent(factory)) {\n\t                return factory;\n\t            }\n\t            else {\n\t                throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n\t            }\n\t        };\n\t        return IterableDiffers;\n\t    }());\n\t\n\t    /**\n\t     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n\t     * \\@stable\n\t     */\n\t    var KeyValueDiffers = (function () {\n\t        /**\n\t         * @param {?} factories\n\t         */\n\t        function KeyValueDiffers(factories) {\n\t            this.factories = factories;\n\t        }\n\t        /**\n\t         * @param {?} factories\n\t         * @param {?=} parent\n\t         * @return {?}\n\t         */\n\t        KeyValueDiffers.create = function (factories, parent) {\n\t            if (isPresent(parent)) {\n\t                var /** @type {?} */ copied = parent.factories.slice();\n\t                factories = factories.concat(copied);\n\t                return new KeyValueDiffers(factories);\n\t            }\n\t            else {\n\t                return new KeyValueDiffers(factories);\n\t            }\n\t        };\n\t        /**\n\t         * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n\t         * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n\t         * {\\@link KeyValueDiffers} instance.\n\t         *\n\t         * The following example shows how to extend an existing list of factories,\n\t         * which will only be applied to the injector for this component and its children.\n\t         * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n\t         *\n\t         * ### Example\n\t         *\n\t         * ```\n\t         * \\@Component({\n\t         *   viewProviders: [\n\t         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n\t         *   ]\n\t         * })\n\t         * ```\n\t         * @param {?} factories\n\t         * @return {?}\n\t         */\n\t        KeyValueDiffers.extend = function (factories) {\n\t            return {\n\t                provide: KeyValueDiffers,\n\t                useFactory: function (parent) {\n\t                    if (!parent) {\n\t                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n\t                        // to\n\t                        // bootstrap(), which would override default pipes instead of extending them.\n\t                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n\t                    }\n\t                    return KeyValueDiffers.create(factories, parent);\n\t                },\n\t                // Dependency technically isn't optional, but we can provide a better error message this way.\n\t                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} kv\n\t         * @return {?}\n\t         */\n\t        KeyValueDiffers.prototype.find = function (kv) {\n\t            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });\n\t            if (isPresent(factory)) {\n\t                return factory;\n\t            }\n\t            else {\n\t                throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n\t            }\n\t        };\n\t        return KeyValueDiffers;\n\t    }());\n\t\n\t    var /** @type {?} */ UNINITIALIZED = {\n\t        toString: function () { return 'CD_INIT_VALUE'; }\n\t    };\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function devModeEqual(a, b) {\n\t        if (isListLikeIterable(a) && isListLikeIterable(b)) {\n\t            return areIterablesEqual(a, b, devModeEqual);\n\t        }\n\t        else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {\n\t            return true;\n\t        }\n\t        else {\n\t            return looseIdentical(a, b);\n\t        }\n\t    }\n\t    /**\n\t     * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n\t     * reference\n\t     * has not changed.\n\t     *\n\t     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```\n\t     * if (this._latestValue === this._latestReturnedValue) {\n\t     *    return this._latestReturnedValue;\n\t     *  } else {\n\t     *    this._latestReturnedValue = this._latestValue;\n\t     *    return WrappedValue.wrap(this._latestValue); // this will force update\n\t     *  }\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var WrappedValue = (function () {\n\t        /**\n\t         * @param {?} wrapped\n\t         */\n\t        function WrappedValue(wrapped) {\n\t            this.wrapped = wrapped;\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n\t        return WrappedValue;\n\t    }());\n\t    /**\n\t     * Helper class for unwrapping WrappedValue s\n\t     */\n\t    var ValueUnwrapper = (function () {\n\t        function ValueUnwrapper() {\n\t            this.hasWrappedValue = false;\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        ValueUnwrapper.prototype.unwrap = function (value) {\n\t            if (value instanceof WrappedValue) {\n\t                this.hasWrappedValue = true;\n\t                return value.wrapped;\n\t            }\n\t            return value;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };\n\t        return ValueUnwrapper;\n\t    }());\n\t    /**\n\t     * Represents a basic change from a previous to a new value.\n\t     * \\@stable\n\t     */\n\t    var SimpleChange = (function () {\n\t        /**\n\t         * @param {?} previousValue\n\t         * @param {?} currentValue\n\t         */\n\t        function SimpleChange(previousValue, currentValue) {\n\t            this.previousValue = previousValue;\n\t            this.currentValue = currentValue;\n\t        }\n\t        /**\n\t         * Check whether the new value is the first value assigned.\n\t         * @return {?}\n\t         */\n\t        SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };\n\t        return SimpleChange;\n\t    }());\n\t\n\t    /**\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ChangeDetectorRef = (function () {\n\t        function ChangeDetectorRef() {\n\t        }\n\t        /**\n\t         * Marks all {\\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.\n\t         *\n\t         * <!-- TODO: Add a link to a chapter on OnPush components -->\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Component({\n\t         *   selector: 'cmp',\n\t         *   changeDetection: ChangeDetectionStrategy.OnPush,\n\t         *   template: `Number of ticks: {{numberOfTicks}}`\n\t         * })\n\t         * class Cmp {\n\t         *   numberOfTicks = 0;\n\t         *\n\t         *   constructor(ref: ChangeDetectorRef) {\n\t         *     setInterval(() => {\n\t         *       this.numberOfTicks ++\n\t         *       // the following is required, otherwise the view will not be updated\n\t         *       this.ref.markForCheck();\n\t         *     }, 1000);\n\t         *   }\n\t         * }\n\t         *\n\t         * \\@Component({\n\t         *   selector: 'app',\n\t         *   changeDetection: ChangeDetectionStrategy.OnPush,\n\t         *   template: `\n\t         *     <cmp><cmp>\n\t         *   `,\n\t         * })\n\t         * class App {\n\t         * }\n\t         * ```\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ChangeDetectorRef.prototype.markForCheck = function () { };\n\t        /**\n\t         * Detaches the change detector from the change detector tree.\n\t         *\n\t         * The detached change detector will not be checked until it is reattached.\n\t         *\n\t         * This can also be used in combination with {\\@link ChangeDetectorRef#detectChanges} to implement\n\t         * local change\n\t         * detection checks.\n\t         *\n\t         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\t         *\n\t         * ### Example\n\t         *\n\t         * The following example defines a component with a large list of readonly data.\n\t         * Imagine the data changes constantly, many times per second. For performance reasons,\n\t         * we want to check and update the list every five seconds. We can do that by detaching\n\t         * the component's change detector and doing a local check every five seconds.\n\t         *\n\t         * ```typescript\n\t         * class DataProvider {\n\t         *   // in a real application the returned data will be different every time\n\t         *   get data() {\n\t         *     return [1,2,3,4,5];\n\t         *   }\n\t         * }\n\t         *\n\t         * \\@Component({\n\t         *   selector: 'giant-list',\n\t         *   template: `\n\t         *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</lig>\n\t         *   `,\n\t         * })\n\t         * class GiantList {\n\t         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {\n\t         *     ref.detach();\n\t         *     setInterval(() => {\n\t         *       this.ref.detectChanges();\n\t         *     }, 5000);\n\t         *   }\n\t         * }\n\t         *\n\t         * \\@Component({\n\t         *   selector: 'app',\n\t         *   providers: [DataProvider],\n\t         *   template: `\n\t         *     <giant-list><giant-list>\n\t         *   `,\n\t         * })\n\t         * class App {\n\t         * }\n\t         * ```\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ChangeDetectorRef.prototype.detach = function () { };\n\t        /**\n\t         * Checks the change detector and its children.\n\t         *\n\t         * This can also be used in combination with {\\@link ChangeDetectorRef#detach} to implement local\n\t         * change detection\n\t         * checks.\n\t         *\n\t         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\t         *\n\t         * ### Example\n\t         *\n\t         * The following example defines a component with a large list of readonly data.\n\t         * Imagine, the data changes constantly, many times per second. For performance reasons,\n\t         * we want to check and update the list every five seconds.\n\t         *\n\t         * We can do that by detaching the component's change detector and doing a local change detection\n\t         * check\n\t         * every five seconds.\n\t         *\n\t         * See {\\@link ChangeDetectorRef#detach} for more information.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ChangeDetectorRef.prototype.detectChanges = function () { };\n\t        /**\n\t         * Checks the change detector and its children, and throws if any changes are detected.\n\t         *\n\t         * This is used in development mode to verify that running change detection doesn't introduce\n\t         * other changes.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ChangeDetectorRef.prototype.checkNoChanges = function () { };\n\t        /**\n\t         * Reattach the change detector to the change detector tree.\n\t         *\n\t         * This also marks OnPush ancestors as to be checked. This reattached change detector will be\n\t         * checked during the next change detection run.\n\t         *\n\t         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))\n\t         *\n\t         * The following example creates a component displaying `live` data. The component will detach\n\t         * its change detector from the main change detector tree when the component's live property\n\t         * is set to false.\n\t         *\n\t         * ```typescript\n\t         * class DataProvider {\n\t         *   data = 1;\n\t         *\n\t         *   constructor() {\n\t         *     setInterval(() => {\n\t         *       this.data = this.data * 2;\n\t         *     }, 500);\n\t         *   }\n\t         * }\n\t         *\n\t         * \\@Component({\n\t         *   selector: 'live-data',\n\t         *   inputs: ['live'],\n\t         *   template: 'Data: {{dataProvider.data}}'\n\t         * })\n\t         * class LiveData {\n\t         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}\n\t         *\n\t         *   set live(value) {\n\t         *     if (value)\n\t         *       this.ref.reattach();\n\t         *     else\n\t         *       this.ref.detach();\n\t         *   }\n\t         * }\n\t         *\n\t         * \\@Component({\n\t         *   selector: 'app',\n\t         *   providers: [DataProvider],\n\t         *   template: `\n\t         *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n\t         *     <live-data [live]=\"live\"><live-data>\n\t         *   `,\n\t         * })\n\t         * class App {\n\t         *   live = true;\n\t         * }\n\t         * ```\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ChangeDetectorRef.prototype.reattach = function () { };\n\t        return ChangeDetectorRef;\n\t    }());\n\t\n\t    /**\n\t     * Structural diffing for `Object`s and `Map`s.\n\t     */\n\t    var /** @type {?} */ keyValDiff = [new DefaultKeyValueDifferFactory()];\n\t    /**\n\t     * Structural diffing for `Iterable` types such as `Array`s.\n\t     */\n\t    var /** @type {?} */ iterableDiff = [new DefaultIterableDifferFactory()];\n\t    var /** @type {?} */ defaultIterableDiffers = new IterableDiffers(iterableDiff);\n\t    var /** @type {?} */ defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var RenderComponentType = (function () {\n\t        /**\n\t         * @param {?} id\n\t         * @param {?} templateUrl\n\t         * @param {?} slotCount\n\t         * @param {?} encapsulation\n\t         * @param {?} styles\n\t         * @param {?} animations\n\t         */\n\t        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n\t            this.id = id;\n\t            this.templateUrl = templateUrl;\n\t            this.slotCount = slotCount;\n\t            this.encapsulation = encapsulation;\n\t            this.styles = styles;\n\t            this.animations = animations;\n\t        }\n\t        return RenderComponentType;\n\t    }());\n\t    /**\n\t     * @abstract\n\t     */\n\t    var RenderDebugInfo = (function () {\n\t        function RenderDebugInfo() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.injector = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.component = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.providerTokens = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.references = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.context = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.source = function () { };\n\t        return RenderDebugInfo;\n\t    }());\n\t    /**\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var Renderer = (function () {\n\t        function Renderer() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} selectorOrNode\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} parentElement\n\t         * @param {?} name\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} hostElement\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.createViewRoot = function (hostElement) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} parentElement\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} parentElement\n\t         * @param {?} value\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} parentElement\n\t         * @param {?} nodes\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} node\n\t         * @param {?} viewRootNodes\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} viewRootNodes\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.detachView = function (viewRootNodes) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} hostElement\n\t         * @param {?} viewAllNodes\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} name\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.listen = function (renderElement, name, callback) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} target\n\t         * @param {?} name\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.listenGlobal = function (target, name, callback) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} propertyName\n\t         * @param {?} propertyValue\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} attributeName\n\t         * @param {?} attributeValue\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n\t        /**\n\t         * Used only in debug mode to serialize property changes to dom nodes as attributes.\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} propertyName\n\t         * @param {?} propertyValue\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} className\n\t         * @param {?} isAdd\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} styleName\n\t         * @param {?} styleValue\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} methodName\n\t         * @param {?=} args\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderNode\n\t         * @param {?} text\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setText = function (renderNode, text) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} element\n\t         * @param {?} startingStyles\n\t         * @param {?} keyframes\n\t         * @param {?} duration\n\t         * @param {?} delay\n\t         * @param {?} easing\n\t         * @param {?=} previousPlayers\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n\t        return Renderer;\n\t    }());\n\t    /**\n\t     * Injectable service that provides a low-level interface for modifying the UI.\n\t     *\n\t     * Use this service to bypass Angular's templating and make custom UI changes that can't be\n\t     * expressed declaratively. For example if you need to set a property or an attribute whose name is\n\t     * not statically known, use {\\@link #setElementProperty} or {\\@link #setElementAttribute}\n\t     * respectively.\n\t     *\n\t     * If you are implementing a custom renderer, you must implement this interface.\n\t     *\n\t     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var RootRenderer = (function () {\n\t        function RootRenderer() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} componentType\n\t         * @return {?}\n\t         */\n\t        RootRenderer.prototype.renderComponent = function (componentType) { };\n\t        return RootRenderer;\n\t    }());\n\t\n\t    var SecurityContext = {};\n\t    SecurityContext.NONE = 0;\n\t    SecurityContext.HTML = 1;\n\t    SecurityContext.STYLE = 2;\n\t    SecurityContext.SCRIPT = 3;\n\t    SecurityContext.URL = 4;\n\t    SecurityContext.RESOURCE_URL = 5;\n\t    SecurityContext[SecurityContext.NONE] = \"NONE\";\n\t    SecurityContext[SecurityContext.HTML] = \"HTML\";\n\t    SecurityContext[SecurityContext.STYLE] = \"STYLE\";\n\t    SecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\n\t    SecurityContext[SecurityContext.URL] = \"URL\";\n\t    SecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n\t    /**\n\t     * Sanitizer is used by the views to sanitize potentially dangerous values.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var Sanitizer = (function () {\n\t        function Sanitizer() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} context\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        Sanitizer.prototype.sanitize = function (context, value) { };\n\t        return Sanitizer;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$7 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * An error thrown if application changes model breaking the top-down data flow.\n\t     *\n\t     * This exception is only thrown in dev mode.\n\t     *\n\t     * <!-- TODO: Add a link once the dev mode option is configurable -->\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * \\@Component({\n\t     *   selector: 'parent',\n\t     *   template: '<child [prop]=\"parentProp\"></child>',\n\t     * })\n\t     * class Parent {\n\t     *   parentProp = 'init';\n\t     * }\n\t     *\n\t     * \\@Directive({selector: 'child', inputs: ['prop']})\n\t     * class Child {\n\t     *   constructor(public parent: Parent) {}\n\t     *\n\t     *   set prop(v) {\n\t     *     // this updates the parent property, which is disallowed during change detection\n\t     *     // this will result in ExpressionChangedAfterItHasBeenCheckedError\n\t     *     this.parent.parentProp = 'updated';\n\t     *   }\n\t     * }\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {\n\t        __extends$7(ExpressionChangedAfterItHasBeenCheckedError, _super);\n\t        /**\n\t         * @param {?} oldValue\n\t         * @param {?} currValue\n\t         */\n\t        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {\n\t            var msg = \"Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n\t            if (oldValue === UNINITIALIZED) {\n\t                msg +=\n\t                    \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n\t                        \" Has it been created in a change detection hook ?\";\n\t            }\n\t            _super.call(this, msg);\n\t        }\n\t        return ExpressionChangedAfterItHasBeenCheckedError;\n\t    }(BaseError));\n\t    /**\n\t     * Thrown when an exception was raised during view creation, change detection or destruction.\n\t     *\n\t     * This error wraps the original exception to attach additional contextual information that can\n\t     * be useful for debugging.\n\t     * \\@stable\n\t     */\n\t    var ViewWrappedError = (function (_super) {\n\t        __extends$7(ViewWrappedError, _super);\n\t        /**\n\t         * @param {?} originalError\n\t         * @param {?} context\n\t         */\n\t        function ViewWrappedError(originalError, context) {\n\t            _super.call(this, \"Error in \" + context.source, originalError);\n\t            this.context = context;\n\t        }\n\t        return ViewWrappedError;\n\t    }(WrappedError));\n\t    /**\n\t     * Thrown when a destroyed view is used.\n\t     *\n\t     * This error indicates a bug in the framework.\n\t     *\n\t     * This is an internal Angular error.\n\t     * \\@stable\n\t     */\n\t    var ViewDestroyedError = (function (_super) {\n\t        __extends$7(ViewDestroyedError, _super);\n\t        /**\n\t         * @param {?} details\n\t         */\n\t        function ViewDestroyedError(details) {\n\t            _super.call(this, \"Attempt to use a destroyed view: \" + details);\n\t        }\n\t        return ViewDestroyedError;\n\t    }(BaseError));\n\t\n\t    var ViewUtils = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} sanitizer\n\t         * @param {?} animationQueue\n\t         */\n\t        function ViewUtils(_renderer, sanitizer, animationQueue) {\n\t            this._renderer = _renderer;\n\t            this.animationQueue = animationQueue;\n\t            this.sanitizer = sanitizer;\n\t        }\n\t        /**\n\t         * \\@internal\n\t         * @param {?} renderComponentType\n\t         * @return {?}\n\t         */\n\t        ViewUtils.prototype.renderComponent = function (renderComponentType) {\n\t            return this._renderer.renderComponent(renderComponentType);\n\t        };\n\t        ViewUtils.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        ViewUtils.ctorParameters = function () { return [\n\t            { type: RootRenderer, },\n\t            { type: Sanitizer, },\n\t            { type: AnimationQueue, },\n\t        ]; };\n\t        return ViewUtils;\n\t    }());\n\t    var /** @type {?} */ nextRenderComponentTypeId = 0;\n\t    /**\n\t     * @param {?} templateUrl\n\t     * @param {?} slotCount\n\t     * @param {?} encapsulation\n\t     * @param {?} styles\n\t     * @param {?} animations\n\t     * @return {?}\n\t     */\n\t    function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {\n\t        return new RenderComponentType(\"\" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);\n\t    }\n\t    /**\n\t     * @param {?} e\n\t     * @param {?} array\n\t     * @return {?}\n\t     */\n\t    function addToArray(e, array) {\n\t        array.push(e);\n\t    }\n\t    /**\n\t     * @param {?} valueCount\n\t     * @param {?} constAndInterp\n\t     * @return {?}\n\t     */\n\t    function interpolate(valueCount, constAndInterp) {\n\t        var /** @type {?} */ result = '';\n\t        for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {\n\t            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n\t        }\n\t        return result + constAndInterp[valueCount * 2];\n\t    }\n\t    /**\n\t     * @param {?} valueCount\n\t     * @param {?} c0\n\t     * @param {?} a1\n\t     * @param {?} c1\n\t     * @param {?=} a2\n\t     * @param {?=} c2\n\t     * @param {?=} a3\n\t     * @param {?=} c3\n\t     * @param {?=} a4\n\t     * @param {?=} c4\n\t     * @param {?=} a5\n\t     * @param {?=} c5\n\t     * @param {?=} a6\n\t     * @param {?=} c6\n\t     * @param {?=} a7\n\t     * @param {?=} c7\n\t     * @param {?=} a8\n\t     * @param {?=} c8\n\t     * @param {?=} a9\n\t     * @param {?=} c9\n\t     * @return {?}\n\t     */\n\t    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n\t        switch (valueCount) {\n\t            case 1:\n\t                return c0 + _toStringWithNull(a1) + c1;\n\t            case 2:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n\t            case 3:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3;\n\t            case 4:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4;\n\t            case 5:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n\t            case 6:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n\t            case 7:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n\t                    c6 + _toStringWithNull(a7) + c7;\n\t            case 8:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n\t                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n\t            case 9:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n\t                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n\t            default:\n\t                throw new Error(\"Does not support more than 9 expressions\");\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} v\n\t     * @return {?}\n\t     */\n\t    function _toStringWithNull(v) {\n\t        return v != null ? v.toString() : '';\n\t    }\n\t    /**\n\t     * @param {?} throwOnChange\n\t     * @param {?} oldValue\n\t     * @param {?} newValue\n\t     * @return {?}\n\t     */\n\t    function checkBinding(throwOnChange, oldValue, newValue) {\n\t        if (throwOnChange) {\n\t            if (!devModeEqual(oldValue, newValue)) {\n\t                throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);\n\t            }\n\t            return false;\n\t        }\n\t        else {\n\t            return !looseIdentical(oldValue, newValue);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} input\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function castByValue(input, value) {\n\t        return (input);\n\t    }\n\t    var /** @type {?} */ EMPTY_ARRAY = [];\n\t    var /** @type {?} */ EMPTY_MAP = {};\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy1(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0 = UNINITIALIZED;\n\t        return function (p0) {\n\t            if (!looseIdentical(v0, p0)) {\n\t                v0 = p0;\n\t                result = fn(p0);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy2(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0 = UNINITIALIZED;\n\t        var /** @type {?} */ v1 = UNINITIALIZED;\n\t        return function (p0, p1) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                result = fn(p0, p1);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy3(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0 = UNINITIALIZED;\n\t        var /** @type {?} */ v1 = UNINITIALIZED;\n\t        var /** @type {?} */ v2 = UNINITIALIZED;\n\t        return function (p0, p1, p2) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                result = fn(p0, p1, p2);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy4(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3;\n\t        v0 = v1 = v2 = v3 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                result = fn(p0, p1, p2, p3);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy5(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4;\n\t        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                result = fn(p0, p1, p2, p3, p4);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy6(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5;\n\t        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4, p5) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                v5 = p5;\n\t                result = fn(p0, p1, p2, p3, p4, p5);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy7(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6;\n\t        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4, p5, p6) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n\t                !looseIdentical(v6, p6)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                v5 = p5;\n\t                v6 = p6;\n\t                result = fn(p0, p1, p2, p3, p4, p5, p6);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy8(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7;\n\t        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4, p5, p6, p7) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n\t                !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                v5 = p5;\n\t                v6 = p6;\n\t                v7 = p7;\n\t                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy9(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8;\n\t        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n\t                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                v5 = p5;\n\t                v6 = p6;\n\t                v7 = p7;\n\t                v8 = p8;\n\t                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy10(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8, /** @type {?} */ v9;\n\t        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n\t                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||\n\t                !looseIdentical(v9, p9)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                v5 = p5;\n\t                v6 = p6;\n\t                v7 = p7;\n\t                v8 = p8;\n\t                v9 = p9;\n\t                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} renderer\n\t     * @param {?} el\n\t     * @param {?} changes\n\t     * @return {?}\n\t     */\n\t    function setBindingDebugInfoForChanges(renderer, el, changes) {\n\t        Object.keys(changes).forEach(function (propName) {\n\t            setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} renderer\n\t     * @param {?} el\n\t     * @param {?} propName\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function setBindingDebugInfo(renderer, el, propName, value) {\n\t        try {\n\t            renderer.setBindingDebugInfo(el, \"ng-reflect-\" + camelCaseToDashCase(propName), value ? value.toString() : null);\n\t        }\n\t        catch (e) {\n\t            renderer.setBindingDebugInfo(el, \"ng-reflect-\" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');\n\t        }\n\t    }\n\t    var /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;\n\t    /**\n\t     * @param {?} input\n\t     * @return {?}\n\t     */\n\t    function camelCaseToDashCase(input) {\n\t        return input.replace(CAMEL_CASE_REGEXP, function () {\n\t            var m = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                m[_i - 0] = arguments[_i];\n\t            }\n\t            return '-' + m[1].toLowerCase();\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} renderer\n\t     * @param {?} parentElement\n\t     * @param {?} name\n\t     * @param {?} attrs\n\t     * @param {?=} debugInfo\n\t     * @return {?}\n\t     */\n\t    function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {\n\t        var /** @type {?} */ el = renderer.createElement(parentElement, name, debugInfo);\n\t        for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n\t            renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));\n\t        }\n\t        return el;\n\t    }\n\t    /**\n\t     * @param {?} renderer\n\t     * @param {?} elementName\n\t     * @param {?} attrs\n\t     * @param {?} rootSelectorOrNode\n\t     * @param {?=} debugInfo\n\t     * @return {?}\n\t     */\n\t    function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {\n\t        var /** @type {?} */ hostElement;\n\t        if (isPresent(rootSelectorOrNode)) {\n\t            hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);\n\t            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n\t                renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));\n\t            }\n\t            renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);\n\t        }\n\t        else {\n\t            hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);\n\t        }\n\t        return hostElement;\n\t    }\n\t    /**\n\t     * @param {?} view\n\t     * @param {?} element\n\t     * @param {?} eventNamesAndTargets\n\t     * @param {?} listener\n\t     * @return {?}\n\t     */\n\t    function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {\n\t        var /** @type {?} */ disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);\n\t        for (var /** @type {?} */ i = 0; i < eventNamesAndTargets.length; i += 2) {\n\t            var /** @type {?} */ eventName = eventNamesAndTargets.get(i);\n\t            var /** @type {?} */ eventTarget = eventNamesAndTargets.get(i + 1);\n\t            var /** @type {?} */ disposable = void 0;\n\t            if (eventTarget) {\n\t                disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + \":\" + eventName));\n\t            }\n\t            else {\n\t                disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));\n\t            }\n\t            disposables.set(i / 2, disposable);\n\t        }\n\t        return disposeInlineArray.bind(null, disposables);\n\t    }\n\t    /**\n\t     * @param {?} disposables\n\t     * @return {?}\n\t     */\n\t    function disposeInlineArray(disposables) {\n\t        for (var /** @type {?} */ i = 0; i < disposables.length; i++) {\n\t            disposables.get(i)();\n\t        }\n\t    }\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function noop() { }\n\t    /**\n\t     * @param {?} length\n\t     * @return {?}\n\t     */\n\t    function createEmptyInlineArray(length) {\n\t        var /** @type {?} */ ctor;\n\t        if (length <= 2) {\n\t            ctor = InlineArray2;\n\t        }\n\t        else if (length <= 4) {\n\t            ctor = InlineArray4;\n\t        }\n\t        else if (length <= 8) {\n\t            ctor = InlineArray8;\n\t        }\n\t        else if (length <= 16) {\n\t            ctor = InlineArray16;\n\t        }\n\t        else {\n\t            ctor = InlineArrayDynamic;\n\t        }\n\t        return new ctor(length);\n\t    }\n\t    var InlineArray0 = (function () {\n\t        function InlineArray0() {\n\t            this.length = 0;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArray0.prototype.get = function (index) { return undefined; };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArray0.prototype.set = function (index, value) { };\n\t        return InlineArray0;\n\t    }());\n\t    var InlineArray2 = (function () {\n\t        /**\n\t         * @param {?} length\n\t         * @param {?=} _v0\n\t         * @param {?=} _v1\n\t         */\n\t        function InlineArray2(length, _v0, _v1) {\n\t            this.length = length;\n\t            this._v0 = _v0;\n\t            this._v1 = _v1;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArray2.prototype.get = function (index) {\n\t            switch (index) {\n\t                case 0:\n\t                    return this._v0;\n\t                case 1:\n\t                    return this._v1;\n\t                default:\n\t                    return undefined;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArray2.prototype.set = function (index, value) {\n\t            switch (index) {\n\t                case 0:\n\t                    this._v0 = value;\n\t                    break;\n\t                case 1:\n\t                    this._v1 = value;\n\t                    break;\n\t            }\n\t        };\n\t        return InlineArray2;\n\t    }());\n\t    var InlineArray4 = (function () {\n\t        /**\n\t         * @param {?} length\n\t         * @param {?=} _v0\n\t         * @param {?=} _v1\n\t         * @param {?=} _v2\n\t         * @param {?=} _v3\n\t         */\n\t        function InlineArray4(length, _v0, _v1, _v2, _v3) {\n\t            this.length = length;\n\t            this._v0 = _v0;\n\t            this._v1 = _v1;\n\t            this._v2 = _v2;\n\t            this._v3 = _v3;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArray4.prototype.get = function (index) {\n\t            switch (index) {\n\t                case 0:\n\t                    return this._v0;\n\t                case 1:\n\t                    return this._v1;\n\t                case 2:\n\t                    return this._v2;\n\t                case 3:\n\t                    return this._v3;\n\t                default:\n\t                    return undefined;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArray4.prototype.set = function (index, value) {\n\t            switch (index) {\n\t                case 0:\n\t                    this._v0 = value;\n\t                    break;\n\t                case 1:\n\t                    this._v1 = value;\n\t                    break;\n\t                case 2:\n\t                    this._v2 = value;\n\t                    break;\n\t                case 3:\n\t                    this._v3 = value;\n\t                    break;\n\t            }\n\t        };\n\t        return InlineArray4;\n\t    }());\n\t    var InlineArray8 = (function () {\n\t        /**\n\t         * @param {?} length\n\t         * @param {?=} _v0\n\t         * @param {?=} _v1\n\t         * @param {?=} _v2\n\t         * @param {?=} _v3\n\t         * @param {?=} _v4\n\t         * @param {?=} _v5\n\t         * @param {?=} _v6\n\t         * @param {?=} _v7\n\t         */\n\t        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {\n\t            this.length = length;\n\t            this._v0 = _v0;\n\t            this._v1 = _v1;\n\t            this._v2 = _v2;\n\t            this._v3 = _v3;\n\t            this._v4 = _v4;\n\t            this._v5 = _v5;\n\t            this._v6 = _v6;\n\t            this._v7 = _v7;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArray8.prototype.get = function (index) {\n\t            switch (index) {\n\t                case 0:\n\t                    return this._v0;\n\t                case 1:\n\t                    return this._v1;\n\t                case 2:\n\t                    return this._v2;\n\t                case 3:\n\t                    return this._v3;\n\t                case 4:\n\t                    return this._v4;\n\t                case 5:\n\t                    return this._v5;\n\t                case 6:\n\t                    return this._v6;\n\t                case 7:\n\t                    return this._v7;\n\t                default:\n\t                    return undefined;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArray8.prototype.set = function (index, value) {\n\t            switch (index) {\n\t                case 0:\n\t                    this._v0 = value;\n\t                    break;\n\t                case 1:\n\t                    this._v1 = value;\n\t                    break;\n\t                case 2:\n\t                    this._v2 = value;\n\t                    break;\n\t                case 3:\n\t                    this._v3 = value;\n\t                    break;\n\t                case 4:\n\t                    this._v4 = value;\n\t                    break;\n\t                case 5:\n\t                    this._v5 = value;\n\t                    break;\n\t                case 6:\n\t                    this._v6 = value;\n\t                    break;\n\t                case 7:\n\t                    this._v7 = value;\n\t                    break;\n\t            }\n\t        };\n\t        return InlineArray8;\n\t    }());\n\t    var InlineArray16 = (function () {\n\t        /**\n\t         * @param {?} length\n\t         * @param {?=} _v0\n\t         * @param {?=} _v1\n\t         * @param {?=} _v2\n\t         * @param {?=} _v3\n\t         * @param {?=} _v4\n\t         * @param {?=} _v5\n\t         * @param {?=} _v6\n\t         * @param {?=} _v7\n\t         * @param {?=} _v8\n\t         * @param {?=} _v9\n\t         * @param {?=} _v10\n\t         * @param {?=} _v11\n\t         * @param {?=} _v12\n\t         * @param {?=} _v13\n\t         * @param {?=} _v14\n\t         * @param {?=} _v15\n\t         */\n\t        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {\n\t            this.length = length;\n\t            this._v0 = _v0;\n\t            this._v1 = _v1;\n\t            this._v2 = _v2;\n\t            this._v3 = _v3;\n\t            this._v4 = _v4;\n\t            this._v5 = _v5;\n\t            this._v6 = _v6;\n\t            this._v7 = _v7;\n\t            this._v8 = _v8;\n\t            this._v9 = _v9;\n\t            this._v10 = _v10;\n\t            this._v11 = _v11;\n\t            this._v12 = _v12;\n\t            this._v13 = _v13;\n\t            this._v14 = _v14;\n\t            this._v15 = _v15;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArray16.prototype.get = function (index) {\n\t            switch (index) {\n\t                case 0:\n\t                    return this._v0;\n\t                case 1:\n\t                    return this._v1;\n\t                case 2:\n\t                    return this._v2;\n\t                case 3:\n\t                    return this._v3;\n\t                case 4:\n\t                    return this._v4;\n\t                case 5:\n\t                    return this._v5;\n\t                case 6:\n\t                    return this._v6;\n\t                case 7:\n\t                    return this._v7;\n\t                case 8:\n\t                    return this._v8;\n\t                case 9:\n\t                    return this._v9;\n\t                case 10:\n\t                    return this._v10;\n\t                case 11:\n\t                    return this._v11;\n\t                case 12:\n\t                    return this._v12;\n\t                case 13:\n\t                    return this._v13;\n\t                case 14:\n\t                    return this._v14;\n\t                case 15:\n\t                    return this._v15;\n\t                default:\n\t                    return undefined;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArray16.prototype.set = function (index, value) {\n\t            switch (index) {\n\t                case 0:\n\t                    this._v0 = value;\n\t                    break;\n\t                case 1:\n\t                    this._v1 = value;\n\t                    break;\n\t                case 2:\n\t                    this._v2 = value;\n\t                    break;\n\t                case 3:\n\t                    this._v3 = value;\n\t                    break;\n\t                case 4:\n\t                    this._v4 = value;\n\t                    break;\n\t                case 5:\n\t                    this._v5 = value;\n\t                    break;\n\t                case 6:\n\t                    this._v6 = value;\n\t                    break;\n\t                case 7:\n\t                    this._v7 = value;\n\t                    break;\n\t                case 8:\n\t                    this._v8 = value;\n\t                    break;\n\t                case 9:\n\t                    this._v9 = value;\n\t                    break;\n\t                case 10:\n\t                    this._v10 = value;\n\t                    break;\n\t                case 11:\n\t                    this._v11 = value;\n\t                    break;\n\t                case 12:\n\t                    this._v12 = value;\n\t                    break;\n\t                case 13:\n\t                    this._v13 = value;\n\t                    break;\n\t                case 14:\n\t                    this._v14 = value;\n\t                    break;\n\t                case 15:\n\t                    this._v15 = value;\n\t                    break;\n\t            }\n\t        };\n\t        return InlineArray16;\n\t    }());\n\t    var InlineArrayDynamic = (function () {\n\t        /**\n\t         * @param {?} length\n\t         * @param {...?} values\n\t         */\n\t        function InlineArrayDynamic(length) {\n\t            var values = [];\n\t            for (var _i = 1; _i < arguments.length; _i++) {\n\t                values[_i - 1] = arguments[_i];\n\t            }\n\t            this.length = length;\n\t            this._values = values;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };\n\t        return InlineArrayDynamic;\n\t    }());\n\t    var /** @type {?} */ EMPTY_INLINE_ARRAY = new InlineArray0();\n\t\n\t\n\t    var view_utils = Object.freeze({\n\t        ViewUtils: ViewUtils,\n\t        createRenderComponentType: createRenderComponentType,\n\t        addToArray: addToArray,\n\t        interpolate: interpolate,\n\t        inlineInterpolate: inlineInterpolate,\n\t        checkBinding: checkBinding,\n\t        castByValue: castByValue,\n\t        EMPTY_ARRAY: EMPTY_ARRAY,\n\t        EMPTY_MAP: EMPTY_MAP,\n\t        pureProxy1: pureProxy1,\n\t        pureProxy2: pureProxy2,\n\t        pureProxy3: pureProxy3,\n\t        pureProxy4: pureProxy4,\n\t        pureProxy5: pureProxy5,\n\t        pureProxy6: pureProxy6,\n\t        pureProxy7: pureProxy7,\n\t        pureProxy8: pureProxy8,\n\t        pureProxy9: pureProxy9,\n\t        pureProxy10: pureProxy10,\n\t        setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,\n\t        setBindingDebugInfo: setBindingDebugInfo,\n\t        createRenderElement: createRenderElement,\n\t        selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,\n\t        subscribeToRenderElement: subscribeToRenderElement,\n\t        noop: noop,\n\t        InlineArray2: InlineArray2,\n\t        InlineArray4: InlineArray4,\n\t        InlineArray8: InlineArray8,\n\t        InlineArray16: InlineArray16,\n\t        InlineArrayDynamic: InlineArrayDynamic,\n\t        EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY\n\t    });\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$5 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n\t     *\n\t     * `ComponentRef` provides access to the Component Instance as well other objects related to this\n\t     * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n\t     * method.\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ComponentRef = (function () {\n\t        function ComponentRef() {\n\t        }\n\t        /**\n\t         * Location of the Host Element of this Component Instance.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.location = function () { };\n\t        /**\n\t         * The injector on which the component instance exists.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.injector = function () { };\n\t        /**\n\t         * The instance of the Component.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.instance = function () { };\n\t        /**\n\t         * The {\\@link ViewRef} of the Host View of this Component instance.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.hostView = function () { };\n\t        /**\n\t         * The {\\@link ChangeDetectorRef} of the Component instance.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.changeDetectorRef = function () { };\n\t        /**\n\t         * The component type.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.componentType = function () { };\n\t        /**\n\t         * Destroys the component instance and all of the data structures associated with it.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.destroy = function () { };\n\t        /**\n\t         * Allows to register a callback that will be called when the component is destroyed.\n\t         * @abstract\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.onDestroy = function (callback) { };\n\t        return ComponentRef;\n\t    }());\n\t    var ComponentRef_ = (function (_super) {\n\t        __extends$5(ComponentRef_, _super);\n\t        /**\n\t         * @param {?} _index\n\t         * @param {?} _parentView\n\t         * @param {?} _nativeElement\n\t         * @param {?} _component\n\t         */\n\t        function ComponentRef_(_index, _parentView, _nativeElement, _component) {\n\t            _super.call(this);\n\t            this._index = _index;\n\t            this._parentView = _parentView;\n\t            this._nativeElement = _nativeElement;\n\t            this._component = _component;\n\t        }\n\t        Object.defineProperty(ComponentRef_.prototype, \"location\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return new ElementRef(this._nativeElement); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parentView.injector(this._index); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ComponentRef_.prototype, \"instance\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._component; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ;\n\t        Object.defineProperty(ComponentRef_.prototype, \"hostView\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parentView.ref; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ;\n\t        Object.defineProperty(ComponentRef_.prototype, \"changeDetectorRef\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parentView.ref; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ;\n\t        Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return (this._component.constructor); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };\n\t        return ComponentRef_;\n\t    }(ComponentRef));\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var ComponentFactory = (function () {\n\t        /**\n\t         * @param {?} selector\n\t         * @param {?} _viewClass\n\t         * @param {?} _componentType\n\t         */\n\t        function ComponentFactory(selector, _viewClass, _componentType) {\n\t            this.selector = selector;\n\t            this._viewClass = _viewClass;\n\t            this._componentType = _componentType;\n\t        }\n\t        Object.defineProperty(ComponentFactory.prototype, \"componentType\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._componentType; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * Creates a new component.\n\t         * @param {?} injector\n\t         * @param {?=} projectableNodes\n\t         * @param {?=} rootSelectorOrNode\n\t         * @return {?}\n\t         */\n\t        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {\n\t            if (projectableNodes === void 0) { projectableNodes = null; }\n\t            if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }\n\t            var /** @type {?} */ vu = injector.get(ViewUtils);\n\t            if (!projectableNodes) {\n\t                projectableNodes = [];\n\t            }\n\t            var /** @type {?} */ hostView = new this._viewClass(vu, null, null, null);\n\t            return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);\n\t        };\n\t        return ComponentFactory;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$8 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var NoComponentFactoryError = (function (_super) {\n\t        __extends$8(NoComponentFactoryError, _super);\n\t        /**\n\t         * @param {?} component\n\t         */\n\t        function NoComponentFactoryError(component) {\n\t            _super.call(this, \"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n\t            this.component = component;\n\t        }\n\t        return NoComponentFactoryError;\n\t    }(BaseError));\n\t    var _NullComponentFactoryResolver = (function () {\n\t        function _NullComponentFactoryResolver() {\n\t        }\n\t        /**\n\t         * @param {?} component\n\t         * @return {?}\n\t         */\n\t        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n\t            throw new NoComponentFactoryError(component);\n\t        };\n\t        return _NullComponentFactoryResolver;\n\t    }());\n\t    /**\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ComponentFactoryResolver = (function () {\n\t        function ComponentFactoryResolver() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} component\n\t         * @return {?}\n\t         */\n\t        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n\t        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n\t        return ComponentFactoryResolver;\n\t    }());\n\t    var CodegenComponentFactoryResolver = (function () {\n\t        /**\n\t         * @param {?} factories\n\t         * @param {?} _parent\n\t         */\n\t        function CodegenComponentFactoryResolver(factories, _parent) {\n\t            this._parent = _parent;\n\t            this._factories = new Map();\n\t            for (var i = 0; i < factories.length; i++) {\n\t                var factory = factories[i];\n\t                this._factories.set(factory.componentType, factory);\n\t            }\n\t        }\n\t        /**\n\t         * @param {?} component\n\t         * @return {?}\n\t         */\n\t        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n\t            var /** @type {?} */ result = this._factories.get(component);\n\t            if (!result) {\n\t                result = this._parent.resolveComponentFactory(component);\n\t            }\n\t            return result;\n\t        };\n\t        return CodegenComponentFactoryResolver;\n\t    }());\n\t\n\t    var /** @type {?} */ trace;\n\t    var /** @type {?} */ events;\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function detectWTF() {\n\t        var /** @type {?} */ wtf = ((global$1) /** TODO #9100 */)['wtf'];\n\t        if (wtf) {\n\t            trace = wtf['trace'];\n\t            if (trace) {\n\t                events = trace['events'];\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t    /**\n\t     * @param {?} signature\n\t     * @param {?=} flags\n\t     * @return {?}\n\t     */\n\t    function createScope(signature, flags) {\n\t        if (flags === void 0) { flags = null; }\n\t        return events.createScope(signature, flags);\n\t    }\n\t    /**\n\t     * @param {?} scope\n\t     * @param {?=} returnValue\n\t     * @return {?}\n\t     */\n\t    function leave(scope, returnValue) {\n\t        trace.leaveScope(scope, returnValue);\n\t        return returnValue;\n\t    }\n\t    /**\n\t     * @param {?} rangeType\n\t     * @param {?} action\n\t     * @return {?}\n\t     */\n\t    function startTimeRange(rangeType, action) {\n\t        return trace.beginTimeRange(rangeType, action);\n\t    }\n\t    /**\n\t     * @param {?} range\n\t     * @return {?}\n\t     */\n\t    function endTimeRange(range) {\n\t        trace.endTimeRange(range);\n\t    }\n\t\n\t    /**\n\t     * True if WTF is enabled.\n\t     */\n\t    var /** @type {?} */ wtfEnabled = detectWTF();\n\t    /**\n\t     * @param {?=} arg0\n\t     * @param {?=} arg1\n\t     * @return {?}\n\t     */\n\t    function noopScope(arg0, arg1) {\n\t        return null;\n\t    }\n\t    /**\n\t     * Create trace scope.\n\t     *\n\t     * Scopes must be strictly nested and are analogous to stack frames, but\n\t     * do not have to follow the stack frames. Instead it is recommended that they follow logical\n\t     * nesting. You may want to use\n\t     * [Event\n\t     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n\t     * as they are defined in WTF.\n\t     *\n\t     * Used to mark scope entry. The return value is used to leave the scope.\n\t     *\n\t     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n\t     *\n\t     *     someMethod() {\n\t     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n\t     *        // DO SOME WORK HERE\n\t     *        return wtfLeave(s, 123); // Return value 123\n\t     *     }\n\t     *\n\t     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n\t     * negatively impact the performance of your application. For this reason we recommend that\n\t     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n\t     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n\t     * exception, will produce incorrect trace, but presence of exception signifies logic error which\n\t     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n\t     * an exception is expected during normal execution while profiling.\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\n\t    /**\n\t     * Used to mark end of Scope.\n\t     *\n\t     * - `scope` to end.\n\t     * - `returnValue` (optional) to be passed to the WTF.\n\t     *\n\t     * Returns the `returnValue for easy chaining.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n\t    /**\n\t     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n\t     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n\t     * enabled.\n\t     *\n\t     *     someMethod() {\n\t     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n\t     *        var future = new Future.delay(5).then((_) {\n\t     *          wtfEndTimeRange(s);\n\t     *        });\n\t     *     }\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n\t    /**\n\t     * Ends a async time range operation.\n\t     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n\t     * enabled.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n\t\n\t    /**\n\t     * The Testability service provides testing hooks that can be accessed from\n\t     * the browser and by services such as Protractor. Each bootstrapped Angular\n\t     * application on the page will have an instance of Testability.\n\t     * \\@experimental\n\t     */\n\t    var Testability = (function () {\n\t        /**\n\t         * @param {?} _ngZone\n\t         */\n\t        function Testability(_ngZone) {\n\t            this._ngZone = _ngZone;\n\t            /** @internal */\n\t            this._pendingCount = 0;\n\t            /** @internal */\n\t            this._isZoneStable = true;\n\t            /**\n\t             * Whether any work was done since the last 'whenStable' callback. This is\n\t             * useful to detect if this could have potentially destabilized another\n\t             * component while it is stabilizing.\n\t             * @internal\n\t             */\n\t            this._didWork = false;\n\t            /** @internal */\n\t            this._callbacks = [];\n\t            this._watchAngularEvents();\n\t        }\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        Testability.prototype._watchAngularEvents = function () {\n\t            var _this = this;\n\t            this._ngZone.onUnstable.subscribe({\n\t                next: function () {\n\t                    _this._didWork = true;\n\t                    _this._isZoneStable = false;\n\t                }\n\t            });\n\t            this._ngZone.runOutsideAngular(function () {\n\t                _this._ngZone.onStable.subscribe({\n\t                    next: function () {\n\t                        NgZone.assertNotInAngularZone();\n\t                        scheduleMicroTask(function () {\n\t                            _this._isZoneStable = true;\n\t                            _this._runCallbacksIfReady();\n\t                        });\n\t                    }\n\t                });\n\t            });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.increasePendingRequestCount = function () {\n\t            this._pendingCount += 1;\n\t            this._didWork = true;\n\t            return this._pendingCount;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.decreasePendingRequestCount = function () {\n\t            this._pendingCount -= 1;\n\t            if (this._pendingCount < 0) {\n\t                throw new Error('pending async requests below zero');\n\t            }\n\t            this._runCallbacksIfReady();\n\t            return this._pendingCount;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.isStable = function () {\n\t            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        Testability.prototype._runCallbacksIfReady = function () {\n\t            var _this = this;\n\t            if (this.isStable()) {\n\t                // Schedules the call backs in a new frame so that it is always async.\n\t                scheduleMicroTask(function () {\n\t                    while (_this._callbacks.length !== 0) {\n\t                        (_this._callbacks.pop())(_this._didWork);\n\t                    }\n\t                    _this._didWork = false;\n\t                });\n\t            }\n\t            else {\n\t                // Not Ready\n\t                this._didWork = true;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.whenStable = function (callback) {\n\t            this._callbacks.push(callback);\n\t            this._runCallbacksIfReady();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n\t        /**\n\t         * @deprecated use findProviders\n\t         * @param {?} using\n\t         * @param {?} provider\n\t         * @param {?} exactMatch\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.findBindings = function (using, provider, exactMatch) {\n\t            // TODO(juliemr): implement.\n\t            return [];\n\t        };\n\t        /**\n\t         * @param {?} using\n\t         * @param {?} provider\n\t         * @param {?} exactMatch\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.findProviders = function (using, provider, exactMatch) {\n\t            // TODO(juliemr): implement.\n\t            return [];\n\t        };\n\t        Testability.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        Testability.ctorParameters = function () { return [\n\t            { type: NgZone, },\n\t        ]; };\n\t        return Testability;\n\t    }());\n\t    /**\n\t     * A global registry of {\\@link Testability} instances for specific elements.\n\t     * \\@experimental\n\t     */\n\t    var TestabilityRegistry = (function () {\n\t        function TestabilityRegistry() {\n\t            /** @internal */\n\t            this._applications = new Map();\n\t            _testabilityGetter.addToWindow(this);\n\t        }\n\t        /**\n\t         * @param {?} token\n\t         * @param {?} testability\n\t         * @return {?}\n\t         */\n\t        TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n\t            this._applications.set(token, testability);\n\t        };\n\t        /**\n\t         * @param {?} elem\n\t         * @return {?}\n\t         */\n\t        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n\t        /**\n\t         * @param {?} elem\n\t         * @param {?=} findInAncestors\n\t         * @return {?}\n\t         */\n\t        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n\t            if (findInAncestors === void 0) { findInAncestors = true; }\n\t            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n\t        };\n\t        TestabilityRegistry.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        TestabilityRegistry.ctorParameters = function () { return []; };\n\t        return TestabilityRegistry;\n\t    }());\n\t    var _NoopGetTestability = (function () {\n\t        function _NoopGetTestability() {\n\t        }\n\t        /**\n\t         * @param {?} registry\n\t         * @return {?}\n\t         */\n\t        _NoopGetTestability.prototype.addToWindow = function (registry) { };\n\t        /**\n\t         * @param {?} registry\n\t         * @param {?} elem\n\t         * @param {?} findInAncestors\n\t         * @return {?}\n\t         */\n\t        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n\t            return null;\n\t        };\n\t        return _NoopGetTestability;\n\t    }());\n\t    /**\n\t     * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n\t     * \\@experimental\n\t     * @param {?} getter\n\t     * @return {?}\n\t     */\n\t    function setTestabilityGetter(getter) {\n\t        _testabilityGetter = getter;\n\t    }\n\t    var /** @type {?} */ _testabilityGetter = new _NoopGetTestability();\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$3 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ _devMode = true;\n\t    var /** @type {?} */ _runModeLocked = false;\n\t    var /** @type {?} */ _platform;\n\t    /**\n\t     * Disable Angular's development mode, which turns off assertions and other\n\t     * checks within the framework.\n\t     *\n\t     * One important assertion this disables verifies that a change detection pass\n\t     * does not result in additional changes to any bindings (also known as\n\t     * unidirectional data flow).\n\t     *\n\t     * \\@stable\n\t     * @return {?}\n\t     */\n\t    function enableProdMode() {\n\t        if (_runModeLocked) {\n\t            throw new Error('Cannot enable prod mode after platform setup.');\n\t        }\n\t        _devMode = false;\n\t    }\n\t    /**\n\t     * Returns whether Angular is in development mode. After called once,\n\t     * the value is locked and won't change any more.\n\t     *\n\t     * By default, this is true, unless a user calls `enableProdMode` before calling this.\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @return {?}\n\t     */\n\t    function isDevMode() {\n\t        _runModeLocked = true;\n\t        return _devMode;\n\t    }\n\t    /**\n\t     * A token for third-party components that can register themselves with NgProbe.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var NgProbeToken = (function () {\n\t        /**\n\t         * @param {?} name\n\t         * @param {?} token\n\t         */\n\t        function NgProbeToken(name, token) {\n\t            this.name = name;\n\t            this.token = token;\n\t        }\n\t        return NgProbeToken;\n\t    }());\n\t    /**\n\t     * Creates a platform.\n\t     * Platforms have to be eagerly created via this function.\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @param {?} injector\n\t     * @return {?}\n\t     */\n\t    function createPlatform(injector) {\n\t        if (_platform && !_platform.destroyed) {\n\t            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n\t        }\n\t        _platform = injector.get(PlatformRef);\n\t        var /** @type {?} */ inits = (injector.get(PLATFORM_INITIALIZER, null));\n\t        if (inits)\n\t            inits.forEach(function (init) { return init(); });\n\t        return _platform;\n\t    }\n\t    /**\n\t     * Creates a factory for a platform\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @param {?} parentPlatformFactory\n\t     * @param {?} name\n\t     * @param {?=} providers\n\t     * @return {?}\n\t     */\n\t    function createPlatformFactory(parentPlatformFactory, name, providers) {\n\t        if (providers === void 0) { providers = []; }\n\t        var /** @type {?} */ marker = new OpaqueToken(\"Platform: \" + name);\n\t        return function (extraProviders) {\n\t            if (extraProviders === void 0) { extraProviders = []; }\n\t            if (!getPlatform()) {\n\t                if (parentPlatformFactory) {\n\t                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n\t                }\n\t                else {\n\t                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));\n\t                }\n\t            }\n\t            return assertPlatform(marker);\n\t        };\n\t    }\n\t    /**\n\t     * Checks that there currently is a platform\n\t     * which contains the given token as a provider.\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @param {?} requiredToken\n\t     * @return {?}\n\t     */\n\t    function assertPlatform(requiredToken) {\n\t        var /** @type {?} */ platform = getPlatform();\n\t        if (!platform) {\n\t            throw new Error('No platform exists!');\n\t        }\n\t        if (!platform.injector.get(requiredToken, null)) {\n\t            throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n\t        }\n\t        return platform;\n\t    }\n\t    /**\n\t     * Destroy the existing platform.\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @return {?}\n\t     */\n\t    function destroyPlatform() {\n\t        if (_platform && !_platform.destroyed) {\n\t            _platform.destroy();\n\t        }\n\t    }\n\t    /**\n\t     * Returns the current platform.\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @return {?}\n\t     */\n\t    function getPlatform() {\n\t        return _platform && !_platform.destroyed ? _platform : null;\n\t    }\n\t    /**\n\t     * The Angular platform is the entry point for Angular on a web page. Each page\n\t     * has exactly one platform, and services (such as reflection) which are common\n\t     * to every Angular application running on the page are bound in its scope.\n\t     *\n\t     * A page's platform is initialized implicitly when {\\@link bootstrap}() is called, or\n\t     * explicitly by calling {\\@link createPlatform}().\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var PlatformRef = (function () {\n\t        function PlatformRef() {\n\t        }\n\t        /**\n\t         * Creates an instance of an `\\@NgModule` for the given platform\n\t         * for offline compilation.\n\t         *\n\t         * ## Simple Example\n\t         *\n\t         * ```typescript\n\t         * my_module.ts:\n\t         *\n\t         * \\@NgModule({\n\t         *   imports: [BrowserModule]\n\t         * })\n\t         * class MyModule {}\n\t         *\n\t         * main.ts:\n\t         * import {MyModuleNgFactory} from './my_module.ngfactory';\n\t         * import {platformBrowser} from '\\@angular/platform-browser';\n\t         *\n\t         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n\t         * ```\n\t         *\n\t         * \\@experimental APIs related to application bootstrap are currently under review.\n\t         * @abstract\n\t         * @param {?} moduleFactory\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };\n\t        /**\n\t         * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n\t         *\n\t         * ## Simple Example\n\t         *\n\t         * ```typescript\n\t         * \\@NgModule({\n\t         *   imports: [BrowserModule]\n\t         * })\n\t         * class MyModule {}\n\t         *\n\t         * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n\t         * ```\n\t         * \\@stable\n\t         * @abstract\n\t         * @param {?} moduleType\n\t         * @param {?=} compilerOptions\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };\n\t        /**\n\t         * Register a listener to be called when the platform is disposed.\n\t         * @abstract\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.onDestroy = function (callback) { };\n\t        /**\n\t         * Retrieve the platform {\\@link Injector}, which is the parent injector for\n\t         * every Angular application on the page and provides singleton providers.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.injector = function () { };\n\t        /**\n\t         * Destroy the Angular platform and all Angular applications on the page.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.destroy = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.destroyed = function () { };\n\t        return PlatformRef;\n\t    }());\n\t    /**\n\t     * @param {?} errorHandler\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    function _callAndReportToErrorHandler(errorHandler, callback) {\n\t        try {\n\t            var /** @type {?} */ result = callback();\n\t            if (isPromise(result)) {\n\t                return result.catch(function (e) {\n\t                    errorHandler.handleError(e);\n\t                    // rethrow as the exception handler might not do it\n\t                    throw e;\n\t                });\n\t            }\n\t            return result;\n\t        }\n\t        catch (e) {\n\t            errorHandler.handleError(e);\n\t            // rethrow as the exception handler might not do it\n\t            throw e;\n\t        }\n\t    }\n\t    var PlatformRef_ = (function (_super) {\n\t        __extends$3(PlatformRef_, _super);\n\t        /**\n\t         * @param {?} _injector\n\t         */\n\t        function PlatformRef_(_injector) {\n\t            _super.call(this);\n\t            this._injector = _injector;\n\t            this._modules = [];\n\t            this._destroyListeners = [];\n\t            this._destroyed = false;\n\t        }\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n\t        Object.defineProperty(PlatformRef_.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._injector; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(PlatformRef_.prototype, \"destroyed\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._destroyed; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype.destroy = function () {\n\t            if (this._destroyed) {\n\t                throw new Error('The platform has already been destroyed!');\n\t            }\n\t            this._modules.slice().forEach(function (module) { return module.destroy(); });\n\t            this._destroyListeners.forEach(function (listener) { return listener(); });\n\t            this._destroyed = true;\n\t        };\n\t        /**\n\t         * @param {?} moduleFactory\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {\n\t            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);\n\t        };\n\t        /**\n\t         * @param {?} moduleFactory\n\t         * @param {?} ngZone\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {\n\t            var _this = this;\n\t            // Note: We need to create the NgZone _before_ we instantiate the module,\n\t            // as instantiating the module creates some providers eagerly.\n\t            // So we create a mini parent injector that just contains the new NgZone and\n\t            // pass that as parent to the NgModuleFactory.\n\t            if (!ngZone)\n\t                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });\n\t            // Attention: Don't use ApplicationRef.run here,\n\t            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n\t            return ngZone.run(function () {\n\t                var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);\n\t                var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));\n\t                var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n\t                if (!exceptionHandler) {\n\t                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n\t                }\n\t                moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });\n\t                ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });\n\t                return _callAndReportToErrorHandler(exceptionHandler, function () {\n\t                    var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);\n\t                    return initStatus.donePromise.then(function () {\n\t                        _this._moduleDoBootstrap(moduleRef);\n\t                        return moduleRef;\n\t                    });\n\t                });\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} moduleType\n\t         * @param {?=} compilerOptions\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n\t            if (compilerOptions === void 0) { compilerOptions = []; }\n\t            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);\n\t        };\n\t        /**\n\t         * @param {?} moduleType\n\t         * @param {?=} compilerOptions\n\t         * @param {?} ngZone\n\t         * @param {?=} componentFactoryCallback\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {\n\t            var _this = this;\n\t            if (compilerOptions === void 0) { compilerOptions = []; }\n\t            var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);\n\t            var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);\n\t            // ugly internal api hack: generate host component factories for all declared components and\n\t            // pass the factories into the callback - this is used by UpdateAdapter to get hold of all\n\t            // factories.\n\t            if (componentFactoryCallback) {\n\t                return compiler.compileModuleAndAllComponentsAsync(moduleType)\n\t                    .then(function (_a) {\n\t                    var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;\n\t                    componentFactoryCallback(componentFactories);\n\t                    return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);\n\t                });\n\t            }\n\t            return compiler.compileModuleAsync(moduleType)\n\t                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });\n\t        };\n\t        /**\n\t         * @param {?} moduleRef\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {\n\t            var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);\n\t            if (moduleRef.bootstrapFactories.length > 0) {\n\t                moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });\n\t            }\n\t            else if (moduleRef.instance.ngDoBootstrap) {\n\t                moduleRef.instance.ngDoBootstrap(appRef);\n\t            }\n\t            else {\n\t                throw new Error((\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \") +\n\t                    \"Please define one of these.\");\n\t            }\n\t            this._modules.push(moduleRef);\n\t        };\n\t        PlatformRef_.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        PlatformRef_.ctorParameters = function () { return [\n\t            { type: Injector, },\n\t        ]; };\n\t        return PlatformRef_;\n\t    }(PlatformRef));\n\t    /**\n\t     * A reference to an Angular application running on a page.\n\t     *\n\t     * For more about Angular applications, see the documentation for {\\@link bootstrap}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ApplicationRef = (function () {\n\t        function ApplicationRef() {\n\t        }\n\t        /**\n\t         * Bootstrap a new component at the root level of the application.\n\t         *\n\t         * ### Bootstrap process\n\t         *\n\t         * When bootstrapping a new root component into an application, Angular mounts the\n\t         * specified application component onto DOM elements identified by the [componentType]'s\n\t         * selector and kicks off automatic change detection to finish initializing the component.\n\t         *\n\t         * ### Example\n\t         * {\\@example core/ts/platform/platform.ts region='longform'}\n\t         * @abstract\n\t         * @param {?} componentFactory\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.bootstrap = function (componentFactory) { };\n\t        /**\n\t         * Invoke this method to explicitly process change detection and its side-effects.\n\t         *\n\t         * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n\t         * further changes are detected. If additional changes are picked up during this second cycle,\n\t         * bindings in the app have side-effects that cannot be resolved in a single change detection\n\t         * pass.\n\t         * In this case, Angular throws an error, since an Angular application can only have one change\n\t         * detection pass during which all change detection must complete.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.tick = function () { };\n\t        /**\n\t         * Get a list of component types registered to this application.\n\t         * This list is populated even before the component is created.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.componentTypes = function () { };\n\t        /**\n\t         * Get a list of components registered to this application.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.components = function () { };\n\t        /**\n\t         * Attaches a view so that it will be dirty checked.\n\t         * The view will be automatically detached when it is destroyed.\n\t         * This will throw if the view is already attached to a ViewContainer.\n\t         * @abstract\n\t         * @param {?} view\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.attachView = function (view) { };\n\t        /**\n\t         * Detaches a view from dirty checking again.\n\t         * @abstract\n\t         * @param {?} view\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.detachView = function (view) { };\n\t        /**\n\t         * Returns the number of attached views.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.viewCount = function () { };\n\t        return ApplicationRef;\n\t    }());\n\t    var ApplicationRef_ = (function (_super) {\n\t        __extends$3(ApplicationRef_, _super);\n\t        /**\n\t         * @param {?} _zone\n\t         * @param {?} _console\n\t         * @param {?} _injector\n\t         * @param {?} _exceptionHandler\n\t         * @param {?} _componentFactoryResolver\n\t         * @param {?} _initStatus\n\t         * @param {?} _testabilityRegistry\n\t         * @param {?} _testability\n\t         */\n\t        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {\n\t            var _this = this;\n\t            _super.call(this);\n\t            this._zone = _zone;\n\t            this._console = _console;\n\t            this._injector = _injector;\n\t            this._exceptionHandler = _exceptionHandler;\n\t            this._componentFactoryResolver = _componentFactoryResolver;\n\t            this._initStatus = _initStatus;\n\t            this._testabilityRegistry = _testabilityRegistry;\n\t            this._testability = _testability;\n\t            this._bootstrapListeners = [];\n\t            this._rootComponents = [];\n\t            this._rootComponentTypes = [];\n\t            this._views = [];\n\t            this._runningTick = false;\n\t            this._enforceNoNewChanges = false;\n\t            this._enforceNoNewChanges = isDevMode();\n\t            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n\t        }\n\t        /**\n\t         * @param {?} viewRef\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype.attachView = function (viewRef) {\n\t            var /** @type {?} */ view = ((viewRef)).internalView;\n\t            this._views.push(view);\n\t            view.attachToAppRef(this);\n\t        };\n\t        /**\n\t         * @param {?} viewRef\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype.detachView = function (viewRef) {\n\t            var /** @type {?} */ view = ((viewRef)).internalView;\n\t            ListWrapper.remove(this._views, view);\n\t            view.detach();\n\t        };\n\t        /**\n\t         * @param {?} componentOrFactory\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {\n\t            var _this = this;\n\t            if (!this._initStatus.done) {\n\t                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n\t            }\n\t            var /** @type {?} */ componentFactory;\n\t            if (componentOrFactory instanceof ComponentFactory) {\n\t                componentFactory = componentOrFactory;\n\t            }\n\t            else {\n\t                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n\t            }\n\t            this._rootComponentTypes.push(componentFactory.componentType);\n\t            var /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);\n\t            compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n\t            var /** @type {?} */ testability = compRef.injector.get(Testability, null);\n\t            if (testability) {\n\t                compRef.injector.get(TestabilityRegistry)\n\t                    .registerApplication(compRef.location.nativeElement, testability);\n\t            }\n\t            this._loadComponent(compRef);\n\t            if (isDevMode()) {\n\t                this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n\t            }\n\t            return compRef;\n\t        };\n\t        /**\n\t         * @param {?} componentRef\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype._loadComponent = function (componentRef) {\n\t            this.attachView(componentRef.hostView);\n\t            this.tick();\n\t            this._rootComponents.push(componentRef);\n\t            // Get the listeners lazily to prevent DI cycles.\n\t            var /** @type {?} */ listeners = (this._injector.get(APP_BOOTSTRAP_LISTENER, [])\n\t                .concat(this._bootstrapListeners));\n\t            listeners.forEach(function (listener) { return listener(componentRef); });\n\t        };\n\t        /**\n\t         * @param {?} componentRef\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype._unloadComponent = function (componentRef) {\n\t            this.detachView(componentRef.hostView);\n\t            ListWrapper.remove(this._rootComponents, componentRef);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype.tick = function () {\n\t            if (this._runningTick) {\n\t                throw new Error('ApplicationRef.tick is called recursively');\n\t            }\n\t            var /** @type {?} */ scope = ApplicationRef_._tickScope();\n\t            try {\n\t                this._runningTick = true;\n\t                this._views.forEach(function (view) { return view.ref.detectChanges(); });\n\t                if (this._enforceNoNewChanges) {\n\t                    this._views.forEach(function (view) { return view.ref.checkNoChanges(); });\n\t                }\n\t            }\n\t            finally {\n\t                this._runningTick = false;\n\t                wtfLeave(scope);\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype.ngOnDestroy = function () {\n\t            // TODO(alxhub): Dispose of the NgZone.\n\t            this._views.slice().forEach(function (view) { return view.destroy(); });\n\t        };\n\t        Object.defineProperty(ApplicationRef_.prototype, \"viewCount\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._views.length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ApplicationRef_.prototype, \"componentTypes\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._rootComponentTypes; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ApplicationRef_.prototype, \"components\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._rootComponents; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /** @internal */\n\t        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');\n\t        ApplicationRef_.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        ApplicationRef_.ctorParameters = function () { return [\n\t            { type: NgZone, },\n\t            { type: Console, },\n\t            { type: Injector, },\n\t            { type: ErrorHandler, },\n\t            { type: ComponentFactoryResolver, },\n\t            { type: ApplicationInitStatus, },\n\t            { type: TestabilityRegistry, decorators: [{ type: Optional },] },\n\t            { type: Testability, decorators: [{ type: Optional },] },\n\t        ]; };\n\t        return ApplicationRef_;\n\t    }(ApplicationRef));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$9 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n\t     *\n\t     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n\t     * NgModule Instance.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var NgModuleRef = (function () {\n\t        function NgModuleRef() {\n\t        }\n\t        /**\n\t         * The injector that contains all of the providers of the NgModule.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleRef.prototype.injector = function () { };\n\t        /**\n\t         * The ComponentFactoryResolver to get hold of the ComponentFactories\n\t         * declared in the `entryComponents` property of the module.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleRef.prototype.componentFactoryResolver = function () { };\n\t        /**\n\t         * The NgModule instance.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleRef.prototype.instance = function () { };\n\t        /**\n\t         * Destroys the module instance and all of the data structures associated with it.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleRef.prototype.destroy = function () { };\n\t        /**\n\t         * Allows to register a callback that will be called when the module is destroyed.\n\t         * @abstract\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        NgModuleRef.prototype.onDestroy = function (callback) { };\n\t        return NgModuleRef;\n\t    }());\n\t    /**\n\t     * \\@experimental\n\t     */\n\t    var NgModuleFactory = (function () {\n\t        /**\n\t         * @param {?} _injectorClass\n\t         * @param {?} _moduleType\n\t         */\n\t        function NgModuleFactory(_injectorClass, _moduleType) {\n\t            this._injectorClass = _injectorClass;\n\t            this._moduleType = _moduleType;\n\t        }\n\t        Object.defineProperty(NgModuleFactory.prototype, \"moduleType\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._moduleType; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} parentInjector\n\t         * @return {?}\n\t         */\n\t        NgModuleFactory.prototype.create = function (parentInjector) {\n\t            if (!parentInjector) {\n\t                parentInjector = Injector.NULL;\n\t            }\n\t            var /** @type {?} */ instance = new this._injectorClass(parentInjector);\n\t            instance.create();\n\t            return instance;\n\t        };\n\t        return NgModuleFactory;\n\t    }());\n\t    var /** @type {?} */ _UNDEFINED = new Object();\n\t    /**\n\t     * @abstract\n\t     */\n\t    var NgModuleInjector = (function (_super) {\n\t        __extends$9(NgModuleInjector, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} factories\n\t         * @param {?} bootstrapFactories\n\t         */\n\t        function NgModuleInjector(parent, factories, bootstrapFactories) {\n\t            _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));\n\t            this.parent = parent;\n\t            this.bootstrapFactories = bootstrapFactories;\n\t            this._destroyListeners = [];\n\t            this._destroyed = false;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.createInternal = function () { };\n\t        /**\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.get = function (token, notFoundValue) {\n\t            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n\t            if (token === Injector || token === ComponentFactoryResolver) {\n\t                return this;\n\t            }\n\t            var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);\n\t            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;\n\t        };\n\t        /**\n\t         * @abstract\n\t         * @param {?} token\n\t         * @param {?} notFoundValue\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };\n\t        Object.defineProperty(NgModuleInjector.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModuleInjector.prototype, \"componentFactoryResolver\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.destroy = function () {\n\t            if (this._destroyed) {\n\t                throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n\t            }\n\t            this._destroyed = true;\n\t            this.destroyInternal();\n\t            this._destroyListeners.forEach(function (listener) { return listener(); });\n\t        };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.destroyInternal = function () { };\n\t        return NgModuleInjector;\n\t    }(CodegenComponentFactoryResolver));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * Used to load ng module factories.\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var NgModuleFactoryLoader = (function () {\n\t        function NgModuleFactoryLoader() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        NgModuleFactoryLoader.prototype.load = function (path) { };\n\t        return NgModuleFactoryLoader;\n\t    }());\n\t    var /** @type {?} */ moduleFactories = new Map();\n\t    /**\n\t     * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n\t     * \\@experimental\n\t     * @param {?} id\n\t     * @param {?} factory\n\t     * @return {?}\n\t     */\n\t    function registerModuleFactory(id, factory) {\n\t        var /** @type {?} */ existing = moduleFactories.get(id);\n\t        if (existing) {\n\t            throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n\t        }\n\t        moduleFactories.set(id, factory);\n\t    }\n\t    /**\n\t     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n\t     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n\t     * cannot be found.\n\t     * \\@experimental\n\t     * @param {?} id\n\t     * @return {?}\n\t     */\n\t    function getModuleFactory(id) {\n\t        var /** @type {?} */ factory = moduleFactories.get(id);\n\t        if (!factory)\n\t            throw new Error(\"No module with ID \" + id + \" loaded\");\n\t        return factory;\n\t    }\n\t\n\t    /**\n\t     * An unmodifiable list of items that Angular keeps up to date when the state\n\t     * of the application changes.\n\t     *\n\t     * The type of object that {\\@link Query} and {\\@link ViewQueryMetadata} provide.\n\t     *\n\t     * Implements an iterable interface, therefore it can be used in both ES6\n\t     * javascript `for (var i of items)` loops as well as in Angular templates with\n\t     * `*ngFor=\"let i of myList\"`.\n\t     *\n\t     * Changes can be observed by subscribing to the changes `Observable`.\n\t     *\n\t     * NOTE: In the future this class will implement an `Observable` interface.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n\t     * ```typescript\n\t     * \\@Component({...})\n\t     * class Container {\n\t     *   \\@ViewChildren(Item) items:QueryList<Item>;\n\t     * }\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var QueryList = (function () {\n\t        function QueryList() {\n\t            this._dirty = true;\n\t            this._results = [];\n\t            this._emitter = new EventEmitter();\n\t        }\n\t        Object.defineProperty(QueryList.prototype, \"changes\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._emitter; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(QueryList.prototype, \"length\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._results.length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(QueryList.prototype, \"first\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._results[0]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(QueryList.prototype, \"last\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._results[this.length - 1]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * See\n\t         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n\t        /**\n\t         * See\n\t         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.filter = function (fn) {\n\t            return this._results.filter(fn);\n\t        };\n\t        /**\n\t         * See\n\t         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.find = function (fn) { return this._results.find(fn); };\n\t        /**\n\t         * See\n\t         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n\t         * @param {?} fn\n\t         * @param {?} init\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.reduce = function (fn, init) {\n\t            return this._results.reduce(fn, init);\n\t        };\n\t        /**\n\t         * See\n\t         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n\t        /**\n\t         * See\n\t         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.some = function (fn) {\n\t            return this._results.some(fn);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.toArray = function () { return this._results.slice(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.toString = function () { return this._results.toString(); };\n\t        /**\n\t         * @param {?} res\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.reset = function (res) {\n\t            this._results = ListWrapper.flatten(res);\n\t            this._dirty = false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };\n\t        /**\n\t         * internal\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.setDirty = function () { this._dirty = true; };\n\t        Object.defineProperty(QueryList.prototype, \"dirty\", {\n\t            /**\n\t             * internal\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._dirty; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return QueryList;\n\t    }());\n\t\n\t    var /** @type {?} */ _SEPARATOR = '#';\n\t    var /** @type {?} */ FACTORY_CLASS_SUFFIX = 'NgFactory';\n\t    /**\n\t     * Configuration for SystemJsNgModuleLoader.\n\t     * token.\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var SystemJsNgModuleLoaderConfig = (function () {\n\t        function SystemJsNgModuleLoaderConfig() {\n\t        }\n\t        return SystemJsNgModuleLoaderConfig;\n\t    }());\n\t    var /** @type {?} */ DEFAULT_CONFIG = {\n\t        factoryPathPrefix: '',\n\t        factoryPathSuffix: '.ngfactory',\n\t    };\n\t    /**\n\t     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n\t     * \\@experimental\n\t     */\n\t    var SystemJsNgModuleLoader = (function () {\n\t        /**\n\t         * @param {?} _compiler\n\t         * @param {?=} config\n\t         */\n\t        function SystemJsNgModuleLoader(_compiler, config) {\n\t            this._compiler = _compiler;\n\t            this._config = config || DEFAULT_CONFIG;\n\t        }\n\t        /**\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        SystemJsNgModuleLoader.prototype.load = function (path) {\n\t            var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\n\t            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n\t        };\n\t        /**\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\n\t            var _this = this;\n\t            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n\t            if (exportName === undefined) {\n\t                exportName = 'default';\n\t            }\n\t            return System.import(module)\n\t                .then(function (module) { return module[exportName]; })\n\t                .then(function (type) { return checkNotEmpty(type, module, exportName); })\n\t                .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n\t        };\n\t        /**\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\n\t            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n\t            var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n\t            if (exportName === undefined) {\n\t                exportName = 'default';\n\t                factoryClassSuffix = '';\n\t            }\n\t            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n\t                .then(function (module) { return module[exportName + factoryClassSuffix]; })\n\t                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n\t        };\n\t        SystemJsNgModuleLoader.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        SystemJsNgModuleLoader.ctorParameters = function () { return [\n\t            { type: Compiler, },\n\t            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\n\t        ]; };\n\t        return SystemJsNgModuleLoader;\n\t    }());\n\t    /**\n\t     * @param {?} value\n\t     * @param {?} modulePath\n\t     * @param {?} exportName\n\t     * @return {?}\n\t     */\n\t    function checkNotEmpty(value, modulePath, exportName) {\n\t        if (!value) {\n\t            throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n\t        }\n\t        return value;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$10 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Represents an Embedded Template that can be used to instantiate Embedded Views.\n\t     *\n\t     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or\n\t     * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the\n\t     * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the\n\t     * `TemplateRef` from a Component or a Directive via {\\@link Query}.\n\t     *\n\t     * To instantiate Embedded Views based on a Template, use\n\t     * {\\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n\t     * View Container.\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var TemplateRef = (function () {\n\t        function TemplateRef() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        TemplateRef.prototype.elementRef = function () { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} context\n\t         * @return {?}\n\t         */\n\t        TemplateRef.prototype.createEmbeddedView = function (context) { };\n\t        return TemplateRef;\n\t    }());\n\t    var TemplateRef_ = (function (_super) {\n\t        __extends$10(TemplateRef_, _super);\n\t        /**\n\t         * @param {?} _parentView\n\t         * @param {?} _nodeIndex\n\t         * @param {?} _nativeElement\n\t         */\n\t        function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {\n\t            _super.call(this);\n\t            this._parentView = _parentView;\n\t            this._nodeIndex = _nodeIndex;\n\t            this._nativeElement = _nativeElement;\n\t        }\n\t        /**\n\t         * @param {?} context\n\t         * @return {?}\n\t         */\n\t        TemplateRef_.prototype.createEmbeddedView = function (context) {\n\t            var /** @type {?} */ view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);\n\t            view.create(context || ({}));\n\t            return view.ref;\n\t        };\n\t        Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return new ElementRef(this._nativeElement); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return TemplateRef_;\n\t    }(TemplateRef));\n\t\n\t    /**\n\t     * Represents a container where one or more Views can be attached.\n\t     *\n\t     * The container can contain two kinds of Views. Host Views, created by instantiating a\n\t     * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\n\t     * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\n\t     *\n\t     * The location of the View Container within the containing View is specified by the Anchor\n\t     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n\t     * have a single View Container.\n\t     *\n\t     * Root elements of Views attached to this container become siblings of the Anchor Element in\n\t     * the Rendered View.\n\t     *\n\t     * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\n\t     * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ViewContainerRef = (function () {\n\t        function ViewContainerRef() {\n\t        }\n\t        /**\n\t         * Anchor element that specifies the location of this container in the containing View.\n\t         * <!-- TODO: rename to anchorElement -->\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.element = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.injector = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.parentInjector = function () { };\n\t        /**\n\t         * Destroys all Views in this container.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.clear = function () { };\n\t        /**\n\t         * Returns the {\\@link ViewRef} for the View located in this container at the specified index.\n\t         * @abstract\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.get = function (index) { };\n\t        /**\n\t         * Returns the number of Views currently attached to this container.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.length = function () { };\n\t        /**\n\t         * Instantiates an Embedded View based on the {\\@link TemplateRef `templateRef`} and inserts it\n\t         * into this container at the specified `index`.\n\t         *\n\t         * If `index` is not specified, the new View will be inserted as the last View in the container.\n\t         *\n\t         * Returns the {\\@link ViewRef} for the newly created View.\n\t         * @abstract\n\t         * @param {?} templateRef\n\t         * @param {?=} context\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };\n\t        /**\n\t         * Instantiates a single {\\@link Component} and inserts its Host View into this container at the\n\t         * specified `index`.\n\t         *\n\t         * The component is instantiated using its {\\@link ComponentFactory} which can be\n\t         * obtained via {\\@link ComponentFactoryResolver#resolveComponentFactory}.\n\t         *\n\t         * If `index` is not specified, the new View will be inserted as the last View in the container.\n\t         *\n\t         * You can optionally specify the {\\@link Injector} that will be used as parent for the Component.\n\t         *\n\t         * Returns the {\\@link ComponentRef} of the Host View created for the newly instantiated Component.\n\t         * @abstract\n\t         * @param {?} componentFactory\n\t         * @param {?=} index\n\t         * @param {?=} injector\n\t         * @param {?=} projectableNodes\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { };\n\t        /**\n\t         * Inserts a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n\t         *\n\t         * If `index` is not specified, the new View will be inserted as the last View in the container.\n\t         *\n\t         * Returns the inserted {\\@link ViewRef}.\n\t         * @abstract\n\t         * @param {?} viewRef\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.insert = function (viewRef, index) { };\n\t        /**\n\t         * Moves a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n\t         *\n\t         * Returns the inserted {\\@link ViewRef}.\n\t         * @abstract\n\t         * @param {?} viewRef\n\t         * @param {?} currentIndex\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };\n\t        /**\n\t         * Returns the index of the View, specified via {\\@link ViewRef}, within the current container or\n\t         * `-1` if this container doesn't contain the View.\n\t         * @abstract\n\t         * @param {?} viewRef\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.indexOf = function (viewRef) { };\n\t        /**\n\t         * Destroys a View attached to this container at the specified `index`.\n\t         *\n\t         * If `index` is not specified, the last View in the container will be removed.\n\t         * @abstract\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.remove = function (index) { };\n\t        /**\n\t         * Use along with {\\@link #insert} to move a View within the current container.\n\t         *\n\t         * If the `index` param is omitted, the last {\\@link ViewRef} is detached.\n\t         * @abstract\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.detach = function (index) { };\n\t        return ViewContainerRef;\n\t    }());\n\t    var ViewContainerRef_ = (function () {\n\t        /**\n\t         * @param {?} _element\n\t         */\n\t        function ViewContainerRef_(_element) {\n\t            this._element = _element;\n\t            /** @internal */\n\t            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');\n\t            /** @internal */\n\t            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');\n\t            /** @internal */\n\t            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');\n\t            /** @internal */\n\t            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };\n\t        Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ views = this._element.nestedViews;\n\t                return isPresent(views) ? views.length : 0;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._element.elementRef; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._element.injector; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._element.parentInjector; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} templateRef\n\t         * @param {?=} context\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n\t            if (context === void 0) { context = null; }\n\t            if (index === void 0) { index = -1; }\n\t            var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context);\n\t            this.insert(viewRef, index);\n\t            return viewRef;\n\t        };\n\t        /**\n\t         * @param {?} componentFactory\n\t         * @param {?=} index\n\t         * @param {?=} injector\n\t         * @param {?=} projectableNodes\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {\n\t            if (index === void 0) { index = -1; }\n\t            if (injector === void 0) { injector = null; }\n\t            if (projectableNodes === void 0) { projectableNodes = null; }\n\t            var /** @type {?} */ s = this._createComponentInContainerScope();\n\t            var /** @type {?} */ contextInjector = injector || this._element.parentInjector;\n\t            var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);\n\t            this.insert(componentRef.hostView, index);\n\t            return wtfLeave(s, componentRef);\n\t        };\n\t        /**\n\t         * @param {?} viewRef\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.insert = function (viewRef, index) {\n\t            if (index === void 0) { index = -1; }\n\t            var /** @type {?} */ s = this._insertScope();\n\t            if (index == -1)\n\t                index = this.length;\n\t            var /** @type {?} */ viewRef_ = (viewRef);\n\t            this._element.attachView(viewRef_.internalView, index);\n\t            return wtfLeave(s, viewRef_);\n\t        };\n\t        /**\n\t         * @param {?} viewRef\n\t         * @param {?} currentIndex\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n\t            var /** @type {?} */ s = this._insertScope();\n\t            if (currentIndex == -1)\n\t                return;\n\t            var /** @type {?} */ viewRef_ = (viewRef);\n\t            this._element.moveView(viewRef_.internalView, currentIndex);\n\t            return wtfLeave(s, viewRef_);\n\t        };\n\t        /**\n\t         * @param {?} viewRef\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.indexOf = function (viewRef) {\n\t            return this.length ? this._element.nestedViews.indexOf(((viewRef)).internalView) :\n\t                -1;\n\t        };\n\t        /**\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.remove = function (index) {\n\t            if (index === void 0) { index = -1; }\n\t            var /** @type {?} */ s = this._removeScope();\n\t            if (index == -1)\n\t                index = this.length - 1;\n\t            var /** @type {?} */ view = this._element.detachView(index);\n\t            view.destroy();\n\t            // view is intentionally not returned to the client.\n\t            wtfLeave(s);\n\t        };\n\t        /**\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.detach = function (index) {\n\t            if (index === void 0) { index = -1; }\n\t            var /** @type {?} */ s = this._detachScope();\n\t            if (index == -1)\n\t                index = this.length - 1;\n\t            var /** @type {?} */ view = this._element.detachView(index);\n\t            return wtfLeave(s, view.ref);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.clear = function () {\n\t            for (var /** @type {?} */ i = this.length - 1; i >= 0; i--) {\n\t                this.remove(i);\n\t            }\n\t        };\n\t        return ViewContainerRef_;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$11 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ViewRef = (function (_super) {\n\t        __extends$11(ViewRef, _super);\n\t        function ViewRef() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        /**\n\t         * Destroys the view and all of the data structures associated with it.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewRef.prototype.destroy = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewRef.prototype.destroyed = function () { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        ViewRef.prototype.onDestroy = function (callback) { };\n\t        return ViewRef;\n\t    }(ChangeDetectorRef));\n\t    /**\n\t     * Represents an Angular View.\n\t     *\n\t     * <!-- TODO: move the next two paragraphs to the dev guide -->\n\t     * A View is a fundamental building block of the application UI. It is the smallest grouping of\n\t     * Elements which are created and destroyed together.\n\t     *\n\t     * Properties of elements in a View can change, but the structure (number and order) of elements in\n\t     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n\t     * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n\t     * <!-- /TODO -->\n\t     *\n\t     * ### Example\n\t     *\n\t     * Given this template...\n\t     *\n\t     * ```\n\t     * Count: {{items.length}}\n\t     * <ul>\n\t     *   <li *ngFor=\"let  item of items\">{{item}}</li>\n\t     * </ul>\n\t     * ```\n\t     *\n\t     * We have two {\\@link TemplateRef}s:\n\t     *\n\t     * Outer {\\@link TemplateRef}:\n\t     * ```\n\t     * Count: {{items.length}}\n\t     * <ul>\n\t     *   <template ngFor let-item [ngForOf]=\"items\"></template>\n\t     * </ul>\n\t     * ```\n\t     *\n\t     * Inner {\\@link TemplateRef}:\n\t     * ```\n\t     *   <li>{{item}}</li>\n\t     * ```\n\t     *\n\t     * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n\t     *\n\t     * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n\t     *\n\t     * ```\n\t     * <!-- ViewRef: outer-0 -->\n\t     * Count: 2\n\t     * <ul>\n\t     *   <template view-container-ref></template>\n\t     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n\t     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n\t     * </ul>\n\t     * <!-- /ViewRef: outer-0 -->\n\t     * ```\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var EmbeddedViewRef = (function (_super) {\n\t        __extends$11(EmbeddedViewRef, _super);\n\t        function EmbeddedViewRef() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        EmbeddedViewRef.prototype.context = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        EmbeddedViewRef.prototype.rootNodes = function () { };\n\t        return EmbeddedViewRef;\n\t    }(ViewRef));\n\t    var ViewRef_ = (function () {\n\t        /**\n\t         * @param {?} _view\n\t         * @param {?} animationQueue\n\t         */\n\t        function ViewRef_(_view, animationQueue) {\n\t            this._view = _view;\n\t            this.animationQueue = animationQueue;\n\t            this._view = _view;\n\t            this._originalMode = this._view.cdMode;\n\t        }\n\t        Object.defineProperty(ViewRef_.prototype, \"internalView\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view.flatRootNodes; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewRef_.prototype, \"context\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view.context; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view.destroyed; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.detectChanges = function () {\n\t            this._view.detectChanges(false);\n\t            this.animationQueue.flush();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.reattach = function () {\n\t            this._view.cdMode = this._originalMode;\n\t            this.markForCheck();\n\t        };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.onDestroy = function (callback) {\n\t            if (!this._view.disposables) {\n\t                this._view.disposables = [];\n\t            }\n\t            this._view.disposables.push(callback);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy(); };\n\t        return ViewRef_;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$12 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var EventListener = (function () {\n\t        /**\n\t         * @param {?} name\n\t         * @param {?} callback\n\t         */\n\t        function EventListener(name, callback) {\n\t            this.name = name;\n\t            this.callback = callback;\n\t        }\n\t        ;\n\t        return EventListener;\n\t    }());\n\t    /**\n\t     * \\@experimental All debugging apis are currently experimental.\n\t     */\n\t    var DebugNode = (function () {\n\t        /**\n\t         * @param {?} nativeNode\n\t         * @param {?} parent\n\t         * @param {?} _debugInfo\n\t         */\n\t        function DebugNode(nativeNode, parent, _debugInfo) {\n\t            this._debugInfo = _debugInfo;\n\t            this.nativeNode = nativeNode;\n\t            if (parent && parent instanceof DebugElement) {\n\t                parent.addChild(this);\n\t            }\n\t            else {\n\t                this.parent = null;\n\t            }\n\t            this.listeners = [];\n\t        }\n\t        Object.defineProperty(DebugNode.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._debugInfo ? this._debugInfo.injector : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._debugInfo ? this._debugInfo.component : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugNode.prototype, \"context\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._debugInfo ? this._debugInfo.context : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugNode.prototype, \"references\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._debugInfo ? this._debugInfo.references : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugNode.prototype, \"source\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._debugInfo ? this._debugInfo.source : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return DebugNode;\n\t    }());\n\t    /**\n\t     * \\@experimental All debugging apis are currently experimental.\n\t     */\n\t    var DebugElement = (function (_super) {\n\t        __extends$12(DebugElement, _super);\n\t        /**\n\t         * @param {?} nativeNode\n\t         * @param {?} parent\n\t         * @param {?} _debugInfo\n\t         */\n\t        function DebugElement(nativeNode, parent, _debugInfo) {\n\t            _super.call(this, nativeNode, parent, _debugInfo);\n\t            this.properties = {};\n\t            this.attributes = {};\n\t            this.classes = {};\n\t            this.styles = {};\n\t            this.childNodes = [];\n\t            this.nativeElement = nativeNode;\n\t        }\n\t        /**\n\t         * @param {?} child\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.addChild = function (child) {\n\t            if (child) {\n\t                this.childNodes.push(child);\n\t                child.parent = this;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} child\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.removeChild = function (child) {\n\t            var /** @type {?} */ childIndex = this.childNodes.indexOf(child);\n\t            if (childIndex !== -1) {\n\t                child.parent = null;\n\t                this.childNodes.splice(childIndex, 1);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} child\n\t         * @param {?} newChildren\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {\n\t            var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\n\t            if (siblingIndex !== -1) {\n\t                var /** @type {?} */ previousChildren = this.childNodes.slice(0, siblingIndex + 1);\n\t                var /** @type {?} */ nextChildren = this.childNodes.slice(siblingIndex + 1);\n\t                this.childNodes = previousChildren.concat(newChildren, nextChildren);\n\t                for (var /** @type {?} */ i = 0; i < newChildren.length; ++i) {\n\t                    var /** @type {?} */ newChild = newChildren[i];\n\t                    if (newChild.parent) {\n\t                        newChild.parent.removeChild(newChild);\n\t                    }\n\t                    newChild.parent = this;\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} predicate\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.query = function (predicate) {\n\t            var /** @type {?} */ results = this.queryAll(predicate);\n\t            return results[0] || null;\n\t        };\n\t        /**\n\t         * @param {?} predicate\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.queryAll = function (predicate) {\n\t            var /** @type {?} */ matches = [];\n\t            _queryElementChildren(this, predicate, matches);\n\t            return matches;\n\t        };\n\t        /**\n\t         * @param {?} predicate\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.queryAllNodes = function (predicate) {\n\t            var /** @type {?} */ matches = [];\n\t            _queryNodeChildren(this, predicate, matches);\n\t            return matches;\n\t        };\n\t        Object.defineProperty(DebugElement.prototype, \"children\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} eventName\n\t         * @param {?} eventObj\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {\n\t            this.listeners.forEach(function (listener) {\n\t                if (listener.name == eventName) {\n\t                    listener.callback(eventObj);\n\t                }\n\t            });\n\t        };\n\t        return DebugElement;\n\t    }(DebugNode));\n\t    /**\n\t     * \\@experimental\n\t     * @param {?} debugEls\n\t     * @return {?}\n\t     */\n\t    function asNativeElements(debugEls) {\n\t        return debugEls.map(function (el) { return el.nativeElement; });\n\t    }\n\t    /**\n\t     * @param {?} element\n\t     * @param {?} predicate\n\t     * @param {?} matches\n\t     * @return {?}\n\t     */\n\t    function _queryElementChildren(element, predicate, matches) {\n\t        element.childNodes.forEach(function (node) {\n\t            if (node instanceof DebugElement) {\n\t                if (predicate(node)) {\n\t                    matches.push(node);\n\t                }\n\t                _queryElementChildren(node, predicate, matches);\n\t            }\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} parentNode\n\t     * @param {?} predicate\n\t     * @param {?} matches\n\t     * @return {?}\n\t     */\n\t    function _queryNodeChildren(parentNode, predicate, matches) {\n\t        if (parentNode instanceof DebugElement) {\n\t            parentNode.childNodes.forEach(function (node) {\n\t                if (predicate(node)) {\n\t                    matches.push(node);\n\t                }\n\t                if (node instanceof DebugElement) {\n\t                    _queryNodeChildren(node, predicate, matches);\n\t                }\n\t            });\n\t        }\n\t    }\n\t    // Need to keep the nodes in a global Map so that multiple angular apps are supported.\n\t    var /** @type {?} */ _nativeNodeToDebugNode = new Map();\n\t    /**\n\t     * \\@experimental\n\t     * @param {?} nativeNode\n\t     * @return {?}\n\t     */\n\t    function getDebugNode(nativeNode) {\n\t        return _nativeNodeToDebugNode.get(nativeNode);\n\t    }\n\t    /**\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    function indexDebugNode(node) {\n\t        _nativeNodeToDebugNode.set(node.nativeNode, node);\n\t    }\n\t    /**\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    function removeDebugNodeFromIndex(node) {\n\t        _nativeNodeToDebugNode.delete(node.nativeNode);\n\t    }\n\t\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _reflector() {\n\t        return reflector;\n\t    }\n\t    var /** @type {?} */ _CORE_PLATFORM_PROVIDERS = [\n\t        PlatformRef_,\n\t        { provide: PlatformRef, useExisting: PlatformRef_ },\n\t        { provide: Reflector, useFactory: _reflector, deps: [] },\n\t        { provide: ReflectorReader, useExisting: Reflector },\n\t        TestabilityRegistry,\n\t        Console,\n\t    ];\n\t    /**\n\t     * This platform has to be included in any other platform\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\t\n\t    /**\n\t     * @experimental i18n support is experimental.\n\t     */\n\t    var /** @type {?} */ LOCALE_ID = new OpaqueToken('LocaleId');\n\t    /**\n\t     * @experimental i18n support is experimental.\n\t     */\n\t    var /** @type {?} */ TRANSLATIONS = new OpaqueToken('Translations');\n\t    /**\n\t     * @experimental i18n support is experimental.\n\t     */\n\t    var /** @type {?} */ TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');\n\t\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _iterableDiffersFactory() {\n\t        return defaultIterableDiffers;\n\t    }\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _keyValueDiffersFactory() {\n\t        return defaultKeyValueDiffers;\n\t    }\n\t    /**\n\t     * @param {?=} locale\n\t     * @return {?}\n\t     */\n\t    function _localeFactory(locale) {\n\t        return locale || 'en-US';\n\t    }\n\t    /**\n\t     * This module includes the providers of \\@angular/core that are needed\n\t     * to bootstrap components via `ApplicationRef`.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var ApplicationModule = (function () {\n\t        function ApplicationModule() {\n\t        }\n\t        ApplicationModule.decorators = [\n\t            { type: NgModule, args: [{\n\t                        providers: [\n\t                            ApplicationRef_,\n\t                            { provide: ApplicationRef, useExisting: ApplicationRef_ },\n\t                            ApplicationInitStatus,\n\t                            Compiler,\n\t                            APP_ID_RANDOM_PROVIDER,\n\t                            ViewUtils,\n\t                            AnimationQueue,\n\t                            { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\n\t                            { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\n\t                            {\n\t                                provide: LOCALE_ID,\n\t                                useFactory: _localeFactory,\n\t                                deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n\t                            },\n\t                        ]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        ApplicationModule.ctorParameters = function () { return []; };\n\t        return ApplicationModule;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var /** @type {?} */ FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean\n\t    var /** @type {?} */ ANY_STATE = '*';\n\t    var /** @type {?} */ DEFAULT_STATE = '*';\n\t    var /** @type {?} */ EMPTY_STATE = 'void';\n\t\n\t    var AnimationGroupPlayer = (function () {\n\t        /**\n\t         * @param {?} _players\n\t         */\n\t        function AnimationGroupPlayer(_players) {\n\t            var _this = this;\n\t            this._players = _players;\n\t            this._onDoneFns = [];\n\t            this._onStartFns = [];\n\t            this._finished = false;\n\t            this._started = false;\n\t            this._destroyed = false;\n\t            this.parentPlayer = null;\n\t            var count = 0;\n\t            var total = this._players.length;\n\t            if (total == 0) {\n\t                scheduleMicroTask(function () { return _this._onFinish(); });\n\t            }\n\t            else {\n\t                this._players.forEach(function (player) {\n\t                    player.parentPlayer = _this;\n\t                    player.onDone(function () {\n\t                        if (++count >= total) {\n\t                            _this._onFinish();\n\t                        }\n\t                    });\n\t                });\n\t            }\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype._onFinish = function () {\n\t            if (!this._finished) {\n\t                this._finished = true;\n\t                this._onDoneFns.forEach(function (fn) { return fn(); });\n\t                this._onDoneFns = [];\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.play = function () {\n\t            if (!isPresent(this.parentPlayer)) {\n\t                this.init();\n\t            }\n\t            if (!this.hasStarted()) {\n\t                this._onStartFns.forEach(function (fn) { return fn(); });\n\t                this._onStartFns = [];\n\t                this._started = true;\n\t            }\n\t            this._players.forEach(function (player) { return player.play(); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.finish = function () {\n\t            this._onFinish();\n\t            this._players.forEach(function (player) { return player.finish(); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.destroy = function () {\n\t            if (!this._destroyed) {\n\t                this._onFinish();\n\t                this._players.forEach(function (player) { return player.destroy(); });\n\t                this._destroyed = true;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.reset = function () {\n\t            this._players.forEach(function (player) { return player.reset(); });\n\t            this._destroyed = false;\n\t            this._finished = false;\n\t            this._started = false;\n\t        };\n\t        /**\n\t         * @param {?} p\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.setPosition = function (p) {\n\t            this._players.forEach(function (player) { player.setPosition(p); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.getPosition = function () {\n\t            var /** @type {?} */ min = 0;\n\t            this._players.forEach(function (player) {\n\t                var /** @type {?} */ p = player.getPosition();\n\t                min = Math.min(p, min);\n\t            });\n\t            return min;\n\t        };\n\t        Object.defineProperty(AnimationGroupPlayer.prototype, \"players\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._players; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationGroupPlayer;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * `AnimationKeyframe` consists of a series of styles (contained within {\\@link AnimationStyles\n\t     * `AnimationStyles`})\n\t     * and an offset value indicating when those styles are applied within the `duration/delay/easing`\n\t     * timings.\n\t     * `AnimationKeyframe` is mostly an internal class which is designed to be used alongside {\\@link\n\t     * Renderer#animate-anchor `Renderer.animate`}.\n\t     *\n\t     * \\@experimental Animation support is experimental\n\t     */\n\t    var AnimationKeyframe = (function () {\n\t        /**\n\t         * @param {?} offset\n\t         * @param {?} styles\n\t         */\n\t        function AnimationKeyframe(offset, styles) {\n\t            this.offset = offset;\n\t            this.styles = styles;\n\t        }\n\t        return AnimationKeyframe;\n\t    }());\n\t\n\t    /**\n\t     * \\@experimental Animation support is experimental.\n\t     * @abstract\n\t     */\n\t    var AnimationPlayer = (function () {\n\t        function AnimationPlayer() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.onDone = function (fn) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.onStart = function (fn) { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.init = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.hasStarted = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.play = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.pause = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.restart = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.finish = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.destroy = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.reset = function () { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} p\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.setPosition = function (p) { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.getPosition = function () { };\n\t        Object.defineProperty(AnimationPlayer.prototype, \"parentPlayer\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n\t            /**\n\t             * @param {?} player\n\t             * @return {?}\n\t             */\n\t            set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationPlayer;\n\t    }());\n\t    var NoOpAnimationPlayer = (function () {\n\t        function NoOpAnimationPlayer() {\n\t            var _this = this;\n\t            this._onDoneFns = [];\n\t            this._onStartFns = [];\n\t            this._started = false;\n\t            this.parentPlayer = null;\n\t            scheduleMicroTask(function () { return _this._onFinish(); });\n\t        }\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype._onFinish = function () {\n\t            this._onDoneFns.forEach(function (fn) { return fn(); });\n\t            this._onDoneFns = [];\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.init = function () { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.play = function () {\n\t            if (!this.hasStarted()) {\n\t                this._onStartFns.forEach(function (fn) { return fn(); });\n\t                this._onStartFns = [];\n\t            }\n\t            this._started = true;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.pause = function () { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.restart = function () { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.destroy = function () { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.reset = function () { };\n\t        /**\n\t         * @param {?} p\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.setPosition = function (p) { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };\n\t        return NoOpAnimationPlayer;\n\t    }());\n\t\n\t    var AnimationSequencePlayer = (function () {\n\t        /**\n\t         * @param {?} _players\n\t         */\n\t        function AnimationSequencePlayer(_players) {\n\t            var _this = this;\n\t            this._players = _players;\n\t            this._currentIndex = 0;\n\t            this._onDoneFns = [];\n\t            this._onStartFns = [];\n\t            this._finished = false;\n\t            this._started = false;\n\t            this._destroyed = false;\n\t            this.parentPlayer = null;\n\t            this._players.forEach(function (player) { player.parentPlayer = _this; });\n\t            this._onNext(false);\n\t        }\n\t        /**\n\t         * @param {?} start\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype._onNext = function (start) {\n\t            var _this = this;\n\t            if (this._finished)\n\t                return;\n\t            if (this._players.length == 0) {\n\t                this._activePlayer = new NoOpAnimationPlayer();\n\t                scheduleMicroTask(function () { return _this._onFinish(); });\n\t            }\n\t            else if (this._currentIndex >= this._players.length) {\n\t                this._activePlayer = new NoOpAnimationPlayer();\n\t                this._onFinish();\n\t            }\n\t            else {\n\t                var /** @type {?} */ player = this._players[this._currentIndex++];\n\t                player.onDone(function () { return _this._onNext(true); });\n\t                this._activePlayer = player;\n\t                if (start) {\n\t                    player.play();\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype._onFinish = function () {\n\t            if (!this._finished) {\n\t                this._finished = true;\n\t                this._onDoneFns.forEach(function (fn) { return fn(); });\n\t                this._onDoneFns = [];\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.play = function () {\n\t            if (!isPresent(this.parentPlayer)) {\n\t                this.init();\n\t            }\n\t            if (!this.hasStarted()) {\n\t                this._onStartFns.forEach(function (fn) { return fn(); });\n\t                this._onStartFns = [];\n\t                this._started = true;\n\t            }\n\t            this._activePlayer.play();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.restart = function () {\n\t            this.reset();\n\t            if (this._players.length > 0) {\n\t                this._players[0].restart();\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.reset = function () {\n\t            this._players.forEach(function (player) { return player.reset(); });\n\t            this._destroyed = false;\n\t            this._finished = false;\n\t            this._started = false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.finish = function () {\n\t            this._onFinish();\n\t            this._players.forEach(function (player) { return player.finish(); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.destroy = function () {\n\t            if (!this._destroyed) {\n\t                this._onFinish();\n\t                this._players.forEach(function (player) { return player.destroy(); });\n\t                this._destroyed = true;\n\t                this._activePlayer = new NoOpAnimationPlayer();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} p\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };\n\t        Object.defineProperty(AnimationSequencePlayer.prototype, \"players\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._players; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationSequencePlayer;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$13 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * @experimental Animation support is experimental.\n\t     */\n\t    var /** @type {?} */ AUTO_STYLE = '*';\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link trigger trigger\n\t     * animation function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationEntryMetadata = (function () {\n\t        /**\n\t         * @param {?} name\n\t         * @param {?} definitions\n\t         */\n\t        function AnimationEntryMetadata(name, definitions) {\n\t            this.name = name;\n\t            this.definitions = definitions;\n\t        }\n\t        return AnimationEntryMetadata;\n\t    }());\n\t    /**\n\t     * \\@experimental Animation support is experimental.\n\t     * @abstract\n\t     */\n\t    var AnimationStateMetadata = (function () {\n\t        function AnimationStateMetadata() {\n\t        }\n\t        return AnimationStateMetadata;\n\t    }());\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link state state animation\n\t     * function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationStateDeclarationMetadata = (function (_super) {\n\t        __extends$13(AnimationStateDeclarationMetadata, _super);\n\t        /**\n\t         * @param {?} stateNameExpr\n\t         * @param {?} styles\n\t         */\n\t        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {\n\t            _super.call(this);\n\t            this.stateNameExpr = stateNameExpr;\n\t            this.styles = styles;\n\t        }\n\t        return AnimationStateDeclarationMetadata;\n\t    }(AnimationStateMetadata));\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the\n\t     * {\\@link transition transition animation function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationStateTransitionMetadata = (function (_super) {\n\t        __extends$13(AnimationStateTransitionMetadata, _super);\n\t        /**\n\t         * @param {?} stateChangeExpr\n\t         * @param {?} steps\n\t         */\n\t        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {\n\t            _super.call(this);\n\t            this.stateChangeExpr = stateChangeExpr;\n\t            this.steps = steps;\n\t        }\n\t        return AnimationStateTransitionMetadata;\n\t    }(AnimationStateMetadata));\n\t    /**\n\t     * \\@experimental Animation support is experimental.\n\t     * @abstract\n\t     */\n\t    var AnimationMetadata = (function () {\n\t        function AnimationMetadata() {\n\t        }\n\t        return AnimationMetadata;\n\t    }());\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link keyframes keyframes\n\t     * animation function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationKeyframesSequenceMetadata = (function (_super) {\n\t        __extends$13(AnimationKeyframesSequenceMetadata, _super);\n\t        /**\n\t         * @param {?} steps\n\t         */\n\t        function AnimationKeyframesSequenceMetadata(steps) {\n\t            _super.call(this);\n\t            this.steps = steps;\n\t        }\n\t        return AnimationKeyframesSequenceMetadata;\n\t    }(AnimationMetadata));\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link style style animation\n\t     * function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationStyleMetadata = (function (_super) {\n\t        __extends$13(AnimationStyleMetadata, _super);\n\t        /**\n\t         * @param {?} styles\n\t         * @param {?=} offset\n\t         */\n\t        function AnimationStyleMetadata(styles, offset) {\n\t            if (offset === void 0) { offset = null; }\n\t            _super.call(this);\n\t            this.styles = styles;\n\t            this.offset = offset;\n\t        }\n\t        return AnimationStyleMetadata;\n\t    }(AnimationMetadata));\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link animate animate\n\t     * animation function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationAnimateMetadata = (function (_super) {\n\t        __extends$13(AnimationAnimateMetadata, _super);\n\t        /**\n\t         * @param {?} timings\n\t         * @param {?} styles\n\t         */\n\t        function AnimationAnimateMetadata(timings, styles) {\n\t            _super.call(this);\n\t            this.timings = timings;\n\t            this.styles = styles;\n\t        }\n\t        return AnimationAnimateMetadata;\n\t    }(AnimationMetadata));\n\t    /**\n\t     * \\@experimental Animation support is experimental.\n\t     * @abstract\n\t     */\n\t    var AnimationWithStepsMetadata = (function (_super) {\n\t        __extends$13(AnimationWithStepsMetadata, _super);\n\t        function AnimationWithStepsMetadata() {\n\t            _super.call(this);\n\t        }\n\t        Object.defineProperty(AnimationWithStepsMetadata.prototype, \"steps\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationWithStepsMetadata;\n\t    }(AnimationMetadata));\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link sequence sequence\n\t     * animation function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationSequenceMetadata = (function (_super) {\n\t        __extends$13(AnimationSequenceMetadata, _super);\n\t        /**\n\t         * @param {?} _steps\n\t         */\n\t        function AnimationSequenceMetadata(_steps) {\n\t            _super.call(this);\n\t            this._steps = _steps;\n\t        }\n\t        Object.defineProperty(AnimationSequenceMetadata.prototype, \"steps\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._steps; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationSequenceMetadata;\n\t    }(AnimationWithStepsMetadata));\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link group group animation\n\t     * function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationGroupMetadata = (function (_super) {\n\t        __extends$13(AnimationGroupMetadata, _super);\n\t        /**\n\t         * @param {?} _steps\n\t         */\n\t        function AnimationGroupMetadata(_steps) {\n\t            _super.call(this);\n\t            this._steps = _steps;\n\t        }\n\t        Object.defineProperty(AnimationGroupMetadata.prototype, \"steps\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._steps; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationGroupMetadata;\n\t    }(AnimationWithStepsMetadata));\n\t    /**\n\t     * `animate` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `animate` specifies an animation step that will apply the provided `styles` data for a given\n\t     * amount of\n\t     * time based on the provided `timing` expression value. Calls to `animate` are expected to be\n\t     * used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link transition\n\t     * transition}.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * The `animate` function accepts two input parameters: `timing` and `styles`:\n\t     *\n\t     * - `timing` is a string based value that can be a combination of a duration with optional\n\t     * delay and easing values. The format for the expression breaks down to `duration delay easing`\n\t     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n\t     * delay=100, easing=ease-out`.\n\t     * If a numeric value is provided then that will be used as the `duration` value in millisecond\n\t     * form.\n\t     * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n\t     * keyframes keyframes}.\n\t     * If left empty then the styles from the destination state will be collected and used (this is\n\t     * useful when\n\t     * describing an animation step that will complete an animation by {\\@link\n\t     * transition#the-final-animate-call animating to the final state}).\n\t     *\n\t     * ```typescript\n\t     * // various functions for specifying timing data\n\t     * animate(500, style(...))\n\t     * animate(\"1s\", style(...))\n\t     * animate(\"100ms 0.5s\", style(...))\n\t     * animate(\"5s ease\", style(...))\n\t     * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n\t     *\n\t     * // either style() of keyframes() can be used\n\t     * animate(500, style({ background: \"red\" }))\n\t     * animate(500, keyframes([\n\t     *   style({ background: \"blue\" })),\n\t     *   style({ background: \"red\" }))\n\t     * ])\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} timing\n\t     * @param {?=} styles\n\t     * @return {?}\n\t     */\n\t    function animate(timing, styles) {\n\t        if (styles === void 0) { styles = null; }\n\t        var /** @type {?} */ stylesEntry = styles;\n\t        if (!isPresent(stylesEntry)) {\n\t            var /** @type {?} */ EMPTY_STYLE = {};\n\t            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);\n\t        }\n\t        return new AnimationAnimateMetadata(timing, stylesEntry);\n\t    }\n\t    /**\n\t     * `group` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations\n\t     * are useful when a series of styles must be animated/closed off\n\t     * at different statrting/ending times.\n\t     *\n\t     * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n\t     * transition}\n\t     * and it will only continue to the next instruction once all of the inner animation steps\n\t     * have completed.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * The `steps` data that is passed into the `group` animation function can either consist\n\t     * of {\\@link style style} or {\\@link animate animate} function calls. Each call to `style()` or\n\t     * `animate()`\n\t     * within a group will be executed instantly (use {\\@link keyframes keyframes} or a\n\t     * {\\@link animate#usage animate() with a delay value} to offset styles to be applied at a later\n\t     * time).\n\t     *\n\t     * ```typescript\n\t     * group([\n\t     *   animate(\"1s\", { background: \"black\" }))\n\t     *   animate(\"2s\", { color: \"white\" }))\n\t     * ])\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} steps\n\t     * @return {?}\n\t     */\n\t    function group(steps) {\n\t        return new AnimationGroupMetadata(steps);\n\t    }\n\t    /**\n\t     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used\n\t     * by default when an array is passed as animation data into {\\@link transition transition}.)\n\t     *\n\t     * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n\t     * transition}\n\t     * and it will only continue to the next instruction once each of the inner animation steps\n\t     * have completed.\n\t     *\n\t     * To perform animation styling in parallel with other animation steps then\n\t     * have a look at the {\\@link group group} animation function.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * The `steps` data that is passed into the `sequence` animation function can either consist\n\t     * of {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply\n\t     * the\n\t     * provided styling data immediately while a call to `animate()` will apply its styling\n\t     * data over a given time depending on its timing data.\n\t     *\n\t     * ```typescript\n\t     * sequence([\n\t     *   style({ opacity: 0 })),\n\t     *   animate(\"1s\", { opacity: 1 }))\n\t     * ])\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} steps\n\t     * @return {?}\n\t     */\n\t    function sequence(steps) {\n\t        return new AnimationSequenceMetadata(steps);\n\t    }\n\t    /**\n\t     * `style` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `style` declares a key/value object containing CSS properties/styles that can then\n\t     * be used for {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as\n\t     * styling data for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * `style` takes in a key/value string map as data and expects one or more CSS property/value\n\t     * pairs to be defined.\n\t     *\n\t     * ```typescript\n\t     * // string values are used for css properties\n\t     * style({ background: \"red\", color: \"blue\" })\n\t     *\n\t     * // numerical (pixel) values are also supported\n\t     * style({ width: 100, height: 0 })\n\t     * ```\n\t     *\n\t     * #### Auto-styles (using `*`)\n\t     *\n\t     * When an asterix (`*`) character is used as a value then it will be detected from the element\n\t     * being animated\n\t     * and applied as animation data when the animation starts.\n\t     *\n\t     * This feature proves useful for a state depending on layout and/or environment factors; in such\n\t     * cases\n\t     * the styles are calculated just before the animation starts.\n\t     *\n\t     * ```typescript\n\t     * // the steps below will animate from 0 to the\n\t     * // actual height of the element\n\t     * style({ height: 0 }),\n\t     * animate(\"1s\", style({ height: \"*\" }))\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} tokens\n\t     * @return {?}\n\t     */\n\t    function style(tokens) {\n\t        var /** @type {?} */ input;\n\t        var /** @type {?} */ offset = null;\n\t        if (typeof tokens === 'string') {\n\t            input = [(tokens)];\n\t        }\n\t        else {\n\t            if (Array.isArray(tokens)) {\n\t                input = (tokens);\n\t            }\n\t            else {\n\t                input = [(tokens)];\n\t            }\n\t            input.forEach(function (entry) {\n\t                var /** @type {?} */ entryOffset = ((entry) /** TODO #9100 */)['offset'];\n\t                if (isPresent(entryOffset)) {\n\t                    offset = offset == null ? parseFloat(entryOffset) : offset;\n\t                }\n\t            });\n\t        }\n\t        return new AnimationStyleMetadata(input, offset);\n\t    }\n\t    /**\n\t     * `state` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `state` declares an animation state within the given trigger. When a state is\n\t     * active within a component then its associated styles will persist on\n\t     * the element that the trigger is attached to (even when the animation ends).\n\t     *\n\t     * To animate between states, have a look at the animation {\\@link transition transition}\n\t     * DSL function. To register states to an animation trigger please have a look\n\t     * at the {\\@link trigger trigger} function.\n\t     *\n\t     * #### The `void` state\n\t     *\n\t     * The `void` state value is a reserved word that angular uses to determine when the element is not\n\t     * apart\n\t     * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n\t     * associated element\n\t     * is void).\n\t     *\n\t     * #### The `*` (default) state\n\t     *\n\t     * The `*` state (when styled) is a fallback state that will be used if\n\t     * the state that is being animated is not declared within the trigger.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * `state` will declare an animation state with its associated styles\n\t     * within the given trigger.\n\t     *\n\t     * - `stateNameExpr` can be one or more state names separated by commas.\n\t     * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n\t     * the state\n\t     * has been reached.\n\t     *\n\t     * ```typescript\n\t     * // \"void\" is a reserved name for a state and is used to represent\n\t     * // the state in which an element is detached from from the application.\n\t     * state(\"void\", style({ height: 0 }))\n\t     *\n\t     * // user-defined states\n\t     * state(\"closed\", style({ height: 0 }))\n\t     * state(\"open, visible\", style({ height: \"*\" }))\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} stateNameExpr\n\t     * @param {?} styles\n\t     * @return {?}\n\t     */\n\t    function state(stateNameExpr, styles) {\n\t        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);\n\t    }\n\t    /**\n\t     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n\t     * by an `offset` value.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n\t     * animation function. Instead of applying animations from where they are\n\t     * currently to their destination, keyframes can describe how each style entry is applied\n\t     * and at what point within the animation arc (much like CSS Keyframe Animations do).\n\t     *\n\t     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at\n\t     * what percentage of the animate time the styles will be applied.\n\t     *\n\t     * ```typescript\n\t     * // the provided offset values describe when each backgroundColor value is applied.\n\t     * animate(\"5s\", keyframes([\n\t     *   style({ backgroundColor: \"red\", offset: 0 }),\n\t     *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n\t     *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n\t     *   style({ backgroundColor: \"black\", offset: 1 })\n\t     * ]))\n\t     * ```\n\t     *\n\t     * Alternatively, if there are no `offset` values used within the style entries then the offsets\n\t     * will\n\t     * be calculated automatically.\n\t     *\n\t     * ```typescript\n\t     * animate(\"5s\", keyframes([\n\t     *   style({ backgroundColor: \"red\" }) // offset = 0\n\t     *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n\t     *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n\t     *   style({ backgroundColor: \"black\" }) // offset = 1\n\t     * ]))\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} steps\n\t     * @return {?}\n\t     */\n\t    function keyframes(steps) {\n\t        return new AnimationKeyframesSequenceMetadata(steps);\n\t    }\n\t    /**\n\t     * `transition` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n\t     * provided\n\t     * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`\n\t     * which consists\n\t     * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).\n\t     *\n\t     * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n\t     * to animate to\n\t     * a state value and persist its styles then one or more {\\@link state animation states} is expected\n\t     * to be defined.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n\t     * what the\n\t     * previous state is and what the current state has become. In other words, if a transition is\n\t     * defined that\n\t     * matches the old/current state criteria then the associated animation will be triggered.\n\t     *\n\t     * ```typescript\n\t     * // all transition/state changes are defined within an animation trigger\n\t     * trigger(\"myAnimationTrigger\", [\n\t     *   // if a state is defined then its styles will be persisted when the\n\t     *   // animation has fully completed itself\n\t     *   state(\"on\", style({ background: \"green\" })),\n\t     *   state(\"off\", style({ background: \"grey\" })),\n\t     *\n\t     *   // a transition animation that will be kicked off when the state value\n\t     *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n\t     *   transition(\"on => off\", animate(500)),\n\t     *\n\t     *   // it is also possible to do run the same animation for both directions\n\t     *   transition(\"on <=> off\", animate(500)),\n\t     *\n\t     *   // or to define multiple states pairs separated by commas\n\t     *   transition(\"on => off, off => void\", animate(500)),\n\t     *\n\t     *   // this is a catch-all state change for when an element is inserted into\n\t     *   // the page and the destination state is unknown\n\t     *   transition(\"void => *\", [\n\t     *     style({ opacity: 0 }),\n\t     *     animate(500)\n\t     *   ]),\n\t     *\n\t     *   // this will capture a state change between any states\n\t     *   transition(\"* => *\", animate(\"1s 0s\")),\n\t     * ])\n\t     * ```\n\t     *\n\t     * The template associated with this component will make use of the `myAnimationTrigger`\n\t     * animation trigger by binding to an element within its template code.\n\t     *\n\t     * ```html\n\t     * <!-- somewhere inside of my-component-tpl.html -->\n\t     * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n\t     * ```\n\t     *\n\t     * #### The final `animate` call\n\t     *\n\t     * If the final step within the transition steps is a call to `animate()` that **only**\n\t     * uses a timing value with **no style data** then it will be automatically used as the final\n\t     * animation\n\t     * arc for the element to animate itself to the final state. This involves an automatic mix of\n\t     * adding/removing CSS styles so that the element will be in the exact state it should be for the\n\t     * applied state to be presented correctly.\n\t     *\n\t     * ```\n\t     * // start off by hiding the element, but make sure that it animates properly to whatever state\n\t     * // is currently active for \"myAnimationTrigger\"\n\t     * transition(\"void => *\", [\n\t     *   style({ opacity: 0 }),\n\t     *   animate(500)\n\t     * ])\n\t     * ```\n\t     *\n\t     * ### Transition Aliases (`:enter` and `:leave`)\n\t     *\n\t     * Given that enter (insertion) and leave (removal) animations are so common,\n\t     * the `transition` function accepts both `:enter` and `:leave` values which\n\t     * are aliases for the `void => *` and `* => void` state changes.\n\t     *\n\t     * ```\n\t     * transition(\":enter\", [\n\t     *   style({ opacity: 0 }),\n\t     *   animate(500, style({ opacity: 1 }))\n\t     * ])\n\t     * transition(\":leave\", [\n\t     *   animate(500, style({ opacity: 0 }))\n\t     * ])\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} stateChangeExpr\n\t     * @param {?} steps\n\t     * @return {?}\n\t     */\n\t    function transition(stateChangeExpr, steps) {\n\t        var /** @type {?} */ animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;\n\t        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);\n\t    }\n\t    /**\n\t     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `trigger` Creates an animation trigger which will a list of {\\@link state state} and {\\@link\n\t     * transition transition}\n\t     * entries that will be evaluated when the expression bound to the trigger changes.\n\t     *\n\t     * Triggers are registered within the component annotation data under the\n\t     * {\\@link Component#animations-anchor animations section}. An animation trigger can\n\t     * be placed on an element within a template by referencing the name of the\n\t     * trigger followed by the expression value that the trigger is bound to\n\t     * (in the form of `[\\@triggerName]=\"expression\"`.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * `trigger` will create an animation trigger reference based on the provided `name` value.\n\t     * The provided `animation` value is expected to be an array consisting of {\\@link state state} and\n\t     * {\\@link transition transition}\n\t     * declarations.\n\t     *\n\t     * ```typescript\n\t     * \\@Component({\n\t     *   selector: 'my-component',\n\t     *   templateUrl: 'my-component-tpl.html',\n\t     *   animations: [\n\t     *     trigger(\"myAnimationTrigger\", [\n\t     *       state(...),\n\t     *       state(...),\n\t     *       transition(...),\n\t     *       transition(...)\n\t     *     ])\n\t     *   ]\n\t     * })\n\t     * class MyComponent {\n\t     *   myStatusExp = \"something\";\n\t     * }\n\t     * ```\n\t     *\n\t     * The template associated with this component will make use of the `myAnimationTrigger`\n\t     * animation trigger by binding to an element within its template code.\n\t     *\n\t     * ```html\n\t     * <!-- somewhere inside of my-component-tpl.html -->\n\t     * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} name\n\t     * @param {?} animation\n\t     * @return {?}\n\t     */\n\t    function trigger(name, animation) {\n\t        return new AnimationEntryMetadata(name, animation);\n\t    }\n\t\n\t    /**\n\t     * @param {?} previousStyles\n\t     * @param {?} newStyles\n\t     * @param {?=} nullValue\n\t     * @return {?}\n\t     */\n\t    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {\n\t        if (nullValue === void 0) { nullValue = null; }\n\t        var /** @type {?} */ finalStyles = {};\n\t        Object.keys(newStyles).forEach(function (prop) {\n\t            var /** @type {?} */ value = newStyles[prop];\n\t            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();\n\t        });\n\t        Object.keys(previousStyles).forEach(function (prop) {\n\t            if (!isPresent(finalStyles[prop])) {\n\t                finalStyles[prop] = nullValue;\n\t            }\n\t        });\n\t        return finalStyles;\n\t    }\n\t    /**\n\t     * @param {?} collectedStyles\n\t     * @param {?} finalStateStyles\n\t     * @param {?} keyframes\n\t     * @return {?}\n\t     */\n\t    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {\n\t        var /** @type {?} */ limit = keyframes.length - 1;\n\t        var /** @type {?} */ firstKeyframe = keyframes[0];\n\t        // phase 1: copy all the styles from the first keyframe into the lookup map\n\t        var /** @type {?} */ flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);\n\t        var /** @type {?} */ extraFirstKeyframeStyles = {};\n\t        var /** @type {?} */ hasExtraFirstStyles = false;\n\t        Object.keys(collectedStyles).forEach(function (prop) {\n\t            var /** @type {?} */ value = (collectedStyles[prop]);\n\t            // if the style is already defined in the first keyframe then\n\t            // we do not replace it.\n\t            if (!flatenedFirstKeyframeStyles[prop]) {\n\t                flatenedFirstKeyframeStyles[prop] = value;\n\t                extraFirstKeyframeStyles[prop] = value;\n\t                hasExtraFirstStyles = true;\n\t            }\n\t        });\n\t        var /** @type {?} */ keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);\n\t        // phase 2: normalize the final keyframe\n\t        var /** @type {?} */ finalKeyframe = keyframes[limit];\n\t        finalKeyframe.styles.styles.unshift(finalStateStyles);\n\t        var /** @type {?} */ flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);\n\t        var /** @type {?} */ extraFinalKeyframeStyles = {};\n\t        var /** @type {?} */ hasExtraFinalStyles = false;\n\t        Object.keys(keyframeCollectedStyles).forEach(function (prop) {\n\t            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {\n\t                extraFinalKeyframeStyles[prop] = AUTO_STYLE;\n\t                hasExtraFinalStyles = true;\n\t            }\n\t        });\n\t        if (hasExtraFinalStyles) {\n\t            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);\n\t        }\n\t        Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {\n\t            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {\n\t                extraFirstKeyframeStyles[prop] = AUTO_STYLE;\n\t                hasExtraFirstStyles = true;\n\t            }\n\t        });\n\t        if (hasExtraFirstStyles) {\n\t            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);\n\t        }\n\t        collectAndResolveStyles(collectedStyles, [finalStateStyles]);\n\t        return keyframes;\n\t    }\n\t    /**\n\t     * @param {?} styles\n\t     * @return {?}\n\t     */\n\t    function clearStyles(styles) {\n\t        var /** @type {?} */ finalStyles = {};\n\t        Object.keys(styles).forEach(function (key) { finalStyles[key] = null; });\n\t        return finalStyles;\n\t    }\n\t    /**\n\t     * @param {?} collection\n\t     * @param {?} styles\n\t     * @return {?}\n\t     */\n\t    function collectAndResolveStyles(collection, styles) {\n\t        return styles.map(function (entry) {\n\t            var /** @type {?} */ stylesObj = {};\n\t            Object.keys(entry).forEach(function (prop) {\n\t                var /** @type {?} */ value = entry[prop];\n\t                if (value == FILL_STYLE_FLAG) {\n\t                    value = collection[prop];\n\t                    if (!isPresent(value)) {\n\t                        value = AUTO_STYLE;\n\t                    }\n\t                }\n\t                collection[prop] = value;\n\t                stylesObj[prop] = value;\n\t            });\n\t            return stylesObj;\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} element\n\t     * @param {?} renderer\n\t     * @param {?} styles\n\t     * @return {?}\n\t     */\n\t    function renderStyles(element, renderer, styles) {\n\t        Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]); });\n\t    }\n\t    /**\n\t     * @param {?} styles\n\t     * @return {?}\n\t     */\n\t    function flattenStyles(styles) {\n\t        var /** @type {?} */ finalStyles = {};\n\t        styles.forEach(function (entry) {\n\t            Object.keys(entry).forEach(function (prop) { finalStyles[prop] = (entry[prop]); });\n\t        });\n\t        return finalStyles;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * `AnimationStyles` consists of a collection of key/value maps containing CSS-based style data\n\t     * that can either be used as initial styling data or apart of a series of keyframes within an\n\t     * animation.\n\t     * This class is mostly internal, and it is designed to be used alongside\n\t     * {\\@link AnimationKeyframe `AnimationKeyframe`} and {\\@link Renderer#animate-anchor\n\t     * `Renderer.animate`}.\n\t     *\n\t     * \\@experimental Animation support is experimental\n\t     */\n\t    var AnimationStyles = (function () {\n\t        /**\n\t         * @param {?} styles\n\t         */\n\t        function AnimationStyles(styles) {\n\t            this.styles = styles;\n\t        }\n\t        return AnimationStyles;\n\t    }());\n\t\n\t    /**\n\t     * An instance of this class is returned as an event parameter when an animation\n\t     * callback is captured for an animation either during the start or done phase.\n\t     *\n\t     * ```typescript\n\t     * \\@Component({\n\t     *   host: {\n\t     *     '[\\@myAnimationTrigger]': 'someExpression',\n\t     *     '(\\@myAnimationTrigger.start)': 'captureStartEvent($event)',\n\t     *     '(\\@myAnimationTrigger.done)': 'captureDoneEvent($event)',\n\t     *   },\n\t     *   animations: [\n\t     *     trigger(\"myAnimationTrigger\", [\n\t     *        // ...\n\t     *     ])\n\t     *   ]\n\t     * })\n\t     * class MyComponent {\n\t     *   someExpression: any = false;\n\t     *   captureStartEvent(event: AnimationTransitionEvent) {\n\t     *     // the toState, fromState and totalTime data is accessible from the event variable\n\t     *   }\n\t     *\n\t     *   captureDoneEvent(event: AnimationTransitionEvent) {\n\t     *     // the toState, fromState and totalTime data is accessible from the event variable\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationTransitionEvent = (function () {\n\t        /**\n\t         * @param {?} __0\n\t         */\n\t        function AnimationTransitionEvent(_a) {\n\t            var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;\n\t            this.fromState = fromState;\n\t            this.toState = toState;\n\t            this.totalTime = totalTime;\n\t            this.phaseName = phaseName;\n\t        }\n\t        return AnimationTransitionEvent;\n\t    }());\n\t\n\t    var AnimationTransition = (function () {\n\t        /**\n\t         * @param {?} _player\n\t         * @param {?} _fromState\n\t         * @param {?} _toState\n\t         * @param {?} _totalTime\n\t         */\n\t        function AnimationTransition(_player, _fromState, _toState, _totalTime) {\n\t            this._player = _player;\n\t            this._fromState = _fromState;\n\t            this._toState = _toState;\n\t            this._totalTime = _totalTime;\n\t        }\n\t        /**\n\t         * @param {?} phaseName\n\t         * @return {?}\n\t         */\n\t        AnimationTransition.prototype._createEvent = function (phaseName) {\n\t            return new AnimationTransitionEvent({\n\t                fromState: this._fromState,\n\t                toState: this._toState,\n\t                totalTime: this._totalTime,\n\t                phaseName: phaseName\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        AnimationTransition.prototype.onStart = function (callback) {\n\t            var _this = this;\n\t            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('start')); }, 'player.onStart'));\n\t            this._player.onStart(fn);\n\t        };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        AnimationTransition.prototype.onDone = function (callback) {\n\t            var _this = this;\n\t            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('done')); }, 'player.onDone'));\n\t            this._player.onDone(fn);\n\t        };\n\t        return AnimationTransition;\n\t    }());\n\t\n\t    var DebugDomRootRenderer = (function () {\n\t        /**\n\t         * @param {?} _delegate\n\t         */\n\t        function DebugDomRootRenderer(_delegate) {\n\t            this._delegate = _delegate;\n\t        }\n\t        /**\n\t         * @param {?} componentProto\n\t         * @return {?}\n\t         */\n\t        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {\n\t            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));\n\t        };\n\t        return DebugDomRootRenderer;\n\t    }());\n\t    var DebugDomRenderer = (function () {\n\t        /**\n\t         * @param {?} _delegate\n\t         */\n\t        function DebugDomRenderer(_delegate) {\n\t            this._delegate = _delegate;\n\t        }\n\t        /**\n\t         * @param {?} selectorOrNode\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {\n\t            var /** @type {?} */ nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);\n\t            var /** @type {?} */ debugEl = new DebugElement(nativeEl, null, debugInfo);\n\t            indexDebugNode(debugEl);\n\t            return nativeEl;\n\t        };\n\t        /**\n\t         * @param {?} parentElement\n\t         * @param {?} name\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {\n\t            var /** @type {?} */ nativeEl = this._delegate.createElement(parentElement, name, debugInfo);\n\t            var /** @type {?} */ debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);\n\t            debugEl.name = name;\n\t            indexDebugNode(debugEl);\n\t            return nativeEl;\n\t        };\n\t        /**\n\t         * @param {?} hostElement\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };\n\t        /**\n\t         * @param {?} parentElement\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {\n\t            var /** @type {?} */ comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);\n\t            var /** @type {?} */ debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);\n\t            indexDebugNode(debugEl);\n\t            return comment;\n\t        };\n\t        /**\n\t         * @param {?} parentElement\n\t         * @param {?} value\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {\n\t            var /** @type {?} */ text = this._delegate.createText(parentElement, value, debugInfo);\n\t            var /** @type {?} */ debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);\n\t            indexDebugNode(debugEl);\n\t            return text;\n\t        };\n\t        /**\n\t         * @param {?} parentElement\n\t         * @param {?} nodes\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {\n\t            var /** @type {?} */ debugParent = getDebugNode(parentElement);\n\t            if (isPresent(debugParent) && debugParent instanceof DebugElement) {\n\t                var /** @type {?} */ debugElement_1 = debugParent;\n\t                nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });\n\t            }\n\t            this._delegate.projectNodes(parentElement, nodes);\n\t        };\n\t        /**\n\t         * @param {?} node\n\t         * @param {?} viewRootNodes\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {\n\t            var /** @type {?} */ debugNode = getDebugNode(node);\n\t            if (isPresent(debugNode)) {\n\t                var /** @type {?} */ debugParent = debugNode.parent;\n\t                if (viewRootNodes.length > 0 && isPresent(debugParent)) {\n\t                    var /** @type {?} */ debugViewRootNodes_1 = [];\n\t                    viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode(rootNode)); });\n\t                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);\n\t                }\n\t            }\n\t            this._delegate.attachViewAfter(node, viewRootNodes);\n\t        };\n\t        /**\n\t         * @param {?} viewRootNodes\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {\n\t            viewRootNodes.forEach(function (node) {\n\t                var /** @type {?} */ debugNode = getDebugNode(node);\n\t                if (isPresent(debugNode) && isPresent(debugNode.parent)) {\n\t                    debugNode.parent.removeChild(debugNode);\n\t                }\n\t            });\n\t            this._delegate.detachView(viewRootNodes);\n\t        };\n\t        /**\n\t         * @param {?} hostElement\n\t         * @param {?} viewAllNodes\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {\n\t            viewAllNodes = viewAllNodes || [];\n\t            viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });\n\t            this._delegate.destroyView(hostElement, viewAllNodes);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} name\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {\n\t            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n\t            if (isPresent(debugEl)) {\n\t                debugEl.listeners.push(new EventListener(name, callback));\n\t            }\n\t            return this._delegate.listen(renderElement, name, callback);\n\t        };\n\t        /**\n\t         * @param {?} target\n\t         * @param {?} name\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {\n\t            return this._delegate.listenGlobal(target, name, callback);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} propertyName\n\t         * @param {?} propertyValue\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n\t            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n\t            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n\t                debugEl.properties[propertyName] = propertyValue;\n\t            }\n\t            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} attributeName\n\t         * @param {?} attributeValue\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {\n\t            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n\t            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n\t                debugEl.attributes[attributeName] = attributeValue;\n\t            }\n\t            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} propertyName\n\t         * @param {?} propertyValue\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {\n\t            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} className\n\t         * @param {?} isAdd\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {\n\t            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n\t            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n\t                debugEl.classes[className] = isAdd;\n\t            }\n\t            this._delegate.setElementClass(renderElement, className, isAdd);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} styleName\n\t         * @param {?} styleValue\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n\t            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n\t            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n\t                debugEl.styles[styleName] = styleValue;\n\t            }\n\t            this._delegate.setElementStyle(renderElement, styleName, styleValue);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} methodName\n\t         * @param {?=} args\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n\t            this._delegate.invokeElementMethod(renderElement, methodName, args);\n\t        };\n\t        /**\n\t         * @param {?} renderNode\n\t         * @param {?} text\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };\n\t        /**\n\t         * @param {?} element\n\t         * @param {?} startingStyles\n\t         * @param {?} keyframes\n\t         * @param {?} duration\n\t         * @param {?} delay\n\t         * @param {?} easing\n\t         * @param {?=} previousPlayers\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {\n\t            if (previousPlayers === void 0) { previousPlayers = []; }\n\t            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);\n\t        };\n\t        return DebugDomRenderer;\n\t    }());\n\t\n\t    var ViewType = {};\n\t    ViewType.HOST = 0;\n\t    ViewType.COMPONENT = 1;\n\t    ViewType.EMBEDDED = 2;\n\t    ViewType[ViewType.HOST] = \"HOST\";\n\t    ViewType[ViewType.COMPONENT] = \"COMPONENT\";\n\t    ViewType[ViewType.EMBEDDED] = \"EMBEDDED\";\n\t\n\t    var StaticNodeDebugInfo = (function () {\n\t        /**\n\t         * @param {?} providerTokens\n\t         * @param {?} componentToken\n\t         * @param {?} refTokens\n\t         */\n\t        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {\n\t            this.providerTokens = providerTokens;\n\t            this.componentToken = componentToken;\n\t            this.refTokens = refTokens;\n\t        }\n\t        return StaticNodeDebugInfo;\n\t    }());\n\t    var DebugContext = (function () {\n\t        /**\n\t         * @param {?} _view\n\t         * @param {?} _nodeIndex\n\t         * @param {?} _tplRow\n\t         * @param {?} _tplCol\n\t         */\n\t        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {\n\t            this._view = _view;\n\t            this._nodeIndex = _nodeIndex;\n\t            this._tplRow = _tplRow;\n\t            this._tplCol = _tplCol;\n\t        }\n\t        Object.defineProperty(DebugContext.prototype, \"_staticNodeInfo\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"context\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view.context; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"component\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n\t                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {\n\t                    return this.injector.get(staticNodeInfo.componentToken);\n\t                }\n\t                return null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"componentRenderElement\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ componentView = this._view;\n\t                while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {\n\t                    componentView = (componentView.parentView);\n\t                }\n\t                return componentView.parentElement;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view.injector(this._nodeIndex); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"renderNode\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                if (isPresent(this._nodeIndex) && this._view.allNodes) {\n\t                    return this._view.allNodes[this._nodeIndex];\n\t                }\n\t                else {\n\t                    return null;\n\t                }\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"providerTokens\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n\t                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"source\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._view.componentType.templateUrl + \":\" + this._tplRow + \":\" + this._tplCol;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"references\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var _this = this;\n\t                var /** @type {?} */ varValues = {};\n\t                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n\t                if (isPresent(staticNodeInfo)) {\n\t                    var /** @type {?} */ refs_1 = staticNodeInfo.refTokens;\n\t                    Object.keys(refs_1).forEach(function (refName) {\n\t                        var /** @type {?} */ refToken = refs_1[refName];\n\t                        var /** @type {?} */ varValue;\n\t                        if (isBlank(refToken)) {\n\t                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;\n\t                        }\n\t                        else {\n\t                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);\n\t                        }\n\t                        varValues[refName] = varValue;\n\t                    });\n\t                }\n\t                return varValues;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return DebugContext;\n\t    }());\n\t\n\t    var ViewAnimationMap = (function () {\n\t        function ViewAnimationMap() {\n\t            this._map = new Map();\n\t            this._allPlayers = [];\n\t        }\n\t        /**\n\t         * @param {?} element\n\t         * @param {?} animationName\n\t         * @return {?}\n\t         */\n\t        ViewAnimationMap.prototype.find = function (element, animationName) {\n\t            var /** @type {?} */ playersByAnimation = this._map.get(element);\n\t            if (isPresent(playersByAnimation)) {\n\t                return playersByAnimation[animationName];\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} element\n\t         * @return {?}\n\t         */\n\t        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {\n\t            var /** @type {?} */ el = this._map.get(element);\n\t            return el ? Object.keys(el).map(function (k) { return el[k]; }) : [];\n\t        };\n\t        /**\n\t         * @param {?} element\n\t         * @param {?} animationName\n\t         * @param {?} player\n\t         * @return {?}\n\t         */\n\t        ViewAnimationMap.prototype.set = function (element, animationName, player) {\n\t            var /** @type {?} */ playersByAnimation = this._map.get(element);\n\t            if (!isPresent(playersByAnimation)) {\n\t                playersByAnimation = {};\n\t            }\n\t            var /** @type {?} */ existingEntry = playersByAnimation[animationName];\n\t            if (isPresent(existingEntry)) {\n\t                this.remove(element, animationName);\n\t            }\n\t            playersByAnimation[animationName] = player;\n\t            this._allPlayers.push(player);\n\t            this._map.set(element, playersByAnimation);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };\n\t        /**\n\t         * @param {?} element\n\t         * @param {?} animationName\n\t         * @param {?=} targetPlayer\n\t         * @return {?}\n\t         */\n\t        ViewAnimationMap.prototype.remove = function (element, animationName, targetPlayer) {\n\t            if (targetPlayer === void 0) { targetPlayer = null; }\n\t            var /** @type {?} */ playersByAnimation = this._map.get(element);\n\t            if (playersByAnimation) {\n\t                var /** @type {?} */ player = playersByAnimation[animationName];\n\t                if (!targetPlayer || player === targetPlayer) {\n\t                    delete playersByAnimation[animationName];\n\t                    var /** @type {?} */ index = this._allPlayers.indexOf(player);\n\t                    this._allPlayers.splice(index, 1);\n\t                    if (Object.keys(playersByAnimation).length === 0) {\n\t                        this._map.delete(element);\n\t                    }\n\t                }\n\t            }\n\t        };\n\t        return ViewAnimationMap;\n\t    }());\n\t\n\t    var AnimationViewContext = (function () {\n\t        /**\n\t         * @param {?} _animationQueue\n\t         */\n\t        function AnimationViewContext(_animationQueue) {\n\t            this._animationQueue = _animationQueue;\n\t            this._players = new ViewAnimationMap();\n\t        }\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {\n\t            var /** @type {?} */ activeAnimationPlayers = this._players.getAllPlayers();\n\t            // we check for the length to avoid having GroupAnimationPlayer\n\t            // issue an unnecessary microtask when zero players are passed in\n\t            if (activeAnimationPlayers.length) {\n\t                new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback(); });\n\t            }\n\t            else {\n\t                callback();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} element\n\t         * @param {?} animationName\n\t         * @param {?} player\n\t         * @return {?}\n\t         */\n\t        AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {\n\t            var _this = this;\n\t            this._animationQueue.enqueue(player);\n\t            this._players.set(element, animationName, player);\n\t            player.onDone(function () { return _this._players.remove(element, animationName, player); });\n\t        };\n\t        /**\n\t         * @param {?} element\n\t         * @param {?=} animationName\n\t         * @return {?}\n\t         */\n\t        AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName) {\n\t            if (animationName === void 0) { animationName = null; }\n\t            var /** @type {?} */ players = [];\n\t            if (animationName) {\n\t                var /** @type {?} */ currentPlayer = this._players.find(element, animationName);\n\t                if (currentPlayer) {\n\t                    _recursePlayers(currentPlayer, players);\n\t                }\n\t            }\n\t            else {\n\t                this._players.findAllPlayersByElement(element).forEach(function (player) { return _recursePlayers(player, players); });\n\t            }\n\t            return players;\n\t        };\n\t        return AnimationViewContext;\n\t    }());\n\t    /**\n\t     * @param {?} player\n\t     * @param {?} collectedPlayers\n\t     * @return {?}\n\t     */\n\t    function _recursePlayers(player, collectedPlayers) {\n\t        if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {\n\t            player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers); });\n\t        }\n\t        else {\n\t            collectedPlayers.push(player);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$15 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var ElementInjector = (function (_super) {\n\t        __extends$15(ElementInjector, _super);\n\t        /**\n\t         * @param {?} _view\n\t         * @param {?} _nodeIndex\n\t         */\n\t        function ElementInjector(_view, _nodeIndex) {\n\t            _super.call(this);\n\t            this._view = _view;\n\t            this._nodeIndex = _nodeIndex;\n\t        }\n\t        /**\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ElementInjector.prototype.get = function (token, notFoundValue) {\n\t            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n\t            return this._view.injectorGet(token, this._nodeIndex, notFoundValue);\n\t        };\n\t        return ElementInjector;\n\t    }(Injector));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$14 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ _scope_check = wtfCreateScope(\"AppView#check(ascii id)\");\n\t    /**\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ EMPTY_CONTEXT = new Object();\n\t    var /** @type {?} */ UNDEFINED$1 = new Object();\n\t    /**\n\t     * Cost of making objects: http://jsperf.com/instantiate-size-of-object\n\t     *\n\t     * @abstract\n\t     */\n\t    var AppView = (function () {\n\t        /**\n\t         * @param {?} clazz\n\t         * @param {?} componentType\n\t         * @param {?} type\n\t         * @param {?} viewUtils\n\t         * @param {?} parentView\n\t         * @param {?} parentIndex\n\t         * @param {?} parentElement\n\t         * @param {?} cdMode\n\t         * @param {?=} declaredViewContainer\n\t         */\n\t        function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {\n\t            if (declaredViewContainer === void 0) { declaredViewContainer = null; }\n\t            this.clazz = clazz;\n\t            this.componentType = componentType;\n\t            this.type = type;\n\t            this.viewUtils = viewUtils;\n\t            this.parentView = parentView;\n\t            this.parentIndex = parentIndex;\n\t            this.parentElement = parentElement;\n\t            this.cdMode = cdMode;\n\t            this.declaredViewContainer = declaredViewContainer;\n\t            this.numberOfChecks = 0;\n\t            this.ref = new ViewRef_(this, viewUtils.animationQueue);\n\t            if (type === ViewType.COMPONENT || type === ViewType.HOST) {\n\t                this.renderer = viewUtils.renderComponent(componentType);\n\t            }\n\t            else {\n\t                this.renderer = parentView.renderer;\n\t            }\n\t            this._directRenderer = this.renderer.directRenderer;\n\t        }\n\t        Object.defineProperty(AppView.prototype, \"animationContext\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                if (!this._animationContext) {\n\t                    this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);\n\t                }\n\t                return this._animationContext;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AppView.prototype, \"destroyed\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} context\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.create = function (context) {\n\t            this.context = context;\n\t            return this.createInternal(null);\n\t        };\n\t        /**\n\t         * @param {?} rootSelectorOrNode\n\t         * @param {?} hostInjector\n\t         * @param {?} projectableNodes\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {\n\t            this.context = (EMPTY_CONTEXT);\n\t            this._hasExternalHostElement = isPresent(rootSelectorOrNode);\n\t            this._hostInjector = hostInjector;\n\t            this._hostProjectableNodes = projectableNodes;\n\t            return this.createInternal(rootSelectorOrNode);\n\t        };\n\t        /**\n\t         * Overwritten by implementations.\n\t         * Returns the ComponentRef for the host element for ViewType.HOST.\n\t         * @param {?} rootSelectorOrNode\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };\n\t        /**\n\t         * Overwritten by implementations.\n\t         * @param {?} templateNodeIndex\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };\n\t        /**\n\t         * @param {?} lastRootNode\n\t         * @param {?} allNodes\n\t         * @param {?} disposables\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.init = function (lastRootNode, allNodes, disposables) {\n\t            this.lastRootNode = lastRootNode;\n\t            this.allNodes = allNodes;\n\t            this.disposables = disposables;\n\t            if (this.type === ViewType.COMPONENT) {\n\t                this.dirtyParentQueriesInternal();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} token\n\t         * @param {?} nodeIndex\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {\n\t            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n\t            var /** @type {?} */ result = UNDEFINED$1;\n\t            var /** @type {?} */ view = this;\n\t            while (result === UNDEFINED$1) {\n\t                if (isPresent(nodeIndex)) {\n\t                    result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);\n\t                }\n\t                if (result === UNDEFINED$1 && view.type === ViewType.HOST) {\n\t                    result = view._hostInjector.get(token, notFoundValue);\n\t                }\n\t                nodeIndex = view.parentIndex;\n\t                view = view.parentView;\n\t            }\n\t            return result;\n\t        };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @param {?} token\n\t         * @param {?} nodeIndex\n\t         * @param {?} notFoundResult\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {\n\t            return notFoundResult;\n\t        };\n\t        /**\n\t         * @param {?} nodeIndex\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.detachAndDestroy = function () {\n\t            if (this.viewContainer) {\n\t                this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));\n\t            }\n\t            else if (this.appRef) {\n\t                this.appRef.detachView(this.ref);\n\t            }\n\t            else if (this._hasExternalHostElement) {\n\t                this.detach();\n\t            }\n\t            this.destroy();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.destroy = function () {\n\t            var _this = this;\n\t            if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n\t                return;\n\t            }\n\t            var /** @type {?} */ hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;\n\t            if (this.disposables) {\n\t                for (var /** @type {?} */ i = 0; i < this.disposables.length; i++) {\n\t                    this.disposables[i]();\n\t                }\n\t            }\n\t            this.destroyInternal();\n\t            this.dirtyParentQueriesInternal();\n\t            if (this._animationContext) {\n\t                this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });\n\t            }\n\t            else {\n\t                this.renderer.destroyView(hostElement, this.allNodes);\n\t            }\n\t            this.cdMode = ChangeDetectorStatus.Destroyed;\n\t        };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.destroyInternal = function () { };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.detachInternal = function () { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.detach = function () {\n\t            var _this = this;\n\t            this.detachInternal();\n\t            if (this._animationContext) {\n\t                this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });\n\t            }\n\t            else {\n\t                this._renderDetach();\n\t            }\n\t            if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer &&\n\t                this.declaredViewContainer.projectedViews) {\n\t                var /** @type {?} */ projectedViews = this.declaredViewContainer.projectedViews;\n\t                var /** @type {?} */ index = projectedViews.indexOf(this);\n\t                // perf: pop is faster than splice!\n\t                if (index >= projectedViews.length - 1) {\n\t                    projectedViews.pop();\n\t                }\n\t                else {\n\t                    projectedViews.splice(index, 1);\n\t                }\n\t            }\n\t            this.appRef = null;\n\t            this.viewContainer = null;\n\t            this.dirtyParentQueriesInternal();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype._renderDetach = function () {\n\t            if (this._directRenderer) {\n\t                this.visitRootNodesInternal(this._directRenderer.remove, null);\n\t            }\n\t            else {\n\t                this.renderer.detachView(this.flatRootNodes);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} appRef\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.attachToAppRef = function (appRef) {\n\t            if (this.viewContainer) {\n\t                throw new Error('This view is already attached to a ViewContainer!');\n\t            }\n\t            this.appRef = appRef;\n\t            this.dirtyParentQueriesInternal();\n\t        };\n\t        /**\n\t         * @param {?} viewContainer\n\t         * @param {?} prevView\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.attachAfter = function (viewContainer, prevView) {\n\t            if (this.appRef) {\n\t                throw new Error('This view is already attached directly to the ApplicationRef!');\n\t            }\n\t            this._renderAttach(viewContainer, prevView);\n\t            this.viewContainer = viewContainer;\n\t            if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {\n\t                if (!this.declaredViewContainer.projectedViews) {\n\t                    this.declaredViewContainer.projectedViews = [];\n\t                }\n\t                this.declaredViewContainer.projectedViews.push(this);\n\t            }\n\t            this.dirtyParentQueriesInternal();\n\t        };\n\t        /**\n\t         * @param {?} viewContainer\n\t         * @param {?} prevView\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.moveAfter = function (viewContainer, prevView) {\n\t            this._renderAttach(viewContainer, prevView);\n\t            this.dirtyParentQueriesInternal();\n\t        };\n\t        /**\n\t         * @param {?} viewContainer\n\t         * @param {?} prevView\n\t         * @return {?}\n\t         */\n\t        AppView.prototype._renderAttach = function (viewContainer, prevView) {\n\t            var /** @type {?} */ prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;\n\t            if (this._directRenderer) {\n\t                var /** @type {?} */ nextSibling = this._directRenderer.nextSibling(prevNode);\n\t                if (nextSibling) {\n\t                    this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);\n\t                }\n\t                else {\n\t                    var /** @type {?} */ parentElement = this._directRenderer.parentElement(prevNode);\n\t                    if (parentElement) {\n\t                        this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                this.renderer.attachViewAfter(prevNode, this.flatRootNodes);\n\t            }\n\t        };\n\t        Object.defineProperty(AppView.prototype, \"changeDetectorRef\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.ref; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AppView.prototype, \"flatRootNodes\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ nodes = [];\n\t                this.visitRootNodesInternal(addToArray, nodes);\n\t                return nodes;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} parentElement\n\t         * @param {?} ngContentIndex\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {\n\t            if (this._directRenderer) {\n\t                this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);\n\t            }\n\t            else {\n\t                var /** @type {?} */ nodes = [];\n\t                this.visitProjectedNodes(ngContentIndex, addToArray, nodes);\n\t                this.renderer.projectNodes(parentElement, nodes);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} ngContentIndex\n\t         * @param {?} cb\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {\n\t            switch (this.type) {\n\t                case ViewType.EMBEDDED:\n\t                    this.parentView.visitProjectedNodes(ngContentIndex, cb, c);\n\t                    break;\n\t                case ViewType.COMPONENT:\n\t                    if (this.parentView.type === ViewType.HOST) {\n\t                        var /** @type {?} */ nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];\n\t                        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n\t                            cb(nodes[i], c);\n\t                        }\n\t                    }\n\t                    else {\n\t                        this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);\n\t                    }\n\t                    break;\n\t            }\n\t        };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @param {?} cb\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.visitRootNodesInternal = function (cb, c) { };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @param {?} nodeIndex\n\t         * @param {?} ngContentIndex\n\t         * @param {?} cb\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.dirtyParentQueriesInternal = function () { };\n\t        /**\n\t         * @param {?} throwOnChange\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.internalDetectChanges = function (throwOnChange) {\n\t            if (this.cdMode !== ChangeDetectorStatus.Detached) {\n\t                this.detectChanges(throwOnChange);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} throwOnChange\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.detectChanges = function (throwOnChange) {\n\t            var /** @type {?} */ s = _scope_check(this.clazz);\n\t            if (this.cdMode === ChangeDetectorStatus.Checked ||\n\t                this.cdMode === ChangeDetectorStatus.Errored)\n\t                return;\n\t            if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n\t                this.throwDestroyedError('detectChanges');\n\t            }\n\t            this.detectChangesInternal(throwOnChange);\n\t            if (this.cdMode === ChangeDetectorStatus.CheckOnce)\n\t                this.cdMode = ChangeDetectorStatus.Checked;\n\t            this.numberOfChecks++;\n\t            wtfLeave(s);\n\t        };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @param {?} throwOnChange\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.detectChangesInternal = function (throwOnChange) { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.markPathToRootAsCheckOnce = function () {\n\t            var /** @type {?} */ c = this;\n\t            while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {\n\t                if (c.cdMode === ChangeDetectorStatus.Checked) {\n\t                    c.cdMode = ChangeDetectorStatus.CheckOnce;\n\t                }\n\t                if (c.type === ViewType.COMPONENT) {\n\t                    c = c.parentView;\n\t                }\n\t                else {\n\t                    c = c.viewContainer ? c.viewContainer.parentView : null;\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.eventHandler = function (cb) {\n\t            return cb;\n\t        };\n\t        /**\n\t         * @param {?} details\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };\n\t        return AppView;\n\t    }());\n\t    var DebugAppView = (function (_super) {\n\t        __extends$14(DebugAppView, _super);\n\t        /**\n\t         * @param {?} clazz\n\t         * @param {?} componentType\n\t         * @param {?} type\n\t         * @param {?} viewUtils\n\t         * @param {?} parentView\n\t         * @param {?} parentIndex\n\t         * @param {?} parentNode\n\t         * @param {?} cdMode\n\t         * @param {?} staticNodeDebugInfos\n\t         * @param {?=} declaredViewContainer\n\t         */\n\t        function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {\n\t            if (declaredViewContainer === void 0) { declaredViewContainer = null; }\n\t            _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);\n\t            this.staticNodeDebugInfos = staticNodeDebugInfos;\n\t            this._currentDebugContext = null;\n\t        }\n\t        /**\n\t         * @param {?} context\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.create = function (context) {\n\t            this._resetDebug();\n\t            try {\n\t                return _super.prototype.create.call(this, context);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} rootSelectorOrNode\n\t         * @param {?} injector\n\t         * @param {?=} projectableNodes\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {\n\t            if (projectableNodes === void 0) { projectableNodes = null; }\n\t            this._resetDebug();\n\t            try {\n\t                return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} token\n\t         * @param {?} nodeIndex\n\t         * @param {?=} notFoundResult\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {\n\t            this._resetDebug();\n\t            try {\n\t                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.detach = function () {\n\t            this._resetDebug();\n\t            try {\n\t                _super.prototype.detach.call(this);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.destroy = function () {\n\t            this._resetDebug();\n\t            try {\n\t                _super.prototype.destroy.call(this);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} throwOnChange\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.detectChanges = function (throwOnChange) {\n\t            this._resetDebug();\n\t            try {\n\t                _super.prototype.detectChanges.call(this, throwOnChange);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };\n\t        /**\n\t         * @param {?} nodeIndex\n\t         * @param {?} rowNum\n\t         * @param {?} colNum\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {\n\t            return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);\n\t        };\n\t        /**\n\t         * @param {?} e\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype._rethrowWithContext = function (e) {\n\t            if (!(e instanceof ViewWrappedError)) {\n\t                if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {\n\t                    this.cdMode = ChangeDetectorStatus.Errored;\n\t                }\n\t                if (isPresent(this._currentDebugContext)) {\n\t                    throw new ViewWrappedError(e, this._currentDebugContext);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.eventHandler = function (cb) {\n\t            var _this = this;\n\t            var /** @type {?} */ superHandler = _super.prototype.eventHandler.call(this, cb);\n\t            return function (eventName, event) {\n\t                _this._resetDebug();\n\t                try {\n\t                    return superHandler.call(_this, eventName, event);\n\t                }\n\t                catch (e) {\n\t                    _this._rethrowWithContext(e);\n\t                    throw e;\n\t                }\n\t            };\n\t        };\n\t        return DebugAppView;\n\t    }(AppView));\n\t\n\t    /**\n\t     * A ViewContainer is created for elements that have a ViewContainerRef\n\t     * to keep track of the nested views.\n\t     */\n\t    var ViewContainer = (function () {\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} parentIndex\n\t         * @param {?} parentView\n\t         * @param {?} nativeElement\n\t         */\n\t        function ViewContainer(index, parentIndex, parentView, nativeElement) {\n\t            this.index = index;\n\t            this.parentIndex = parentIndex;\n\t            this.parentView = parentView;\n\t            this.nativeElement = nativeElement;\n\t        }\n\t        Object.defineProperty(ViewContainer.prototype, \"elementRef\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return new ElementRef(this.nativeElement); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainer.prototype, \"vcRef\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return new ViewContainerRef_(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainer.prototype, \"parentInjector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.parentView.injector(this.parentIndex); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainer.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.parentView.injector(this.index); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} throwOnChange\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {\n\t            if (this.nestedViews) {\n\t                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n\t                    this.nestedViews[i].detectChanges(throwOnChange);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.destroyNestedViews = function () {\n\t            if (this.nestedViews) {\n\t                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n\t                    this.nestedViews[i].destroy();\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {\n\t            if (this.nestedViews) {\n\t                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n\t                    this.nestedViews[i].visitRootNodesInternal(cb, c);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} nestedViewClass\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {\n\t            var /** @type {?} */ result = [];\n\t            if (this.nestedViews) {\n\t                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n\t                    var /** @type {?} */ nestedView = this.nestedViews[i];\n\t                    if (nestedView.clazz === nestedViewClass) {\n\t                        result.push(callback(nestedView));\n\t                    }\n\t                }\n\t            }\n\t            if (this.projectedViews) {\n\t                for (var /** @type {?} */ i = 0; i < this.projectedViews.length; i++) {\n\t                    var /** @type {?} */ projectedView = this.projectedViews[i];\n\t                    if (projectedView.clazz === nestedViewClass) {\n\t                        result.push(callback(projectedView));\n\t                    }\n\t                }\n\t            }\n\t            return result;\n\t        };\n\t        /**\n\t         * @param {?} view\n\t         * @param {?} currentIndex\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.moveView = function (view, currentIndex) {\n\t            var /** @type {?} */ previousIndex = this.nestedViews.indexOf(view);\n\t            if (view.type === ViewType.COMPONENT) {\n\t                throw new Error(\"Component views can't be moved!\");\n\t            }\n\t            var /** @type {?} */ nestedViews = this.nestedViews;\n\t            if (nestedViews == null) {\n\t                nestedViews = [];\n\t                this.nestedViews = nestedViews;\n\t            }\n\t            nestedViews.splice(previousIndex, 1);\n\t            nestedViews.splice(currentIndex, 0, view);\n\t            var /** @type {?} */ prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;\n\t            view.moveAfter(this, prevView);\n\t        };\n\t        /**\n\t         * @param {?} view\n\t         * @param {?} viewIndex\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.attachView = function (view, viewIndex) {\n\t            if (view.type === ViewType.COMPONENT) {\n\t                throw new Error(\"Component views can't be moved!\");\n\t            }\n\t            var /** @type {?} */ nestedViews = this.nestedViews;\n\t            if (nestedViews == null) {\n\t                nestedViews = [];\n\t                this.nestedViews = nestedViews;\n\t            }\n\t            // perf: array.push is faster than array.splice!\n\t            if (viewIndex >= nestedViews.length) {\n\t                nestedViews.push(view);\n\t            }\n\t            else {\n\t                nestedViews.splice(viewIndex, 0, view);\n\t            }\n\t            var /** @type {?} */ prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;\n\t            view.attachAfter(this, prevView);\n\t        };\n\t        /**\n\t         * @param {?} viewIndex\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.detachView = function (viewIndex) {\n\t            var /** @type {?} */ view = this.nestedViews[viewIndex];\n\t            // perf: array.pop is faster than array.splice!\n\t            if (viewIndex >= this.nestedViews.length - 1) {\n\t                this.nestedViews.pop();\n\t            }\n\t            else {\n\t                this.nestedViews.splice(viewIndex, 1);\n\t            }\n\t            if (view.type === ViewType.COMPONENT) {\n\t                throw new Error(\"Component views can't be moved!\");\n\t            }\n\t            view.detach();\n\t            return view;\n\t        };\n\t        return ViewContainer;\n\t    }());\n\t\n\t    var /** @type {?} */ __core_private__ = {\n\t        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,\n\t        ChangeDetectorStatus: ChangeDetectorStatus,\n\t        constructDependencies: constructDependencies,\n\t        LifecycleHooks: LifecycleHooks,\n\t        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,\n\t        ReflectorReader: ReflectorReader,\n\t        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,\n\t        ComponentRef_: ComponentRef_,\n\t        ViewContainer: ViewContainer,\n\t        AppView: AppView,\n\t        DebugAppView: DebugAppView,\n\t        NgModuleInjector: NgModuleInjector,\n\t        registerModuleFactory: registerModuleFactory,\n\t        ViewType: ViewType,\n\t        view_utils: view_utils,\n\t        ViewMetadata: ViewMetadata,\n\t        DebugContext: DebugContext,\n\t        StaticNodeDebugInfo: StaticNodeDebugInfo,\n\t        devModeEqual: devModeEqual,\n\t        UNINITIALIZED: UNINITIALIZED,\n\t        ValueUnwrapper: ValueUnwrapper,\n\t        RenderDebugInfo: RenderDebugInfo,\n\t        TemplateRef_: TemplateRef_,\n\t        ReflectionCapabilities: ReflectionCapabilities,\n\t        makeDecorator: makeDecorator,\n\t        DebugDomRootRenderer: DebugDomRootRenderer,\n\t        Console: Console,\n\t        reflector: reflector,\n\t        Reflector: Reflector,\n\t        NoOpAnimationPlayer: NoOpAnimationPlayer,\n\t        AnimationPlayer: AnimationPlayer,\n\t        AnimationSequencePlayer: AnimationSequencePlayer,\n\t        AnimationGroupPlayer: AnimationGroupPlayer,\n\t        AnimationKeyframe: AnimationKeyframe,\n\t        prepareFinalAnimationStyles: prepareFinalAnimationStyles,\n\t        balanceAnimationKeyframes: balanceAnimationKeyframes,\n\t        flattenStyles: flattenStyles,\n\t        clearStyles: clearStyles,\n\t        renderStyles: renderStyles,\n\t        collectAndResolveStyles: collectAndResolveStyles,\n\t        APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,\n\t        AnimationStyles: AnimationStyles,\n\t        ANY_STATE: ANY_STATE,\n\t        DEFAULT_STATE: DEFAULT_STATE,\n\t        EMPTY_STATE: EMPTY_STATE,\n\t        FILL_STYLE_FLAG: FILL_STYLE_FLAG,\n\t        ComponentStillLoadingError: ComponentStillLoadingError,\n\t        isPromise: isPromise,\n\t        isObservable: isObservable,\n\t        AnimationTransition: AnimationTransition\n\t    };\n\t\n\t    exports.createPlatform = createPlatform;\n\t    exports.assertPlatform = assertPlatform;\n\t    exports.destroyPlatform = destroyPlatform;\n\t    exports.getPlatform = getPlatform;\n\t    exports.PlatformRef = PlatformRef;\n\t    exports.ApplicationRef = ApplicationRef;\n\t    exports.enableProdMode = enableProdMode;\n\t    exports.isDevMode = isDevMode;\n\t    exports.createPlatformFactory = createPlatformFactory;\n\t    exports.NgProbeToken = NgProbeToken;\n\t    exports.APP_ID = APP_ID;\n\t    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;\n\t    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;\n\t    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;\n\t    exports.APP_INITIALIZER = APP_INITIALIZER;\n\t    exports.ApplicationInitStatus = ApplicationInitStatus;\n\t    exports.DebugElement = DebugElement;\n\t    exports.DebugNode = DebugNode;\n\t    exports.asNativeElements = asNativeElements;\n\t    exports.getDebugNode = getDebugNode;\n\t    exports.Testability = Testability;\n\t    exports.TestabilityRegistry = TestabilityRegistry;\n\t    exports.setTestabilityGetter = setTestabilityGetter;\n\t    exports.TRANSLATIONS = TRANSLATIONS;\n\t    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;\n\t    exports.LOCALE_ID = LOCALE_ID;\n\t    exports.ApplicationModule = ApplicationModule;\n\t    exports.wtfCreateScope = wtfCreateScope;\n\t    exports.wtfLeave = wtfLeave;\n\t    exports.wtfStartTimeRange = wtfStartTimeRange;\n\t    exports.wtfEndTimeRange = wtfEndTimeRange;\n\t    exports.Type = Type;\n\t    exports.EventEmitter = EventEmitter;\n\t    exports.ErrorHandler = ErrorHandler;\n\t    exports.AnimationTransitionEvent = AnimationTransitionEvent;\n\t    exports.AnimationPlayer = AnimationPlayer;\n\t    exports.AnimationStyles = AnimationStyles;\n\t    exports.AnimationKeyframe = AnimationKeyframe;\n\t    exports.Sanitizer = Sanitizer;\n\t    exports.SecurityContext = SecurityContext;\n\t    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;\n\t    exports.Attribute = Attribute;\n\t    exports.ContentChild = ContentChild;\n\t    exports.ContentChildren = ContentChildren;\n\t    exports.Query = Query;\n\t    exports.ViewChild = ViewChild;\n\t    exports.ViewChildren = ViewChildren;\n\t    exports.Component = Component;\n\t    exports.Directive = Directive;\n\t    exports.HostBinding = HostBinding;\n\t    exports.HostListener = HostListener;\n\t    exports.Input = Input;\n\t    exports.Output = Output;\n\t    exports.Pipe = Pipe;\n\t    exports.AfterContentChecked = AfterContentChecked;\n\t    exports.AfterContentInit = AfterContentInit;\n\t    exports.AfterViewChecked = AfterViewChecked;\n\t    exports.AfterViewInit = AfterViewInit;\n\t    exports.DoCheck = DoCheck;\n\t    exports.OnChanges = OnChanges;\n\t    exports.OnDestroy = OnDestroy;\n\t    exports.OnInit = OnInit;\n\t    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;\n\t    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;\n\t    exports.NgModule = NgModule;\n\t    exports.ViewEncapsulation = ViewEncapsulation;\n\t    exports.Version = Version;\n\t    exports.VERSION = VERSION;\n\t    exports.Class = Class;\n\t    exports.forwardRef = forwardRef;\n\t    exports.resolveForwardRef = resolveForwardRef;\n\t    exports.Injector = Injector;\n\t    exports.ReflectiveInjector = ReflectiveInjector;\n\t    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;\n\t    exports.ReflectiveKey = ReflectiveKey;\n\t    exports.OpaqueToken = OpaqueToken;\n\t    exports.Inject = Inject;\n\t    exports.Optional = Optional;\n\t    exports.Injectable = Injectable;\n\t    exports.Self = Self;\n\t    exports.SkipSelf = SkipSelf;\n\t    exports.Host = Host;\n\t    exports.NgZone = NgZone;\n\t    exports.RenderComponentType = RenderComponentType;\n\t    exports.Renderer = Renderer;\n\t    exports.RootRenderer = RootRenderer;\n\t    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;\n\t    exports.Compiler = Compiler;\n\t    exports.CompilerFactory = CompilerFactory;\n\t    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;\n\t    exports.ComponentFactory = ComponentFactory;\n\t    exports.ComponentRef = ComponentRef;\n\t    exports.ComponentFactoryResolver = ComponentFactoryResolver;\n\t    exports.ElementRef = ElementRef;\n\t    exports.NgModuleFactory = NgModuleFactory;\n\t    exports.NgModuleRef = NgModuleRef;\n\t    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;\n\t    exports.getModuleFactory = getModuleFactory;\n\t    exports.QueryList = QueryList;\n\t    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;\n\t    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;\n\t    exports.TemplateRef = TemplateRef;\n\t    exports.ViewContainerRef = ViewContainerRef;\n\t    exports.EmbeddedViewRef = EmbeddedViewRef;\n\t    exports.ViewRef = ViewRef;\n\t    exports.ChangeDetectionStrategy = ChangeDetectionStrategy;\n\t    exports.ChangeDetectorRef = ChangeDetectorRef;\n\t    exports.CollectionChangeRecord = CollectionChangeRecord;\n\t    exports.DefaultIterableDiffer = DefaultIterableDiffer;\n\t    exports.IterableDiffers = IterableDiffers;\n\t    exports.KeyValueChangeRecord = KeyValueChangeRecord;\n\t    exports.KeyValueDiffers = KeyValueDiffers;\n\t    exports.SimpleChange = SimpleChange;\n\t    exports.WrappedValue = WrappedValue;\n\t    exports.platformCore = platformCore;\n\t    exports.__core_private__ = __core_private__;\n\t    exports.AUTO_STYLE = AUTO_STYLE;\n\t    exports.AnimationEntryMetadata = AnimationEntryMetadata;\n\t    exports.AnimationStateMetadata = AnimationStateMetadata;\n\t    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;\n\t    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;\n\t    exports.AnimationMetadata = AnimationMetadata;\n\t    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;\n\t    exports.AnimationStyleMetadata = AnimationStyleMetadata;\n\t    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;\n\t    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;\n\t    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;\n\t    exports.AnimationGroupMetadata = AnimationGroupMetadata;\n\t    exports.animate = animate;\n\t    exports.group = group;\n\t    exports.sequence = sequence;\n\t    exports.style = style;\n\t    exports.state = state;\n\t    exports.keyframes = keyframes;\n\t    exports.transition = transition;\n\t    exports.trigger = trigger;\n\t\n\t}));\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(4);\n\tvar Subscriber_1 = __webpack_require__(6);\n\tvar Subscription_1 = __webpack_require__(1);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(13);\n\tvar SubjectSubscription_1 = __webpack_require__(12);\n\tvar rxSubscriber_1 = __webpack_require__(2);\n\t/**\n\t * @class SubjectSubscriber<T>\n\t */\n\tvar SubjectSubscriber = (function (_super) {\n\t    __extends(SubjectSubscriber, _super);\n\t    function SubjectSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t    }\n\t    return SubjectSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.SubjectSubscriber = SubjectSubscriber;\n\t/**\n\t * @class Subject<T>\n\t */\n\tvar Subject = (function (_super) {\n\t    __extends(Subject, _super);\n\t    function Subject() {\n\t        _super.call(this);\n\t        this.observers = [];\n\t        this.closed = false;\n\t        this.isStopped = false;\n\t        this.hasError = false;\n\t        this.thrownError = null;\n\t    }\n\t    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n\t        return new SubjectSubscriber(this);\n\t    };\n\t    Subject.prototype.lift = function (operator) {\n\t        var subject = new AnonymousSubject(this, this);\n\t        subject.operator = operator;\n\t        return subject;\n\t    };\n\t    Subject.prototype.next = function (value) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        if (!this.isStopped) {\n\t            var observers = this.observers;\n\t            var len = observers.length;\n\t            var copy = observers.slice();\n\t            for (var i = 0; i < len; i++) {\n\t                copy[i].next(value);\n\t            }\n\t        }\n\t    };\n\t    Subject.prototype.error = function (err) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.hasError = true;\n\t        this.thrownError = err;\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].error(err);\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.complete = function () {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].complete();\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.unsubscribe = function () {\n\t        this.isStopped = true;\n\t        this.closed = true;\n\t        this.observers = null;\n\t    };\n\t    Subject.prototype._trySubscribe = function (subscriber) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else {\n\t            return _super.prototype._trySubscribe.call(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype._subscribe = function (subscriber) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.isStopped) {\n\t            subscriber.complete();\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else {\n\t            this.observers.push(subscriber);\n\t            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype.asObservable = function () {\n\t        var observable = new Observable_1.Observable();\n\t        observable.source = this;\n\t        return observable;\n\t    };\n\t    Subject.create = function (destination, source) {\n\t        return new AnonymousSubject(destination, source);\n\t    };\n\t    return Subject;\n\t}(Observable_1.Observable));\n\texports.Subject = Subject;\n\t/**\n\t * @class AnonymousSubject<T>\n\t */\n\tvar AnonymousSubject = (function (_super) {\n\t    __extends(AnonymousSubject, _super);\n\t    function AnonymousSubject(destination, source) {\n\t        _super.call(this);\n\t        this.destination = destination;\n\t        this.source = source;\n\t    }\n\t    AnonymousSubject.prototype.next = function (value) {\n\t        var destination = this.destination;\n\t        if (destination && destination.next) {\n\t            destination.next(value);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.error = function (err) {\n\t        var destination = this.destination;\n\t        if (destination && destination.error) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.complete = function () {\n\t        var destination = this.destination;\n\t        if (destination && destination.complete) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    AnonymousSubject.prototype._subscribe = function (subscriber) {\n\t        var source = this.source;\n\t        if (source) {\n\t            return this.source.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t    };\n\t    return AnonymousSubject;\n\t}(Subject));\n\texports.AnonymousSubject = AnonymousSubject;\n\t//# sourceMappingURL=Subject.js.map\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(1);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubjectSubscription = (function (_super) {\n\t    __extends(SubjectSubscription, _super);\n\t    function SubjectSubscription(subject, subscriber) {\n\t        _super.call(this);\n\t        this.subject = subject;\n\t        this.subscriber = subscriber;\n\t        this.closed = false;\n\t    }\n\t    SubjectSubscription.prototype.unsubscribe = function () {\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.closed = true;\n\t        var subject = this.subject;\n\t        var observers = subject.observers;\n\t        this.subject = null;\n\t        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n\t            return;\n\t        }\n\t        var subscriberIndex = observers.indexOf(this.subscriber);\n\t        if (subscriberIndex !== -1) {\n\t            observers.splice(subscriberIndex, 1);\n\t        }\n\t    };\n\t    return SubjectSubscription;\n\t}(Subscription_1.Subscription));\n\texports.SubjectSubscription = SubjectSubscription;\n\t//# sourceMappingURL=SubjectSubscription.js.map\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an action is invalid because the object has been\n\t * unsubscribed.\n\t *\n\t * @see {@link Subject}\n\t * @see {@link BehaviorSubject}\n\t *\n\t * @class ObjectUnsubscribedError\n\t */\n\tvar ObjectUnsubscribedError = (function (_super) {\n\t    __extends(ObjectUnsubscribedError, _super);\n\t    function ObjectUnsubscribedError() {\n\t        var err = _super.call(this, 'object unsubscribed');\n\t        this.name = err.name = 'ObjectUnsubscribedError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return ObjectUnsubscribedError;\n\t}(Error));\n\texports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n\t//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when one or more errors have occurred during the\n\t * `unsubscribe` of a {@link Subscription}.\n\t */\n\tvar UnsubscriptionError = (function (_super) {\n\t    __extends(UnsubscriptionError, _super);\n\t    function UnsubscriptionError(errors) {\n\t        _super.call(this);\n\t        this.errors = errors;\n\t        var err = Error.call(this, errors ?\n\t            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n\t        this.name = err.name = 'UnsubscriptionError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return UnsubscriptionError;\n\t}(Error));\n\texports.UnsubscriptionError = UnsubscriptionError;\n\t//# sourceMappingURL=UnsubscriptionError.js.map\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\texports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n\t//# sourceMappingURL=isArray.js.map\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction isObject(x) {\n\t    return x != null && typeof x === 'object';\n\t}\n\texports.isObject = isObject;\n\t//# sourceMappingURL=isObject.js.map\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subscriber_1 = __webpack_require__(6);\n\tvar rxSubscriber_1 = __webpack_require__(2);\n\tvar Observer_1 = __webpack_require__(5);\n\tfunction toSubscriber(nextOrObserver, error, complete) {\n\t    if (nextOrObserver) {\n\t        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n\t            return nextOrObserver;\n\t        }\n\t        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n\t            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n\t        }\n\t    }\n\t    if (!nextOrObserver && !error && !complete) {\n\t        return new Subscriber_1.Subscriber(Observer_1.empty);\n\t    }\n\t    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n\t}\n\texports.toSubscriber = toSubscriber;\n\t//# sourceMappingURL=toSubscriber.js.map\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar errorObject_1 = __webpack_require__(8);\n\tvar tryCatchTarget;\n\tfunction tryCatcher() {\n\t    try {\n\t        return tryCatchTarget.apply(this, arguments);\n\t    }\n\t    catch (e) {\n\t        errorObject_1.errorObject.e = e;\n\t        return errorObject_1.errorObject;\n\t    }\n\t}\n\tfunction tryCatch(fn) {\n\t    tryCatchTarget = fn;\n\t    return tryCatcher;\n\t}\n\texports.tryCatch = tryCatch;\n\t;\n\t//# sourceMappingURL=tryCatch.js.map\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// component-injector.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/static/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4761c9881ba98e27ffed","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar ComponentInjector = (function () {\n    function ComponentInjector(resolver) {\n        this.resolver = resolver;\n    }\n    /**\n     * Inject a component into a ViewContainerRef element\n     * @param container ViewContainerRef element where to inject the component\n     * @param componentSelector string Selector of the component which should be injected\n     * @returns {ComponentRef<any>} Returns ComponentRef of the injected component\n     */\n    ComponentInjector.prototype.inject = function (container, componentSelector) {\n        var injectedComponent;\n        var componentFactory = this.getComponentFactory(componentSelector);\n        if (componentFactory) {\n            injectedComponent = this.injectComponentFactory(container, componentFactory);\n        }\n        else {\n            console.warn('Component [' + componentSelector + '] cannot be found! ' +\n                'Make sure it is included in the `entryComponents` list.');\n        }\n        return injectedComponent ? injectedComponent : null;\n    };\n    /**\n     * Set public properties of the component specified by the componentRef\n     * @param componentRef ComponentRef object where should be attached the properties\n     * @param properties Object which contains the keys (name of the property) and values (value of the property).\n     */\n    ComponentInjector.prototype.setProperties = function (componentRef, properties) {\n        if (componentRef) {\n            for (var property in properties) {\n                if (properties.hasOwnProperty(property)) {\n                    componentRef.instance[property] = properties[property];\n                }\n            }\n        }\n    };\n    /**\n     * Remove a component by its ComponentRef\n     * @param componentRef ComponentRef which should be removed\n     */\n    ComponentInjector.prototype.remove = function (componentRef) {\n        componentRef.destroy();\n        componentRef = null;\n    };\n    /**\n     * Get the component factory class from the _factories list based on its selector string name\n     * The list of the _factories is created based on the list of components listed in the entryComponents: [...]\n     * section of the @NgModule(...)\n     * @param componentSelector string Selector of the component\n     * @returns {ComponentFactory<any>|null} Returns the factory of the component or NULL if there is no such component\n     */\n    ComponentInjector.prototype.getComponentFactory = function (componentSelector) {\n        var componentFactory;\n        var factories = Array.from(this.resolver['_factories']);\n        var factory = factories.find(function (component) {\n            return component[1].selector === componentSelector;\n        });\n        if (factory) {\n            var factoryClass = factory[0];\n            componentFactory = this.resolver.resolveComponentFactory(factoryClass);\n        }\n        return componentFactory ? componentFactory : null;\n    };\n    /**\n     * Inject a componentFactory into a container element\n     * @param container ViewContainerRef container element where to inject the component\n     * @param componentFactory ComponentFactory which should be injected in the  container element\n     * @returns {ComponentRef<any>} returns ComponentRef of the injected componentFactory\n     */\n    ComponentInjector.prototype.injectComponentFactory = function (container, componentFactory) {\n        return container.createComponent(componentFactory);\n    };\n    return ComponentInjector;\n}());\nComponentInjector = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [core_1.ComponentFactoryResolver])\n], ComponentInjector);\nexports.ComponentInjector = ComponentInjector;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/component-injector.ts\n// module id = 0\n// module chunks = 0","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subscription.js\n// module id = 1\n// module chunks = 0","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/symbol/rxSubscriber.js\n// module id = 2\n// module chunks = 0","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/root.js\n// module id = 3\n// module chunks = 0","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is  called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Observable.js\n// module id = 4\n// module chunks = 0","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Observer.js\n// module id = 5\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=Subscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subscriber.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/symbol/observable.js\n// module id = 7\n// module chunks = 0","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/errorObject.js\n// module id = 8\n// module chunks = 0","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isFunction.js\n// module id = 9\n// module chunks = 0","/**\n * @license Angular v2.4.10\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/symbol/observable'), require('rxjs/Subject'), require('rxjs/Observable')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/symbol/observable', 'rxjs/Subject', 'rxjs/Observable'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.rxjs_symbol_observable,global.Rx,global.Rx));\n}(this, function (exports,rxjs_symbol_observable,rxjs_Subject,rxjs_Observable) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */ globalScope;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = (self);\n        }\n        else {\n            globalScope = (global);\n        }\n    }\n    else {\n        globalScope = (window);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var /** @type {?} */ global$1 = globalScope;\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function getTypeNameForDebugging(type) {\n        return type['name'] || typeof type;\n    }\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPresent(obj) {\n        return obj != null;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isBlank(obj) {\n        return obj == null;\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (token == null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return \"\" + token.overriddenName;\n        }\n        if (token.name) {\n            return \"\" + token.name;\n        }\n        var /** @type {?} */ res = token.toString();\n        var /** @type {?} */ newLineIndex = res.indexOf('\\n');\n        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    /**\n     * @param {?} o\n     * @return {?}\n     */\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function print(obj) {\n        // tslint:disable-next-line:no-console\n        console.log(obj);\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function warn(obj) {\n        console.warn(obj);\n    }\n    var /** @type {?} */ _symbolIterator = null;\n    /**\n     * @return {?}\n     */\n    function getSymbolIterator() {\n        if (!_symbolIterator) {\n            if (((globalScope)).Symbol && Symbol.iterator) {\n                _symbolIterator = Symbol.iterator;\n            }\n            else {\n                // es6-shim specific logic\n                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);\n                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n                    var /** @type {?} */ key = keys[i];\n                    if (key !== 'entries' && key !== 'size' &&\n                        ((Map)).prototype[key] === Map.prototype['entries']) {\n                        _symbolIterator = key;\n                    }\n                }\n            }\n        }\n        return _symbolIterator;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n\n    var /** @type {?} */ _nextClassId = 0;\n    var /** @type {?} */ Reflect = global$1.Reflect;\n    /**\n     * @param {?} annotation\n     * @return {?}\n     */\n    function extractAnnotation(annotation) {\n        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {\n            // it is a decorator, extract annotation\n            annotation = annotation.annotation;\n        }\n        return annotation;\n    }\n    /**\n     * @param {?} fnOrArray\n     * @param {?} key\n     * @return {?}\n     */\n    function applyParams(fnOrArray, key) {\n        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||\n            fnOrArray === Number || fnOrArray === Array) {\n            throw new Error(\"Can not use native \" + stringify(fnOrArray) + \" as constructor\");\n        }\n        if (typeof fnOrArray === 'function') {\n            return fnOrArray;\n        }\n        if (Array.isArray(fnOrArray)) {\n            var /** @type {?} */ annotations = fnOrArray;\n            var /** @type {?} */ annoLength = annotations.length - 1;\n            var /** @type {?} */ fn = fnOrArray[annoLength];\n            if (typeof fn !== 'function') {\n                throw new Error(\"Last position of Class method array must be Function in key \" + key + \" was '\" + stringify(fn) + \"'\");\n            }\n            if (annoLength != fn.length) {\n                throw new Error(\"Number of annotations (\" + annoLength + \") does not match number of arguments (\" + fn.length + \") in the function: \" + stringify(fn));\n            }\n            var /** @type {?} */ paramsAnnotations = [];\n            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {\n                var /** @type {?} */ paramAnnotations = [];\n                paramsAnnotations.push(paramAnnotations);\n                var /** @type {?} */ annotation = annotations[i];\n                if (Array.isArray(annotation)) {\n                    for (var /** @type {?} */ j = 0; j < annotation.length; j++) {\n                        paramAnnotations.push(extractAnnotation(annotation[j]));\n                    }\n                }\n                else if (typeof annotation === 'function') {\n                    paramAnnotations.push(extractAnnotation(annotation));\n                }\n                else {\n                    paramAnnotations.push(annotation);\n                }\n            }\n            Reflect.defineMetadata('parameters', paramsAnnotations, fn);\n            return fn;\n        }\n        throw new Error(\"Only Function or Array is supported in Class definition for key '\" + key + \"' is '\" + stringify(fnOrArray) + \"'\");\n    }\n    /**\n     * Provides a way for expressing ES6 classes with parameter annotations in ES5.\n     *\n     * ## Basic Example\n     *\n     * ```\n     * var Greeter = ng.Class({\n     *   constructor: function(name) {\n     *     this.name = name;\n     *   },\n     *\n     *   greet: function() {\n     *     alert('Hello ' + this.name + '!');\n     *   }\n     * });\n     * ```\n     *\n     * is equivalent to ES6:\n     *\n     * ```\n     * class Greeter {\n     *   constructor(name) {\n     *     this.name = name;\n     *   }\n     *\n     *   greet() {\n     *     alert('Hello ' + this.name + '!');\n     *   }\n     * }\n     * ```\n     *\n     * or equivalent to ES5:\n     *\n     * ```\n     * var Greeter = function (name) {\n     *   this.name = name;\n     * }\n     *\n     * Greeter.prototype.greet = function () {\n     *   alert('Hello ' + this.name + '!');\n     * }\n     * ```\n     *\n     * ### Example with parameter annotations\n     *\n     * ```\n     * var MyService = ng.Class({\n     *   constructor: [String, [new Optional(), Service], function(name, myService) {\n     *     ...\n     *   }]\n     * });\n     * ```\n     *\n     * is equivalent to ES6:\n     *\n     * ```\n     * class MyService {\n     *   constructor(name: string, \\@Optional() myService: Service) {\n     *     ...\n     *   }\n     * }\n     * ```\n     *\n     * ### Example with inheritance\n     *\n     * ```\n     * var Shape = ng.Class({\n     *   constructor: (color) {\n     *     this.color = color;\n     *   }\n     * });\n     *\n     * var Square = ng.Class({\n     *   extends: Shape,\n     *   constructor: function(color, size) {\n     *     Shape.call(this, color);\n     *     this.size = size;\n     *   }\n     * });\n     * ```\n     * \\@stable\n     * @param {?} clsDef\n     * @return {?}\n     */\n    function Class(clsDef) {\n        var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');\n        var /** @type {?} */ proto = constructor.prototype;\n        if (clsDef.hasOwnProperty('extends')) {\n            if (typeof clsDef.extends === 'function') {\n                ((constructor)).prototype = proto =\n                    Object.create(((clsDef.extends)).prototype);\n            }\n            else {\n                throw new Error(\"Class definition 'extends' property must be a constructor function was: \" + stringify(clsDef.extends));\n            }\n        }\n        for (var key in clsDef) {\n            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {\n                proto[key] = applyParams(clsDef[key], key);\n            }\n        }\n        if (this && this.annotations instanceof Array) {\n            Reflect.defineMetadata('annotations', this.annotations, constructor);\n        }\n        var /** @type {?} */ constructorName = constructor['name'];\n        if (!constructorName || constructorName === 'constructor') {\n            ((constructor))['overriddenName'] = \"class\" + _nextClassId++;\n        }\n        return (constructor);\n    }\n    /**\n     * @param {?} name\n     * @param {?} props\n     * @param {?=} parentClass\n     * @param {?=} chainFn\n     * @return {?}\n     */\n    function makeDecorator(name, props, parentClass, chainFn) {\n        if (chainFn === void 0) { chainFn = null; }\n        var /** @type {?} */ metaCtor = makeMetadataCtor([props]);\n        /**\n         * @param {?} objOrType\n         * @return {?}\n         */\n        function DecoratorFactory(objOrType) {\n            if (!(Reflect && Reflect.getOwnMetadata)) {\n                throw 'reflect-metadata shim is required when using class decorators';\n            }\n            if (this instanceof DecoratorFactory) {\n                metaCtor.call(this, objOrType);\n                return this;\n            }\n            var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);\n            var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];\n            chainAnnotation.push(annotationInstance);\n            var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {\n                var /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];\n                annotations.push(annotationInstance);\n                Reflect.defineMetadata('annotations', annotations, cls);\n                return cls;\n            });\n            TypeDecorator.annotations = chainAnnotation;\n            TypeDecorator.Class = Class;\n            if (chainFn)\n                chainFn(TypeDecorator);\n            return TypeDecorator;\n        }\n        if (parentClass) {\n            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        DecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n        ((DecoratorFactory)).annotationCls = DecoratorFactory;\n        return DecoratorFactory;\n    }\n    /**\n     * @param {?} props\n     * @return {?}\n     */\n    function makeMetadataCtor(props) {\n        return function ctor() {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            props.forEach(function (prop, i) {\n                var /** @type {?} */ argVal = args[i];\n                if (Array.isArray(prop)) {\n                    // plain parameter\n                    _this[prop[0]] = argVal === undefined ? prop[1] : argVal;\n                }\n                else {\n                    for (var propName in prop) {\n                        _this[propName] =\n                            argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];\n                    }\n                }\n            });\n        };\n    }\n    /**\n     * @param {?} name\n     * @param {?} props\n     * @param {?=} parentClass\n     * @return {?}\n     */\n    function makeParamDecorator(name, props, parentClass) {\n        var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n        /**\n         * @param {...?} args\n         * @return {?}\n         */\n        function ParamDecoratorFactory() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            if (this instanceof ParamDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var /** @type {?} */ annotationInstance = new ((_a = ((ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n            ((ParamDecorator)).annotation = annotationInstance;\n            return ParamDecorator;\n            /**\n             * @param {?} cls\n             * @param {?} unusedKey\n             * @param {?} index\n             * @return {?}\n             */\n            function ParamDecorator(cls, unusedKey, index) {\n                var /** @type {?} */ parameters = Reflect.getOwnMetadata('parameters', cls) || [];\n                // there might be gaps if some in between parameters do not have annotations.\n                // we pad with nulls.\n                while (parameters.length <= index) {\n                    parameters.push(null);\n                }\n                parameters[index] = parameters[index] || [];\n                parameters[index].push(annotationInstance);\n                Reflect.defineMetadata('parameters', parameters, cls);\n                return cls;\n            }\n            var _a;\n        }\n        if (parentClass) {\n            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        ParamDecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n        ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n        return ParamDecoratorFactory;\n    }\n    /**\n     * @param {?} name\n     * @param {?} props\n     * @param {?=} parentClass\n     * @return {?}\n     */\n    function makePropDecorator(name, props, parentClass) {\n        var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n        /**\n         * @param {...?} args\n         * @return {?}\n         */\n        function PropDecoratorFactory() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            if (this instanceof PropDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var /** @type {?} */ decoratorInstance = new ((_a = ((PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n            return function PropDecorator(target, name) {\n                var /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};\n                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n                meta[name].unshift(decoratorInstance);\n                Reflect.defineMetadata('propMetadata', meta, target.constructor);\n            };\n            var _a;\n        }\n        if (parentClass) {\n            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        PropDecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n        ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n        return PropDecoratorFactory;\n    }\n\n    /**\n     * Inject decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Inject = makeParamDecorator('Inject', [['token', undefined]]);\n    /**\n     * Optional decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Optional = makeParamDecorator('Optional', []);\n    /**\n     * Injectable decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Injectable = (makeDecorator('Injectable', []));\n    /**\n     * Self decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Self = makeParamDecorator('Self', []);\n    /**\n     * SkipSelf decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ SkipSelf = makeParamDecorator('SkipSelf', []);\n    /**\n     * Host decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Host = makeParamDecorator('Host', []);\n\n    var OpaqueToken = (function () {\n        /**\n         * @param {?} _desc\n         */\n        function OpaqueToken(_desc) {\n            this._desc = _desc;\n        }\n        /**\n         * @return {?}\n         */\n        OpaqueToken.prototype.toString = function () { return \"Token \" + this._desc; };\n        OpaqueToken.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        OpaqueToken.ctorParameters = function () { return [\n            null,\n        ]; };\n        return OpaqueToken;\n    }());\n\n    /**\n     * This token can be used to create a virtual provider that will populate the\n     * `entryComponents` fields of components and ng modules based on its `useValue`.\n     * All components that are referenced in the `useValue` value (either directly\n     * or in a nested array or map) will be added to the `entryComponents` property.\n     *\n     * ### Example\n     * The following example shows how the router can populate the `entryComponents`\n     * field of an NgModule based on the router configuration which refers\n     * to components.\n     *\n     * ```typescript\n     * // helper function inside the router\n     * function provideRoutes(routes) {\n     *   return [\n     *     {provide: ROUTES, useValue: routes},\n     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n     *   ];\n     * }\n     *\n     * // user code\n     * let routes = [\n     *   {path: '/root', component: RootComp},\n     *   {path: '/teams', component: TeamsComp}\n     * ];\n     *\n     * @NgModule({\n     *   providers: [provideRoutes(routes)]\n     * })\n     * class ModuleWithRoutes {}\n     * ```\n     *\n     * @experimental\n     */\n    var /** @type {?} */ ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');\n    /**\n     * Attribute decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);\n    /**\n     * Base class for query metadata.\n     *\n     * See {\\@link ContentChildren}, {\\@link ContentChild}, {\\@link ViewChildren}, {\\@link ViewChild} for\n     * more information.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var Query = (function () {\n        function Query() {\n        }\n        return Query;\n    }());\n    /**\n     * ContentChildren decorator and metadata.\n     *\n     *  @stable\n     *  @Annotation\n     */\n    var /** @type {?} */ ContentChildren = (makePropDecorator('ContentChildren', [\n        ['selector', undefined], {\n            first: false,\n            isViewQuery: false,\n            descendants: false,\n            read: undefined,\n        }\n    ], Query));\n    /**\n     * ContentChild decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ ContentChild = makePropDecorator('ContentChild', [\n        ['selector', undefined], {\n            first: true,\n            isViewQuery: false,\n            descendants: true,\n            read: undefined,\n        }\n    ], Query);\n    /**\n     * ViewChildren decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ ViewChildren = makePropDecorator('ViewChildren', [\n        ['selector', undefined], {\n            first: false,\n            isViewQuery: true,\n            descendants: true,\n            read: undefined,\n        }\n    ], Query);\n    /**\n     * ViewChild decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ ViewChild = makePropDecorator('ViewChild', [\n        ['selector', undefined], {\n            first: true,\n            isViewQuery: true,\n            descendants: true,\n            read: undefined,\n        }\n    ], Query);\n\n    var ChangeDetectionStrategy = {};\n    ChangeDetectionStrategy.OnPush = 0;\n    ChangeDetectionStrategy.Default = 1;\n    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\n    ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\n    var ChangeDetectorStatus = {};\n    ChangeDetectorStatus.CheckOnce = 0;\n    ChangeDetectorStatus.Checked = 1;\n    ChangeDetectorStatus.CheckAlways = 2;\n    ChangeDetectorStatus.Detached = 3;\n    ChangeDetectorStatus.Errored = 4;\n    ChangeDetectorStatus.Destroyed = 5;\n    ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\n    ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\n    /**\n     * @param {?} changeDetectionStrategy\n     * @return {?}\n     */\n    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n        return isBlank(changeDetectionStrategy) ||\n            changeDetectionStrategy === ChangeDetectionStrategy.Default;\n    }\n\n    /**\n     * Directive decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Directive = (makeDecorator('Directive', {\n        selector: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        host: undefined,\n        providers: undefined,\n        exportAs: undefined,\n        queries: undefined\n    }));\n    /**\n     * Component decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Component = (makeDecorator('Component', {\n        selector: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        host: undefined,\n        exportAs: undefined,\n        moduleId: undefined,\n        providers: undefined,\n        viewProviders: undefined,\n        changeDetection: ChangeDetectionStrategy.Default,\n        queries: undefined,\n        templateUrl: undefined,\n        template: undefined,\n        styleUrls: undefined,\n        styles: undefined,\n        animations: undefined,\n        encapsulation: undefined,\n        interpolation: undefined,\n        entryComponents: undefined\n    }, Directive));\n    /**\n     * Pipe decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Pipe = (makeDecorator('Pipe', {\n        name: undefined,\n        pure: true,\n    }));\n    /**\n     * Input decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);\n    /**\n     * Output decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);\n    /**\n     * HostBinding decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);\n    /**\n     * HostListener decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var LifecycleHooks = {};\n    LifecycleHooks.OnInit = 0;\n    LifecycleHooks.OnDestroy = 1;\n    LifecycleHooks.DoCheck = 2;\n    LifecycleHooks.OnChanges = 3;\n    LifecycleHooks.AfterContentInit = 4;\n    LifecycleHooks.AfterContentChecked = 5;\n    LifecycleHooks.AfterViewInit = 6;\n    LifecycleHooks.AfterViewChecked = 7;\n    LifecycleHooks[LifecycleHooks.OnInit] = \"OnInit\";\n    LifecycleHooks[LifecycleHooks.OnDestroy] = \"OnDestroy\";\n    LifecycleHooks[LifecycleHooks.DoCheck] = \"DoCheck\";\n    LifecycleHooks[LifecycleHooks.OnChanges] = \"OnChanges\";\n    LifecycleHooks[LifecycleHooks.AfterContentInit] = \"AfterContentInit\";\n    LifecycleHooks[LifecycleHooks.AfterContentChecked] = \"AfterContentChecked\";\n    LifecycleHooks[LifecycleHooks.AfterViewInit] = \"AfterViewInit\";\n    LifecycleHooks[LifecycleHooks.AfterViewChecked] = \"AfterViewChecked\";\n    var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = [\n        LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,\n        LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,\n        LifecycleHooks.AfterViewChecked\n    ];\n    /**\n     * \\@whatItDoes Lifecycle hook that is called when any data-bound property of a directive changes.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n     *\n     * \\@description\n     * `ngOnChanges` is called right after the data-bound properties have been checked and before view\n     * and content children are checked if at least one of them has changed.\n     * The `changes` parameter contains the changed properties.\n     *\n     * See {\\@linkDocs guide/lifecycle-hooks#onchanges \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var OnChanges = (function () {\n        function OnChanges() {\n        }\n        /**\n         * @abstract\n         * @param {?} changes\n         * @return {?}\n         */\n        OnChanges.prototype.ngOnChanges = function (changes) { };\n        return OnChanges;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called after data-bound properties of a directive are\n     * initialized.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n     *\n     * \\@description\n     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\n     * first time, and before any of its children have been checked. It is invoked only once when the\n     * directive is instantiated.\n     *\n     * See {\\@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var OnInit = (function () {\n        function OnInit() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        OnInit.prototype.ngOnInit = function () { };\n        return OnInit;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called when Angular dirty checks a directive.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n     *\n     * \\@description\n     * `ngDoCheck` gets called to check the changes in the directives in addition to the default\n     * algorithm. The default change detection algorithm looks for differences by comparing\n     * bound-property values by reference across change detection runs.\n     *\n     * Note that a directive typically should not use both `DoCheck` and {\\@link OnChanges} to respond to\n     * changes on the same input, as `ngOnChanges` will continue to be called when the default change\n     * detector detects changes.\n     *\n     * See {\\@link KeyValueDiffers} and {\\@link IterableDiffers} for implementing custom dirty checking\n     * for collections.\n     *\n     * See {\\@linkDocs guide/lifecycle-hooks#docheck \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var DoCheck = (function () {\n        function DoCheck() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        DoCheck.prototype.ngDoCheck = function () { };\n        return DoCheck;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called when a directive, pipe or service is destroyed.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n     *\n     * \\@description\n     * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the\n     * instance is destroyed.\n     *\n     * See {\\@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var OnDestroy = (function () {\n        function OnDestroy() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        OnDestroy.prototype.ngOnDestroy = function () { };\n        return OnDestroy;\n    }());\n    /**\n     *\n     * \\@whatItDoes Lifecycle hook that is called after a directive's content has been fully\n     * initialized.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n     *\n     * \\@description\n     * See {\\@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AfterContentInit = (function () {\n        function AfterContentInit() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AfterContentInit.prototype.ngAfterContentInit = function () { };\n        return AfterContentInit;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called after every check of a directive's content.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n     *\n     * \\@description\n     * See {\\@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AfterContentChecked = (function () {\n        function AfterContentChecked() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AfterContentChecked.prototype.ngAfterContentChecked = function () { };\n        return AfterContentChecked;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called after a component's view has been fully\n     * initialized.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n     *\n     * \\@description\n     * See {\\@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AfterViewInit = (function () {\n        function AfterViewInit() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AfterViewInit.prototype.ngAfterViewInit = function () { };\n        return AfterViewInit;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called after every check of a component's view.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n     *\n     * \\@description\n     * See {\\@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AfterViewChecked = (function () {\n        function AfterViewChecked() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AfterViewChecked.prototype.ngAfterViewChecked = function () { };\n        return AfterViewChecked;\n    }());\n\n    /**\n     * Defines a schema that will allow:\n     * - any non-Angular elements with a `-` in their name,\n     * - any properties on elements with a `-` in their name which is the common rule for custom\n     * elements.\n     *\n     * @stable\n     */\n    var /** @type {?} */ CUSTOM_ELEMENTS_SCHEMA = {\n        name: 'custom-elements'\n    };\n    /**\n     * Defines a schema that will allow any property on any element.\n     *\n     * @experimental\n     */\n    var /** @type {?} */ NO_ERRORS_SCHEMA = {\n        name: 'no-errors-schema'\n    };\n    /**\n     * NgModule decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ NgModule = (makeDecorator('NgModule', {\n        providers: undefined,\n        declarations: undefined,\n        imports: undefined,\n        exports: undefined,\n        entryComponents: undefined,\n        bootstrap: undefined,\n        schemas: undefined,\n        id: undefined,\n    }));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ViewEncapsulation = {};\n    ViewEncapsulation.Emulated = 0;\n    ViewEncapsulation.Native = 1;\n    ViewEncapsulation.None = 2;\n    ViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\n    ViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\n    ViewEncapsulation[ViewEncapsulation.None] = \"None\";\n    /**\n     * Metadata properties available for configuring Views.\n     *\n     * For details on the `\\@Component` annotation, see {\\@link Component}.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   selector: 'greet',\n     *   template: 'Hello {{name}}!',\n     * })\n     * class Greet {\n     *   name: string;\n     *\n     *   constructor() {\n     *     this.name = 'World';\n     *   }\n     * }\n     * ```\n     *\n     * @deprecated Use Component instead.\n     *\n     * {\\@link Component}\n     */\n    var ViewMetadata = (function () {\n        /**\n         * @param {?=} __0\n         */\n        function ViewMetadata(_a) {\n            var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;\n            this.templateUrl = templateUrl;\n            this.template = template;\n            this.styleUrls = styleUrls;\n            this.styles = styles;\n            this.encapsulation = encapsulation;\n            this.animations = animations;\n            this.interpolation = interpolation;\n        }\n        return ViewMetadata;\n    }());\n\n    /**\n     * \\@whatItDoes Represents the version of Angular\n     *\n     * \\@stable\n     */\n    var Version = (function () {\n        /**\n         * @param {?} full\n         */\n        function Version(full) {\n            this.full = full;\n        }\n        Object.defineProperty(Version.prototype, \"major\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.full.split('.')[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Version.prototype, \"minor\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.full.split('.')[1]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Version.prototype, \"patch\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.full.split('.').slice(2).join('.'); },\n            enumerable: true,\n            configurable: true\n        });\n        return Version;\n    }());\n    /**\n     * @stable\n     */\n    var /** @type {?} */ VERSION = new Version('2.4.10');\n\n    /**\n     * Allows to refer to references which are not yet defined.\n     *\n     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n     * DI is declared,\n     * but not yet defined. It is also used when the `token` which we use when creating a query is not\n     * yet defined.\n     *\n     * ### Example\n     * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n     * \\@experimental\n     * @param {?} forwardRefFn\n     * @return {?}\n     */\n    function forwardRef(forwardRefFn) {\n        ((forwardRefFn)).__forward_ref__ = forwardRef;\n        ((forwardRefFn)).toString = function () { return stringify(this()); };\n        return (((forwardRefFn)));\n    }\n    /**\n     * Lazily retrieves the reference value from a forwardRef.\n     *\n     * Acts as the identity function when given a non-forward-ref value.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n     *\n     * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n     *\n     * See: {\\@link forwardRef}\n     * \\@experimental\n     * @param {?} type\n     * @return {?}\n     */\n    function resolveForwardRef(type) {\n        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n            type.__forward_ref__ === forwardRef) {\n            return ((type))();\n        }\n        else {\n            return type;\n        }\n    }\n\n    var /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();\n    var /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    var _NullInjector = (function () {\n        function _NullInjector() {\n        }\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        _NullInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n            if (notFoundValue === _THROW_IF_NOT_FOUND) {\n                throw new Error(\"No provider for \" + stringify(token) + \"!\");\n            }\n            return notFoundValue;\n        };\n        return _NullInjector;\n    }());\n    /**\n     * \\@whatItDoes Injector interface\n     * \\@howToUse\n     * ```\n     * const injector: Injector = ...;\n     * injector.get(...);\n     * ```\n     *\n     * \\@description\n     * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n     *\n     * ### Example\n     *\n     * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n     *\n     * `Injector` returns itself when given `Injector` as a token:\n     * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n     *\n     * \\@stable\n     * @abstract\n     */\n    var Injector = (function () {\n        function Injector() {\n        }\n        /**\n         * Retrieves an instance from the injector based on the provided token.\n         * If not found:\n         * - Throws {\\@link NoProviderError} if no `notFoundValue` that is not equal to\n         * Injector.THROW_IF_NOT_FOUND is given\n         * - Returns the `notFoundValue` otherwise\n         * @abstract\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        Injector.prototype.get = function (token, notFoundValue) { };\n        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n        Injector.NULL = new _NullInjector();\n        return Injector;\n    }());\n\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * \\@stable\n     */\n    var BaseError = (function (_super) {\n        __extends$1(BaseError, _super);\n        /**\n         * @param {?} message\n         */\n        function BaseError(message) {\n            _super.call(this, message);\n            // Errors don't use current this, instead they create a new instance.\n            // We have to do forward all of our api to the nativeInstance.\n            // TODO(bradfordcsmith): Remove this hack when\n            //     google/closure-compiler/issues/2102 is fixed.\n            var nativeError = new Error(message);\n            this._nativeError = nativeError;\n        }\n        Object.defineProperty(BaseError.prototype, \"message\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._nativeError.message; },\n            /**\n             * @param {?} message\n             * @return {?}\n             */\n            set: function (message) { this._nativeError.message = message; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BaseError.prototype, \"name\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._nativeError.name; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BaseError.prototype, \"stack\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return ((this._nativeError)).stack; },\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) { ((this._nativeError)).stack = value; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        BaseError.prototype.toString = function () { return this._nativeError.toString(); };\n        return BaseError;\n    }(Error));\n    /**\n     * \\@stable\n     */\n    var WrappedError = (function (_super) {\n        __extends$1(WrappedError, _super);\n        /**\n         * @param {?} message\n         * @param {?} error\n         */\n        function WrappedError(message, error) {\n            _super.call(this, message + \" caused by: \" + (error instanceof Error ? error.message : error));\n            this.originalError = error;\n        }\n        Object.defineProperty(WrappedError.prototype, \"stack\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))\n                    .stack;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return WrappedError;\n    }(BaseError));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @param {?} keys\n     * @return {?}\n     */\n    function findFirstClosedCycle(keys) {\n        var /** @type {?} */ res = [];\n        for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n            if (res.indexOf(keys[i]) > -1) {\n                res.push(keys[i]);\n                return res;\n            }\n            res.push(keys[i]);\n        }\n        return res;\n    }\n    /**\n     * @param {?} keys\n     * @return {?}\n     */\n    function constructResolvingPath(keys) {\n        if (keys.length > 1) {\n            var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n            var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n            return ' (' + tokenStrs.join(' -> ') + ')';\n        }\n        return '';\n    }\n    /**\n     * Base class for all errors arising from misconfigured providers.\n     * \\@stable\n     */\n    var AbstractProviderError = (function (_super) {\n        __extends(AbstractProviderError, _super);\n        /**\n         * @param {?} injector\n         * @param {?} key\n         * @param {?} constructResolvingMessage\n         */\n        function AbstractProviderError(injector, key, constructResolvingMessage) {\n            _super.call(this, 'DI Error');\n            this.keys = [key];\n            this.injectors = [injector];\n            this.constructResolvingMessage = constructResolvingMessage;\n            this.message = this.constructResolvingMessage(this.keys);\n        }\n        /**\n         * @param {?} injector\n         * @param {?} key\n         * @return {?}\n         */\n        AbstractProviderError.prototype.addKey = function (injector, key) {\n            this.injectors.push(injector);\n            this.keys.push(key);\n            this.message = this.constructResolvingMessage(this.keys);\n        };\n        return AbstractProviderError;\n    }(BaseError));\n    /**\n     * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n     * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b:B) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     * \\@stable\n     */\n    var NoProviderError = (function (_super) {\n        __extends(NoProviderError, _super);\n        /**\n         * @param {?} injector\n         * @param {?} key\n         */\n        function NoProviderError(injector, key) {\n            _super.call(this, injector, key, function (keys) {\n                var first = stringify(keys[0].token);\n                return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n            });\n        }\n        return NoProviderError;\n    }(AbstractProviderError));\n    /**\n     * Thrown when dependencies form a cycle.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n     *\n     * ```typescript\n     * var injector = Injector.resolveAndCreate([\n     *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n     *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n     * ]);\n     *\n     * expect(() => injector.get(\"one\")).toThrowError();\n     * ```\n     *\n     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n     * \\@stable\n     */\n    var CyclicDependencyError = (function (_super) {\n        __extends(CyclicDependencyError, _super);\n        /**\n         * @param {?} injector\n         * @param {?} key\n         */\n        function CyclicDependencyError(injector, key) {\n            _super.call(this, injector, key, function (keys) {\n                return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n            });\n        }\n        return CyclicDependencyError;\n    }(AbstractProviderError));\n    /**\n     * Thrown when a constructing type returns with an Error.\n     *\n     * The `InstantiationError` class contains the original error plus the dependency graph which caused\n     * this object to be instantiated.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor() {\n     *     throw new Error('message');\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n     * try {\n     *   injector.get(A);\n     * } catch (e) {\n     *   expect(e instanceof InstantiationError).toBe(true);\n     *   expect(e.originalException.message).toEqual(\"message\");\n     *   expect(e.originalStack).toBeDefined();\n     * }\n     * ```\n     * \\@stable\n     */\n    var InstantiationError = (function (_super) {\n        __extends(InstantiationError, _super);\n        /**\n         * @param {?} injector\n         * @param {?} originalException\n         * @param {?} originalStack\n         * @param {?} key\n         */\n        function InstantiationError(injector, originalException, originalStack, key) {\n            _super.call(this, 'DI Error', originalException);\n            this.keys = [key];\n            this.injectors = [injector];\n        }\n        /**\n         * @param {?} injector\n         * @param {?} key\n         * @return {?}\n         */\n        InstantiationError.prototype.addKey = function (injector, key) {\n            this.injectors.push(injector);\n            this.keys.push(key);\n        };\n        Object.defineProperty(InstantiationError.prototype, \"message\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ first = stringify(this.keys[0].token);\n                return this.originalError.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(this.keys) + \".\";\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(InstantiationError.prototype, \"causeKey\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.keys[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        return InstantiationError;\n    }(WrappedError));\n    /**\n     * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n     * creation.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n     * ```\n     * \\@stable\n     */\n    var InvalidProviderError = (function (_super) {\n        __extends(InvalidProviderError, _super);\n        /**\n         * @param {?} provider\n         */\n        function InvalidProviderError(provider) {\n            _super.call(this, \"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n        }\n        return InvalidProviderError;\n    }(BaseError));\n    /**\n     * Thrown when the class has no annotation information.\n     *\n     * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n     * need to be injected into the constructor.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     *\n     * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n     *\n     * ```typescript\n     * class B {}\n     *\n     * class A {\n     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n     * ```\n     * \\@stable\n     */\n    var NoAnnotationError = (function (_super) {\n        __extends(NoAnnotationError, _super);\n        /**\n         * @param {?} typeOrFunc\n         * @param {?} params\n         */\n        function NoAnnotationError(typeOrFunc, params) {\n            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));\n        }\n        /**\n         * @param {?} typeOrFunc\n         * @param {?} params\n         * @return {?}\n         */\n        NoAnnotationError._genMessage = function (typeOrFunc, params) {\n            var /** @type {?} */ signature = [];\n            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n                var /** @type {?} */ parameter = params[i];\n                if (!parameter || parameter.length == 0) {\n                    signature.push('?');\n                }\n                else {\n                    signature.push(parameter.map(stringify).join(' '));\n                }\n            }\n            return 'Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n                signature.join(', ') + '). ' +\n                'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n                stringify(typeOrFunc) + '\\' is decorated with Injectable.';\n        };\n        return NoAnnotationError;\n    }(BaseError));\n    /**\n     * Thrown when getting an object by index.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n     *\n     * ```typescript\n     * class A {}\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n     *\n     * expect(() => injector.getAt(100)).toThrowError();\n     * ```\n     * \\@stable\n     */\n    var OutOfBoundsError = (function (_super) {\n        __extends(OutOfBoundsError, _super);\n        /**\n         * @param {?} index\n         */\n        function OutOfBoundsError(index) {\n            _super.call(this, \"Index \" + index + \" is out-of-bounds.\");\n        }\n        return OutOfBoundsError;\n    }(BaseError));\n    /**\n     * Thrown when a multi provider and a regular provider are bound to the same token.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\n     *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n     *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n     * ])).toThrowError();\n     * ```\n     */\n    var MixingMultiProvidersWithRegularProvidersError = (function (_super) {\n        __extends(MixingMultiProvidersWithRegularProvidersError, _super);\n        /**\n         * @param {?} provider1\n         * @param {?} provider2\n         */\n        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +\n                provider2.toString());\n        }\n        return MixingMultiProvidersWithRegularProvidersError;\n    }(BaseError));\n\n    /**\n     * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n     *\n     * Keys have:\n     * - a system-wide unique `id`.\n     * - a `token`.\n     *\n     * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n     * the\n     * injector to store created objects in a more efficient way.\n     *\n     * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n     * resolving\n     * providers.\n     * \\@experimental\n     */\n    var ReflectiveKey = (function () {\n        /**\n         * Private\n         * @param {?} token\n         * @param {?} id\n         */\n        function ReflectiveKey(token, id) {\n            this.token = token;\n            this.id = id;\n            if (!token) {\n                throw new Error('Token must be defined!');\n            }\n        }\n        Object.defineProperty(ReflectiveKey.prototype, \"displayName\", {\n            /**\n             * Returns a stringified token.\n             * @return {?}\n             */\n            get: function () { return stringify(this.token); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Retrieves a `Key` for a token.\n         * @param {?} token\n         * @return {?}\n         */\n        ReflectiveKey.get = function (token) {\n            return _globalKeyRegistry.get(resolveForwardRef(token));\n        };\n        Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n            /**\n             * @return {?} the number of keys registered in the system.\n             */\n            get: function () { return _globalKeyRegistry.numberOfKeys; },\n            enumerable: true,\n            configurable: true\n        });\n        return ReflectiveKey;\n    }());\n    /**\n     * \\@internal\n     */\n    var KeyRegistry = (function () {\n        function KeyRegistry() {\n            this._allKeys = new Map();\n        }\n        /**\n         * @param {?} token\n         * @return {?}\n         */\n        KeyRegistry.prototype.get = function (token) {\n            if (token instanceof ReflectiveKey)\n                return token;\n            if (this._allKeys.has(token)) {\n                return this._allKeys.get(token);\n            }\n            var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n            this._allKeys.set(token, newKey);\n            return newKey;\n        };\n        Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._allKeys.size; },\n            enumerable: true,\n            configurable: true\n        });\n        return KeyRegistry;\n    }());\n    var /** @type {?} */ _globalKeyRegistry = new KeyRegistry();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @whatItDoes Represents a type that a Component or other object is instances of.\n     *\n     * @description\n     *\n     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n     * the `MyCustomComponent` constructor function.\n     *\n     * @stable\n     */\n    var /** @type {?} */ Type = Function;\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    function isType(v) {\n        return typeof v === 'function';\n    }\n\n    /**\n     * Attention: This regex has to hold even if the code is minified!\n     */\n    var /** @type {?} */ DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{\\s*(\"use strict\";)?\\s*(return\\s+)?\\S+\\.apply\\(this,\\s*arguments\\)/;\n    var ReflectionCapabilities = (function () {\n        /**\n         * @param {?=} reflect\n         */\n        function ReflectionCapabilities(reflect) {\n            this._reflect = reflect || global$1.Reflect;\n        }\n        /**\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n        /**\n         * @param {?} t\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.factory = function (t) { return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new (t.bind.apply(t, [void 0].concat(args)))();\n        }; };\n        /**\n         * \\@internal\n         * @param {?} paramTypes\n         * @param {?} paramAnnotations\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {\n            var /** @type {?} */ result;\n            if (typeof paramTypes === 'undefined') {\n                result = new Array(paramAnnotations.length);\n            }\n            else {\n                result = new Array(paramTypes.length);\n            }\n            for (var /** @type {?} */ i = 0; i < result.length; i++) {\n                // TS outputs Object for parameters without types, while Traceur omits\n                // the annotations. For now we preserve the Traceur behavior to aid\n                // migration, but this can be revisited.\n                if (typeof paramTypes === 'undefined') {\n                    result[i] = [];\n                }\n                else if (paramTypes[i] != Object) {\n                    result[i] = [paramTypes[i]];\n                }\n                else {\n                    result[i] = [];\n                }\n                if (paramAnnotations && isPresent(paramAnnotations[i])) {\n                    result[i] = result[i].concat(paramAnnotations[i]);\n                }\n            }\n            return result;\n        };\n        /**\n         * @param {?} type\n         * @param {?} parentCtor\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {\n            // If we have no decorators, we only have function.length as metadata.\n            // In that case, to detect whether a child class declared an own constructor or not,\n            // we need to look inside of that constructor to check whether it is\n            // just calling the parent.\n            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n            // that sets 'design:paramtypes' to []\n            // if a class inherits from another class but has no ctor declared itself.\n            if (DELEGATE_CTOR.exec(type.toString())) {\n                return null;\n            }\n            // Prefer the direct API.\n            if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {\n                return ((type)).parameters;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;\n            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n                // Newer tsickle uses a function closure\n                // Retain the non-function case for compatibility with older tsickle\n                var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n                var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n                var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) {\n                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n                });\n                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n            }\n            // API for metadata created by invoking the decorators.\n            if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {\n                var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);\n                var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);\n                if (paramTypes || paramAnnotations) {\n                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n                }\n            }\n            // If a class has no decorators, at least create metadata\n            // based on function.length.\n            // Note: We know that this is a real constructor as we checked\n            // the content of the constructor above.\n            return new Array(((type.length))).fill(undefined);\n        };\n        /**\n         * @param {?} type\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.parameters = function (type) {\n            // Note: only report metadata if we have at least one class decorator\n            // to stay in sync with the static reflector.\n            if (!isType(type)) {\n                return [];\n            }\n            var /** @type {?} */ parentCtor = getParentCtor(type);\n            var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\n            if (!parameters && parentCtor !== Object) {\n                parameters = this.parameters(parentCtor);\n            }\n            return parameters || [];\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @param {?} parentCtor\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {\n            // Prefer the direct API.\n            if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {\n                var /** @type {?} */ annotations = ((typeOrFunc)).annotations;\n                if (typeof annotations === 'function' && annotations.annotations) {\n                    annotations = annotations.annotations;\n                }\n                return annotations;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {\n                return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);\n            }\n            // API for metadata created by invoking the decorators.\n            if (this._reflect && this._reflect.getOwnMetadata) {\n                return this._reflect.getOwnMetadata('annotations', typeOrFunc);\n            }\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return [];\n            }\n            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n            var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n            var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n            return parentAnnotations.concat(ownAnnotations);\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @param {?} parentCtor\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {\n            // Prefer the direct API.\n            if (((typeOrFunc)).propMetadata &&\n                ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n                var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;\n                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                    propMetadata = propMetadata.propMetadata;\n                }\n                return propMetadata;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (((typeOrFunc)).propDecorators &&\n                ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n                var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;\n                var /** @type {?} */ propMetadata_1 = ({});\n                Object.keys(propDecorators_1).forEach(function (prop) {\n                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n                });\n                return propMetadata_1;\n            }\n            // API for metadata created by invoking the decorators.\n            if (this._reflect && this._reflect.getOwnMetadata) {\n                return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);\n            }\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return {};\n            }\n            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n            var /** @type {?} */ propMetadata = {};\n            if (parentCtor !== Object) {\n                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);\n                Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                    propMetadata[propName] = parentPropMetadata_1[propName];\n                });\n            }\n            var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n            if (ownPropMetadata) {\n                Object.keys(ownPropMetadata).forEach(function (propName) {\n                    var /** @type {?} */ decorators = [];\n                    if (propMetadata.hasOwnProperty(propName)) {\n                        decorators.push.apply(decorators, propMetadata[propName]);\n                    }\n                    decorators.push.apply(decorators, ownPropMetadata[propName]);\n                    propMetadata[propName] = decorators;\n                });\n            }\n            return propMetadata;\n        };\n        /**\n         * @param {?} type\n         * @param {?} lcProperty\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\n            return type instanceof Type && lcProperty in type.prototype;\n        };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.getter = function (name) { return ((new Function('o', 'return o.' + name + ';'))); };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.setter = function (name) {\n            return ((new Function('o', 'v', 'return o.' + name + ' = v;')));\n        };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.method = function (name) {\n            var /** @type {?} */ functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n            return ((new Function('o', 'args', functionBody)));\n        };\n        /**\n         * @param {?} type\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.importUri = function (type) {\n            // StaticSymbol\n            if (typeof type === 'object' && type['filePath']) {\n                return type['filePath'];\n            }\n            // Runtime type\n            return \"./\" + stringify(type);\n        };\n        /**\n         * @param {?} name\n         * @param {?} moduleUrl\n         * @param {?} runtime\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };\n        /**\n         * @param {?} enumIdentifier\n         * @param {?} name\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\n        return ReflectionCapabilities;\n    }());\n    /**\n     * @param {?} decoratorInvocations\n     * @return {?}\n     */\n    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n        if (!decoratorInvocations) {\n            return [];\n        }\n        return decoratorInvocations.map(function (decoratorInvocation) {\n            var /** @type {?} */ decoratorType = decoratorInvocation.type;\n            var /** @type {?} */ annotationCls = decoratorType.annotationCls;\n            var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n        });\n    }\n    /**\n     * @param {?} ctor\n     * @return {?}\n     */\n    function getParentCtor(ctor) {\n        var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);\n        var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\n        // Note: We always use `Object` as the null value\n        // to simplify checking later on.\n        return parentCtor || Object;\n    }\n\n    /**\n     * Provides read-only access to reflection data about symbols. Used internally by Angular\n     * to power dependency injection and compilation.\n     * @abstract\n     */\n    var ReflectorReader = (function () {\n        function ReflectorReader() {\n        }\n        /**\n         * @abstract\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectorReader.prototype.parameters = function (typeOrFunc) { };\n        /**\n         * @abstract\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectorReader.prototype.annotations = function (typeOrFunc) { };\n        /**\n         * @abstract\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };\n        /**\n         * @abstract\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectorReader.prototype.importUri = function (typeOrFunc) { };\n        /**\n         * @abstract\n         * @param {?} name\n         * @param {?} moduleUrl\n         * @param {?} runtime\n         * @return {?}\n         */\n        ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { };\n        /**\n         * @abstract\n         * @param {?} identifier\n         * @param {?} name\n         * @return {?}\n         */\n        ReflectorReader.prototype.resolveEnum = function (identifier, name) { };\n        return ReflectorReader;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Provides access to reflection data about symbols. Used internally by Angular\n     * to power dependency injection and compilation.\n     */\n    var Reflector = (function (_super) {\n        __extends$2(Reflector, _super);\n        /**\n         * @param {?} reflectionCapabilities\n         */\n        function Reflector(reflectionCapabilities) {\n            _super.call(this);\n            this.reflectionCapabilities = reflectionCapabilities;\n        }\n        /**\n         * @param {?} caps\n         * @return {?}\n         */\n        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\n        /**\n         * @param {?} type\n         * @return {?}\n         */\n        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };\n        /**\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        Reflector.prototype.parameters = function (typeOrFunc) {\n            return this.reflectionCapabilities.parameters(typeOrFunc);\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        Reflector.prototype.annotations = function (typeOrFunc) {\n            return this.reflectionCapabilities.annotations(typeOrFunc);\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        Reflector.prototype.propMetadata = function (typeOrFunc) {\n            return this.reflectionCapabilities.propMetadata(typeOrFunc);\n        };\n        /**\n         * @param {?} type\n         * @param {?} lcProperty\n         * @return {?}\n         */\n        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n        };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };\n        /**\n         * @param {?} type\n         * @return {?}\n         */\n        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\n        /**\n         * @param {?} name\n         * @param {?} moduleUrl\n         * @param {?} runtime\n         * @return {?}\n         */\n        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {\n            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);\n        };\n        /**\n         * @param {?} identifier\n         * @param {?} name\n         * @return {?}\n         */\n        Reflector.prototype.resolveEnum = function (identifier, name) {\n            return this.reflectionCapabilities.resolveEnum(identifier, name);\n        };\n        return Reflector;\n    }(ReflectorReader));\n\n    /**\n     * The {@link Reflector} used internally in Angular to access metadata\n     * about symbols.\n     */\n    var /** @type {?} */ reflector = new Reflector(new ReflectionCapabilities());\n\n    /**\n     * `Dependency` is used by the framework to extend DI.\n     * This is internal to Angular and should not be used directly.\n     */\n    var ReflectiveDependency = (function () {\n        /**\n         * @param {?} key\n         * @param {?} optional\n         * @param {?} visibility\n         */\n        function ReflectiveDependency(key, optional, visibility) {\n            this.key = key;\n            this.optional = optional;\n            this.visibility = visibility;\n        }\n        /**\n         * @param {?} key\n         * @return {?}\n         */\n        ReflectiveDependency.fromKey = function (key) {\n            return new ReflectiveDependency(key, false, null);\n        };\n        return ReflectiveDependency;\n    }());\n    var /** @type {?} */ _EMPTY_LIST = [];\n    var ResolvedReflectiveProvider_ = (function () {\n        /**\n         * @param {?} key\n         * @param {?} resolvedFactories\n         * @param {?} multiProvider\n         */\n        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n            this.key = key;\n            this.resolvedFactories = resolvedFactories;\n            this.multiProvider = multiProvider;\n        }\n        Object.defineProperty(ResolvedReflectiveProvider_.prototype, \"resolvedFactory\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.resolvedFactories[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        return ResolvedReflectiveProvider_;\n    }());\n    /**\n     * An internal resolved representation of a factory function created by resolving {\\@link\n     * Provider}.\n     * \\@experimental\n     */\n    var ResolvedReflectiveFactory = (function () {\n        /**\n         * @param {?} factory\n         * @param {?} dependencies\n         */\n        function ResolvedReflectiveFactory(factory, dependencies) {\n            this.factory = factory;\n            this.dependencies = dependencies;\n        }\n        return ResolvedReflectiveFactory;\n    }());\n    /**\n     * Resolve a single provider.\n     * @param {?} provider\n     * @return {?}\n     */\n    function resolveReflectiveFactory(provider) {\n        var /** @type {?} */ factoryFn;\n        var /** @type {?} */ resolvedDeps;\n        if (provider.useClass) {\n            var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n            factoryFn = reflector.factory(useClass);\n            resolvedDeps = _dependenciesFor(useClass);\n        }\n        else if (provider.useExisting) {\n            factoryFn = function (aliasInstance) { return aliasInstance; };\n            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n        }\n        else if (provider.useFactory) {\n            factoryFn = provider.useFactory;\n            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n        }\n        else {\n            factoryFn = function () { return provider.useValue; };\n            resolvedDeps = _EMPTY_LIST;\n        }\n        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n    }\n    /**\n     * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n     *\n     * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n     * convenience provider syntax.\n     * @param {?} provider\n     * @return {?}\n     */\n    function resolveReflectiveProvider(provider) {\n        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);\n    }\n    /**\n     * Resolve a list of Providers.\n     * @param {?} providers\n     * @return {?}\n     */\n    function resolveReflectiveProviders(providers) {\n        var /** @type {?} */ normalized = _normalizeProviders(providers, []);\n        var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n        var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n        return Array.from(resolvedProviderMap.values());\n    }\n    /**\n     * Merges a list of ResolvedProviders into a list where\n     * each key is contained exactly once and multi providers\n     * have been merged.\n     * @param {?} providers\n     * @param {?} normalizedProvidersMap\n     * @return {?}\n     */\n    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n        for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n            var /** @type {?} */ provider = providers[i];\n            var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n            if (existing) {\n                if (provider.multiProvider !== existing.multiProvider) {\n                    throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);\n                }\n                if (provider.multiProvider) {\n                    for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n                        existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                    }\n                }\n                else {\n                    normalizedProvidersMap.set(provider.key.id, provider);\n                }\n            }\n            else {\n                var /** @type {?} */ resolvedProvider = void 0;\n                if (provider.multiProvider) {\n                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n                }\n                else {\n                    resolvedProvider = provider;\n                }\n                normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n            }\n        }\n        return normalizedProvidersMap;\n    }\n    /**\n     * @param {?} providers\n     * @param {?} res\n     * @return {?}\n     */\n    function _normalizeProviders(providers, res) {\n        providers.forEach(function (b) {\n            if (b instanceof Type) {\n                res.push({ provide: b, useClass: b });\n            }\n            else if (b && typeof b == 'object' && ((b)).provide !== undefined) {\n                res.push(/** @type {?} */ (b));\n            }\n            else if (b instanceof Array) {\n                _normalizeProviders(b, res);\n            }\n            else {\n                throw new InvalidProviderError(b);\n            }\n        });\n        return res;\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} dependencies\n     * @return {?}\n     */\n    function constructDependencies(typeOrFunc, dependencies) {\n        if (!dependencies) {\n            return _dependenciesFor(typeOrFunc);\n        }\n        else {\n            var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });\n            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n        }\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function _dependenciesFor(typeOrFunc) {\n        var /** @type {?} */ params = reflector.parameters(typeOrFunc);\n        if (!params)\n            return [];\n        if (params.some(function (p) { return p == null; })) {\n            throw new NoAnnotationError(typeOrFunc, params);\n        }\n        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} metadata\n     * @param {?} params\n     * @return {?}\n     */\n    function _extractToken(typeOrFunc, metadata, params) {\n        var /** @type {?} */ token = null;\n        var /** @type {?} */ optional = false;\n        if (!Array.isArray(metadata)) {\n            if (metadata instanceof Inject) {\n                return _createDependency(metadata.token, optional, null);\n            }\n            else {\n                return _createDependency(metadata, optional, null);\n            }\n        }\n        var /** @type {?} */ visibility = null;\n        for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {\n            var /** @type {?} */ paramMetadata = metadata[i];\n            if (paramMetadata instanceof Type) {\n                token = paramMetadata;\n            }\n            else if (paramMetadata instanceof Inject) {\n                token = paramMetadata.token;\n            }\n            else if (paramMetadata instanceof Optional) {\n                optional = true;\n            }\n            else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n                visibility = paramMetadata;\n            }\n        }\n        token = resolveForwardRef(token);\n        if (token != null) {\n            return _createDependency(token, optional, visibility);\n        }\n        else {\n            throw new NoAnnotationError(typeOrFunc, params);\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?} optional\n     * @param {?} visibility\n     * @return {?}\n     */\n    function _createDependency(token, optional, visibility) {\n        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n    }\n\n    // Threshold for the dynamic version\n    var /** @type {?} */ UNDEFINED = new Object();\n    /**\n     * A ReflectiveDependency injection container used for instantiating objects and resolving\n     * dependencies.\n     *\n     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n     * constructor dependencies.\n     *\n     * In typical use, application code asks for the dependencies in the constructor and they are\n     * resolved by the `Injector`.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n     *\n     * The following example creates an `Injector` configured to create `Engine` and `Car`.\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * var car = injector.get(Car);\n     * expect(car instanceof Car).toBe(true);\n     * expect(car.engine instanceof Engine).toBe(true);\n     * ```\n     *\n     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n     * resolve all of the object's dependencies automatically.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var ReflectiveInjector = (function () {\n        function ReflectiveInjector() {\n        }\n        /**\n         * Turns an array of provider definitions into an array of resolved providers.\n         *\n         * A resolution is a process of flattening multiple nested arrays and converting individual\n         * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n         *\n         * ```typescript\n         * \\@Injectable()\n         * class Engine {\n         * }\n         *\n         * \\@Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n         *\n         * expect(providers.length).toEqual(2);\n         *\n         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n         * expect(providers[0].key.displayName).toBe(\"Car\");\n         * expect(providers[0].dependencies.length).toEqual(1);\n         * expect(providers[0].factory).toBeDefined();\n         *\n         * expect(providers[1].key.displayName).toBe(\"Engine\");\n         * });\n         * ```\n         *\n         * See {\\@link ReflectiveInjector#fromResolvedProviders} for more info.\n         * @param {?} providers\n         * @return {?}\n         */\n        ReflectiveInjector.resolve = function (providers) {\n            return resolveReflectiveProviders(providers);\n        };\n        /**\n         * Resolves an array of providers and creates an injector from those providers.\n         *\n         * The passed-in providers can be an array of `Type`, {\\@link Provider},\n         * or a recursive array of more providers.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n         *\n         * ```typescript\n         * \\@Injectable()\n         * class Engine {\n         * }\n         *\n         * \\@Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         *\n         * This function is slower than the corresponding `fromResolvedProviders`\n         * because it needs to resolve the passed-in providers first.\n         * See {\\@link Injector#resolve} and {\\@link Injector#fromResolvedProviders}.\n         * @param {?} providers\n         * @param {?=} parent\n         * @return {?}\n         */\n        ReflectiveInjector.resolveAndCreate = function (providers, parent) {\n            if (parent === void 0) { parent = null; }\n            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n        };\n        /**\n         * Creates an injector from previously resolved providers.\n         *\n         * This API is the recommended way to construct injectors in performance-sensitive parts.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n         *\n         * ```typescript\n         * \\@Injectable()\n         * class Engine {\n         * }\n         *\n         * \\@Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, Engine]);\n         * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         * \\@experimental\n         * @param {?} providers\n         * @param {?=} parent\n         * @return {?}\n         */\n        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {\n            if (parent === void 0) { parent = null; }\n            return new ReflectiveInjector_(providers, parent);\n        };\n        /**\n         * Parent of this injector.\n         *\n         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n         * -->\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))\n         *\n         * ```typescript\n         * var parent = ReflectiveInjector.resolveAndCreate([]);\n         * var child = parent.resolveAndCreateChild([]);\n         * expect(child.parent).toBe(parent);\n         * ```\n         * @abstract\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.parent = function () { };\n        /**\n         * Resolves an array of providers and creates a child injector from those providers.\n         *\n         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n         * -->\n         *\n         * The passed-in providers can be an array of `Type`, {\\@link Provider},\n         * or a recursive array of more providers.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))\n         *\n         * ```typescript\n         * class ParentProvider {}\n         * class ChildProvider {}\n         *\n         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n         * var child = parent.resolveAndCreateChild([ChildProvider]);\n         *\n         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n         * ```\n         *\n         * This function is slower than the corresponding `createChildFromResolved`\n         * because it needs to resolve the passed-in providers first.\n         * See {\\@link Injector#resolve} and {\\@link Injector#createChildFromResolved}.\n         * @abstract\n         * @param {?} providers\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n        /**\n         * Creates a child injector from previously resolved providers.\n         *\n         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n         * -->\n         *\n         * This API is the recommended way to construct injectors in performance-sensitive parts.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))\n         *\n         * ```typescript\n         * class ParentProvider {}\n         * class ChildProvider {}\n         *\n         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n         *\n         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n         * var child = parent.createChildFromResolved(childProviders);\n         *\n         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n         * ```\n         * @abstract\n         * @param {?} providers\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n        /**\n         * Resolves a provider and instantiates an object in the context of the injector.\n         *\n         * The created object does not get cached by the injector.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))\n         *\n         * ```typescript\n         * \\@Injectable()\n         * class Engine {\n         * }\n         *\n         * \\@Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n         *\n         * var car = injector.resolveAndInstantiate(Car);\n         * expect(car.engine).toBe(injector.get(Engine));\n         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n         * ```\n         * @abstract\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n        /**\n         * Instantiates an object using a resolved provider in the context of the injector.\n         *\n         * The created object does not get cached by the injector.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))\n         *\n         * ```typescript\n         * \\@Injectable()\n         * class Engine {\n         * }\n         *\n         * \\@Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n         * var carProvider = ReflectiveInjector.resolve([Car])[0];\n         * var car = injector.instantiateResolved(carProvider);\n         * expect(car.engine).toBe(injector.get(Engine));\n         * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n         * ```\n         * @abstract\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n        /**\n         * @abstract\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n        return ReflectiveInjector;\n    }());\n    var ReflectiveInjector_ = (function () {\n        /**\n         * Private\n         * @param {?} _providers\n         * @param {?=} _parent\n         */\n        function ReflectiveInjector_(_providers, _parent) {\n            if (_parent === void 0) { _parent = null; }\n            /** @internal */\n            this._constructionCounter = 0;\n            this._providers = _providers;\n            this._parent = _parent;\n            var len = _providers.length;\n            this.keyIds = new Array(len);\n            this.objs = new Array(len);\n            for (var i = 0; i < len; i++) {\n                this.keyIds[i] = _providers[i].key.id;\n                this.objs[i] = UNDEFINED;\n            }\n        }\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n        };\n        Object.defineProperty(ReflectiveInjector_.prototype, \"parent\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parent; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} providers\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\n            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return this.createChildFromResolved(ResolvedReflectiveProviders);\n        };\n        /**\n         * @param {?} providers\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\n            var /** @type {?} */ inj = new ReflectiveInjector_(providers);\n            inj._parent = this;\n            return inj;\n        };\n        /**\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\n            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n        };\n        /**\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\n            return this._instantiateProvider(provider);\n        };\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {\n            if (index < 0 || index >= this._providers.length) {\n                throw new OutOfBoundsError(index);\n            }\n            return this._providers[index];\n        };\n        /**\n         * \\@internal\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._new = function (provider) {\n            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n                throw new CyclicDependencyError(this, provider.key);\n            }\n            return this._instantiateProvider(provider);\n        };\n        /**\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };\n        /**\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\n            if (provider.multiProvider) {\n                var /** @type {?} */ res = new Array(provider.resolvedFactories.length);\n                for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\n                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n                }\n                return res;\n            }\n            else {\n                return this._instantiate(provider, provider.resolvedFactories[0]);\n            }\n        };\n        /**\n         * @param {?} provider\n         * @param {?} ResolvedReflectiveFactory\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {\n            var _this = this;\n            var /** @type {?} */ factory = ResolvedReflectiveFactory.factory;\n            var /** @type {?} */ deps;\n            try {\n                deps =\n                    ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n            }\n            catch (e) {\n                if (e instanceof AbstractProviderError || e instanceof InstantiationError) {\n                    e.addKey(this, provider.key);\n                }\n                throw e;\n            }\n            var /** @type {?} */ obj;\n            try {\n                obj = factory.apply(void 0, deps);\n            }\n            catch (e) {\n                throw new InstantiationError(this, e, e.stack, provider.key);\n            }\n            return obj;\n        };\n        /**\n         * @param {?} dep\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {\n            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n        };\n        /**\n         * @param {?} key\n         * @param {?} visibility\n         * @param {?} notFoundValue\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {\n            if (key === INJECTOR_KEY) {\n                return this;\n            }\n            if (visibility instanceof Self) {\n                return this._getByKeySelf(key, notFoundValue);\n            }\n            else {\n                return this._getByKeyDefault(key, notFoundValue, visibility);\n            }\n        };\n        /**\n         * @param {?} keyId\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {\n            for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\n                if (this.keyIds[i] === keyId) {\n                    if (this.objs[i] === UNDEFINED) {\n                        this.objs[i] = this._new(this._providers[i]);\n                    }\n                    return this.objs[i];\n                }\n            }\n            return UNDEFINED;\n        };\n        /**\n         * \\@internal\n         * @param {?} key\n         * @param {?} notFoundValue\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {\n            if (notFoundValue !== THROW_IF_NOT_FOUND) {\n                return notFoundValue;\n            }\n            else {\n                throw new NoProviderError(this, key);\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} key\n         * @param {?} notFoundValue\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {\n            var /** @type {?} */ obj = this._getObjByKeyId(key.id);\n            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n        };\n        /**\n         * \\@internal\n         * @param {?} key\n         * @param {?} notFoundValue\n         * @param {?} visibility\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {\n            var /** @type {?} */ inj;\n            if (visibility instanceof SkipSelf) {\n                inj = this._parent;\n            }\n            else {\n                inj = this;\n            }\n            while (inj instanceof ReflectiveInjector_) {\n                var /** @type {?} */ inj_ = (inj);\n                var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\n                if (obj !== UNDEFINED)\n                    return obj;\n                inj = inj_._parent;\n            }\n            if (inj !== null) {\n                return inj.get(key.token, notFoundValue);\n            }\n            else {\n                return this._throwOrNull(key, notFoundValue);\n            }\n        };\n        Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                    .join(', ');\n                return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\n        return ReflectiveInjector_;\n    }());\n    var /** @type {?} */ INJECTOR_KEY = ReflectiveKey.get(Injector);\n    /**\n     * @param {?} injector\n     * @param {?} fn\n     * @return {?}\n     */\n    function _mapProviders(injector, fn) {\n        var /** @type {?} */ res = new Array(injector._providers.length);\n        for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\n            res[i] = fn(injector.getProviderAtIndex(i));\n        }\n        return res;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * \\@whatItDoes Provides a hook for centralized exception handling.\n     *\n     * \\@description\n     *\n     * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n     * intercept error handling, write a custom exception handler that replaces this default as\n     * appropriate for your app.\n     *\n     * ### Example\n     *\n     * ```\n     * class MyErrorHandler implements ErrorHandler {\n     *   handleError(error) {\n     *     // do something with the exception\n     *   }\n     * }\n     *\n     * \\@NgModule({\n     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n     * })\n     * class MyModule {}\n     * ```\n     *\n     * \\@stable\n     */\n    var ErrorHandler = (function () {\n        /**\n         * @param {?=} rethrowError\n         */\n        function ErrorHandler(rethrowError) {\n            if (rethrowError === void 0) { rethrowError = true; }\n            /**\n             * @internal\n             */\n            this._console = console;\n            this.rethrowError = rethrowError;\n        }\n        /**\n         * @param {?} error\n         * @return {?}\n         */\n        ErrorHandler.prototype.handleError = function (error) {\n            var /** @type {?} */ originalError = this._findOriginalError(error);\n            var /** @type {?} */ originalStack = this._findOriginalStack(error);\n            var /** @type {?} */ context = this._findContext(error);\n            this._console.error(\"EXCEPTION: \" + this._extractMessage(error));\n            if (originalError) {\n                this._console.error(\"ORIGINAL EXCEPTION: \" + this._extractMessage(originalError));\n            }\n            if (originalStack) {\n                this._console.error('ORIGINAL STACKTRACE:');\n                this._console.error(originalStack);\n            }\n            if (context) {\n                this._console.error('ERROR CONTEXT:');\n                this._console.error(context);\n            }\n            // We rethrow exceptions, so operations like 'bootstrap' will result in an error\n            // when an error happens. If we do not rethrow, bootstrap will always succeed.\n            if (this.rethrowError)\n                throw error;\n        };\n        /**\n         * \\@internal\n         * @param {?} error\n         * @return {?}\n         */\n        ErrorHandler.prototype._extractMessage = function (error) {\n            return error instanceof Error ? error.message : error.toString();\n        };\n        /**\n         * \\@internal\n         * @param {?} error\n         * @return {?}\n         */\n        ErrorHandler.prototype._findContext = function (error) {\n            if (error) {\n                return error.context ? error.context :\n                    this._findContext(((error)).originalError);\n            }\n            return null;\n        };\n        /**\n         * \\@internal\n         * @param {?} error\n         * @return {?}\n         */\n        ErrorHandler.prototype._findOriginalError = function (error) {\n            var /** @type {?} */ e = ((error)).originalError;\n            while (e && ((e)).originalError) {\n                e = ((e)).originalError;\n            }\n            return e;\n        };\n        /**\n         * \\@internal\n         * @param {?} error\n         * @return {?}\n         */\n        ErrorHandler.prototype._findOriginalStack = function (error) {\n            if (!(error instanceof Error))\n                return null;\n            var /** @type {?} */ e = error;\n            var /** @type {?} */ stack = e.stack;\n            while (e instanceof Error && ((e)).originalError) {\n                e = ((e)).originalError;\n                if (e instanceof Error && e.stack) {\n                    stack = e.stack;\n                }\n            }\n            return stack;\n        };\n        return ErrorHandler;\n    }());\n\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.merge = function (m1, m2) {\n            var /** @type {?} */ m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.equals = function (m1, m2) {\n            var /** @type {?} */ k1 = Object.keys(m1);\n            var /** @type {?} */ k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n                var /** @type {?} */ key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        /**\n         * @param {?} arr\n         * @param {?} condition\n         * @return {?}\n         */\n        ListWrapper.findLast = function (arr, condition) {\n            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n                if (condition(arr[i])) {\n                    return arr[i];\n                }\n            }\n            return null;\n        };\n        /**\n         * @param {?} list\n         * @param {?} items\n         * @return {?}\n         */\n        ListWrapper.removeAll = function (list, items) {\n            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n                var /** @type {?} */ index = list.indexOf(items[i]);\n                if (index > -1) {\n                    list.splice(index, 1);\n                }\n            }\n        };\n        /**\n         * @param {?} list\n         * @param {?} el\n         * @return {?}\n         */\n        ListWrapper.remove = function (list, el) {\n            var /** @type {?} */ index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        /**\n         * @param {?} list\n         * @return {?}\n         */\n        ListWrapper.flatten = function (list) {\n            return list.reduce(function (flat, item) {\n                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n                return ((flat)).concat(flatItem);\n            }, []);\n        };\n        return ListWrapper;\n    }());\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isListLikeIterable(obj) {\n        if (!isJsObject(obj))\n            return false;\n        return Array.isArray(obj) ||\n            (!(obj instanceof Map) &&\n                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} comparator\n     * @return {?}\n     */\n    function areIterablesEqual(a, b, comparator) {\n        var /** @type {?} */ iterator1 = a[getSymbolIterator()]();\n        var /** @type {?} */ iterator2 = b[getSymbolIterator()]();\n        while (true) {\n            var /** @type {?} */ item1 = iterator1.next();\n            var /** @type {?} */ item2 = iterator2.next();\n            if (item1.done && item2.done)\n                return true;\n            if (item1.done || item2.done)\n                return false;\n            if (!comparator(item1.value, item2.value))\n                return false;\n        }\n    }\n    /**\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function iterateListLike(obj, fn) {\n        if (Array.isArray(obj)) {\n            for (var /** @type {?} */ i = 0; i < obj.length; i++) {\n                fn(obj[i]);\n            }\n        }\n        else {\n            var /** @type {?} */ iterator = obj[getSymbolIterator()]();\n            var /** @type {?} */ item = void 0;\n            while (!((item = iterator.next()).done)) {\n                fn(item.value);\n            }\n        }\n    }\n\n    /**\n     * Determine if the argument is shaped like a Promise\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return !!obj && typeof obj.then === 'function';\n    }\n    /**\n     * Determine if the argument is an Observable\n     * @param {?} obj\n     * @return {?}\n     */\n    function isObservable(obj) {\n        return !!(obj && obj[rxjs_symbol_observable.$$observable]);\n    }\n\n    /**\n     * A function that will be executed when an application is initialized.\n     * @experimental\n     */\n    var /** @type {?} */ APP_INITIALIZER = new OpaqueToken('Application Initializer');\n    /**\n     * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n     *\n     * \\@experimental\n     */\n    var ApplicationInitStatus = (function () {\n        /**\n         * @param {?} appInits\n         */\n        function ApplicationInitStatus(appInits) {\n            var _this = this;\n            this._done = false;\n            var asyncInitPromises = [];\n            if (appInits) {\n                for (var i = 0; i < appInits.length; i++) {\n                    var initResult = appInits[i]();\n                    if (isPromise(initResult)) {\n                        asyncInitPromises.push(initResult);\n                    }\n                }\n            }\n            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });\n            if (asyncInitPromises.length === 0) {\n                this._done = true;\n            }\n        }\n        Object.defineProperty(ApplicationInitStatus.prototype, \"done\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._done; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ApplicationInitStatus.prototype, \"donePromise\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._donePromise; },\n            enumerable: true,\n            configurable: true\n        });\n        ApplicationInitStatus.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        ApplicationInitStatus.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\n        ]; };\n        return ApplicationInitStatus;\n    }());\n\n    /**\n     * A DI Token representing a unique string id assigned to the application by Angular and used\n     * primarily for prefixing application attributes and CSS styles when\n     * {@link ViewEncapsulation#Emulated} is being used.\n     *\n     * If you need to avoid randomly generated value to be used as an application id, you can provide\n     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n     * using this token.\n     * @experimental\n     */\n    var /** @type {?} */ APP_ID = new OpaqueToken('AppId');\n    /**\n     * @return {?}\n     */\n    function _appIdRandomProviderFactory() {\n        return \"\" + _randomChar() + _randomChar() + _randomChar();\n    }\n    /**\n     * Providers that will generate a random APP_ID_TOKEN.\n     * @experimental\n     */\n    var /** @type {?} */ APP_ID_RANDOM_PROVIDER = {\n        provide: APP_ID,\n        useFactory: _appIdRandomProviderFactory,\n        deps: /** @type {?} */ ([]),\n    };\n    /**\n     * @return {?}\n     */\n    function _randomChar() {\n        return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n    }\n    /**\n     * A function that will be executed when a platform is initialized.\n     * @experimental\n     */\n    var /** @type {?} */ PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');\n    /**\n     * All callbacks provided via this token will be called for every component that is bootstrapped.\n     * Signature of the callback:\n     *\n     * `(componentRef: ComponentRef) => void`.\n     *\n     * @experimental\n     */\n    var /** @type {?} */ APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');\n    /**\n     * A token which indicates the root directory of the application\n     * @experimental\n     */\n    var /** @type {?} */ PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');\n\n    var Console = (function () {\n        function Console() {\n        }\n        /**\n         * @param {?} message\n         * @return {?}\n         */\n        Console.prototype.log = function (message) { print(message); };\n        /**\n         * @param {?} message\n         * @return {?}\n         */\n        Console.prototype.warn = function (message) { warn(message); };\n        Console.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        Console.ctorParameters = function () { return []; };\n        return Console;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a component is still being loaded in a synchronous compile.\n     *\n     * \\@stable\n     */\n    var ComponentStillLoadingError = (function (_super) {\n        __extends$4(ComponentStillLoadingError, _super);\n        /**\n         * @param {?} compType\n         */\n        function ComponentStillLoadingError(compType) {\n            _super.call(this, \"Can't compile synchronously as \" + stringify(compType) + \" is still being loaded!\");\n            this.compType = compType;\n        }\n        return ComponentStillLoadingError;\n    }(BaseError));\n    /**\n     * Combination of NgModuleFactory and ComponentFactorys.\n     *\n     * \\@experimental\n     */\n    var ModuleWithComponentFactories = (function () {\n        /**\n         * @param {?} ngModuleFactory\n         * @param {?} componentFactories\n         */\n        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n            this.ngModuleFactory = ngModuleFactory;\n            this.componentFactories = componentFactories;\n        }\n        return ModuleWithComponentFactories;\n    }());\n    /**\n     * @return {?}\n     */\n    function _throwError() {\n        throw new Error(\"Runtime compiler is not loaded\");\n    }\n    /**\n     * Low-level service for running the angular compiler during runtime\n     * to create {\\@link ComponentFactory}s, which\n     * can later be used to create and render a Component instance.\n     *\n     * Each `\\@NgModule` provides an own `Compiler` to its injector,\n     * that will use the directives/pipes of the ng module for compilation\n     * of components.\n     * \\@stable\n     */\n    var Compiler = (function () {\n        function Compiler() {\n        }\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents`\n         * have to be inlined. Otherwise throws a {\\@link ComponentStillLoadingError}.\n         * @param {?} moduleType\n         * @return {?}\n         */\n        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };\n        /**\n         * Compiles the given NgModule and all of its components\n         * @param {?} moduleType\n         * @return {?}\n         */\n        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };\n        /**\n         * Same as {\\@link compileModuleSync} but also creates ComponentFactories for all components.\n         * @param {?} moduleType\n         * @return {?}\n         */\n        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n            throw _throwError();\n        };\n        /**\n         * Same as {\\@link compileModuleAsync} but also creates ComponentFactories for all components.\n         * @param {?} moduleType\n         * @return {?}\n         */\n        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n            throw _throwError();\n        };\n        /**\n         * Exposes the CSS-style selectors that have been used in `ngContent` directives within\n         * the template of the given component.\n         * This is used by the `upgrade` library to compile the appropriate transclude content\n         * in the Angular 1 wrapper component.\n         * @param {?} component\n         * @return {?}\n         */\n        Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };\n        /**\n         * Clears all caches.\n         * @return {?}\n         */\n        Compiler.prototype.clearCache = function () { };\n        /**\n         * Clears the cache for the given component/ngModule.\n         * @param {?} type\n         * @return {?}\n         */\n        Compiler.prototype.clearCacheFor = function (type) { };\n        Compiler.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        Compiler.ctorParameters = function () { return []; };\n        return Compiler;\n    }());\n    /**\n     * Token to provide CompilerOptions in the platform injector.\n     *\n     * @experimental\n     */\n    var /** @type {?} */ COMPILER_OPTIONS = new OpaqueToken('compilerOptions');\n    /**\n     * A factory for creating a Compiler\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var CompilerFactory = (function () {\n        function CompilerFactory() {\n        }\n        /**\n         * @abstract\n         * @param {?=} options\n         * @return {?}\n         */\n        CompilerFactory.prototype.createCompiler = function (options) { };\n        return CompilerFactory;\n    }());\n\n    var ElementRef = (function () {\n        /**\n         * @param {?} nativeElement\n         */\n        function ElementRef(nativeElement) {\n            this.nativeElement = nativeElement;\n        }\n        return ElementRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Use by directives and components to emit custom Events.\n     *\n     * ### Examples\n     *\n     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n     * title gets clicked:\n     *\n     * ```\n     * \\@Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n     *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * The events payload can be accessed by the parameter `$event` on the components output event\n     * handler:\n     *\n     * ```\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n     * https://github.com/jhusain/observable-spec\n     *\n     * Once a reference implementation of the spec is available, switch to it.\n     * \\@stable\n     */\n    var EventEmitter = (function (_super) {\n        __extends$6(EventEmitter, _super);\n        /**\n         * Creates an instance of [EventEmitter], which depending on [isAsync],\n         * delivers events synchronously or asynchronously.\n         * @param {?=} isAsync\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        /**\n         * @param {?=} generatorOrNext\n         * @param {?=} error\n         * @param {?=} complete\n         * @return {?}\n         */\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var /** @type {?} */ schedulerFn;\n            var /** @type {?} */ errorFn = function (err) { return null; };\n            var /** @type {?} */ completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                    function (value) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * An injectable service for executing work inside or outside of the Angular zone.\n     *\n     * The most common use of this service is to optimize performance when starting a work consisting of\n     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n     * Angular. Such tasks can be kicked off via {\\@link runOutsideAngular} and if needed, these tasks\n     * can reenter the Angular zone via {\\@link run}.\n     *\n     * <!-- TODO: add/fix links to:\n     *   - docs explaining zones and the use of zones in Angular and change-detection\n     *   - link to runOutsideAngular/run (throughout this file!)\n     *   -->\n     *\n     * ### Example\n     *\n     * ```\n     * import {Component, NgZone} from '\\@angular/core';\n     * import {NgIf} from '\\@angular/common';\n     *\n     * \\@Component({\n     *   selector: 'ng-zone-demo'.\n     *   template: `\n     *     <h2>Demo: NgZone</h2>\n     *\n     *     <p>Progress: {{progress}}%</p>\n     *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n     *\n     *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n     *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n     *   `,\n     * })\n     * export class NgZoneDemo {\n     *   progress: number = 0;\n     *   label: string;\n     *\n     *   constructor(private _ngZone: NgZone) {}\n     *\n     *   // Loop inside the Angular zone\n     *   // so the UI DOES refresh after each setTimeout cycle\n     *   processWithinAngularZone() {\n     *     this.label = 'inside';\n     *     this.progress = 0;\n     *     this._increaseProgress(() => console.log('Inside Done!'));\n     *   }\n     *\n     *   // Loop outside of the Angular zone\n     *   // so the UI DOES NOT refresh after each setTimeout cycle\n     *   processOutsideOfAngularZone() {\n     *     this.label = 'outside';\n     *     this.progress = 0;\n     *     this._ngZone.runOutsideAngular(() => {\n     *       this._increaseProgress(() => {\n     *       // reenter the Angular zone and display done\n     *       this._ngZone.run(() => {console.log('Outside Done!') });\n     *     }}));\n     *   }\n     *\n     *   _increaseProgress(doneCallback: () => void) {\n     *     this.progress += 1;\n     *     console.log(`Current progress: ${this.progress}%`);\n     *\n     *     if (this.progress < 100) {\n     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n     *     } else {\n     *       doneCallback();\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * \\@experimental\n     */\n    var NgZone = (function () {\n        /**\n         * @param {?} __0\n         */\n        function NgZone(_a) {\n            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n            this._hasPendingMicrotasks = false;\n            this._hasPendingMacrotasks = false;\n            this._isStable = true;\n            this._nesting = 0;\n            this._onUnstable = new EventEmitter(false);\n            this._onMicrotaskEmpty = new EventEmitter(false);\n            this._onStable = new EventEmitter(false);\n            this._onErrorEvents = new EventEmitter(false);\n            if (typeof Zone == 'undefined') {\n                throw new Error('Angular requires Zone.js prolyfill.');\n            }\n            Zone.assertZonePatched();\n            this.outer = this.inner = Zone.current;\n            if (Zone['wtfZoneSpec']) {\n                this.inner = this.inner.fork(Zone['wtfZoneSpec']);\n            }\n            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);\n            }\n            this.forkInnerZoneWithAngularBehavior();\n        }\n        /**\n         * @return {?}\n         */\n        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n        /**\n         * @return {?}\n         */\n        NgZone.assertInAngularZone = function () {\n            if (!NgZone.isInAngularZone()) {\n                throw new Error('Expected to be in Angular Zone, but it is not!');\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgZone.assertNotInAngularZone = function () {\n            if (NgZone.isInAngularZone()) {\n                throw new Error('Expected to not be in Angular Zone, but it is!');\n            }\n        };\n        /**\n         * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n         * the function.\n         *\n         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n         * outside of the Angular zone (typically started via {\\@link runOutsideAngular}).\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * within the Angular zone.\n         *\n         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n         * @param {?} fn\n         * @return {?}\n         */\n        NgZone.prototype.run = function (fn) { return this.inner.run(fn); };\n        /**\n         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n         * rethrown.\n         * @param {?} fn\n         * @return {?}\n         */\n        NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };\n        /**\n         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n         * the function.\n         *\n         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that\n         * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * outside of the Angular zone.\n         *\n         * Use {\\@link run} to reenter the Angular zone and do work that updates the application model.\n         * @param {?} fn\n         * @return {?}\n         */\n        NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };\n        Object.defineProperty(NgZone.prototype, \"onUnstable\", {\n            /**\n             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n             * @return {?}\n             */\n            get: function () { return this._onUnstable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"onMicrotaskEmpty\", {\n            /**\n             * Notifies when there is no more microtasks enqueue in the current VM Turn.\n             * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n             * For this reason this event can fire multiple times per VM Turn.\n             * @return {?}\n             */\n            get: function () { return this._onMicrotaskEmpty; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"onStable\", {\n            /**\n             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n             * implies we are about to relinquish VM turn.\n             * This event gets called just once.\n             * @return {?}\n             */\n            get: function () { return this._onStable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"onError\", {\n            /**\n             * Notify that an error has been delivered.\n             * @return {?}\n             */\n            get: function () { return this._onErrorEvents; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"isStable\", {\n            /**\n             * Whether there are no outstanding microtasks or macrotasks.\n             * @return {?}\n             */\n            get: function () { return this._isStable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"hasPendingMicrotasks\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._hasPendingMicrotasks; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"hasPendingMacrotasks\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._hasPendingMacrotasks; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        NgZone.prototype.checkStable = function () {\n            var _this = this;\n            if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {\n                try {\n                    this._nesting++;\n                    this._onMicrotaskEmpty.emit(null);\n                }\n                finally {\n                    this._nesting--;\n                    if (!this._hasPendingMicrotasks) {\n                        try {\n                            this.runOutsideAngular(function () { return _this._onStable.emit(null); });\n                        }\n                        finally {\n                            this._isStable = true;\n                        }\n                    }\n                }\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {\n            var _this = this;\n            this.inner = this.inner.fork({\n                name: 'angular',\n                properties: /** @type {?} */ ({ 'isAngularZone': true }),\n                onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n                    try {\n                        _this.onEnter();\n                        return delegate.invokeTask(target, task, applyThis, applyArgs);\n                    }\n                    finally {\n                        _this.onLeave();\n                    }\n                },\n                onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n                    try {\n                        _this.onEnter();\n                        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n                    }\n                    finally {\n                        _this.onLeave();\n                    }\n                },\n                onHasTask: function (delegate, current, target, hasTaskState) {\n                    delegate.hasTask(target, hasTaskState);\n                    if (current === target) {\n                        // We are only interested in hasTask events which originate from our zone\n                        // (A child hasTask event is not interesting to us)\n                        if (hasTaskState.change == 'microTask') {\n                            _this.setHasMicrotask(hasTaskState.microTask);\n                        }\n                        else if (hasTaskState.change == 'macroTask') {\n                            _this.setHasMacrotask(hasTaskState.macroTask);\n                        }\n                    }\n                },\n                onHandleError: function (delegate, current, target, error) {\n                    delegate.handleError(target, error);\n                    _this.triggerError(error);\n                    return false;\n                }\n            });\n        };\n        /**\n         * @return {?}\n         */\n        NgZone.prototype.onEnter = function () {\n            this._nesting++;\n            if (this._isStable) {\n                this._isStable = false;\n                this._onUnstable.emit(null);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgZone.prototype.onLeave = function () {\n            this._nesting--;\n            this.checkStable();\n        };\n        /**\n         * @param {?} hasMicrotasks\n         * @return {?}\n         */\n        NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {\n            this._hasPendingMicrotasks = hasMicrotasks;\n            this.checkStable();\n        };\n        /**\n         * @param {?} hasMacrotasks\n         * @return {?}\n         */\n        NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };\n        /**\n         * @param {?} error\n         * @return {?}\n         */\n        NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };\n        return NgZone;\n    }());\n\n    var AnimationQueue = (function () {\n        /**\n         * @param {?} _zone\n         */\n        function AnimationQueue(_zone) {\n            this._zone = _zone;\n            this.entries = [];\n        }\n        /**\n         * @param {?} player\n         * @return {?}\n         */\n        AnimationQueue.prototype.enqueue = function (player) { this.entries.push(player); };\n        /**\n         * @return {?}\n         */\n        AnimationQueue.prototype.flush = function () {\n            var _this = this;\n            // given that each animation player may set aside\n            // microtasks and rely on DOM-based events, this\n            // will cause Angular to run change detection after\n            // each request. This sidesteps the issue. If a user\n            // hooks into an animation via (@anim.start) or (@anim.done)\n            // then those methods will automatically trigger change\n            // detection by wrapping themselves inside of a zone\n            if (this.entries.length) {\n                this._zone.runOutsideAngular(function () {\n                    // this code is wrapped into a single promise such that the\n                    // onStart and onDone player callbacks are triggered outside\n                    // of the digest cycle of animations\n                    Promise.resolve(null).then(function () { return _this._triggerAnimations(); });\n                });\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationQueue.prototype._triggerAnimations = function () {\n            NgZone.assertNotInAngularZone();\n            while (this.entries.length) {\n                var /** @type {?} */ player = this.entries.shift();\n                // in the event that an animation throws an error then we do\n                // not want to re-run animations on any previous animations\n                // if they have already been kicked off beforehand\n                if (!player.hasStarted()) {\n                    player.play();\n                }\n            }\n        };\n        AnimationQueue.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        AnimationQueue.ctorParameters = function () { return [\n            { type: NgZone, },\n        ]; };\n        return AnimationQueue;\n    }());\n\n    var DefaultIterableDifferFactory = (function () {\n        function DefaultIterableDifferFactory() {\n        }\n        /**\n         * @param {?} obj\n         * @return {?}\n         */\n        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n        /**\n         * @param {?} cdRef\n         * @param {?=} trackByFn\n         * @return {?}\n         */\n        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {\n            return new DefaultIterableDiffer(trackByFn);\n        };\n        return DefaultIterableDifferFactory;\n    }());\n    var /** @type {?} */ trackByIdentity = function (index, item) { return item; };\n    /**\n     * \\@stable\n     */\n    var DefaultIterableDiffer = (function () {\n        /**\n         * @param {?=} _trackByFn\n         */\n        function DefaultIterableDiffer(_trackByFn) {\n            this._trackByFn = _trackByFn;\n            this._length = null;\n            this._collection = null;\n            this._linkedRecords = null;\n            this._unlinkedRecords = null;\n            this._previousItHead = null;\n            this._itHead = null;\n            this._itTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._movesHead = null;\n            this._movesTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n            this._identityChangesHead = null;\n            this._identityChangesTail = null;\n            this._trackByFn = this._trackByFn || trackByIdentity;\n        }\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"collection\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._collection; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"length\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._itHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n            var /** @type {?} */ nextIt = this._itHead;\n            var /** @type {?} */ nextRemove = this._removalsHead;\n            var /** @type {?} */ addRemoveOffset = 0;\n            var /** @type {?} */ moveOffsets = null;\n            while (nextIt || nextRemove) {\n                // Figure out which is the next record to process\n                // Order: remove, add, move\n                var /** @type {?} */ record = !nextRemove ||\n                    nextIt &&\n                        nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                    nextIt :\n                    nextRemove;\n                var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n                var /** @type {?} */ currentIndex = record.currentIndex;\n                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n                if (record === nextRemove) {\n                    addRemoveOffset--;\n                    nextRemove = nextRemove._nextRemoved;\n                }\n                else {\n                    nextIt = nextIt._next;\n                    if (record.previousIndex == null) {\n                        addRemoveOffset++;\n                    }\n                    else {\n                        // INVARIANT:  currentIndex < previousIndex\n                        if (!moveOffsets)\n                            moveOffsets = [];\n                        var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                        var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;\n                        if (localMovePreviousIndex != localCurrentIndex) {\n                            for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n                                var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                                var /** @type {?} */ index = offset + i;\n                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                    moveOffsets[i] = offset + 1;\n                                }\n                            }\n                            var /** @type {?} */ previousIndex = record.previousIndex;\n                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                        }\n                    }\n                }\n                if (adjPreviousIndex !== currentIndex) {\n                    fn(record, adjPreviousIndex, currentIndex);\n                }\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._movesHead; record !== null; record = record._nextMoved) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} collection\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.diff = function (collection) {\n            if (isBlank(collection))\n                collection = [];\n            if (!isListLikeIterable(collection)) {\n                throw new Error(\"Error trying to diff '\" + collection + \"'\");\n            }\n            if (this.check(collection)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.onDestroy = function () { };\n        /**\n         * @param {?} collection\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.check = function (collection) {\n            var _this = this;\n            this._reset();\n            var /** @type {?} */ record = this._itHead;\n            var /** @type {?} */ mayBeDirty = false;\n            var /** @type {?} */ index;\n            var /** @type {?} */ item;\n            var /** @type {?} */ itemTrackBy;\n            if (Array.isArray(collection)) {\n                var /** @type {?} */ list = collection;\n                this._length = collection.length;\n                for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {\n                    item = list[index_1];\n                    itemTrackBy = this._trackByFn(index_1, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = this._mismatch(record, item, itemTrackBy, index_1);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                }\n            }\n            else {\n                index = 0;\n                iterateListLike(collection, function (item /** TODO #9100 */) {\n                    itemTrackBy = _this._trackByFn(index, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = _this._mismatch(record, item, itemTrackBy, index);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            _this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                    index++;\n                });\n                this._length = index;\n            }\n            this._truncate(record);\n            this._collection = collection;\n            return this.isDirty;\n        };\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._additionsHead !== null || this._movesHead !== null ||\n                    this._removalsHead !== null || this._identityChangesHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Reset the state of the change objects to show no changes. This means set previousKey to\n         * currentKey, and clear all of the queues (additions, moves, removals).\n         * Set the previousIndexes of moved and added items to their currentIndexes\n         * Reset the list of additions, moves and removals\n         *\n         * \\@internal\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var /** @type {?} */ record = void 0;\n                var /** @type {?} */ nextRecord = void 0;\n                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                    record.previousIndex = record.currentIndex;\n                }\n                this._additionsHead = this._additionsTail = null;\n                for (record = this._movesHead; record !== null; record = nextRecord) {\n                    record.previousIndex = record.currentIndex;\n                    nextRecord = record._nextMoved;\n                }\n                this._movesHead = this._movesTail = null;\n                this._removalsHead = this._removalsTail = null;\n                this._identityChangesHead = this._identityChangesTail = null;\n            }\n        };\n        /**\n         * This is the core function which handles differences between collections.\n         *\n         * - `record` is the record which we saw at this position last time. If null then it is a new\n         *   item.\n         * - `item` is the current item in the collection\n         * - `index` is the position of the item in the collection\n         *\n         * \\@internal\n         * @param {?} record\n         * @param {?} item\n         * @param {?} itemTrackBy\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n            // The previous record after which we will append the current one.\n            var /** @type {?} */ previousRecord;\n            if (record === null) {\n                previousRecord = this._itTail;\n            }\n            else {\n                previousRecord = record._prev;\n                // Remove the record from the collection since we know it does not match the item.\n                this._remove(record);\n            }\n            // Attempt to see if we have seen the item before.\n            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n            if (record !== null) {\n                // We have seen this before, we need to move it forward in the collection.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._moveAfter(record, previousRecord, index);\n            }\n            else {\n                // Never seen it, check evicted list.\n                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n                if (record !== null) {\n                    // It is an item which we have evicted earlier: reinsert it back into the list.\n                    // But first we need to check if identity changed, so we can update in view if necessary\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                    this._reinsertAfter(record, previousRecord, index);\n                }\n                else {\n                    // It is a new item: add it.\n                    record =\n                        this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);\n                }\n            }\n            return record;\n        };\n        /**\n         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n         *\n         * Use case: `[a, a]` => `[b, a, a]`\n         *\n         * If we did not have this check then the insertion of `b` would:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) leave `a` at index `1` as is. <-- this is wrong!\n         *   3) reinsert `a` at index 2. <-- this is wrong!\n         *\n         * The correct behavior is:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) reinsert `a` at index 1.\n         *   3) move `a` at from `1` to `2`.\n         *\n         *\n         * Double check that we have not evicted a duplicate item. We need to check if the item type may\n         * have already been removed:\n         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n         * at the end.\n         *\n         * \\@internal\n         * @param {?} record\n         * @param {?} item\n         * @param {?} itemTrackBy\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n            var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n            if (reinsertRecord !== null) {\n                record = this._reinsertAfter(reinsertRecord, record._prev, index);\n            }\n            else if (record.currentIndex != index) {\n                record.currentIndex = index;\n                this._addToMoves(record, index);\n            }\n            return record;\n        };\n        /**\n         * Get rid of any excess {\\@link CollectionChangeRecord}s from the previous collection\n         *\n         * - `record` The first excess {\\@link CollectionChangeRecord}.\n         *\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._truncate = function (record) {\n            // Anything after that needs to be removed;\n            while (record !== null) {\n                var /** @type {?} */ nextRecord = record._next;\n                this._addToRemovals(this._unlink(record));\n                record = nextRecord;\n            }\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.clear();\n            }\n            if (this._additionsTail !== null) {\n                this._additionsTail._nextAdded = null;\n            }\n            if (this._movesTail !== null) {\n                this._movesTail._nextMoved = null;\n            }\n            if (this._itTail !== null) {\n                this._itTail._next = null;\n            }\n            if (this._removalsTail !== null) {\n                this._removalsTail._nextRemoved = null;\n            }\n            if (this._identityChangesTail !== null) {\n                this._identityChangesTail._nextIdentityChange = null;\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} prevRecord\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.remove(record);\n            }\n            var /** @type {?} */ prev = record._prevRemoved;\n            var /** @type {?} */ next = record._nextRemoved;\n            if (prev === null) {\n                this._removalsHead = next;\n            }\n            else {\n                prev._nextRemoved = next;\n            }\n            if (next === null) {\n                this._removalsTail = prev;\n            }\n            else {\n                next._prevRemoved = prev;\n            }\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} prevRecord\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n            this._unlink(record);\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} prevRecord\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n            this._insertAfter(record, prevRecord, index);\n            if (this._additionsTail === null) {\n                // todo(vicb)\n                // assert(this._additionsHead === null);\n                this._additionsTail = this._additionsHead = record;\n            }\n            else {\n                // todo(vicb)\n                // assert(_additionsTail._nextAdded === null);\n                // assert(record._nextAdded === null);\n                this._additionsTail = this._additionsTail._nextAdded = record;\n            }\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} prevRecord\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n            // todo(vicb)\n            // assert(record != prevRecord);\n            // assert(record._next === null);\n            // assert(record._prev === null);\n            var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;\n            // todo(vicb)\n            // assert(next != record);\n            // assert(prevRecord != record);\n            record._next = next;\n            record._prev = prevRecord;\n            if (next === null) {\n                this._itTail = record;\n            }\n            else {\n                next._prev = record;\n            }\n            if (prevRecord === null) {\n                this._itHead = record;\n            }\n            else {\n                prevRecord._next = record;\n            }\n            if (this._linkedRecords === null) {\n                this._linkedRecords = new _DuplicateMap();\n            }\n            this._linkedRecords.put(record);\n            record.currentIndex = index;\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._remove = function (record) {\n            return this._addToRemovals(this._unlink(record));\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._unlink = function (record) {\n            if (this._linkedRecords !== null) {\n                this._linkedRecords.remove(record);\n            }\n            var /** @type {?} */ prev = record._prev;\n            var /** @type {?} */ next = record._next;\n            // todo(vicb)\n            // assert((record._prev = null) === null);\n            // assert((record._next = null) === null);\n            if (prev === null) {\n                this._itHead = next;\n            }\n            else {\n                prev._next = next;\n            }\n            if (next === null) {\n                this._itTail = prev;\n            }\n            else {\n                next._prev = prev;\n            }\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} toIndex\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n            // todo(vicb)\n            // assert(record._nextMoved === null);\n            if (record.previousIndex === toIndex) {\n                return record;\n            }\n            if (this._movesTail === null) {\n                // todo(vicb)\n                // assert(_movesHead === null);\n                this._movesTail = this._movesHead = record;\n            }\n            else {\n                // todo(vicb)\n                // assert(_movesTail._nextMoved === null);\n                this._movesTail = this._movesTail._nextMoved = record;\n            }\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n            if (this._unlinkedRecords === null) {\n                this._unlinkedRecords = new _DuplicateMap();\n            }\n            this._unlinkedRecords.put(record);\n            record.currentIndex = null;\n            record._nextRemoved = null;\n            if (this._removalsTail === null) {\n                // todo(vicb)\n                // assert(_removalsHead === null);\n                this._removalsTail = this._removalsHead = record;\n                record._prevRemoved = null;\n            }\n            else {\n                // todo(vicb)\n                // assert(_removalsTail._nextRemoved === null);\n                // assert(record._nextRemoved === null);\n                record._prevRemoved = this._removalsTail;\n                this._removalsTail = this._removalsTail._nextRemoved = record;\n            }\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} item\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n            record.item = item;\n            if (this._identityChangesTail === null) {\n                this._identityChangesTail = this._identityChangesHead = record;\n            }\n            else {\n                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n            }\n            return record;\n        };\n        /**\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.toString = function () {\n            var /** @type {?} */ list = [];\n            this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });\n            var /** @type {?} */ previous = [];\n            this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });\n            var /** @type {?} */ additions = [];\n            this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });\n            var /** @type {?} */ moves = [];\n            this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });\n            var /** @type {?} */ removals = [];\n            this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });\n            var /** @type {?} */ identityChanges = [];\n            this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });\n            return 'collection: ' + list.join(', ') + '\\n' +\n                'previous: ' + previous.join(', ') + '\\n' +\n                'additions: ' + additions.join(', ') + '\\n' +\n                'moves: ' + moves.join(', ') + '\\n' +\n                'removals: ' + removals.join(', ') + '\\n' +\n                'identityChanges: ' + identityChanges.join(', ') + '\\n';\n        };\n        return DefaultIterableDiffer;\n    }());\n    /**\n     * \\@stable\n     */\n    var CollectionChangeRecord = (function () {\n        /**\n         * @param {?} item\n         * @param {?} trackById\n         */\n        function CollectionChangeRecord(item, trackById) {\n            this.item = item;\n            this.trackById = trackById;\n            this.currentIndex = null;\n            this.previousIndex = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._prev = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._prevDup = null;\n            /** @internal */\n            this._nextDup = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextMoved = null;\n            /** @internal */\n            this._nextIdentityChange = null;\n        }\n        /**\n         * @return {?}\n         */\n        CollectionChangeRecord.prototype.toString = function () {\n            return this.previousIndex === this.currentIndex ? stringify(this.item) :\n                stringify(this.item) + '[' +\n                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n        };\n        return CollectionChangeRecord;\n    }());\n    var _DuplicateItemRecordList = (function () {\n        function _DuplicateItemRecordList() {\n            /** @internal */\n            this._head = null;\n            /** @internal */\n            this._tail = null;\n        }\n        /**\n         * Append the record to the list of duplicates.\n         *\n         * Note: by design all records in the list of duplicates hold the same value in record.item.\n         * @param {?} record\n         * @return {?}\n         */\n        _DuplicateItemRecordList.prototype.add = function (record) {\n            if (this._head === null) {\n                this._head = this._tail = record;\n                record._nextDup = null;\n                record._prevDup = null;\n            }\n            else {\n                // todo(vicb)\n                // assert(record.item ==  _head.item ||\n                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n                this._tail._nextDup = record;\n                record._prevDup = this._tail;\n                record._nextDup = null;\n                this._tail = record;\n            }\n        };\n        /**\n         * @param {?} trackById\n         * @param {?} afterIndex\n         * @return {?}\n         */\n        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {\n            var /** @type {?} */ record;\n            for (record = this._head; record !== null; record = record._nextDup) {\n                if ((afterIndex === null || afterIndex < record.currentIndex) &&\n                    looseIdentical(record.trackById, trackById)) {\n                    return record;\n                }\n            }\n            return null;\n        };\n        /**\n         * Remove one {\\@link CollectionChangeRecord} from the list of duplicates.\n         *\n         * Returns whether the list of duplicates is empty.\n         * @param {?} record\n         * @return {?}\n         */\n        _DuplicateItemRecordList.prototype.remove = function (record) {\n            // todo(vicb)\n            // assert(() {\n            //  // verify that the record being removed is in the list.\n            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {\n            //    if (identical(cursor, record)) return true;\n            //  }\n            //  return false;\n            //});\n            var /** @type {?} */ prev = record._prevDup;\n            var /** @type {?} */ next = record._nextDup;\n            if (prev === null) {\n                this._head = next;\n            }\n            else {\n                prev._nextDup = next;\n            }\n            if (next === null) {\n                this._tail = prev;\n            }\n            else {\n                next._prevDup = prev;\n            }\n            return this._head === null;\n        };\n        return _DuplicateItemRecordList;\n    }());\n    var _DuplicateMap = (function () {\n        function _DuplicateMap() {\n            this.map = new Map();\n        }\n        /**\n         * @param {?} record\n         * @return {?}\n         */\n        _DuplicateMap.prototype.put = function (record) {\n            var /** @type {?} */ key = record.trackById;\n            var /** @type {?} */ duplicates = this.map.get(key);\n            if (!duplicates) {\n                duplicates = new _DuplicateItemRecordList();\n                this.map.set(key, duplicates);\n            }\n            duplicates.add(record);\n        };\n        /**\n         * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we\n         * have already iterated over, we use the afterIndex to pretend it is not there.\n         *\n         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n         * have any more `a`s needs to return the last `a` not the first or second.\n         * @param {?} trackById\n         * @param {?=} afterIndex\n         * @return {?}\n         */\n        _DuplicateMap.prototype.get = function (trackById, afterIndex) {\n            if (afterIndex === void 0) { afterIndex = null; }\n            var /** @type {?} */ key = trackById;\n            var /** @type {?} */ recordList = this.map.get(key);\n            return recordList ? recordList.get(trackById, afterIndex) : null;\n        };\n        /**\n         * Removes a {\\@link CollectionChangeRecord} from the list of duplicates.\n         *\n         * The list of duplicates also is removed from the map if it gets empty.\n         * @param {?} record\n         * @return {?}\n         */\n        _DuplicateMap.prototype.remove = function (record) {\n            var /** @type {?} */ key = record.trackById;\n            var /** @type {?} */ recordList = this.map.get(key);\n            // Remove the list of duplicates when it gets empty\n            if (recordList.remove(record)) {\n                this.map.delete(key);\n            }\n            return record;\n        };\n        Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.map.size === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n        /**\n         * @return {?}\n         */\n        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };\n        return _DuplicateMap;\n    }());\n    /**\n     * @param {?} item\n     * @param {?} addRemoveOffset\n     * @param {?} moveOffsets\n     * @return {?}\n     */\n    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n        var /** @type {?} */ previousIndex = item.previousIndex;\n        if (previousIndex === null)\n            return previousIndex;\n        var /** @type {?} */ moveOffset = 0;\n        if (moveOffsets && previousIndex < moveOffsets.length) {\n            moveOffset = moveOffsets[previousIndex];\n        }\n        return previousIndex + addRemoveOffset + moveOffset;\n    }\n\n    var DefaultKeyValueDifferFactory = (function () {\n        function DefaultKeyValueDifferFactory() {\n        }\n        /**\n         * @param {?} obj\n         * @return {?}\n         */\n        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n        /**\n         * @param {?} cdRef\n         * @return {?}\n         */\n        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };\n        return DefaultKeyValueDifferFactory;\n    }());\n    var DefaultKeyValueDiffer = (function () {\n        function DefaultKeyValueDiffer() {\n            this._records = new Map();\n            this._mapHead = null;\n            this._previousMapHead = null;\n            this._changesHead = null;\n            this._changesTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n        }\n        Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._additionsHead !== null || this._changesHead !== null ||\n                    this._removalsHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._mapHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} map\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.diff = function (map) {\n            if (!map) {\n                map = new Map();\n            }\n            else if (!(map instanceof Map || isJsObject(map))) {\n                throw new Error(\"Error trying to diff '\" + map + \"'\");\n            }\n            return this.check(map) ? this : null;\n        };\n        /**\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n        /**\n         * @param {?} map\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.check = function (map) {\n            var _this = this;\n            this._reset();\n            var /** @type {?} */ records = this._records;\n            var /** @type {?} */ oldSeqRecord = this._mapHead;\n            var /** @type {?} */ lastOldSeqRecord = null;\n            var /** @type {?} */ lastNewSeqRecord = null;\n            var /** @type {?} */ seqChanged = false;\n            this._forEach(map, function (value, key) {\n                var /** @type {?} */ newSeqRecord;\n                if (oldSeqRecord && key === oldSeqRecord.key) {\n                    newSeqRecord = oldSeqRecord;\n                    _this._maybeAddToChanges(newSeqRecord, value);\n                }\n                else {\n                    seqChanged = true;\n                    if (oldSeqRecord !== null) {\n                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);\n                        _this._addToRemovals(oldSeqRecord);\n                    }\n                    if (records.has(key)) {\n                        newSeqRecord = records.get(key);\n                        _this._maybeAddToChanges(newSeqRecord, value);\n                    }\n                    else {\n                        newSeqRecord = new KeyValueChangeRecord(key);\n                        records.set(key, newSeqRecord);\n                        newSeqRecord.currentValue = value;\n                        _this._addToAdditions(newSeqRecord);\n                    }\n                }\n                if (seqChanged) {\n                    if (_this._isInRemovals(newSeqRecord)) {\n                        _this._removeFromRemovals(newSeqRecord);\n                    }\n                    if (lastNewSeqRecord == null) {\n                        _this._mapHead = newSeqRecord;\n                    }\n                    else {\n                        lastNewSeqRecord._next = newSeqRecord;\n                    }\n                }\n                lastOldSeqRecord = oldSeqRecord;\n                lastNewSeqRecord = newSeqRecord;\n                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;\n            });\n            this._truncate(lastOldSeqRecord, oldSeqRecord);\n            return this.isDirty;\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var /** @type {?} */ record = void 0;\n                // Record the state of the mapping\n                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                    record.previousValue = record.currentValue;\n                }\n                for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                    record.previousValue = record.currentValue;\n                }\n                this._changesHead = this._changesTail = null;\n                this._additionsHead = this._additionsTail = null;\n                this._removalsHead = this._removalsTail = null;\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} lastRecord\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {\n            while (record !== null) {\n                if (lastRecord === null) {\n                    this._mapHead = null;\n                }\n                else {\n                    lastRecord._next = null;\n                }\n                var /** @type {?} */ nextRecord = record._next;\n                this._addToRemovals(record);\n                lastRecord = record;\n                record = nextRecord;\n            }\n            for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {\n                rec.previousValue = rec.currentValue;\n                rec.currentValue = null;\n                this._records.delete(rec.key);\n            }\n        };\n        /**\n         * @param {?} record\n         * @param {?} newValue\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n            if (!looseIdentical(newValue, record.currentValue)) {\n                record.previousValue = record.currentValue;\n                record.currentValue = newValue;\n                this._addToChanges(record);\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {\n            return record === this._removalsHead || record._nextRemoved !== null ||\n                record._prevRemoved !== null;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {\n            if (this._removalsHead === null) {\n                this._removalsHead = this._removalsTail = record;\n            }\n            else {\n                this._removalsTail._nextRemoved = record;\n                record._prevRemoved = this._removalsTail;\n                this._removalsTail = record;\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} prev\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {\n            var /** @type {?} */ next = record._next;\n            if (prev === null) {\n                this._mapHead = next;\n            }\n            else {\n                prev._next = next;\n            }\n            record._next = null;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {\n            var /** @type {?} */ prev = record._prevRemoved;\n            var /** @type {?} */ next = record._nextRemoved;\n            if (prev === null) {\n                this._removalsHead = next;\n            }\n            else {\n                prev._nextRemoved = next;\n            }\n            if (next === null) {\n                this._removalsTail = prev;\n            }\n            else {\n                next._prevRemoved = prev;\n            }\n            record._prevRemoved = record._nextRemoved = null;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n            if (this._additionsHead === null) {\n                this._additionsHead = this._additionsTail = record;\n            }\n            else {\n                this._additionsTail._nextAdded = record;\n                this._additionsTail = record;\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n            if (this._changesHead === null) {\n                this._changesHead = this._changesTail = record;\n            }\n            else {\n                this._changesTail._nextChanged = record;\n                this._changesTail = record;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.toString = function () {\n            var /** @type {?} */ items = [];\n            var /** @type {?} */ previous = [];\n            var /** @type {?} */ changes = [];\n            var /** @type {?} */ additions = [];\n            var /** @type {?} */ removals = [];\n            var /** @type {?} */ record;\n            for (record = this._mapHead; record !== null; record = record._next) {\n                items.push(stringify(record));\n            }\n            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                previous.push(stringify(record));\n            }\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                changes.push(stringify(record));\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                additions.push(stringify(record));\n            }\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                removals.push(stringify(record));\n            }\n            return 'map: ' + items.join(', ') + '\\n' +\n                'previous: ' + previous.join(', ') + '\\n' +\n                'additions: ' + additions.join(', ') + '\\n' +\n                'changes: ' + changes.join(', ') + '\\n' +\n                'removals: ' + removals.join(', ') + '\\n';\n        };\n        /**\n         * \\@internal\n         * @param {?} obj\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n            if (obj instanceof Map) {\n                obj.forEach(fn);\n            }\n            else {\n                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n            }\n        };\n        return DefaultKeyValueDiffer;\n    }());\n    /**\n     * \\@stable\n     */\n    var KeyValueChangeRecord = (function () {\n        /**\n         * @param {?} key\n         */\n        function KeyValueChangeRecord(key) {\n            this.key = key;\n            this.previousValue = null;\n            this.currentValue = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextChanged = null;\n        }\n        /**\n         * @return {?}\n         */\n        KeyValueChangeRecord.prototype.toString = function () {\n            return looseIdentical(this.previousValue, this.currentValue) ?\n                stringify(this.key) :\n                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +\n                    stringify(this.currentValue) + ']');\n        };\n        return KeyValueChangeRecord;\n    }());\n\n    /**\n     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n     * \\@stable\n     */\n    var IterableDiffers = (function () {\n        /**\n         * @param {?} factories\n         */\n        function IterableDiffers(factories) {\n            this.factories = factories;\n        }\n        /**\n         * @param {?} factories\n         * @param {?=} parent\n         * @return {?}\n         */\n        IterableDiffers.create = function (factories, parent) {\n            if (isPresent(parent)) {\n                var /** @type {?} */ copied = parent.factories.slice();\n                factories = factories.concat(copied);\n                return new IterableDiffers(factories);\n            }\n            else {\n                return new IterableDiffers(factories);\n            }\n        };\n        /**\n         * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n         * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n         * {\\@link IterableDiffers} instance.\n         *\n         * The following example shows how to extend an existing list of factories,\n         * which will only be applied to the injector for this component and its children.\n         * This step is all that's required to make a new {\\@link IterableDiffer} available.\n         *\n         * ### Example\n         *\n         * ```\n         * \\@Component({\n         *   viewProviders: [\n         *     IterableDiffers.extend([new ImmutableListDiffer()])\n         *   ]\n         * })\n         * ```\n         * @param {?} factories\n         * @return {?}\n         */\n        IterableDiffers.extend = function (factories) {\n            return {\n                provide: IterableDiffers,\n                useFactory: function (parent) {\n                    if (!parent) {\n                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                        // to\n                        // bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend IterableDiffers without a parent injector');\n                    }\n                    return IterableDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n            };\n        };\n        /**\n         * @param {?} iterable\n         * @return {?}\n         */\n        IterableDiffers.prototype.find = function (iterable) {\n            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });\n            if (isPresent(factory)) {\n                return factory;\n            }\n            else {\n                throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n            }\n        };\n        return IterableDiffers;\n    }());\n\n    /**\n     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n     * \\@stable\n     */\n    var KeyValueDiffers = (function () {\n        /**\n         * @param {?} factories\n         */\n        function KeyValueDiffers(factories) {\n            this.factories = factories;\n        }\n        /**\n         * @param {?} factories\n         * @param {?=} parent\n         * @return {?}\n         */\n        KeyValueDiffers.create = function (factories, parent) {\n            if (isPresent(parent)) {\n                var /** @type {?} */ copied = parent.factories.slice();\n                factories = factories.concat(copied);\n                return new KeyValueDiffers(factories);\n            }\n            else {\n                return new KeyValueDiffers(factories);\n            }\n        };\n        /**\n         * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n         * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n         * {\\@link KeyValueDiffers} instance.\n         *\n         * The following example shows how to extend an existing list of factories,\n         * which will only be applied to the injector for this component and its children.\n         * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n         *\n         * ### Example\n         *\n         * ```\n         * \\@Component({\n         *   viewProviders: [\n         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n         *   ]\n         * })\n         * ```\n         * @param {?} factories\n         * @return {?}\n         */\n        KeyValueDiffers.extend = function (factories) {\n            return {\n                provide: KeyValueDiffers,\n                useFactory: function (parent) {\n                    if (!parent) {\n                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                        // to\n                        // bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                    }\n                    return KeyValueDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n            };\n        };\n        /**\n         * @param {?} kv\n         * @return {?}\n         */\n        KeyValueDiffers.prototype.find = function (kv) {\n            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });\n            if (isPresent(factory)) {\n                return factory;\n            }\n            else {\n                throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n            }\n        };\n        return KeyValueDiffers;\n    }());\n\n    var /** @type {?} */ UNINITIALIZED = {\n        toString: function () { return 'CD_INIT_VALUE'; }\n    };\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function devModeEqual(a, b) {\n        if (isListLikeIterable(a) && isListLikeIterable(b)) {\n            return areIterablesEqual(a, b, devModeEqual);\n        }\n        else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n    /**\n     * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n     * reference\n     * has not changed.\n     *\n     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n     *\n     * Example:\n     *\n     * ```\n     * if (this._latestValue === this._latestReturnedValue) {\n     *    return this._latestReturnedValue;\n     *  } else {\n     *    this._latestReturnedValue = this._latestValue;\n     *    return WrappedValue.wrap(this._latestValue); // this will force update\n     *  }\n     * ```\n     * \\@stable\n     */\n    var WrappedValue = (function () {\n        /**\n         * @param {?} wrapped\n         */\n        function WrappedValue(wrapped) {\n            this.wrapped = wrapped;\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n        return WrappedValue;\n    }());\n    /**\n     * Helper class for unwrapping WrappedValue s\n     */\n    var ValueUnwrapper = (function () {\n        function ValueUnwrapper() {\n            this.hasWrappedValue = false;\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        ValueUnwrapper.prototype.unwrap = function (value) {\n            if (value instanceof WrappedValue) {\n                this.hasWrappedValue = true;\n                return value.wrapped;\n            }\n            return value;\n        };\n        /**\n         * @return {?}\n         */\n        ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };\n        return ValueUnwrapper;\n    }());\n    /**\n     * Represents a basic change from a previous to a new value.\n     * \\@stable\n     */\n    var SimpleChange = (function () {\n        /**\n         * @param {?} previousValue\n         * @param {?} currentValue\n         */\n        function SimpleChange(previousValue, currentValue) {\n            this.previousValue = previousValue;\n            this.currentValue = currentValue;\n        }\n        /**\n         * Check whether the new value is the first value assigned.\n         * @return {?}\n         */\n        SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };\n        return SimpleChange;\n    }());\n\n    /**\n     * \\@stable\n     * @abstract\n     */\n    var ChangeDetectorRef = (function () {\n        function ChangeDetectorRef() {\n        }\n        /**\n         * Marks all {\\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.\n         *\n         * <!-- TODO: Add a link to a chapter on OnPush components -->\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))\n         *\n         * ```typescript\n         * \\@Component({\n         *   selector: 'cmp',\n         *   changeDetection: ChangeDetectionStrategy.OnPush,\n         *   template: `Number of ticks: {{numberOfTicks}}`\n         * })\n         * class Cmp {\n         *   numberOfTicks = 0;\n         *\n         *   constructor(ref: ChangeDetectorRef) {\n         *     setInterval(() => {\n         *       this.numberOfTicks ++\n         *       // the following is required, otherwise the view will not be updated\n         *       this.ref.markForCheck();\n         *     }, 1000);\n         *   }\n         * }\n         *\n         * \\@Component({\n         *   selector: 'app',\n         *   changeDetection: ChangeDetectionStrategy.OnPush,\n         *   template: `\n         *     <cmp><cmp>\n         *   `,\n         * })\n         * class App {\n         * }\n         * ```\n         * @abstract\n         * @return {?}\n         */\n        ChangeDetectorRef.prototype.markForCheck = function () { };\n        /**\n         * Detaches the change detector from the change detector tree.\n         *\n         * The detached change detector will not be checked until it is reattached.\n         *\n         * This can also be used in combination with {\\@link ChangeDetectorRef#detectChanges} to implement\n         * local change\n         * detection checks.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n         *\n         * ### Example\n         *\n         * The following example defines a component with a large list of readonly data.\n         * Imagine the data changes constantly, many times per second. For performance reasons,\n         * we want to check and update the list every five seconds. We can do that by detaching\n         * the component's change detector and doing a local check every five seconds.\n         *\n         * ```typescript\n         * class DataProvider {\n         *   // in a real application the returned data will be different every time\n         *   get data() {\n         *     return [1,2,3,4,5];\n         *   }\n         * }\n         *\n         * \\@Component({\n         *   selector: 'giant-list',\n         *   template: `\n         *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</lig>\n         *   `,\n         * })\n         * class GiantList {\n         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {\n         *     ref.detach();\n         *     setInterval(() => {\n         *       this.ref.detectChanges();\n         *     }, 5000);\n         *   }\n         * }\n         *\n         * \\@Component({\n         *   selector: 'app',\n         *   providers: [DataProvider],\n         *   template: `\n         *     <giant-list><giant-list>\n         *   `,\n         * })\n         * class App {\n         * }\n         * ```\n         * @abstract\n         * @return {?}\n         */\n        ChangeDetectorRef.prototype.detach = function () { };\n        /**\n         * Checks the change detector and its children.\n         *\n         * This can also be used in combination with {\\@link ChangeDetectorRef#detach} to implement local\n         * change detection\n         * checks.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n         *\n         * ### Example\n         *\n         * The following example defines a component with a large list of readonly data.\n         * Imagine, the data changes constantly, many times per second. For performance reasons,\n         * we want to check and update the list every five seconds.\n         *\n         * We can do that by detaching the component's change detector and doing a local change detection\n         * check\n         * every five seconds.\n         *\n         * See {\\@link ChangeDetectorRef#detach} for more information.\n         * @abstract\n         * @return {?}\n         */\n        ChangeDetectorRef.prototype.detectChanges = function () { };\n        /**\n         * Checks the change detector and its children, and throws if any changes are detected.\n         *\n         * This is used in development mode to verify that running change detection doesn't introduce\n         * other changes.\n         * @abstract\n         * @return {?}\n         */\n        ChangeDetectorRef.prototype.checkNoChanges = function () { };\n        /**\n         * Reattach the change detector to the change detector tree.\n         *\n         * This also marks OnPush ancestors as to be checked. This reattached change detector will be\n         * checked during the next change detection run.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))\n         *\n         * The following example creates a component displaying `live` data. The component will detach\n         * its change detector from the main change detector tree when the component's live property\n         * is set to false.\n         *\n         * ```typescript\n         * class DataProvider {\n         *   data = 1;\n         *\n         *   constructor() {\n         *     setInterval(() => {\n         *       this.data = this.data * 2;\n         *     }, 500);\n         *   }\n         * }\n         *\n         * \\@Component({\n         *   selector: 'live-data',\n         *   inputs: ['live'],\n         *   template: 'Data: {{dataProvider.data}}'\n         * })\n         * class LiveData {\n         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}\n         *\n         *   set live(value) {\n         *     if (value)\n         *       this.ref.reattach();\n         *     else\n         *       this.ref.detach();\n         *   }\n         * }\n         *\n         * \\@Component({\n         *   selector: 'app',\n         *   providers: [DataProvider],\n         *   template: `\n         *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n         *     <live-data [live]=\"live\"><live-data>\n         *   `,\n         * })\n         * class App {\n         *   live = true;\n         * }\n         * ```\n         * @abstract\n         * @return {?}\n         */\n        ChangeDetectorRef.prototype.reattach = function () { };\n        return ChangeDetectorRef;\n    }());\n\n    /**\n     * Structural diffing for `Object`s and `Map`s.\n     */\n    var /** @type {?} */ keyValDiff = [new DefaultKeyValueDifferFactory()];\n    /**\n     * Structural diffing for `Iterable` types such as `Array`s.\n     */\n    var /** @type {?} */ iterableDiff = [new DefaultIterableDifferFactory()];\n    var /** @type {?} */ defaultIterableDiffers = new IterableDiffers(iterableDiff);\n    var /** @type {?} */ defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var RenderComponentType = (function () {\n        /**\n         * @param {?} id\n         * @param {?} templateUrl\n         * @param {?} slotCount\n         * @param {?} encapsulation\n         * @param {?} styles\n         * @param {?} animations\n         */\n        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n            this.id = id;\n            this.templateUrl = templateUrl;\n            this.slotCount = slotCount;\n            this.encapsulation = encapsulation;\n            this.styles = styles;\n            this.animations = animations;\n        }\n        return RenderComponentType;\n    }());\n    /**\n     * @abstract\n     */\n    var RenderDebugInfo = (function () {\n        function RenderDebugInfo() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.injector = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.component = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.providerTokens = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.references = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.context = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.source = function () { };\n        return RenderDebugInfo;\n    }());\n    /**\n     * \\@experimental\n     * @abstract\n     */\n    var Renderer = (function () {\n        function Renderer() {\n        }\n        /**\n         * @abstract\n         * @param {?} selectorOrNode\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n        /**\n         * @abstract\n         * @param {?} parentElement\n         * @param {?} name\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n        /**\n         * @abstract\n         * @param {?} hostElement\n         * @return {?}\n         */\n        Renderer.prototype.createViewRoot = function (hostElement) { };\n        /**\n         * @abstract\n         * @param {?} parentElement\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n        /**\n         * @abstract\n         * @param {?} parentElement\n         * @param {?} value\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n        /**\n         * @abstract\n         * @param {?} parentElement\n         * @param {?} nodes\n         * @return {?}\n         */\n        Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n        /**\n         * @abstract\n         * @param {?} node\n         * @param {?} viewRootNodes\n         * @return {?}\n         */\n        Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n        /**\n         * @abstract\n         * @param {?} viewRootNodes\n         * @return {?}\n         */\n        Renderer.prototype.detachView = function (viewRootNodes) { };\n        /**\n         * @abstract\n         * @param {?} hostElement\n         * @param {?} viewAllNodes\n         * @return {?}\n         */\n        Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} name\n         * @param {?} callback\n         * @return {?}\n         */\n        Renderer.prototype.listen = function (renderElement, name, callback) { };\n        /**\n         * @abstract\n         * @param {?} target\n         * @param {?} name\n         * @param {?} callback\n         * @return {?}\n         */\n        Renderer.prototype.listenGlobal = function (target, name, callback) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} propertyName\n         * @param {?} propertyValue\n         * @return {?}\n         */\n        Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} attributeName\n         * @param {?} attributeValue\n         * @return {?}\n         */\n        Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n        /**\n         * Used only in debug mode to serialize property changes to dom nodes as attributes.\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} propertyName\n         * @param {?} propertyValue\n         * @return {?}\n         */\n        Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} className\n         * @param {?} isAdd\n         * @return {?}\n         */\n        Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} styleName\n         * @param {?} styleValue\n         * @return {?}\n         */\n        Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} methodName\n         * @param {?=} args\n         * @return {?}\n         */\n        Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n        /**\n         * @abstract\n         * @param {?} renderNode\n         * @param {?} text\n         * @return {?}\n         */\n        Renderer.prototype.setText = function (renderNode, text) { };\n        /**\n         * @abstract\n         * @param {?} element\n         * @param {?} startingStyles\n         * @param {?} keyframes\n         * @param {?} duration\n         * @param {?} delay\n         * @param {?} easing\n         * @param {?=} previousPlayers\n         * @return {?}\n         */\n        Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n        return Renderer;\n    }());\n    /**\n     * Injectable service that provides a low-level interface for modifying the UI.\n     *\n     * Use this service to bypass Angular's templating and make custom UI changes that can't be\n     * expressed declaratively. For example if you need to set a property or an attribute whose name is\n     * not statically known, use {\\@link #setElementProperty} or {\\@link #setElementAttribute}\n     * respectively.\n     *\n     * If you are implementing a custom renderer, you must implement this interface.\n     *\n     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n     * \\@experimental\n     * @abstract\n     */\n    var RootRenderer = (function () {\n        function RootRenderer() {\n        }\n        /**\n         * @abstract\n         * @param {?} componentType\n         * @return {?}\n         */\n        RootRenderer.prototype.renderComponent = function (componentType) { };\n        return RootRenderer;\n    }());\n\n    var SecurityContext = {};\n    SecurityContext.NONE = 0;\n    SecurityContext.HTML = 1;\n    SecurityContext.STYLE = 2;\n    SecurityContext.SCRIPT = 3;\n    SecurityContext.URL = 4;\n    SecurityContext.RESOURCE_URL = 5;\n    SecurityContext[SecurityContext.NONE] = \"NONE\";\n    SecurityContext[SecurityContext.HTML] = \"HTML\";\n    SecurityContext[SecurityContext.STYLE] = \"STYLE\";\n    SecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\n    SecurityContext[SecurityContext.URL] = \"URL\";\n    SecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n    /**\n     * Sanitizer is used by the views to sanitize potentially dangerous values.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var Sanitizer = (function () {\n        function Sanitizer() {\n        }\n        /**\n         * @abstract\n         * @param {?} context\n         * @param {?} value\n         * @return {?}\n         */\n        Sanitizer.prototype.sanitize = function (context, value) { };\n        return Sanitizer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * An error thrown if application changes model breaking the top-down data flow.\n     *\n     * This exception is only thrown in dev mode.\n     *\n     * <!-- TODO: Add a link once the dev mode option is configurable -->\n     *\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'parent',\n     *   template: '<child [prop]=\"parentProp\"></child>',\n     * })\n     * class Parent {\n     *   parentProp = 'init';\n     * }\n     *\n     * \\@Directive({selector: 'child', inputs: ['prop']})\n     * class Child {\n     *   constructor(public parent: Parent) {}\n     *\n     *   set prop(v) {\n     *     // this updates the parent property, which is disallowed during change detection\n     *     // this will result in ExpressionChangedAfterItHasBeenCheckedError\n     *     this.parent.parentProp = 'updated';\n     *   }\n     * }\n     * ```\n     * \\@stable\n     */\n    var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {\n        __extends$7(ExpressionChangedAfterItHasBeenCheckedError, _super);\n        /**\n         * @param {?} oldValue\n         * @param {?} currValue\n         */\n        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {\n            var msg = \"Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n            if (oldValue === UNINITIALIZED) {\n                msg +=\n                    \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                        \" Has it been created in a change detection hook ?\";\n            }\n            _super.call(this, msg);\n        }\n        return ExpressionChangedAfterItHasBeenCheckedError;\n    }(BaseError));\n    /**\n     * Thrown when an exception was raised during view creation, change detection or destruction.\n     *\n     * This error wraps the original exception to attach additional contextual information that can\n     * be useful for debugging.\n     * \\@stable\n     */\n    var ViewWrappedError = (function (_super) {\n        __extends$7(ViewWrappedError, _super);\n        /**\n         * @param {?} originalError\n         * @param {?} context\n         */\n        function ViewWrappedError(originalError, context) {\n            _super.call(this, \"Error in \" + context.source, originalError);\n            this.context = context;\n        }\n        return ViewWrappedError;\n    }(WrappedError));\n    /**\n     * Thrown when a destroyed view is used.\n     *\n     * This error indicates a bug in the framework.\n     *\n     * This is an internal Angular error.\n     * \\@stable\n     */\n    var ViewDestroyedError = (function (_super) {\n        __extends$7(ViewDestroyedError, _super);\n        /**\n         * @param {?} details\n         */\n        function ViewDestroyedError(details) {\n            _super.call(this, \"Attempt to use a destroyed view: \" + details);\n        }\n        return ViewDestroyedError;\n    }(BaseError));\n\n    var ViewUtils = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} sanitizer\n         * @param {?} animationQueue\n         */\n        function ViewUtils(_renderer, sanitizer, animationQueue) {\n            this._renderer = _renderer;\n            this.animationQueue = animationQueue;\n            this.sanitizer = sanitizer;\n        }\n        /**\n         * \\@internal\n         * @param {?} renderComponentType\n         * @return {?}\n         */\n        ViewUtils.prototype.renderComponent = function (renderComponentType) {\n            return this._renderer.renderComponent(renderComponentType);\n        };\n        ViewUtils.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        ViewUtils.ctorParameters = function () { return [\n            { type: RootRenderer, },\n            { type: Sanitizer, },\n            { type: AnimationQueue, },\n        ]; };\n        return ViewUtils;\n    }());\n    var /** @type {?} */ nextRenderComponentTypeId = 0;\n    /**\n     * @param {?} templateUrl\n     * @param {?} slotCount\n     * @param {?} encapsulation\n     * @param {?} styles\n     * @param {?} animations\n     * @return {?}\n     */\n    function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {\n        return new RenderComponentType(\"\" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);\n    }\n    /**\n     * @param {?} e\n     * @param {?} array\n     * @return {?}\n     */\n    function addToArray(e, array) {\n        array.push(e);\n    }\n    /**\n     * @param {?} valueCount\n     * @param {?} constAndInterp\n     * @return {?}\n     */\n    function interpolate(valueCount, constAndInterp) {\n        var /** @type {?} */ result = '';\n        for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {\n            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n        }\n        return result + constAndInterp[valueCount * 2];\n    }\n    /**\n     * @param {?} valueCount\n     * @param {?} c0\n     * @param {?} a1\n     * @param {?} c1\n     * @param {?=} a2\n     * @param {?=} c2\n     * @param {?=} a3\n     * @param {?=} c3\n     * @param {?=} a4\n     * @param {?=} c4\n     * @param {?=} a5\n     * @param {?=} c5\n     * @param {?=} a6\n     * @param {?=} c6\n     * @param {?=} a7\n     * @param {?=} c7\n     * @param {?=} a8\n     * @param {?=} c8\n     * @param {?=} a9\n     * @param {?=} c9\n     * @return {?}\n     */\n    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n        switch (valueCount) {\n            case 1:\n                return c0 + _toStringWithNull(a1) + c1;\n            case 2:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n            case 3:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3;\n            case 4:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4;\n            case 5:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n            case 6:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n            case 7:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7;\n            case 8:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n            case 9:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n            default:\n                throw new Error(\"Does not support more than 9 expressions\");\n        }\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    function _toStringWithNull(v) {\n        return v != null ? v.toString() : '';\n    }\n    /**\n     * @param {?} throwOnChange\n     * @param {?} oldValue\n     * @param {?} newValue\n     * @return {?}\n     */\n    function checkBinding(throwOnChange, oldValue, newValue) {\n        if (throwOnChange) {\n            if (!devModeEqual(oldValue, newValue)) {\n                throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);\n            }\n            return false;\n        }\n        else {\n            return !looseIdentical(oldValue, newValue);\n        }\n    }\n    /**\n     * @param {?} input\n     * @param {?} value\n     * @return {?}\n     */\n    function castByValue(input, value) {\n        return (input);\n    }\n    var /** @type {?} */ EMPTY_ARRAY = [];\n    var /** @type {?} */ EMPTY_MAP = {};\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy1(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0 = UNINITIALIZED;\n        return function (p0) {\n            if (!looseIdentical(v0, p0)) {\n                v0 = p0;\n                result = fn(p0);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy2(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0 = UNINITIALIZED;\n        var /** @type {?} */ v1 = UNINITIALIZED;\n        return function (p0, p1) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {\n                v0 = p0;\n                v1 = p1;\n                result = fn(p0, p1);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy3(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0 = UNINITIALIZED;\n        var /** @type {?} */ v1 = UNINITIALIZED;\n        var /** @type {?} */ v2 = UNINITIALIZED;\n        return function (p0, p1, p2) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                result = fn(p0, p1, p2);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy4(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3;\n        v0 = v1 = v2 = v3 = UNINITIALIZED;\n        return function (p0, p1, p2, p3) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                result = fn(p0, p1, p2, p3);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy5(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4;\n        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                result = fn(p0, p1, p2, p3, p4);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy6(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5;\n        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                result = fn(p0, p1, p2, p3, p4, p5);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy7(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                result = fn(p0, p1, p2, p3, p4, p5, p6);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy8(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy9(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                v8 = p8;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy10(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8, /** @type {?} */ v9;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||\n                !looseIdentical(v9, p9)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                v8 = p8;\n                v9 = p9;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} el\n     * @param {?} changes\n     * @return {?}\n     */\n    function setBindingDebugInfoForChanges(renderer, el, changes) {\n        Object.keys(changes).forEach(function (propName) {\n            setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);\n        });\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} el\n     * @param {?} propName\n     * @param {?} value\n     * @return {?}\n     */\n    function setBindingDebugInfo(renderer, el, propName, value) {\n        try {\n            renderer.setBindingDebugInfo(el, \"ng-reflect-\" + camelCaseToDashCase(propName), value ? value.toString() : null);\n        }\n        catch (e) {\n            renderer.setBindingDebugInfo(el, \"ng-reflect-\" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');\n        }\n    }\n    var /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    function camelCaseToDashCase(input) {\n        return input.replace(CAMEL_CASE_REGEXP, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i - 0] = arguments[_i];\n            }\n            return '-' + m[1].toLowerCase();\n        });\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?} attrs\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {\n        var /** @type {?} */ el = renderer.createElement(parentElement, name, debugInfo);\n        for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n            renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));\n        }\n        return el;\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} elementName\n     * @param {?} attrs\n     * @param {?} rootSelectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {\n        var /** @type {?} */ hostElement;\n        if (isPresent(rootSelectorOrNode)) {\n            hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);\n            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n                renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));\n            }\n            renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);\n        }\n        else {\n            hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);\n        }\n        return hostElement;\n    }\n    /**\n     * @param {?} view\n     * @param {?} element\n     * @param {?} eventNamesAndTargets\n     * @param {?} listener\n     * @return {?}\n     */\n    function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {\n        var /** @type {?} */ disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);\n        for (var /** @type {?} */ i = 0; i < eventNamesAndTargets.length; i += 2) {\n            var /** @type {?} */ eventName = eventNamesAndTargets.get(i);\n            var /** @type {?} */ eventTarget = eventNamesAndTargets.get(i + 1);\n            var /** @type {?} */ disposable = void 0;\n            if (eventTarget) {\n                disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + \":\" + eventName));\n            }\n            else {\n                disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));\n            }\n            disposables.set(i / 2, disposable);\n        }\n        return disposeInlineArray.bind(null, disposables);\n    }\n    /**\n     * @param {?} disposables\n     * @return {?}\n     */\n    function disposeInlineArray(disposables) {\n        for (var /** @type {?} */ i = 0; i < disposables.length; i++) {\n            disposables.get(i)();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    function noop() { }\n    /**\n     * @param {?} length\n     * @return {?}\n     */\n    function createEmptyInlineArray(length) {\n        var /** @type {?} */ ctor;\n        if (length <= 2) {\n            ctor = InlineArray2;\n        }\n        else if (length <= 4) {\n            ctor = InlineArray4;\n        }\n        else if (length <= 8) {\n            ctor = InlineArray8;\n        }\n        else if (length <= 16) {\n            ctor = InlineArray16;\n        }\n        else {\n            ctor = InlineArrayDynamic;\n        }\n        return new ctor(length);\n    }\n    var InlineArray0 = (function () {\n        function InlineArray0() {\n            this.length = 0;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArray0.prototype.get = function (index) { return undefined; };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArray0.prototype.set = function (index, value) { };\n        return InlineArray0;\n    }());\n    var InlineArray2 = (function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         */\n        function InlineArray2(length, _v0, _v1) {\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArray2.prototype.get = function (index) {\n            switch (index) {\n                case 0:\n                    return this._v0;\n                case 1:\n                    return this._v1;\n                default:\n                    return undefined;\n            }\n        };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArray2.prototype.set = function (index, value) {\n            switch (index) {\n                case 0:\n                    this._v0 = value;\n                    break;\n                case 1:\n                    this._v1 = value;\n                    break;\n            }\n        };\n        return InlineArray2;\n    }());\n    var InlineArray4 = (function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         * @param {?=} _v2\n         * @param {?=} _v3\n         */\n        function InlineArray4(length, _v0, _v1, _v2, _v3) {\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n            this._v2 = _v2;\n            this._v3 = _v3;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArray4.prototype.get = function (index) {\n            switch (index) {\n                case 0:\n                    return this._v0;\n                case 1:\n                    return this._v1;\n                case 2:\n                    return this._v2;\n                case 3:\n                    return this._v3;\n                default:\n                    return undefined;\n            }\n        };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArray4.prototype.set = function (index, value) {\n            switch (index) {\n                case 0:\n                    this._v0 = value;\n                    break;\n                case 1:\n                    this._v1 = value;\n                    break;\n                case 2:\n                    this._v2 = value;\n                    break;\n                case 3:\n                    this._v3 = value;\n                    break;\n            }\n        };\n        return InlineArray4;\n    }());\n    var InlineArray8 = (function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         * @param {?=} _v2\n         * @param {?=} _v3\n         * @param {?=} _v4\n         * @param {?=} _v5\n         * @param {?=} _v6\n         * @param {?=} _v7\n         */\n        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n            this._v2 = _v2;\n            this._v3 = _v3;\n            this._v4 = _v4;\n            this._v5 = _v5;\n            this._v6 = _v6;\n            this._v7 = _v7;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArray8.prototype.get = function (index) {\n            switch (index) {\n                case 0:\n                    return this._v0;\n                case 1:\n                    return this._v1;\n                case 2:\n                    return this._v2;\n                case 3:\n                    return this._v3;\n                case 4:\n                    return this._v4;\n                case 5:\n                    return this._v5;\n                case 6:\n                    return this._v6;\n                case 7:\n                    return this._v7;\n                default:\n                    return undefined;\n            }\n        };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArray8.prototype.set = function (index, value) {\n            switch (index) {\n                case 0:\n                    this._v0 = value;\n                    break;\n                case 1:\n                    this._v1 = value;\n                    break;\n                case 2:\n                    this._v2 = value;\n                    break;\n                case 3:\n                    this._v3 = value;\n                    break;\n                case 4:\n                    this._v4 = value;\n                    break;\n                case 5:\n                    this._v5 = value;\n                    break;\n                case 6:\n                    this._v6 = value;\n                    break;\n                case 7:\n                    this._v7 = value;\n                    break;\n            }\n        };\n        return InlineArray8;\n    }());\n    var InlineArray16 = (function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         * @param {?=} _v2\n         * @param {?=} _v3\n         * @param {?=} _v4\n         * @param {?=} _v5\n         * @param {?=} _v6\n         * @param {?=} _v7\n         * @param {?=} _v8\n         * @param {?=} _v9\n         * @param {?=} _v10\n         * @param {?=} _v11\n         * @param {?=} _v12\n         * @param {?=} _v13\n         * @param {?=} _v14\n         * @param {?=} _v15\n         */\n        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n            this._v2 = _v2;\n            this._v3 = _v3;\n            this._v4 = _v4;\n            this._v5 = _v5;\n            this._v6 = _v6;\n            this._v7 = _v7;\n            this._v8 = _v8;\n            this._v9 = _v9;\n            this._v10 = _v10;\n            this._v11 = _v11;\n            this._v12 = _v12;\n            this._v13 = _v13;\n            this._v14 = _v14;\n            this._v15 = _v15;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArray16.prototype.get = function (index) {\n            switch (index) {\n                case 0:\n                    return this._v0;\n                case 1:\n                    return this._v1;\n                case 2:\n                    return this._v2;\n                case 3:\n                    return this._v3;\n                case 4:\n                    return this._v4;\n                case 5:\n                    return this._v5;\n                case 6:\n                    return this._v6;\n                case 7:\n                    return this._v7;\n                case 8:\n                    return this._v8;\n                case 9:\n                    return this._v9;\n                case 10:\n                    return this._v10;\n                case 11:\n                    return this._v11;\n                case 12:\n                    return this._v12;\n                case 13:\n                    return this._v13;\n                case 14:\n                    return this._v14;\n                case 15:\n                    return this._v15;\n                default:\n                    return undefined;\n            }\n        };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArray16.prototype.set = function (index, value) {\n            switch (index) {\n                case 0:\n                    this._v0 = value;\n                    break;\n                case 1:\n                    this._v1 = value;\n                    break;\n                case 2:\n                    this._v2 = value;\n                    break;\n                case 3:\n                    this._v3 = value;\n                    break;\n                case 4:\n                    this._v4 = value;\n                    break;\n                case 5:\n                    this._v5 = value;\n                    break;\n                case 6:\n                    this._v6 = value;\n                    break;\n                case 7:\n                    this._v7 = value;\n                    break;\n                case 8:\n                    this._v8 = value;\n                    break;\n                case 9:\n                    this._v9 = value;\n                    break;\n                case 10:\n                    this._v10 = value;\n                    break;\n                case 11:\n                    this._v11 = value;\n                    break;\n                case 12:\n                    this._v12 = value;\n                    break;\n                case 13:\n                    this._v13 = value;\n                    break;\n                case 14:\n                    this._v14 = value;\n                    break;\n                case 15:\n                    this._v15 = value;\n                    break;\n            }\n        };\n        return InlineArray16;\n    }());\n    var InlineArrayDynamic = (function () {\n        /**\n         * @param {?} length\n         * @param {...?} values\n         */\n        function InlineArrayDynamic(length) {\n            var values = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                values[_i - 1] = arguments[_i];\n            }\n            this.length = length;\n            this._values = values;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };\n        return InlineArrayDynamic;\n    }());\n    var /** @type {?} */ EMPTY_INLINE_ARRAY = new InlineArray0();\n\n\n    var view_utils = Object.freeze({\n        ViewUtils: ViewUtils,\n        createRenderComponentType: createRenderComponentType,\n        addToArray: addToArray,\n        interpolate: interpolate,\n        inlineInterpolate: inlineInterpolate,\n        checkBinding: checkBinding,\n        castByValue: castByValue,\n        EMPTY_ARRAY: EMPTY_ARRAY,\n        EMPTY_MAP: EMPTY_MAP,\n        pureProxy1: pureProxy1,\n        pureProxy2: pureProxy2,\n        pureProxy3: pureProxy3,\n        pureProxy4: pureProxy4,\n        pureProxy5: pureProxy5,\n        pureProxy6: pureProxy6,\n        pureProxy7: pureProxy7,\n        pureProxy8: pureProxy8,\n        pureProxy9: pureProxy9,\n        pureProxy10: pureProxy10,\n        setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,\n        setBindingDebugInfo: setBindingDebugInfo,\n        createRenderElement: createRenderElement,\n        selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,\n        subscribeToRenderElement: subscribeToRenderElement,\n        noop: noop,\n        InlineArray2: InlineArray2,\n        InlineArray4: InlineArray4,\n        InlineArray8: InlineArray8,\n        InlineArray16: InlineArray16,\n        InlineArrayDynamic: InlineArrayDynamic,\n        EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY\n    });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n     *\n     * `ComponentRef` provides access to the Component Instance as well other objects related to this\n     * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n     * method.\n     * \\@stable\n     * @abstract\n     */\n    var ComponentRef = (function () {\n        function ComponentRef() {\n        }\n        /**\n         * Location of the Host Element of this Component Instance.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.location = function () { };\n        /**\n         * The injector on which the component instance exists.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.injector = function () { };\n        /**\n         * The instance of the Component.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.instance = function () { };\n        /**\n         * The {\\@link ViewRef} of the Host View of this Component instance.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.hostView = function () { };\n        /**\n         * The {\\@link ChangeDetectorRef} of the Component instance.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.changeDetectorRef = function () { };\n        /**\n         * The component type.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.componentType = function () { };\n        /**\n         * Destroys the component instance and all of the data structures associated with it.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.destroy = function () { };\n        /**\n         * Allows to register a callback that will be called when the component is destroyed.\n         * @abstract\n         * @param {?} callback\n         * @return {?}\n         */\n        ComponentRef.prototype.onDestroy = function (callback) { };\n        return ComponentRef;\n    }());\n    var ComponentRef_ = (function (_super) {\n        __extends$5(ComponentRef_, _super);\n        /**\n         * @param {?} _index\n         * @param {?} _parentView\n         * @param {?} _nativeElement\n         * @param {?} _component\n         */\n        function ComponentRef_(_index, _parentView, _nativeElement, _component) {\n            _super.call(this);\n            this._index = _index;\n            this._parentView = _parentView;\n            this._nativeElement = _nativeElement;\n            this._component = _component;\n        }\n        Object.defineProperty(ComponentRef_.prototype, \"location\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return new ElementRef(this._nativeElement); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parentView.injector(this._index); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"instance\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._component; },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef_.prototype, \"hostView\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parentView.ref; },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef_.prototype, \"changeDetectorRef\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parentView.ref; },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return (this._component.constructor); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };\n        return ComponentRef_;\n    }(ComponentRef));\n    /**\n     * \\@stable\n     */\n    var ComponentFactory = (function () {\n        /**\n         * @param {?} selector\n         * @param {?} _viewClass\n         * @param {?} _componentType\n         */\n        function ComponentFactory(selector, _viewClass, _componentType) {\n            this.selector = selector;\n            this._viewClass = _viewClass;\n            this._componentType = _componentType;\n        }\n        Object.defineProperty(ComponentFactory.prototype, \"componentType\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._componentType; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Creates a new component.\n         * @param {?} injector\n         * @param {?=} projectableNodes\n         * @param {?=} rootSelectorOrNode\n         * @return {?}\n         */\n        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {\n            if (projectableNodes === void 0) { projectableNodes = null; }\n            if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }\n            var /** @type {?} */ vu = injector.get(ViewUtils);\n            if (!projectableNodes) {\n                projectableNodes = [];\n            }\n            var /** @type {?} */ hostView = new this._viewClass(vu, null, null, null);\n            return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);\n        };\n        return ComponentFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * \\@stable\n     */\n    var NoComponentFactoryError = (function (_super) {\n        __extends$8(NoComponentFactoryError, _super);\n        /**\n         * @param {?} component\n         */\n        function NoComponentFactoryError(component) {\n            _super.call(this, \"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n            this.component = component;\n        }\n        return NoComponentFactoryError;\n    }(BaseError));\n    var _NullComponentFactoryResolver = (function () {\n        function _NullComponentFactoryResolver() {\n        }\n        /**\n         * @param {?} component\n         * @return {?}\n         */\n        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            throw new NoComponentFactoryError(component);\n        };\n        return _NullComponentFactoryResolver;\n    }());\n    /**\n     * \\@stable\n     * @abstract\n     */\n    var ComponentFactoryResolver = (function () {\n        function ComponentFactoryResolver() {\n        }\n        /**\n         * @abstract\n         * @param {?} component\n         * @return {?}\n         */\n        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n        return ComponentFactoryResolver;\n    }());\n    var CodegenComponentFactoryResolver = (function () {\n        /**\n         * @param {?} factories\n         * @param {?} _parent\n         */\n        function CodegenComponentFactoryResolver(factories, _parent) {\n            this._parent = _parent;\n            this._factories = new Map();\n            for (var i = 0; i < factories.length; i++) {\n                var factory = factories[i];\n                this._factories.set(factory.componentType, factory);\n            }\n        }\n        /**\n         * @param {?} component\n         * @return {?}\n         */\n        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            var /** @type {?} */ result = this._factories.get(component);\n            if (!result) {\n                result = this._parent.resolveComponentFactory(component);\n            }\n            return result;\n        };\n        return CodegenComponentFactoryResolver;\n    }());\n\n    var /** @type {?} */ trace;\n    var /** @type {?} */ events;\n    /**\n     * @return {?}\n     */\n    function detectWTF() {\n        var /** @type {?} */ wtf = ((global$1) /** TODO #9100 */)['wtf'];\n        if (wtf) {\n            trace = wtf['trace'];\n            if (trace) {\n                events = trace['events'];\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @param {?} signature\n     * @param {?=} flags\n     * @return {?}\n     */\n    function createScope(signature, flags) {\n        if (flags === void 0) { flags = null; }\n        return events.createScope(signature, flags);\n    }\n    /**\n     * @param {?} scope\n     * @param {?=} returnValue\n     * @return {?}\n     */\n    function leave(scope, returnValue) {\n        trace.leaveScope(scope, returnValue);\n        return returnValue;\n    }\n    /**\n     * @param {?} rangeType\n     * @param {?} action\n     * @return {?}\n     */\n    function startTimeRange(rangeType, action) {\n        return trace.beginTimeRange(rangeType, action);\n    }\n    /**\n     * @param {?} range\n     * @return {?}\n     */\n    function endTimeRange(range) {\n        trace.endTimeRange(range);\n    }\n\n    /**\n     * True if WTF is enabled.\n     */\n    var /** @type {?} */ wtfEnabled = detectWTF();\n    /**\n     * @param {?=} arg0\n     * @param {?=} arg1\n     * @return {?}\n     */\n    function noopScope(arg0, arg1) {\n        return null;\n    }\n    /**\n     * Create trace scope.\n     *\n     * Scopes must be strictly nested and are analogous to stack frames, but\n     * do not have to follow the stack frames. Instead it is recommended that they follow logical\n     * nesting. You may want to use\n     * [Event\n     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n     * as they are defined in WTF.\n     *\n     * Used to mark scope entry. The return value is used to leave the scope.\n     *\n     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n     *\n     *     someMethod() {\n     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n     *        // DO SOME WORK HERE\n     *        return wtfLeave(s, 123); // Return value 123\n     *     }\n     *\n     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n     * negatively impact the performance of your application. For this reason we recommend that\n     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n     * exception, will produce incorrect trace, but presence of exception signifies logic error which\n     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n     * an exception is expected during normal execution while profiling.\n     *\n     * @experimental\n     */\n    var /** @type {?} */ wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\n    /**\n     * Used to mark end of Scope.\n     *\n     * - `scope` to end.\n     * - `returnValue` (optional) to be passed to the WTF.\n     *\n     * Returns the `returnValue for easy chaining.\n     * @experimental\n     */\n    var /** @type {?} */ wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n    /**\n     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n     * enabled.\n     *\n     *     someMethod() {\n     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n     *        var future = new Future.delay(5).then((_) {\n     *          wtfEndTimeRange(s);\n     *        });\n     *     }\n     * @experimental\n     */\n    var /** @type {?} */ wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n    /**\n     * Ends a async time range operation.\n     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n     * enabled.\n     * @experimental\n     */\n    var /** @type {?} */ wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n\n    /**\n     * The Testability service provides testing hooks that can be accessed from\n     * the browser and by services such as Protractor. Each bootstrapped Angular\n     * application on the page will have an instance of Testability.\n     * \\@experimental\n     */\n    var Testability = (function () {\n        /**\n         * @param {?} _ngZone\n         */\n        function Testability(_ngZone) {\n            this._ngZone = _ngZone;\n            /** @internal */\n            this._pendingCount = 0;\n            /** @internal */\n            this._isZoneStable = true;\n            /**\n             * Whether any work was done since the last 'whenStable' callback. This is\n             * useful to detect if this could have potentially destabilized another\n             * component while it is stabilizing.\n             * @internal\n             */\n            this._didWork = false;\n            /** @internal */\n            this._callbacks = [];\n            this._watchAngularEvents();\n        }\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        Testability.prototype._watchAngularEvents = function () {\n            var _this = this;\n            this._ngZone.onUnstable.subscribe({\n                next: function () {\n                    _this._didWork = true;\n                    _this._isZoneStable = false;\n                }\n            });\n            this._ngZone.runOutsideAngular(function () {\n                _this._ngZone.onStable.subscribe({\n                    next: function () {\n                        NgZone.assertNotInAngularZone();\n                        scheduleMicroTask(function () {\n                            _this._isZoneStable = true;\n                            _this._runCallbacksIfReady();\n                        });\n                    }\n                });\n            });\n        };\n        /**\n         * @return {?}\n         */\n        Testability.prototype.increasePendingRequestCount = function () {\n            this._pendingCount += 1;\n            this._didWork = true;\n            return this._pendingCount;\n        };\n        /**\n         * @return {?}\n         */\n        Testability.prototype.decreasePendingRequestCount = function () {\n            this._pendingCount -= 1;\n            if (this._pendingCount < 0) {\n                throw new Error('pending async requests below zero');\n            }\n            this._runCallbacksIfReady();\n            return this._pendingCount;\n        };\n        /**\n         * @return {?}\n         */\n        Testability.prototype.isStable = function () {\n            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        Testability.prototype._runCallbacksIfReady = function () {\n            var _this = this;\n            if (this.isStable()) {\n                // Schedules the call backs in a new frame so that it is always async.\n                scheduleMicroTask(function () {\n                    while (_this._callbacks.length !== 0) {\n                        (_this._callbacks.pop())(_this._didWork);\n                    }\n                    _this._didWork = false;\n                });\n            }\n            else {\n                // Not Ready\n                this._didWork = true;\n            }\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        Testability.prototype.whenStable = function (callback) {\n            this._callbacks.push(callback);\n            this._runCallbacksIfReady();\n        };\n        /**\n         * @return {?}\n         */\n        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n        /**\n         * @deprecated use findProviders\n         * @param {?} using\n         * @param {?} provider\n         * @param {?} exactMatch\n         * @return {?}\n         */\n        Testability.prototype.findBindings = function (using, provider, exactMatch) {\n            // TODO(juliemr): implement.\n            return [];\n        };\n        /**\n         * @param {?} using\n         * @param {?} provider\n         * @param {?} exactMatch\n         * @return {?}\n         */\n        Testability.prototype.findProviders = function (using, provider, exactMatch) {\n            // TODO(juliemr): implement.\n            return [];\n        };\n        Testability.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        Testability.ctorParameters = function () { return [\n            { type: NgZone, },\n        ]; };\n        return Testability;\n    }());\n    /**\n     * A global registry of {\\@link Testability} instances for specific elements.\n     * \\@experimental\n     */\n    var TestabilityRegistry = (function () {\n        function TestabilityRegistry() {\n            /** @internal */\n            this._applications = new Map();\n            _testabilityGetter.addToWindow(this);\n        }\n        /**\n         * @param {?} token\n         * @param {?} testability\n         * @return {?}\n         */\n        TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n            this._applications.set(token, testability);\n        };\n        /**\n         * @param {?} elem\n         * @return {?}\n         */\n        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };\n        /**\n         * @return {?}\n         */\n        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n        /**\n         * @return {?}\n         */\n        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n        /**\n         * @param {?} elem\n         * @param {?=} findInAncestors\n         * @return {?}\n         */\n        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n            if (findInAncestors === void 0) { findInAncestors = true; }\n            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n        };\n        TestabilityRegistry.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        TestabilityRegistry.ctorParameters = function () { return []; };\n        return TestabilityRegistry;\n    }());\n    var _NoopGetTestability = (function () {\n        function _NoopGetTestability() {\n        }\n        /**\n         * @param {?} registry\n         * @return {?}\n         */\n        _NoopGetTestability.prototype.addToWindow = function (registry) { };\n        /**\n         * @param {?} registry\n         * @param {?} elem\n         * @param {?} findInAncestors\n         * @return {?}\n         */\n        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n            return null;\n        };\n        return _NoopGetTestability;\n    }());\n    /**\n     * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n     * \\@experimental\n     * @param {?} getter\n     * @return {?}\n     */\n    function setTestabilityGetter(getter) {\n        _testabilityGetter = getter;\n    }\n    var /** @type {?} */ _testabilityGetter = new _NoopGetTestability();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ _devMode = true;\n    var /** @type {?} */ _runModeLocked = false;\n    var /** @type {?} */ _platform;\n    /**\n     * Disable Angular's development mode, which turns off assertions and other\n     * checks within the framework.\n     *\n     * One important assertion this disables verifies that a change detection pass\n     * does not result in additional changes to any bindings (also known as\n     * unidirectional data flow).\n     *\n     * \\@stable\n     * @return {?}\n     */\n    function enableProdMode() {\n        if (_runModeLocked) {\n            throw new Error('Cannot enable prod mode after platform setup.');\n        }\n        _devMode = false;\n    }\n    /**\n     * Returns whether Angular is in development mode. After called once,\n     * the value is locked and won't change any more.\n     *\n     * By default, this is true, unless a user calls `enableProdMode` before calling this.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @return {?}\n     */\n    function isDevMode() {\n        _runModeLocked = true;\n        return _devMode;\n    }\n    /**\n     * A token for third-party components that can register themselves with NgProbe.\n     *\n     * \\@experimental\n     */\n    var NgProbeToken = (function () {\n        /**\n         * @param {?} name\n         * @param {?} token\n         */\n        function NgProbeToken(name, token) {\n            this.name = name;\n            this.token = token;\n        }\n        return NgProbeToken;\n    }());\n    /**\n     * Creates a platform.\n     * Platforms have to be eagerly created via this function.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @param {?} injector\n     * @return {?}\n     */\n    function createPlatform(injector) {\n        if (_platform && !_platform.destroyed) {\n            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n        }\n        _platform = injector.get(PlatformRef);\n        var /** @type {?} */ inits = (injector.get(PLATFORM_INITIALIZER, null));\n        if (inits)\n            inits.forEach(function (init) { return init(); });\n        return _platform;\n    }\n    /**\n     * Creates a factory for a platform\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @param {?} parentPlatformFactory\n     * @param {?} name\n     * @param {?=} providers\n     * @return {?}\n     */\n    function createPlatformFactory(parentPlatformFactory, name, providers) {\n        if (providers === void 0) { providers = []; }\n        var /** @type {?} */ marker = new OpaqueToken(\"Platform: \" + name);\n        return function (extraProviders) {\n            if (extraProviders === void 0) { extraProviders = []; }\n            if (!getPlatform()) {\n                if (parentPlatformFactory) {\n                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n                }\n                else {\n                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));\n                }\n            }\n            return assertPlatform(marker);\n        };\n    }\n    /**\n     * Checks that there currently is a platform\n     * which contains the given token as a provider.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @param {?} requiredToken\n     * @return {?}\n     */\n    function assertPlatform(requiredToken) {\n        var /** @type {?} */ platform = getPlatform();\n        if (!platform) {\n            throw new Error('No platform exists!');\n        }\n        if (!platform.injector.get(requiredToken, null)) {\n            throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n        }\n        return platform;\n    }\n    /**\n     * Destroy the existing platform.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @return {?}\n     */\n    function destroyPlatform() {\n        if (_platform && !_platform.destroyed) {\n            _platform.destroy();\n        }\n    }\n    /**\n     * Returns the current platform.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @return {?}\n     */\n    function getPlatform() {\n        return _platform && !_platform.destroyed ? _platform : null;\n    }\n    /**\n     * The Angular platform is the entry point for Angular on a web page. Each page\n     * has exactly one platform, and services (such as reflection) which are common\n     * to every Angular application running on the page are bound in its scope.\n     *\n     * A page's platform is initialized implicitly when {\\@link bootstrap}() is called, or\n     * explicitly by calling {\\@link createPlatform}().\n     *\n     * \\@stable\n     * @abstract\n     */\n    var PlatformRef = (function () {\n        function PlatformRef() {\n        }\n        /**\n         * Creates an instance of an `\\@NgModule` for the given platform\n         * for offline compilation.\n         *\n         * ## Simple Example\n         *\n         * ```typescript\n         * my_module.ts:\n         *\n         * \\@NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * main.ts:\n         * import {MyModuleNgFactory} from './my_module.ngfactory';\n         * import {platformBrowser} from '\\@angular/platform-browser';\n         *\n         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n         * ```\n         *\n         * \\@experimental APIs related to application bootstrap are currently under review.\n         * @abstract\n         * @param {?} moduleFactory\n         * @return {?}\n         */\n        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };\n        /**\n         * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n         *\n         * ## Simple Example\n         *\n         * ```typescript\n         * \\@NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n         * ```\n         * \\@stable\n         * @abstract\n         * @param {?} moduleType\n         * @param {?=} compilerOptions\n         * @return {?}\n         */\n        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };\n        /**\n         * Register a listener to be called when the platform is disposed.\n         * @abstract\n         * @param {?} callback\n         * @return {?}\n         */\n        PlatformRef.prototype.onDestroy = function (callback) { };\n        /**\n         * Retrieve the platform {\\@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         * @abstract\n         * @return {?}\n         */\n        PlatformRef.prototype.injector = function () { };\n        /**\n         * Destroy the Angular platform and all Angular applications on the page.\n         * @abstract\n         * @return {?}\n         */\n        PlatformRef.prototype.destroy = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        PlatformRef.prototype.destroyed = function () { };\n        return PlatformRef;\n    }());\n    /**\n     * @param {?} errorHandler\n     * @param {?} callback\n     * @return {?}\n     */\n    function _callAndReportToErrorHandler(errorHandler, callback) {\n        try {\n            var /** @type {?} */ result = callback();\n            if (isPromise(result)) {\n                return result.catch(function (e) {\n                    errorHandler.handleError(e);\n                    // rethrow as the exception handler might not do it\n                    throw e;\n                });\n            }\n            return result;\n        }\n        catch (e) {\n            errorHandler.handleError(e);\n            // rethrow as the exception handler might not do it\n            throw e;\n        }\n    }\n    var PlatformRef_ = (function (_super) {\n        __extends$3(PlatformRef_, _super);\n        /**\n         * @param {?} _injector\n         */\n        function PlatformRef_(_injector) {\n            _super.call(this);\n            this._injector = _injector;\n            this._modules = [];\n            this._destroyListeners = [];\n            this._destroyed = false;\n        }\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        Object.defineProperty(PlatformRef_.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PlatformRef_.prototype, \"destroyed\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        PlatformRef_.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error('The platform has already been destroyed!');\n            }\n            this._modules.slice().forEach(function (module) { return module.destroy(); });\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n            this._destroyed = true;\n        };\n        /**\n         * @param {?} moduleFactory\n         * @return {?}\n         */\n        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {\n            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);\n        };\n        /**\n         * @param {?} moduleFactory\n         * @param {?} ngZone\n         * @return {?}\n         */\n        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {\n            var _this = this;\n            // Note: We need to create the NgZone _before_ we instantiate the module,\n            // as instantiating the module creates some providers eagerly.\n            // So we create a mini parent injector that just contains the new NgZone and\n            // pass that as parent to the NgModuleFactory.\n            if (!ngZone)\n                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });\n            // Attention: Don't use ApplicationRef.run here,\n            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n            return ngZone.run(function () {\n                var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);\n                var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));\n                var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n                if (!exceptionHandler) {\n                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n                }\n                moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });\n                ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });\n                return _callAndReportToErrorHandler(exceptionHandler, function () {\n                    var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                    return initStatus.donePromise.then(function () {\n                        _this._moduleDoBootstrap(moduleRef);\n                        return moduleRef;\n                    });\n                });\n            });\n        };\n        /**\n         * @param {?} moduleType\n         * @param {?=} compilerOptions\n         * @return {?}\n         */\n        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n            if (compilerOptions === void 0) { compilerOptions = []; }\n            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);\n        };\n        /**\n         * @param {?} moduleType\n         * @param {?=} compilerOptions\n         * @param {?} ngZone\n         * @param {?=} componentFactoryCallback\n         * @return {?}\n         */\n        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {\n            var _this = this;\n            if (compilerOptions === void 0) { compilerOptions = []; }\n            var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);\n            var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);\n            // ugly internal api hack: generate host component factories for all declared components and\n            // pass the factories into the callback - this is used by UpdateAdapter to get hold of all\n            // factories.\n            if (componentFactoryCallback) {\n                return compiler.compileModuleAndAllComponentsAsync(moduleType)\n                    .then(function (_a) {\n                    var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;\n                    componentFactoryCallback(componentFactories);\n                    return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);\n                });\n            }\n            return compiler.compileModuleAsync(moduleType)\n                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });\n        };\n        /**\n         * @param {?} moduleRef\n         * @return {?}\n         */\n        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {\n            var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);\n            if (moduleRef.bootstrapFactories.length > 0) {\n                moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });\n            }\n            else if (moduleRef.instance.ngDoBootstrap) {\n                moduleRef.instance.ngDoBootstrap(appRef);\n            }\n            else {\n                throw new Error((\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \") +\n                    \"Please define one of these.\");\n            }\n            this._modules.push(moduleRef);\n        };\n        PlatformRef_.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        PlatformRef_.ctorParameters = function () { return [\n            { type: Injector, },\n        ]; };\n        return PlatformRef_;\n    }(PlatformRef));\n    /**\n     * A reference to an Angular application running on a page.\n     *\n     * For more about Angular applications, see the documentation for {\\@link bootstrap}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var ApplicationRef = (function () {\n        function ApplicationRef() {\n        }\n        /**\n         * Bootstrap a new component at the root level of the application.\n         *\n         * ### Bootstrap process\n         *\n         * When bootstrapping a new root component into an application, Angular mounts the\n         * specified application component onto DOM elements identified by the [componentType]'s\n         * selector and kicks off automatic change detection to finish initializing the component.\n         *\n         * ### Example\n         * {\\@example core/ts/platform/platform.ts region='longform'}\n         * @abstract\n         * @param {?} componentFactory\n         * @return {?}\n         */\n        ApplicationRef.prototype.bootstrap = function (componentFactory) { };\n        /**\n         * Invoke this method to explicitly process change detection and its side-effects.\n         *\n         * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n         * further changes are detected. If additional changes are picked up during this second cycle,\n         * bindings in the app have side-effects that cannot be resolved in a single change detection\n         * pass.\n         * In this case, Angular throws an error, since an Angular application can only have one change\n         * detection pass during which all change detection must complete.\n         * @abstract\n         * @return {?}\n         */\n        ApplicationRef.prototype.tick = function () { };\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         * @abstract\n         * @return {?}\n         */\n        ApplicationRef.prototype.componentTypes = function () { };\n        /**\n         * Get a list of components registered to this application.\n         * @abstract\n         * @return {?}\n         */\n        ApplicationRef.prototype.components = function () { };\n        /**\n         * Attaches a view so that it will be dirty checked.\n         * The view will be automatically detached when it is destroyed.\n         * This will throw if the view is already attached to a ViewContainer.\n         * @abstract\n         * @param {?} view\n         * @return {?}\n         */\n        ApplicationRef.prototype.attachView = function (view) { };\n        /**\n         * Detaches a view from dirty checking again.\n         * @abstract\n         * @param {?} view\n         * @return {?}\n         */\n        ApplicationRef.prototype.detachView = function (view) { };\n        /**\n         * Returns the number of attached views.\n         * @abstract\n         * @return {?}\n         */\n        ApplicationRef.prototype.viewCount = function () { };\n        return ApplicationRef;\n    }());\n    var ApplicationRef_ = (function (_super) {\n        __extends$3(ApplicationRef_, _super);\n        /**\n         * @param {?} _zone\n         * @param {?} _console\n         * @param {?} _injector\n         * @param {?} _exceptionHandler\n         * @param {?} _componentFactoryResolver\n         * @param {?} _initStatus\n         * @param {?} _testabilityRegistry\n         * @param {?} _testability\n         */\n        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {\n            var _this = this;\n            _super.call(this);\n            this._zone = _zone;\n            this._console = _console;\n            this._injector = _injector;\n            this._exceptionHandler = _exceptionHandler;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._initStatus = _initStatus;\n            this._testabilityRegistry = _testabilityRegistry;\n            this._testability = _testability;\n            this._bootstrapListeners = [];\n            this._rootComponents = [];\n            this._rootComponentTypes = [];\n            this._views = [];\n            this._runningTick = false;\n            this._enforceNoNewChanges = false;\n            this._enforceNoNewChanges = isDevMode();\n            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        }\n        /**\n         * @param {?} viewRef\n         * @return {?}\n         */\n        ApplicationRef_.prototype.attachView = function (viewRef) {\n            var /** @type {?} */ view = ((viewRef)).internalView;\n            this._views.push(view);\n            view.attachToAppRef(this);\n        };\n        /**\n         * @param {?} viewRef\n         * @return {?}\n         */\n        ApplicationRef_.prototype.detachView = function (viewRef) {\n            var /** @type {?} */ view = ((viewRef)).internalView;\n            ListWrapper.remove(this._views, view);\n            view.detach();\n        };\n        /**\n         * @param {?} componentOrFactory\n         * @return {?}\n         */\n        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {\n            var _this = this;\n            if (!this._initStatus.done) {\n                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n            }\n            var /** @type {?} */ componentFactory;\n            if (componentOrFactory instanceof ComponentFactory) {\n                componentFactory = componentOrFactory;\n            }\n            else {\n                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n            }\n            this._rootComponentTypes.push(componentFactory.componentType);\n            var /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);\n            compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n            var /** @type {?} */ testability = compRef.injector.get(Testability, null);\n            if (testability) {\n                compRef.injector.get(TestabilityRegistry)\n                    .registerApplication(compRef.location.nativeElement, testability);\n            }\n            this._loadComponent(compRef);\n            if (isDevMode()) {\n                this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n            }\n            return compRef;\n        };\n        /**\n         * @param {?} componentRef\n         * @return {?}\n         */\n        ApplicationRef_.prototype._loadComponent = function (componentRef) {\n            this.attachView(componentRef.hostView);\n            this.tick();\n            this._rootComponents.push(componentRef);\n            // Get the listeners lazily to prevent DI cycles.\n            var /** @type {?} */ listeners = (this._injector.get(APP_BOOTSTRAP_LISTENER, [])\n                .concat(this._bootstrapListeners));\n            listeners.forEach(function (listener) { return listener(componentRef); });\n        };\n        /**\n         * @param {?} componentRef\n         * @return {?}\n         */\n        ApplicationRef_.prototype._unloadComponent = function (componentRef) {\n            this.detachView(componentRef.hostView);\n            ListWrapper.remove(this._rootComponents, componentRef);\n        };\n        /**\n         * @return {?}\n         */\n        ApplicationRef_.prototype.tick = function () {\n            if (this._runningTick) {\n                throw new Error('ApplicationRef.tick is called recursively');\n            }\n            var /** @type {?} */ scope = ApplicationRef_._tickScope();\n            try {\n                this._runningTick = true;\n                this._views.forEach(function (view) { return view.ref.detectChanges(); });\n                if (this._enforceNoNewChanges) {\n                    this._views.forEach(function (view) { return view.ref.checkNoChanges(); });\n                }\n            }\n            finally {\n                this._runningTick = false;\n                wtfLeave(scope);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        ApplicationRef_.prototype.ngOnDestroy = function () {\n            // TODO(alxhub): Dispose of the NgZone.\n            this._views.slice().forEach(function (view) { return view.destroy(); });\n        };\n        Object.defineProperty(ApplicationRef_.prototype, \"viewCount\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._views.length; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ApplicationRef_.prototype, \"componentTypes\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._rootComponentTypes; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ApplicationRef_.prototype, \"components\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._rootComponents; },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');\n        ApplicationRef_.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        ApplicationRef_.ctorParameters = function () { return [\n            { type: NgZone, },\n            { type: Console, },\n            { type: Injector, },\n            { type: ErrorHandler, },\n            { type: ComponentFactoryResolver, },\n            { type: ApplicationInitStatus, },\n            { type: TestabilityRegistry, decorators: [{ type: Optional },] },\n            { type: Testability, decorators: [{ type: Optional },] },\n        ]; };\n        return ApplicationRef_;\n    }(ApplicationRef));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n     *\n     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n     * NgModule Instance.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var NgModuleRef = (function () {\n        function NgModuleRef() {\n        }\n        /**\n         * The injector that contains all of the providers of the NgModule.\n         * @abstract\n         * @return {?}\n         */\n        NgModuleRef.prototype.injector = function () { };\n        /**\n         * The ComponentFactoryResolver to get hold of the ComponentFactories\n         * declared in the `entryComponents` property of the module.\n         * @abstract\n         * @return {?}\n         */\n        NgModuleRef.prototype.componentFactoryResolver = function () { };\n        /**\n         * The NgModule instance.\n         * @abstract\n         * @return {?}\n         */\n        NgModuleRef.prototype.instance = function () { };\n        /**\n         * Destroys the module instance and all of the data structures associated with it.\n         * @abstract\n         * @return {?}\n         */\n        NgModuleRef.prototype.destroy = function () { };\n        /**\n         * Allows to register a callback that will be called when the module is destroyed.\n         * @abstract\n         * @param {?} callback\n         * @return {?}\n         */\n        NgModuleRef.prototype.onDestroy = function (callback) { };\n        return NgModuleRef;\n    }());\n    /**\n     * \\@experimental\n     */\n    var NgModuleFactory = (function () {\n        /**\n         * @param {?} _injectorClass\n         * @param {?} _moduleType\n         */\n        function NgModuleFactory(_injectorClass, _moduleType) {\n            this._injectorClass = _injectorClass;\n            this._moduleType = _moduleType;\n        }\n        Object.defineProperty(NgModuleFactory.prototype, \"moduleType\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._moduleType; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} parentInjector\n         * @return {?}\n         */\n        NgModuleFactory.prototype.create = function (parentInjector) {\n            if (!parentInjector) {\n                parentInjector = Injector.NULL;\n            }\n            var /** @type {?} */ instance = new this._injectorClass(parentInjector);\n            instance.create();\n            return instance;\n        };\n        return NgModuleFactory;\n    }());\n    var /** @type {?} */ _UNDEFINED = new Object();\n    /**\n     * @abstract\n     */\n    var NgModuleInjector = (function (_super) {\n        __extends$9(NgModuleInjector, _super);\n        /**\n         * @param {?} parent\n         * @param {?} factories\n         * @param {?} bootstrapFactories\n         */\n        function NgModuleInjector(parent, factories, bootstrapFactories) {\n            _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));\n            this.parent = parent;\n            this.bootstrapFactories = bootstrapFactories;\n            this._destroyListeners = [];\n            this._destroyed = false;\n        }\n        /**\n         * @return {?}\n         */\n        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        NgModuleInjector.prototype.createInternal = function () { };\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        NgModuleInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            if (token === Injector || token === ComponentFactoryResolver) {\n                return this;\n            }\n            var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);\n            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;\n        };\n        /**\n         * @abstract\n         * @param {?} token\n         * @param {?} notFoundValue\n         * @return {?}\n         */\n        NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };\n        Object.defineProperty(NgModuleInjector.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModuleInjector.prototype, \"componentFactoryResolver\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        NgModuleInjector.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n            }\n            this._destroyed = true;\n            this.destroyInternal();\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        NgModuleInjector.prototype.destroyInternal = function () { };\n        return NgModuleInjector;\n    }(CodegenComponentFactoryResolver));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to load ng module factories.\n     * \\@stable\n     * @abstract\n     */\n    var NgModuleFactoryLoader = (function () {\n        function NgModuleFactoryLoader() {\n        }\n        /**\n         * @abstract\n         * @param {?} path\n         * @return {?}\n         */\n        NgModuleFactoryLoader.prototype.load = function (path) { };\n        return NgModuleFactoryLoader;\n    }());\n    var /** @type {?} */ moduleFactories = new Map();\n    /**\n     * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n     * \\@experimental\n     * @param {?} id\n     * @param {?} factory\n     * @return {?}\n     */\n    function registerModuleFactory(id, factory) {\n        var /** @type {?} */ existing = moduleFactories.get(id);\n        if (existing) {\n            throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n        }\n        moduleFactories.set(id, factory);\n    }\n    /**\n     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n     * cannot be found.\n     * \\@experimental\n     * @param {?} id\n     * @return {?}\n     */\n    function getModuleFactory(id) {\n        var /** @type {?} */ factory = moduleFactories.get(id);\n        if (!factory)\n            throw new Error(\"No module with ID \" + id + \" loaded\");\n        return factory;\n    }\n\n    /**\n     * An unmodifiable list of items that Angular keeps up to date when the state\n     * of the application changes.\n     *\n     * The type of object that {\\@link Query} and {\\@link ViewQueryMetadata} provide.\n     *\n     * Implements an iterable interface, therefore it can be used in both ES6\n     * javascript `for (var i of items)` loops as well as in Angular templates with\n     * `*ngFor=\"let i of myList\"`.\n     *\n     * Changes can be observed by subscribing to the changes `Observable`.\n     *\n     * NOTE: In the future this class will implement an `Observable` interface.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n     * ```typescript\n     * \\@Component({...})\n     * class Container {\n     *   \\@ViewChildren(Item) items:QueryList<Item>;\n     * }\n     * ```\n     * \\@stable\n     */\n    var QueryList = (function () {\n        function QueryList() {\n            this._dirty = true;\n            this._results = [];\n            this._emitter = new EventEmitter();\n        }\n        Object.defineProperty(QueryList.prototype, \"changes\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._emitter; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryList.prototype, \"length\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._results.length; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryList.prototype, \"first\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._results[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryList.prototype, \"last\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._results[this.length - 1]; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * See\n         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n         * @param {?} fn\n         * @return {?}\n         */\n        QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n        /**\n         * See\n         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n         * @param {?} fn\n         * @return {?}\n         */\n        QueryList.prototype.filter = function (fn) {\n            return this._results.filter(fn);\n        };\n        /**\n         * See\n         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n         * @param {?} fn\n         * @return {?}\n         */\n        QueryList.prototype.find = function (fn) { return this._results.find(fn); };\n        /**\n         * See\n         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n         * @param {?} fn\n         * @param {?} init\n         * @return {?}\n         */\n        QueryList.prototype.reduce = function (fn, init) {\n            return this._results.reduce(fn, init);\n        };\n        /**\n         * See\n         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n         * @param {?} fn\n         * @return {?}\n         */\n        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n        /**\n         * See\n         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n         * @param {?} fn\n         * @return {?}\n         */\n        QueryList.prototype.some = function (fn) {\n            return this._results.some(fn);\n        };\n        /**\n         * @return {?}\n         */\n        QueryList.prototype.toArray = function () { return this._results.slice(); };\n        /**\n         * @return {?}\n         */\n        QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };\n        /**\n         * @return {?}\n         */\n        QueryList.prototype.toString = function () { return this._results.toString(); };\n        /**\n         * @param {?} res\n         * @return {?}\n         */\n        QueryList.prototype.reset = function (res) {\n            this._results = ListWrapper.flatten(res);\n            this._dirty = false;\n        };\n        /**\n         * @return {?}\n         */\n        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };\n        /**\n         * internal\n         * @return {?}\n         */\n        QueryList.prototype.setDirty = function () { this._dirty = true; };\n        Object.defineProperty(QueryList.prototype, \"dirty\", {\n            /**\n             * internal\n             * @return {?}\n             */\n            get: function () { return this._dirty; },\n            enumerable: true,\n            configurable: true\n        });\n        return QueryList;\n    }());\n\n    var /** @type {?} */ _SEPARATOR = '#';\n    var /** @type {?} */ FACTORY_CLASS_SUFFIX = 'NgFactory';\n    /**\n     * Configuration for SystemJsNgModuleLoader.\n     * token.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var SystemJsNgModuleLoaderConfig = (function () {\n        function SystemJsNgModuleLoaderConfig() {\n        }\n        return SystemJsNgModuleLoaderConfig;\n    }());\n    var /** @type {?} */ DEFAULT_CONFIG = {\n        factoryPathPrefix: '',\n        factoryPathSuffix: '.ngfactory',\n    };\n    /**\n     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n     * \\@experimental\n     */\n    var SystemJsNgModuleLoader = (function () {\n        /**\n         * @param {?} _compiler\n         * @param {?=} config\n         */\n        function SystemJsNgModuleLoader(_compiler, config) {\n            this._compiler = _compiler;\n            this._config = config || DEFAULT_CONFIG;\n        }\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n        SystemJsNgModuleLoader.prototype.load = function (path) {\n            var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\n            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n        };\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\n            var _this = this;\n            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n            if (exportName === undefined) {\n                exportName = 'default';\n            }\n            return System.import(module)\n                .then(function (module) { return module[exportName]; })\n                .then(function (type) { return checkNotEmpty(type, module, exportName); })\n                .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n        };\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\n            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n            var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n            if (exportName === undefined) {\n                exportName = 'default';\n                factoryClassSuffix = '';\n            }\n            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n                .then(function (module) { return module[exportName + factoryClassSuffix]; })\n                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n        };\n        SystemJsNgModuleLoader.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        SystemJsNgModuleLoader.ctorParameters = function () { return [\n            { type: Compiler, },\n            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\n        ]; };\n        return SystemJsNgModuleLoader;\n    }());\n    /**\n     * @param {?} value\n     * @param {?} modulePath\n     * @param {?} exportName\n     * @return {?}\n     */\n    function checkNotEmpty(value, modulePath, exportName) {\n        if (!value) {\n            throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n        }\n        return value;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Represents an Embedded Template that can be used to instantiate Embedded Views.\n     *\n     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or\n     * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the\n     * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the\n     * `TemplateRef` from a Component or a Directive via {\\@link Query}.\n     *\n     * To instantiate Embedded Views based on a Template, use\n     * {\\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n     * View Container.\n     * \\@stable\n     * @abstract\n     */\n    var TemplateRef = (function () {\n        function TemplateRef() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        TemplateRef.prototype.elementRef = function () { };\n        /**\n         * @abstract\n         * @param {?} context\n         * @return {?}\n         */\n        TemplateRef.prototype.createEmbeddedView = function (context) { };\n        return TemplateRef;\n    }());\n    var TemplateRef_ = (function (_super) {\n        __extends$10(TemplateRef_, _super);\n        /**\n         * @param {?} _parentView\n         * @param {?} _nodeIndex\n         * @param {?} _nativeElement\n         */\n        function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {\n            _super.call(this);\n            this._parentView = _parentView;\n            this._nodeIndex = _nodeIndex;\n            this._nativeElement = _nativeElement;\n        }\n        /**\n         * @param {?} context\n         * @return {?}\n         */\n        TemplateRef_.prototype.createEmbeddedView = function (context) {\n            var /** @type {?} */ view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);\n            view.create(context || ({}));\n            return view.ref;\n        };\n        Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return new ElementRef(this._nativeElement); },\n            enumerable: true,\n            configurable: true\n        });\n        return TemplateRef_;\n    }(TemplateRef));\n\n    /**\n     * Represents a container where one or more Views can be attached.\n     *\n     * The container can contain two kinds of Views. Host Views, created by instantiating a\n     * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\n     * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\n     *\n     * The location of the View Container within the containing View is specified by the Anchor\n     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n     * have a single View Container.\n     *\n     * Root elements of Views attached to this container become siblings of the Anchor Element in\n     * the Rendered View.\n     *\n     * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\n     * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\n     * \\@stable\n     * @abstract\n     */\n    var ViewContainerRef = (function () {\n        function ViewContainerRef() {\n        }\n        /**\n         * Anchor element that specifies the location of this container in the containing View.\n         * <!-- TODO: rename to anchorElement -->\n         * @abstract\n         * @return {?}\n         */\n        ViewContainerRef.prototype.element = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        ViewContainerRef.prototype.injector = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        ViewContainerRef.prototype.parentInjector = function () { };\n        /**\n         * Destroys all Views in this container.\n         * @abstract\n         * @return {?}\n         */\n        ViewContainerRef.prototype.clear = function () { };\n        /**\n         * Returns the {\\@link ViewRef} for the View located in this container at the specified index.\n         * @abstract\n         * @param {?} index\n         * @return {?}\n         */\n        ViewContainerRef.prototype.get = function (index) { };\n        /**\n         * Returns the number of Views currently attached to this container.\n         * @abstract\n         * @return {?}\n         */\n        ViewContainerRef.prototype.length = function () { };\n        /**\n         * Instantiates an Embedded View based on the {\\@link TemplateRef `templateRef`} and inserts it\n         * into this container at the specified `index`.\n         *\n         * If `index` is not specified, the new View will be inserted as the last View in the container.\n         *\n         * Returns the {\\@link ViewRef} for the newly created View.\n         * @abstract\n         * @param {?} templateRef\n         * @param {?=} context\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };\n        /**\n         * Instantiates a single {\\@link Component} and inserts its Host View into this container at the\n         * specified `index`.\n         *\n         * The component is instantiated using its {\\@link ComponentFactory} which can be\n         * obtained via {\\@link ComponentFactoryResolver#resolveComponentFactory}.\n         *\n         * If `index` is not specified, the new View will be inserted as the last View in the container.\n         *\n         * You can optionally specify the {\\@link Injector} that will be used as parent for the Component.\n         *\n         * Returns the {\\@link ComponentRef} of the Host View created for the newly instantiated Component.\n         * @abstract\n         * @param {?} componentFactory\n         * @param {?=} index\n         * @param {?=} injector\n         * @param {?=} projectableNodes\n         * @return {?}\n         */\n        ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { };\n        /**\n         * Inserts a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n         *\n         * If `index` is not specified, the new View will be inserted as the last View in the container.\n         *\n         * Returns the inserted {\\@link ViewRef}.\n         * @abstract\n         * @param {?} viewRef\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef.prototype.insert = function (viewRef, index) { };\n        /**\n         * Moves a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n         *\n         * Returns the inserted {\\@link ViewRef}.\n         * @abstract\n         * @param {?} viewRef\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };\n        /**\n         * Returns the index of the View, specified via {\\@link ViewRef}, within the current container or\n         * `-1` if this container doesn't contain the View.\n         * @abstract\n         * @param {?} viewRef\n         * @return {?}\n         */\n        ViewContainerRef.prototype.indexOf = function (viewRef) { };\n        /**\n         * Destroys a View attached to this container at the specified `index`.\n         *\n         * If `index` is not specified, the last View in the container will be removed.\n         * @abstract\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef.prototype.remove = function (index) { };\n        /**\n         * Use along with {\\@link #insert} to move a View within the current container.\n         *\n         * If the `index` param is omitted, the last {\\@link ViewRef} is detached.\n         * @abstract\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef.prototype.detach = function (index) { };\n        return ViewContainerRef;\n    }());\n    var ViewContainerRef_ = (function () {\n        /**\n         * @param {?} _element\n         */\n        function ViewContainerRef_(_element) {\n            this._element = _element;\n            /** @internal */\n            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');\n            /** @internal */\n            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');\n            /** @internal */\n            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');\n            /** @internal */\n            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };\n        Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ views = this._element.nestedViews;\n                return isPresent(views) ? views.length : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._element.elementRef; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._element.injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._element.parentInjector; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} templateRef\n         * @param {?=} context\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n            if (context === void 0) { context = null; }\n            if (index === void 0) { index = -1; }\n            var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context);\n            this.insert(viewRef, index);\n            return viewRef;\n        };\n        /**\n         * @param {?} componentFactory\n         * @param {?=} index\n         * @param {?=} injector\n         * @param {?=} projectableNodes\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {\n            if (index === void 0) { index = -1; }\n            if (injector === void 0) { injector = null; }\n            if (projectableNodes === void 0) { projectableNodes = null; }\n            var /** @type {?} */ s = this._createComponentInContainerScope();\n            var /** @type {?} */ contextInjector = injector || this._element.parentInjector;\n            var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);\n            this.insert(componentRef.hostView, index);\n            return wtfLeave(s, componentRef);\n        };\n        /**\n         * @param {?} viewRef\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.insert = function (viewRef, index) {\n            if (index === void 0) { index = -1; }\n            var /** @type {?} */ s = this._insertScope();\n            if (index == -1)\n                index = this.length;\n            var /** @type {?} */ viewRef_ = (viewRef);\n            this._element.attachView(viewRef_.internalView, index);\n            return wtfLeave(s, viewRef_);\n        };\n        /**\n         * @param {?} viewRef\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n            var /** @type {?} */ s = this._insertScope();\n            if (currentIndex == -1)\n                return;\n            var /** @type {?} */ viewRef_ = (viewRef);\n            this._element.moveView(viewRef_.internalView, currentIndex);\n            return wtfLeave(s, viewRef_);\n        };\n        /**\n         * @param {?} viewRef\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.indexOf = function (viewRef) {\n            return this.length ? this._element.nestedViews.indexOf(((viewRef)).internalView) :\n                -1;\n        };\n        /**\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.remove = function (index) {\n            if (index === void 0) { index = -1; }\n            var /** @type {?} */ s = this._removeScope();\n            if (index == -1)\n                index = this.length - 1;\n            var /** @type {?} */ view = this._element.detachView(index);\n            view.destroy();\n            // view is intentionally not returned to the client.\n            wtfLeave(s);\n        };\n        /**\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.detach = function (index) {\n            if (index === void 0) { index = -1; }\n            var /** @type {?} */ s = this._detachScope();\n            if (index == -1)\n                index = this.length - 1;\n            var /** @type {?} */ view = this._element.detachView(index);\n            return wtfLeave(s, view.ref);\n        };\n        /**\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.clear = function () {\n            for (var /** @type {?} */ i = this.length - 1; i >= 0; i--) {\n                this.remove(i);\n            }\n        };\n        return ViewContainerRef_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * \\@stable\n     * @abstract\n     */\n    var ViewRef = (function (_super) {\n        __extends$11(ViewRef, _super);\n        function ViewRef() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * Destroys the view and all of the data structures associated with it.\n         * @abstract\n         * @return {?}\n         */\n        ViewRef.prototype.destroy = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        ViewRef.prototype.destroyed = function () { };\n        /**\n         * @abstract\n         * @param {?} callback\n         * @return {?}\n         */\n        ViewRef.prototype.onDestroy = function (callback) { };\n        return ViewRef;\n    }(ChangeDetectorRef));\n    /**\n     * Represents an Angular View.\n     *\n     * <!-- TODO: move the next two paragraphs to the dev guide -->\n     * A View is a fundamental building block of the application UI. It is the smallest grouping of\n     * Elements which are created and destroyed together.\n     *\n     * Properties of elements in a View can change, but the structure (number and order) of elements in\n     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n     * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n     * <!-- /TODO -->\n     *\n     * ### Example\n     *\n     * Given this template...\n     *\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <li *ngFor=\"let  item of items\">{{item}}</li>\n     * </ul>\n     * ```\n     *\n     * We have two {\\@link TemplateRef}s:\n     *\n     * Outer {\\@link TemplateRef}:\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <template ngFor let-item [ngForOf]=\"items\"></template>\n     * </ul>\n     * ```\n     *\n     * Inner {\\@link TemplateRef}:\n     * ```\n     *   <li>{{item}}</li>\n     * ```\n     *\n     * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n     *\n     * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n     *\n     * ```\n     * <!-- ViewRef: outer-0 -->\n     * Count: 2\n     * <ul>\n     *   <template view-container-ref></template>\n     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n     * </ul>\n     * <!-- /ViewRef: outer-0 -->\n     * ```\n     * \\@experimental\n     * @abstract\n     */\n    var EmbeddedViewRef = (function (_super) {\n        __extends$11(EmbeddedViewRef, _super);\n        function EmbeddedViewRef() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        EmbeddedViewRef.prototype.context = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        EmbeddedViewRef.prototype.rootNodes = function () { };\n        return EmbeddedViewRef;\n    }(ViewRef));\n    var ViewRef_ = (function () {\n        /**\n         * @param {?} _view\n         * @param {?} animationQueue\n         */\n        function ViewRef_(_view, animationQueue) {\n            this._view = _view;\n            this.animationQueue = animationQueue;\n            this._view = _view;\n            this._originalMode = this._view.cdMode;\n        }\n        Object.defineProperty(ViewRef_.prototype, \"internalView\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view.flatRootNodes; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"context\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view.destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.detectChanges = function () {\n            this._view.detectChanges(false);\n            this.animationQueue.flush();\n        };\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.reattach = function () {\n            this._view.cdMode = this._originalMode;\n            this.markForCheck();\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        ViewRef_.prototype.onDestroy = function (callback) {\n            if (!this._view.disposables) {\n                this._view.disposables = [];\n            }\n            this._view.disposables.push(callback);\n        };\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy(); };\n        return ViewRef_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var EventListener = (function () {\n        /**\n         * @param {?} name\n         * @param {?} callback\n         */\n        function EventListener(name, callback) {\n            this.name = name;\n            this.callback = callback;\n        }\n        ;\n        return EventListener;\n    }());\n    /**\n     * \\@experimental All debugging apis are currently experimental.\n     */\n    var DebugNode = (function () {\n        /**\n         * @param {?} nativeNode\n         * @param {?} parent\n         * @param {?} _debugInfo\n         */\n        function DebugNode(nativeNode, parent, _debugInfo) {\n            this._debugInfo = _debugInfo;\n            this.nativeNode = nativeNode;\n            if (parent && parent instanceof DebugElement) {\n                parent.addChild(this);\n            }\n            else {\n                this.parent = null;\n            }\n            this.listeners = [];\n        }\n        Object.defineProperty(DebugNode.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._debugInfo ? this._debugInfo.injector : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._debugInfo ? this._debugInfo.component : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"context\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._debugInfo ? this._debugInfo.context : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"references\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._debugInfo ? this._debugInfo.references : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"source\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._debugInfo ? this._debugInfo.source : null; },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugNode;\n    }());\n    /**\n     * \\@experimental All debugging apis are currently experimental.\n     */\n    var DebugElement = (function (_super) {\n        __extends$12(DebugElement, _super);\n        /**\n         * @param {?} nativeNode\n         * @param {?} parent\n         * @param {?} _debugInfo\n         */\n        function DebugElement(nativeNode, parent, _debugInfo) {\n            _super.call(this, nativeNode, parent, _debugInfo);\n            this.properties = {};\n            this.attributes = {};\n            this.classes = {};\n            this.styles = {};\n            this.childNodes = [];\n            this.nativeElement = nativeNode;\n        }\n        /**\n         * @param {?} child\n         * @return {?}\n         */\n        DebugElement.prototype.addChild = function (child) {\n            if (child) {\n                this.childNodes.push(child);\n                child.parent = this;\n            }\n        };\n        /**\n         * @param {?} child\n         * @return {?}\n         */\n        DebugElement.prototype.removeChild = function (child) {\n            var /** @type {?} */ childIndex = this.childNodes.indexOf(child);\n            if (childIndex !== -1) {\n                child.parent = null;\n                this.childNodes.splice(childIndex, 1);\n            }\n        };\n        /**\n         * @param {?} child\n         * @param {?} newChildren\n         * @return {?}\n         */\n        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {\n            var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\n            if (siblingIndex !== -1) {\n                var /** @type {?} */ previousChildren = this.childNodes.slice(0, siblingIndex + 1);\n                var /** @type {?} */ nextChildren = this.childNodes.slice(siblingIndex + 1);\n                this.childNodes = previousChildren.concat(newChildren, nextChildren);\n                for (var /** @type {?} */ i = 0; i < newChildren.length; ++i) {\n                    var /** @type {?} */ newChild = newChildren[i];\n                    if (newChild.parent) {\n                        newChild.parent.removeChild(newChild);\n                    }\n                    newChild.parent = this;\n                }\n            }\n        };\n        /**\n         * @param {?} predicate\n         * @return {?}\n         */\n        DebugElement.prototype.query = function (predicate) {\n            var /** @type {?} */ results = this.queryAll(predicate);\n            return results[0] || null;\n        };\n        /**\n         * @param {?} predicate\n         * @return {?}\n         */\n        DebugElement.prototype.queryAll = function (predicate) {\n            var /** @type {?} */ matches = [];\n            _queryElementChildren(this, predicate, matches);\n            return matches;\n        };\n        /**\n         * @param {?} predicate\n         * @return {?}\n         */\n        DebugElement.prototype.queryAllNodes = function (predicate) {\n            var /** @type {?} */ matches = [];\n            _queryNodeChildren(this, predicate, matches);\n            return matches;\n        };\n        Object.defineProperty(DebugElement.prototype, \"children\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} eventName\n         * @param {?} eventObj\n         * @return {?}\n         */\n        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {\n            this.listeners.forEach(function (listener) {\n                if (listener.name == eventName) {\n                    listener.callback(eventObj);\n                }\n            });\n        };\n        return DebugElement;\n    }(DebugNode));\n    /**\n     * \\@experimental\n     * @param {?} debugEls\n     * @return {?}\n     */\n    function asNativeElements(debugEls) {\n        return debugEls.map(function (el) { return el.nativeElement; });\n    }\n    /**\n     * @param {?} element\n     * @param {?} predicate\n     * @param {?} matches\n     * @return {?}\n     */\n    function _queryElementChildren(element, predicate, matches) {\n        element.childNodes.forEach(function (node) {\n            if (node instanceof DebugElement) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                _queryElementChildren(node, predicate, matches);\n            }\n        });\n    }\n    /**\n     * @param {?} parentNode\n     * @param {?} predicate\n     * @param {?} matches\n     * @return {?}\n     */\n    function _queryNodeChildren(parentNode, predicate, matches) {\n        if (parentNode instanceof DebugElement) {\n            parentNode.childNodes.forEach(function (node) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                if (node instanceof DebugElement) {\n                    _queryNodeChildren(node, predicate, matches);\n                }\n            });\n        }\n    }\n    // Need to keep the nodes in a global Map so that multiple angular apps are supported.\n    var /** @type {?} */ _nativeNodeToDebugNode = new Map();\n    /**\n     * \\@experimental\n     * @param {?} nativeNode\n     * @return {?}\n     */\n    function getDebugNode(nativeNode) {\n        return _nativeNodeToDebugNode.get(nativeNode);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function indexDebugNode(node) {\n        _nativeNodeToDebugNode.set(node.nativeNode, node);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function removeDebugNodeFromIndex(node) {\n        _nativeNodeToDebugNode.delete(node.nativeNode);\n    }\n\n    /**\n     * @return {?}\n     */\n    function _reflector() {\n        return reflector;\n    }\n    var /** @type {?} */ _CORE_PLATFORM_PROVIDERS = [\n        PlatformRef_,\n        { provide: PlatformRef, useExisting: PlatformRef_ },\n        { provide: Reflector, useFactory: _reflector, deps: [] },\n        { provide: ReflectorReader, useExisting: Reflector },\n        TestabilityRegistry,\n        Console,\n    ];\n    /**\n     * This platform has to be included in any other platform\n     *\n     * @experimental\n     */\n    var /** @type {?} */ platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var /** @type {?} */ LOCALE_ID = new OpaqueToken('LocaleId');\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var /** @type {?} */ TRANSLATIONS = new OpaqueToken('Translations');\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var /** @type {?} */ TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');\n\n    /**\n     * @return {?}\n     */\n    function _iterableDiffersFactory() {\n        return defaultIterableDiffers;\n    }\n    /**\n     * @return {?}\n     */\n    function _keyValueDiffersFactory() {\n        return defaultKeyValueDiffers;\n    }\n    /**\n     * @param {?=} locale\n     * @return {?}\n     */\n    function _localeFactory(locale) {\n        return locale || 'en-US';\n    }\n    /**\n     * This module includes the providers of \\@angular/core that are needed\n     * to bootstrap components via `ApplicationRef`.\n     *\n     * \\@experimental\n     */\n    var ApplicationModule = (function () {\n        function ApplicationModule() {\n        }\n        ApplicationModule.decorators = [\n            { type: NgModule, args: [{\n                        providers: [\n                            ApplicationRef_,\n                            { provide: ApplicationRef, useExisting: ApplicationRef_ },\n                            ApplicationInitStatus,\n                            Compiler,\n                            APP_ID_RANDOM_PROVIDER,\n                            ViewUtils,\n                            AnimationQueue,\n                            { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\n                            { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\n                            {\n                                provide: LOCALE_ID,\n                                useFactory: _localeFactory,\n                                deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n                            },\n                        ]\n                    },] },\n        ];\n        /** @nocollapse */\n        ApplicationModule.ctorParameters = function () { return []; };\n        return ApplicationModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */ FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean\n    var /** @type {?} */ ANY_STATE = '*';\n    var /** @type {?} */ DEFAULT_STATE = '*';\n    var /** @type {?} */ EMPTY_STATE = 'void';\n\n    var AnimationGroupPlayer = (function () {\n        /**\n         * @param {?} _players\n         */\n        function AnimationGroupPlayer(_players) {\n            var _this = this;\n            this._players = _players;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._finished = false;\n            this._started = false;\n            this._destroyed = false;\n            this.parentPlayer = null;\n            var count = 0;\n            var total = this._players.length;\n            if (total == 0) {\n                scheduleMicroTask(function () { return _this._onFinish(); });\n            }\n            else {\n                this._players.forEach(function (player) {\n                    player.parentPlayer = _this;\n                    player.onDone(function () {\n                        if (++count >= total) {\n                            _this._onFinish();\n                        }\n                    });\n                });\n            }\n        }\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype._onFinish = function () {\n            if (!this._finished) {\n                this._finished = true;\n                this._onDoneFns.forEach(function (fn) { return fn(); });\n                this._onDoneFns = [];\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.play = function () {\n            if (!isPresent(this.parentPlayer)) {\n                this.init();\n            }\n            if (!this.hasStarted()) {\n                this._onStartFns.forEach(function (fn) { return fn(); });\n                this._onStartFns = [];\n                this._started = true;\n            }\n            this._players.forEach(function (player) { return player.play(); });\n        };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.finish = function () {\n            this._onFinish();\n            this._players.forEach(function (player) { return player.finish(); });\n        };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.destroy = function () {\n            if (!this._destroyed) {\n                this._onFinish();\n                this._players.forEach(function (player) { return player.destroy(); });\n                this._destroyed = true;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.reset = function () {\n            this._players.forEach(function (player) { return player.reset(); });\n            this._destroyed = false;\n            this._finished = false;\n            this._started = false;\n        };\n        /**\n         * @param {?} p\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.setPosition = function (p) {\n            this._players.forEach(function (player) { player.setPosition(p); });\n        };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.getPosition = function () {\n            var /** @type {?} */ min = 0;\n            this._players.forEach(function (player) {\n                var /** @type {?} */ p = player.getPosition();\n                min = Math.min(p, min);\n            });\n            return min;\n        };\n        Object.defineProperty(AnimationGroupPlayer.prototype, \"players\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._players; },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationGroupPlayer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `AnimationKeyframe` consists of a series of styles (contained within {\\@link AnimationStyles\n     * `AnimationStyles`})\n     * and an offset value indicating when those styles are applied within the `duration/delay/easing`\n     * timings.\n     * `AnimationKeyframe` is mostly an internal class which is designed to be used alongside {\\@link\n     * Renderer#animate-anchor `Renderer.animate`}.\n     *\n     * \\@experimental Animation support is experimental\n     */\n    var AnimationKeyframe = (function () {\n        /**\n         * @param {?} offset\n         * @param {?} styles\n         */\n        function AnimationKeyframe(offset, styles) {\n            this.offset = offset;\n            this.styles = styles;\n        }\n        return AnimationKeyframe;\n    }());\n\n    /**\n     * \\@experimental Animation support is experimental.\n     * @abstract\n     */\n    var AnimationPlayer = (function () {\n        function AnimationPlayer() {\n        }\n        /**\n         * @abstract\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationPlayer.prototype.onDone = function (fn) { };\n        /**\n         * @abstract\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationPlayer.prototype.onStart = function (fn) { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.init = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.hasStarted = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.play = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.pause = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.restart = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.finish = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.destroy = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.reset = function () { };\n        /**\n         * @abstract\n         * @param {?} p\n         * @return {?}\n         */\n        AnimationPlayer.prototype.setPosition = function (p) { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.getPosition = function () { };\n        Object.defineProperty(AnimationPlayer.prototype, \"parentPlayer\", {\n            /**\n             * @return {?}\n             */\n            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n            /**\n             * @param {?} player\n             * @return {?}\n             */\n            set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationPlayer;\n    }());\n    var NoOpAnimationPlayer = (function () {\n        function NoOpAnimationPlayer() {\n            var _this = this;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._started = false;\n            this.parentPlayer = null;\n            scheduleMicroTask(function () { return _this._onFinish(); });\n        }\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype._onFinish = function () {\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.init = function () { };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.play = function () {\n            if (!this.hasStarted()) {\n                this._onStartFns.forEach(function (fn) { return fn(); });\n                this._onStartFns = [];\n            }\n            this._started = true;\n        };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.pause = function () { };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.restart = function () { };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.destroy = function () { };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.reset = function () { };\n        /**\n         * @param {?} p\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.setPosition = function (p) { };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };\n        return NoOpAnimationPlayer;\n    }());\n\n    var AnimationSequencePlayer = (function () {\n        /**\n         * @param {?} _players\n         */\n        function AnimationSequencePlayer(_players) {\n            var _this = this;\n            this._players = _players;\n            this._currentIndex = 0;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._finished = false;\n            this._started = false;\n            this._destroyed = false;\n            this.parentPlayer = null;\n            this._players.forEach(function (player) { player.parentPlayer = _this; });\n            this._onNext(false);\n        }\n        /**\n         * @param {?} start\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype._onNext = function (start) {\n            var _this = this;\n            if (this._finished)\n                return;\n            if (this._players.length == 0) {\n                this._activePlayer = new NoOpAnimationPlayer();\n                scheduleMicroTask(function () { return _this._onFinish(); });\n            }\n            else if (this._currentIndex >= this._players.length) {\n                this._activePlayer = new NoOpAnimationPlayer();\n                this._onFinish();\n            }\n            else {\n                var /** @type {?} */ player = this._players[this._currentIndex++];\n                player.onDone(function () { return _this._onNext(true); });\n                this._activePlayer = player;\n                if (start) {\n                    player.play();\n                }\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype._onFinish = function () {\n            if (!this._finished) {\n                this._finished = true;\n                this._onDoneFns.forEach(function (fn) { return fn(); });\n                this._onDoneFns = [];\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.play = function () {\n            if (!isPresent(this.parentPlayer)) {\n                this.init();\n            }\n            if (!this.hasStarted()) {\n                this._onStartFns.forEach(function (fn) { return fn(); });\n                this._onStartFns = [];\n                this._started = true;\n            }\n            this._activePlayer.play();\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.restart = function () {\n            this.reset();\n            if (this._players.length > 0) {\n                this._players[0].restart();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.reset = function () {\n            this._players.forEach(function (player) { return player.reset(); });\n            this._destroyed = false;\n            this._finished = false;\n            this._started = false;\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.finish = function () {\n            this._onFinish();\n            this._players.forEach(function (player) { return player.finish(); });\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.destroy = function () {\n            if (!this._destroyed) {\n                this._onFinish();\n                this._players.forEach(function (player) { return player.destroy(); });\n                this._destroyed = true;\n                this._activePlayer = new NoOpAnimationPlayer();\n            }\n        };\n        /**\n         * @param {?} p\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p); };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };\n        Object.defineProperty(AnimationSequencePlayer.prototype, \"players\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._players; },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationSequencePlayer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$13 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @experimental Animation support is experimental.\n     */\n    var /** @type {?} */ AUTO_STYLE = '*';\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link trigger trigger\n     * animation function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationEntryMetadata = (function () {\n        /**\n         * @param {?} name\n         * @param {?} definitions\n         */\n        function AnimationEntryMetadata(name, definitions) {\n            this.name = name;\n            this.definitions = definitions;\n        }\n        return AnimationEntryMetadata;\n    }());\n    /**\n     * \\@experimental Animation support is experimental.\n     * @abstract\n     */\n    var AnimationStateMetadata = (function () {\n        function AnimationStateMetadata() {\n        }\n        return AnimationStateMetadata;\n    }());\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link state state animation\n     * function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationStateDeclarationMetadata = (function (_super) {\n        __extends$13(AnimationStateDeclarationMetadata, _super);\n        /**\n         * @param {?} stateNameExpr\n         * @param {?} styles\n         */\n        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {\n            _super.call(this);\n            this.stateNameExpr = stateNameExpr;\n            this.styles = styles;\n        }\n        return AnimationStateDeclarationMetadata;\n    }(AnimationStateMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the\n     * {\\@link transition transition animation function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationStateTransitionMetadata = (function (_super) {\n        __extends$13(AnimationStateTransitionMetadata, _super);\n        /**\n         * @param {?} stateChangeExpr\n         * @param {?} steps\n         */\n        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {\n            _super.call(this);\n            this.stateChangeExpr = stateChangeExpr;\n            this.steps = steps;\n        }\n        return AnimationStateTransitionMetadata;\n    }(AnimationStateMetadata));\n    /**\n     * \\@experimental Animation support is experimental.\n     * @abstract\n     */\n    var AnimationMetadata = (function () {\n        function AnimationMetadata() {\n        }\n        return AnimationMetadata;\n    }());\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link keyframes keyframes\n     * animation function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationKeyframesSequenceMetadata = (function (_super) {\n        __extends$13(AnimationKeyframesSequenceMetadata, _super);\n        /**\n         * @param {?} steps\n         */\n        function AnimationKeyframesSequenceMetadata(steps) {\n            _super.call(this);\n            this.steps = steps;\n        }\n        return AnimationKeyframesSequenceMetadata;\n    }(AnimationMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link style style animation\n     * function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationStyleMetadata = (function (_super) {\n        __extends$13(AnimationStyleMetadata, _super);\n        /**\n         * @param {?} styles\n         * @param {?=} offset\n         */\n        function AnimationStyleMetadata(styles, offset) {\n            if (offset === void 0) { offset = null; }\n            _super.call(this);\n            this.styles = styles;\n            this.offset = offset;\n        }\n        return AnimationStyleMetadata;\n    }(AnimationMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link animate animate\n     * animation function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationAnimateMetadata = (function (_super) {\n        __extends$13(AnimationAnimateMetadata, _super);\n        /**\n         * @param {?} timings\n         * @param {?} styles\n         */\n        function AnimationAnimateMetadata(timings, styles) {\n            _super.call(this);\n            this.timings = timings;\n            this.styles = styles;\n        }\n        return AnimationAnimateMetadata;\n    }(AnimationMetadata));\n    /**\n     * \\@experimental Animation support is experimental.\n     * @abstract\n     */\n    var AnimationWithStepsMetadata = (function (_super) {\n        __extends$13(AnimationWithStepsMetadata, _super);\n        function AnimationWithStepsMetadata() {\n            _super.call(this);\n        }\n        Object.defineProperty(AnimationWithStepsMetadata.prototype, \"steps\", {\n            /**\n             * @return {?}\n             */\n            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationWithStepsMetadata;\n    }(AnimationMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link sequence sequence\n     * animation function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationSequenceMetadata = (function (_super) {\n        __extends$13(AnimationSequenceMetadata, _super);\n        /**\n         * @param {?} _steps\n         */\n        function AnimationSequenceMetadata(_steps) {\n            _super.call(this);\n            this._steps = _steps;\n        }\n        Object.defineProperty(AnimationSequenceMetadata.prototype, \"steps\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._steps; },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationSequenceMetadata;\n    }(AnimationWithStepsMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link group group animation\n     * function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationGroupMetadata = (function (_super) {\n        __extends$13(AnimationGroupMetadata, _super);\n        /**\n         * @param {?} _steps\n         */\n        function AnimationGroupMetadata(_steps) {\n            _super.call(this);\n            this._steps = _steps;\n        }\n        Object.defineProperty(AnimationGroupMetadata.prototype, \"steps\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._steps; },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationGroupMetadata;\n    }(AnimationWithStepsMetadata));\n    /**\n     * `animate` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `animate` specifies an animation step that will apply the provided `styles` data for a given\n     * amount of\n     * time based on the provided `timing` expression value. Calls to `animate` are expected to be\n     * used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link transition\n     * transition}.\n     *\n     * ### Usage\n     *\n     * The `animate` function accepts two input parameters: `timing` and `styles`:\n     *\n     * - `timing` is a string based value that can be a combination of a duration with optional\n     * delay and easing values. The format for the expression breaks down to `duration delay easing`\n     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n     * delay=100, easing=ease-out`.\n     * If a numeric value is provided then that will be used as the `duration` value in millisecond\n     * form.\n     * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n     * keyframes keyframes}.\n     * If left empty then the styles from the destination state will be collected and used (this is\n     * useful when\n     * describing an animation step that will complete an animation by {\\@link\n     * transition#the-final-animate-call animating to the final state}).\n     *\n     * ```typescript\n     * // various functions for specifying timing data\n     * animate(500, style(...))\n     * animate(\"1s\", style(...))\n     * animate(\"100ms 0.5s\", style(...))\n     * animate(\"5s ease\", style(...))\n     * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n     *\n     * // either style() of keyframes() can be used\n     * animate(500, style({ background: \"red\" }))\n     * animate(500, keyframes([\n     *   style({ background: \"blue\" })),\n     *   style({ background: \"red\" }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} timing\n     * @param {?=} styles\n     * @return {?}\n     */\n    function animate(timing, styles) {\n        if (styles === void 0) { styles = null; }\n        var /** @type {?} */ stylesEntry = styles;\n        if (!isPresent(stylesEntry)) {\n            var /** @type {?} */ EMPTY_STYLE = {};\n            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);\n        }\n        return new AnimationAnimateMetadata(timing, stylesEntry);\n    }\n    /**\n     * `group` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations\n     * are useful when a series of styles must be animated/closed off\n     * at different statrting/ending times.\n     *\n     * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n     * transition}\n     * and it will only continue to the next instruction once all of the inner animation steps\n     * have completed.\n     *\n     * ### Usage\n     *\n     * The `steps` data that is passed into the `group` animation function can either consist\n     * of {\\@link style style} or {\\@link animate animate} function calls. Each call to `style()` or\n     * `animate()`\n     * within a group will be executed instantly (use {\\@link keyframes keyframes} or a\n     * {\\@link animate#usage animate() with a delay value} to offset styles to be applied at a later\n     * time).\n     *\n     * ```typescript\n     * group([\n     *   animate(\"1s\", { background: \"black\" }))\n     *   animate(\"2s\", { color: \"white\" }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} steps\n     * @return {?}\n     */\n    function group(steps) {\n        return new AnimationGroupMetadata(steps);\n    }\n    /**\n     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used\n     * by default when an array is passed as animation data into {\\@link transition transition}.)\n     *\n     * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n     * transition}\n     * and it will only continue to the next instruction once each of the inner animation steps\n     * have completed.\n     *\n     * To perform animation styling in parallel with other animation steps then\n     * have a look at the {\\@link group group} animation function.\n     *\n     * ### Usage\n     *\n     * The `steps` data that is passed into the `sequence` animation function can either consist\n     * of {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply\n     * the\n     * provided styling data immediately while a call to `animate()` will apply its styling\n     * data over a given time depending on its timing data.\n     *\n     * ```typescript\n     * sequence([\n     *   style({ opacity: 0 })),\n     *   animate(\"1s\", { opacity: 1 }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} steps\n     * @return {?}\n     */\n    function sequence(steps) {\n        return new AnimationSequenceMetadata(steps);\n    }\n    /**\n     * `style` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `style` declares a key/value object containing CSS properties/styles that can then\n     * be used for {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as\n     * styling data for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n     *\n     * ### Usage\n     *\n     * `style` takes in a key/value string map as data and expects one or more CSS property/value\n     * pairs to be defined.\n     *\n     * ```typescript\n     * // string values are used for css properties\n     * style({ background: \"red\", color: \"blue\" })\n     *\n     * // numerical (pixel) values are also supported\n     * style({ width: 100, height: 0 })\n     * ```\n     *\n     * #### Auto-styles (using `*`)\n     *\n     * When an asterix (`*`) character is used as a value then it will be detected from the element\n     * being animated\n     * and applied as animation data when the animation starts.\n     *\n     * This feature proves useful for a state depending on layout and/or environment factors; in such\n     * cases\n     * the styles are calculated just before the animation starts.\n     *\n     * ```typescript\n     * // the steps below will animate from 0 to the\n     * // actual height of the element\n     * style({ height: 0 }),\n     * animate(\"1s\", style({ height: \"*\" }))\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} tokens\n     * @return {?}\n     */\n    function style(tokens) {\n        var /** @type {?} */ input;\n        var /** @type {?} */ offset = null;\n        if (typeof tokens === 'string') {\n            input = [(tokens)];\n        }\n        else {\n            if (Array.isArray(tokens)) {\n                input = (tokens);\n            }\n            else {\n                input = [(tokens)];\n            }\n            input.forEach(function (entry) {\n                var /** @type {?} */ entryOffset = ((entry) /** TODO #9100 */)['offset'];\n                if (isPresent(entryOffset)) {\n                    offset = offset == null ? parseFloat(entryOffset) : offset;\n                }\n            });\n        }\n        return new AnimationStyleMetadata(input, offset);\n    }\n    /**\n     * `state` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `state` declares an animation state within the given trigger. When a state is\n     * active within a component then its associated styles will persist on\n     * the element that the trigger is attached to (even when the animation ends).\n     *\n     * To animate between states, have a look at the animation {\\@link transition transition}\n     * DSL function. To register states to an animation trigger please have a look\n     * at the {\\@link trigger trigger} function.\n     *\n     * #### The `void` state\n     *\n     * The `void` state value is a reserved word that angular uses to determine when the element is not\n     * apart\n     * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n     * associated element\n     * is void).\n     *\n     * #### The `*` (default) state\n     *\n     * The `*` state (when styled) is a fallback state that will be used if\n     * the state that is being animated is not declared within the trigger.\n     *\n     * ### Usage\n     *\n     * `state` will declare an animation state with its associated styles\n     * within the given trigger.\n     *\n     * - `stateNameExpr` can be one or more state names separated by commas.\n     * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n     * the state\n     * has been reached.\n     *\n     * ```typescript\n     * // \"void\" is a reserved name for a state and is used to represent\n     * // the state in which an element is detached from from the application.\n     * state(\"void\", style({ height: 0 }))\n     *\n     * // user-defined states\n     * state(\"closed\", style({ height: 0 }))\n     * state(\"open, visible\", style({ height: \"*\" }))\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} stateNameExpr\n     * @param {?} styles\n     * @return {?}\n     */\n    function state(stateNameExpr, styles) {\n        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);\n    }\n    /**\n     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n     * by an `offset` value.\n     *\n     * ### Usage\n     *\n     * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n     * animation function. Instead of applying animations from where they are\n     * currently to their destination, keyframes can describe how each style entry is applied\n     * and at what point within the animation arc (much like CSS Keyframe Animations do).\n     *\n     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at\n     * what percentage of the animate time the styles will be applied.\n     *\n     * ```typescript\n     * // the provided offset values describe when each backgroundColor value is applied.\n     * animate(\"5s\", keyframes([\n     *   style({ backgroundColor: \"red\", offset: 0 }),\n     *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n     *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n     *   style({ backgroundColor: \"black\", offset: 1 })\n     * ]))\n     * ```\n     *\n     * Alternatively, if there are no `offset` values used within the style entries then the offsets\n     * will\n     * be calculated automatically.\n     *\n     * ```typescript\n     * animate(\"5s\", keyframes([\n     *   style({ backgroundColor: \"red\" }) // offset = 0\n     *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n     *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n     *   style({ backgroundColor: \"black\" }) // offset = 1\n     * ]))\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} steps\n     * @return {?}\n     */\n    function keyframes(steps) {\n        return new AnimationKeyframesSequenceMetadata(steps);\n    }\n    /**\n     * `transition` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n     * provided\n     * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`\n     * which consists\n     * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).\n     *\n     * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n     * to animate to\n     * a state value and persist its styles then one or more {\\@link state animation states} is expected\n     * to be defined.\n     *\n     * ### Usage\n     *\n     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n     * what the\n     * previous state is and what the current state has become. In other words, if a transition is\n     * defined that\n     * matches the old/current state criteria then the associated animation will be triggered.\n     *\n     * ```typescript\n     * // all transition/state changes are defined within an animation trigger\n     * trigger(\"myAnimationTrigger\", [\n     *   // if a state is defined then its styles will be persisted when the\n     *   // animation has fully completed itself\n     *   state(\"on\", style({ background: \"green\" })),\n     *   state(\"off\", style({ background: \"grey\" })),\n     *\n     *   // a transition animation that will be kicked off when the state value\n     *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n     *   transition(\"on => off\", animate(500)),\n     *\n     *   // it is also possible to do run the same animation for both directions\n     *   transition(\"on <=> off\", animate(500)),\n     *\n     *   // or to define multiple states pairs separated by commas\n     *   transition(\"on => off, off => void\", animate(500)),\n     *\n     *   // this is a catch-all state change for when an element is inserted into\n     *   // the page and the destination state is unknown\n     *   transition(\"void => *\", [\n     *     style({ opacity: 0 }),\n     *     animate(500)\n     *   ]),\n     *\n     *   // this will capture a state change between any states\n     *   transition(\"* => *\", animate(\"1s 0s\")),\n     * ])\n     * ```\n     *\n     * The template associated with this component will make use of the `myAnimationTrigger`\n     * animation trigger by binding to an element within its template code.\n     *\n     * ```html\n     * <!-- somewhere inside of my-component-tpl.html -->\n     * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n     * ```\n     *\n     * #### The final `animate` call\n     *\n     * If the final step within the transition steps is a call to `animate()` that **only**\n     * uses a timing value with **no style data** then it will be automatically used as the final\n     * animation\n     * arc for the element to animate itself to the final state. This involves an automatic mix of\n     * adding/removing CSS styles so that the element will be in the exact state it should be for the\n     * applied state to be presented correctly.\n     *\n     * ```\n     * // start off by hiding the element, but make sure that it animates properly to whatever state\n     * // is currently active for \"myAnimationTrigger\"\n     * transition(\"void => *\", [\n     *   style({ opacity: 0 }),\n     *   animate(500)\n     * ])\n     * ```\n     *\n     * ### Transition Aliases (`:enter` and `:leave`)\n     *\n     * Given that enter (insertion) and leave (removal) animations are so common,\n     * the `transition` function accepts both `:enter` and `:leave` values which\n     * are aliases for the `void => *` and `* => void` state changes.\n     *\n     * ```\n     * transition(\":enter\", [\n     *   style({ opacity: 0 }),\n     *   animate(500, style({ opacity: 1 }))\n     * ])\n     * transition(\":leave\", [\n     *   animate(500, style({ opacity: 0 }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} stateChangeExpr\n     * @param {?} steps\n     * @return {?}\n     */\n    function transition(stateChangeExpr, steps) {\n        var /** @type {?} */ animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;\n        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);\n    }\n    /**\n     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `trigger` Creates an animation trigger which will a list of {\\@link state state} and {\\@link\n     * transition transition}\n     * entries that will be evaluated when the expression bound to the trigger changes.\n     *\n     * Triggers are registered within the component annotation data under the\n     * {\\@link Component#animations-anchor animations section}. An animation trigger can\n     * be placed on an element within a template by referencing the name of the\n     * trigger followed by the expression value that the trigger is bound to\n     * (in the form of `[\\@triggerName]=\"expression\"`.\n     *\n     * ### Usage\n     *\n     * `trigger` will create an animation trigger reference based on the provided `name` value.\n     * The provided `animation` value is expected to be an array consisting of {\\@link state state} and\n     * {\\@link transition transition}\n     * declarations.\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-component',\n     *   templateUrl: 'my-component-tpl.html',\n     *   animations: [\n     *     trigger(\"myAnimationTrigger\", [\n     *       state(...),\n     *       state(...),\n     *       transition(...),\n     *       transition(...)\n     *     ])\n     *   ]\n     * })\n     * class MyComponent {\n     *   myStatusExp = \"something\";\n     * }\n     * ```\n     *\n     * The template associated with this component will make use of the `myAnimationTrigger`\n     * animation trigger by binding to an element within its template code.\n     *\n     * ```html\n     * <!-- somewhere inside of my-component-tpl.html -->\n     * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} name\n     * @param {?} animation\n     * @return {?}\n     */\n    function trigger(name, animation) {\n        return new AnimationEntryMetadata(name, animation);\n    }\n\n    /**\n     * @param {?} previousStyles\n     * @param {?} newStyles\n     * @param {?=} nullValue\n     * @return {?}\n     */\n    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {\n        if (nullValue === void 0) { nullValue = null; }\n        var /** @type {?} */ finalStyles = {};\n        Object.keys(newStyles).forEach(function (prop) {\n            var /** @type {?} */ value = newStyles[prop];\n            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();\n        });\n        Object.keys(previousStyles).forEach(function (prop) {\n            if (!isPresent(finalStyles[prop])) {\n                finalStyles[prop] = nullValue;\n            }\n        });\n        return finalStyles;\n    }\n    /**\n     * @param {?} collectedStyles\n     * @param {?} finalStateStyles\n     * @param {?} keyframes\n     * @return {?}\n     */\n    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {\n        var /** @type {?} */ limit = keyframes.length - 1;\n        var /** @type {?} */ firstKeyframe = keyframes[0];\n        // phase 1: copy all the styles from the first keyframe into the lookup map\n        var /** @type {?} */ flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);\n        var /** @type {?} */ extraFirstKeyframeStyles = {};\n        var /** @type {?} */ hasExtraFirstStyles = false;\n        Object.keys(collectedStyles).forEach(function (prop) {\n            var /** @type {?} */ value = (collectedStyles[prop]);\n            // if the style is already defined in the first keyframe then\n            // we do not replace it.\n            if (!flatenedFirstKeyframeStyles[prop]) {\n                flatenedFirstKeyframeStyles[prop] = value;\n                extraFirstKeyframeStyles[prop] = value;\n                hasExtraFirstStyles = true;\n            }\n        });\n        var /** @type {?} */ keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);\n        // phase 2: normalize the final keyframe\n        var /** @type {?} */ finalKeyframe = keyframes[limit];\n        finalKeyframe.styles.styles.unshift(finalStateStyles);\n        var /** @type {?} */ flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);\n        var /** @type {?} */ extraFinalKeyframeStyles = {};\n        var /** @type {?} */ hasExtraFinalStyles = false;\n        Object.keys(keyframeCollectedStyles).forEach(function (prop) {\n            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {\n                extraFinalKeyframeStyles[prop] = AUTO_STYLE;\n                hasExtraFinalStyles = true;\n            }\n        });\n        if (hasExtraFinalStyles) {\n            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);\n        }\n        Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {\n            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {\n                extraFirstKeyframeStyles[prop] = AUTO_STYLE;\n                hasExtraFirstStyles = true;\n            }\n        });\n        if (hasExtraFirstStyles) {\n            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);\n        }\n        collectAndResolveStyles(collectedStyles, [finalStateStyles]);\n        return keyframes;\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    function clearStyles(styles) {\n        var /** @type {?} */ finalStyles = {};\n        Object.keys(styles).forEach(function (key) { finalStyles[key] = null; });\n        return finalStyles;\n    }\n    /**\n     * @param {?} collection\n     * @param {?} styles\n     * @return {?}\n     */\n    function collectAndResolveStyles(collection, styles) {\n        return styles.map(function (entry) {\n            var /** @type {?} */ stylesObj = {};\n            Object.keys(entry).forEach(function (prop) {\n                var /** @type {?} */ value = entry[prop];\n                if (value == FILL_STYLE_FLAG) {\n                    value = collection[prop];\n                    if (!isPresent(value)) {\n                        value = AUTO_STYLE;\n                    }\n                }\n                collection[prop] = value;\n                stylesObj[prop] = value;\n            });\n            return stylesObj;\n        });\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderer\n     * @param {?} styles\n     * @return {?}\n     */\n    function renderStyles(element, renderer, styles) {\n        Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]); });\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    function flattenStyles(styles) {\n        var /** @type {?} */ finalStyles = {};\n        styles.forEach(function (entry) {\n            Object.keys(entry).forEach(function (prop) { finalStyles[prop] = (entry[prop]); });\n        });\n        return finalStyles;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `AnimationStyles` consists of a collection of key/value maps containing CSS-based style data\n     * that can either be used as initial styling data or apart of a series of keyframes within an\n     * animation.\n     * This class is mostly internal, and it is designed to be used alongside\n     * {\\@link AnimationKeyframe `AnimationKeyframe`} and {\\@link Renderer#animate-anchor\n     * `Renderer.animate`}.\n     *\n     * \\@experimental Animation support is experimental\n     */\n    var AnimationStyles = (function () {\n        /**\n         * @param {?} styles\n         */\n        function AnimationStyles(styles) {\n            this.styles = styles;\n        }\n        return AnimationStyles;\n    }());\n\n    /**\n     * An instance of this class is returned as an event parameter when an animation\n     * callback is captured for an animation either during the start or done phase.\n     *\n     * ```typescript\n     * \\@Component({\n     *   host: {\n     *     '[\\@myAnimationTrigger]': 'someExpression',\n     *     '(\\@myAnimationTrigger.start)': 'captureStartEvent($event)',\n     *     '(\\@myAnimationTrigger.done)': 'captureDoneEvent($event)',\n     *   },\n     *   animations: [\n     *     trigger(\"myAnimationTrigger\", [\n     *        // ...\n     *     ])\n     *   ]\n     * })\n     * class MyComponent {\n     *   someExpression: any = false;\n     *   captureStartEvent(event: AnimationTransitionEvent) {\n     *     // the toState, fromState and totalTime data is accessible from the event variable\n     *   }\n     *\n     *   captureDoneEvent(event: AnimationTransitionEvent) {\n     *     // the toState, fromState and totalTime data is accessible from the event variable\n     *   }\n     * }\n     * ```\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationTransitionEvent = (function () {\n        /**\n         * @param {?} __0\n         */\n        function AnimationTransitionEvent(_a) {\n            var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;\n            this.fromState = fromState;\n            this.toState = toState;\n            this.totalTime = totalTime;\n            this.phaseName = phaseName;\n        }\n        return AnimationTransitionEvent;\n    }());\n\n    var AnimationTransition = (function () {\n        /**\n         * @param {?} _player\n         * @param {?} _fromState\n         * @param {?} _toState\n         * @param {?} _totalTime\n         */\n        function AnimationTransition(_player, _fromState, _toState, _totalTime) {\n            this._player = _player;\n            this._fromState = _fromState;\n            this._toState = _toState;\n            this._totalTime = _totalTime;\n        }\n        /**\n         * @param {?} phaseName\n         * @return {?}\n         */\n        AnimationTransition.prototype._createEvent = function (phaseName) {\n            return new AnimationTransitionEvent({\n                fromState: this._fromState,\n                toState: this._toState,\n                totalTime: this._totalTime,\n                phaseName: phaseName\n            });\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        AnimationTransition.prototype.onStart = function (callback) {\n            var _this = this;\n            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('start')); }, 'player.onStart'));\n            this._player.onStart(fn);\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        AnimationTransition.prototype.onDone = function (callback) {\n            var _this = this;\n            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('done')); }, 'player.onDone'));\n            this._player.onDone(fn);\n        };\n        return AnimationTransition;\n    }());\n\n    var DebugDomRootRenderer = (function () {\n        /**\n         * @param {?} _delegate\n         */\n        function DebugDomRootRenderer(_delegate) {\n            this._delegate = _delegate;\n        }\n        /**\n         * @param {?} componentProto\n         * @return {?}\n         */\n        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {\n            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));\n        };\n        return DebugDomRootRenderer;\n    }());\n    var DebugDomRenderer = (function () {\n        /**\n         * @param {?} _delegate\n         */\n        function DebugDomRenderer(_delegate) {\n            this._delegate = _delegate;\n        }\n        /**\n         * @param {?} selectorOrNode\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {\n            var /** @type {?} */ nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);\n            var /** @type {?} */ debugEl = new DebugElement(nativeEl, null, debugInfo);\n            indexDebugNode(debugEl);\n            return nativeEl;\n        };\n        /**\n         * @param {?} parentElement\n         * @param {?} name\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {\n            var /** @type {?} */ nativeEl = this._delegate.createElement(parentElement, name, debugInfo);\n            var /** @type {?} */ debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);\n            debugEl.name = name;\n            indexDebugNode(debugEl);\n            return nativeEl;\n        };\n        /**\n         * @param {?} hostElement\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };\n        /**\n         * @param {?} parentElement\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {\n            var /** @type {?} */ comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);\n            var /** @type {?} */ debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);\n            indexDebugNode(debugEl);\n            return comment;\n        };\n        /**\n         * @param {?} parentElement\n         * @param {?} value\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {\n            var /** @type {?} */ text = this._delegate.createText(parentElement, value, debugInfo);\n            var /** @type {?} */ debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);\n            indexDebugNode(debugEl);\n            return text;\n        };\n        /**\n         * @param {?} parentElement\n         * @param {?} nodes\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {\n            var /** @type {?} */ debugParent = getDebugNode(parentElement);\n            if (isPresent(debugParent) && debugParent instanceof DebugElement) {\n                var /** @type {?} */ debugElement_1 = debugParent;\n                nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });\n            }\n            this._delegate.projectNodes(parentElement, nodes);\n        };\n        /**\n         * @param {?} node\n         * @param {?} viewRootNodes\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {\n            var /** @type {?} */ debugNode = getDebugNode(node);\n            if (isPresent(debugNode)) {\n                var /** @type {?} */ debugParent = debugNode.parent;\n                if (viewRootNodes.length > 0 && isPresent(debugParent)) {\n                    var /** @type {?} */ debugViewRootNodes_1 = [];\n                    viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode(rootNode)); });\n                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);\n                }\n            }\n            this._delegate.attachViewAfter(node, viewRootNodes);\n        };\n        /**\n         * @param {?} viewRootNodes\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {\n            viewRootNodes.forEach(function (node) {\n                var /** @type {?} */ debugNode = getDebugNode(node);\n                if (isPresent(debugNode) && isPresent(debugNode.parent)) {\n                    debugNode.parent.removeChild(debugNode);\n                }\n            });\n            this._delegate.detachView(viewRootNodes);\n        };\n        /**\n         * @param {?} hostElement\n         * @param {?} viewAllNodes\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {\n            viewAllNodes = viewAllNodes || [];\n            viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });\n            this._delegate.destroyView(hostElement, viewAllNodes);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} name\n         * @param {?} callback\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {\n            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl)) {\n                debugEl.listeners.push(new EventListener(name, callback));\n            }\n            return this._delegate.listen(renderElement, name, callback);\n        };\n        /**\n         * @param {?} target\n         * @param {?} name\n         * @param {?} callback\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {\n            return this._delegate.listenGlobal(target, name, callback);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} propertyName\n         * @param {?} propertyValue\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.properties[propertyName] = propertyValue;\n            }\n            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} attributeName\n         * @param {?} attributeValue\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {\n            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.attributes[attributeName] = attributeValue;\n            }\n            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} propertyName\n         * @param {?} propertyValue\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {\n            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} className\n         * @param {?} isAdd\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {\n            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.classes[className] = isAdd;\n            }\n            this._delegate.setElementClass(renderElement, className, isAdd);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} styleName\n         * @param {?} styleValue\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.styles[styleName] = styleValue;\n            }\n            this._delegate.setElementStyle(renderElement, styleName, styleValue);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} methodName\n         * @param {?=} args\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n            this._delegate.invokeElementMethod(renderElement, methodName, args);\n        };\n        /**\n         * @param {?} renderNode\n         * @param {?} text\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };\n        /**\n         * @param {?} element\n         * @param {?} startingStyles\n         * @param {?} keyframes\n         * @param {?} duration\n         * @param {?} delay\n         * @param {?} easing\n         * @param {?=} previousPlayers\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {\n            if (previousPlayers === void 0) { previousPlayers = []; }\n            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);\n        };\n        return DebugDomRenderer;\n    }());\n\n    var ViewType = {};\n    ViewType.HOST = 0;\n    ViewType.COMPONENT = 1;\n    ViewType.EMBEDDED = 2;\n    ViewType[ViewType.HOST] = \"HOST\";\n    ViewType[ViewType.COMPONENT] = \"COMPONENT\";\n    ViewType[ViewType.EMBEDDED] = \"EMBEDDED\";\n\n    var StaticNodeDebugInfo = (function () {\n        /**\n         * @param {?} providerTokens\n         * @param {?} componentToken\n         * @param {?} refTokens\n         */\n        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {\n            this.providerTokens = providerTokens;\n            this.componentToken = componentToken;\n            this.refTokens = refTokens;\n        }\n        return StaticNodeDebugInfo;\n    }());\n    var DebugContext = (function () {\n        /**\n         * @param {?} _view\n         * @param {?} _nodeIndex\n         * @param {?} _tplRow\n         * @param {?} _tplCol\n         */\n        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {\n            this._view = _view;\n            this._nodeIndex = _nodeIndex;\n            this._tplRow = _tplRow;\n            this._tplCol = _tplCol;\n        }\n        Object.defineProperty(DebugContext.prototype, \"_staticNodeInfo\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"context\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"component\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {\n                    return this.injector.get(staticNodeInfo.componentToken);\n                }\n                return null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"componentRenderElement\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ componentView = this._view;\n                while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {\n                    componentView = (componentView.parentView);\n                }\n                return componentView.parentElement;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view.injector(this._nodeIndex); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"renderNode\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                if (isPresent(this._nodeIndex) && this._view.allNodes) {\n                    return this._view.allNodes[this._nodeIndex];\n                }\n                else {\n                    return null;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"providerTokens\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"source\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._view.componentType.templateUrl + \":\" + this._tplRow + \":\" + this._tplCol;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"references\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var _this = this;\n                var /** @type {?} */ varValues = {};\n                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n                if (isPresent(staticNodeInfo)) {\n                    var /** @type {?} */ refs_1 = staticNodeInfo.refTokens;\n                    Object.keys(refs_1).forEach(function (refName) {\n                        var /** @type {?} */ refToken = refs_1[refName];\n                        var /** @type {?} */ varValue;\n                        if (isBlank(refToken)) {\n                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;\n                        }\n                        else {\n                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);\n                        }\n                        varValues[refName] = varValue;\n                    });\n                }\n                return varValues;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugContext;\n    }());\n\n    var ViewAnimationMap = (function () {\n        function ViewAnimationMap() {\n            this._map = new Map();\n            this._allPlayers = [];\n        }\n        /**\n         * @param {?} element\n         * @param {?} animationName\n         * @return {?}\n         */\n        ViewAnimationMap.prototype.find = function (element, animationName) {\n            var /** @type {?} */ playersByAnimation = this._map.get(element);\n            if (isPresent(playersByAnimation)) {\n                return playersByAnimation[animationName];\n            }\n        };\n        /**\n         * @param {?} element\n         * @return {?}\n         */\n        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {\n            var /** @type {?} */ el = this._map.get(element);\n            return el ? Object.keys(el).map(function (k) { return el[k]; }) : [];\n        };\n        /**\n         * @param {?} element\n         * @param {?} animationName\n         * @param {?} player\n         * @return {?}\n         */\n        ViewAnimationMap.prototype.set = function (element, animationName, player) {\n            var /** @type {?} */ playersByAnimation = this._map.get(element);\n            if (!isPresent(playersByAnimation)) {\n                playersByAnimation = {};\n            }\n            var /** @type {?} */ existingEntry = playersByAnimation[animationName];\n            if (isPresent(existingEntry)) {\n                this.remove(element, animationName);\n            }\n            playersByAnimation[animationName] = player;\n            this._allPlayers.push(player);\n            this._map.set(element, playersByAnimation);\n        };\n        /**\n         * @return {?}\n         */\n        ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };\n        /**\n         * @param {?} element\n         * @param {?} animationName\n         * @param {?=} targetPlayer\n         * @return {?}\n         */\n        ViewAnimationMap.prototype.remove = function (element, animationName, targetPlayer) {\n            if (targetPlayer === void 0) { targetPlayer = null; }\n            var /** @type {?} */ playersByAnimation = this._map.get(element);\n            if (playersByAnimation) {\n                var /** @type {?} */ player = playersByAnimation[animationName];\n                if (!targetPlayer || player === targetPlayer) {\n                    delete playersByAnimation[animationName];\n                    var /** @type {?} */ index = this._allPlayers.indexOf(player);\n                    this._allPlayers.splice(index, 1);\n                    if (Object.keys(playersByAnimation).length === 0) {\n                        this._map.delete(element);\n                    }\n                }\n            }\n        };\n        return ViewAnimationMap;\n    }());\n\n    var AnimationViewContext = (function () {\n        /**\n         * @param {?} _animationQueue\n         */\n        function AnimationViewContext(_animationQueue) {\n            this._animationQueue = _animationQueue;\n            this._players = new ViewAnimationMap();\n        }\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {\n            var /** @type {?} */ activeAnimationPlayers = this._players.getAllPlayers();\n            // we check for the length to avoid having GroupAnimationPlayer\n            // issue an unnecessary microtask when zero players are passed in\n            if (activeAnimationPlayers.length) {\n                new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback(); });\n            }\n            else {\n                callback();\n            }\n        };\n        /**\n         * @param {?} element\n         * @param {?} animationName\n         * @param {?} player\n         * @return {?}\n         */\n        AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {\n            var _this = this;\n            this._animationQueue.enqueue(player);\n            this._players.set(element, animationName, player);\n            player.onDone(function () { return _this._players.remove(element, animationName, player); });\n        };\n        /**\n         * @param {?} element\n         * @param {?=} animationName\n         * @return {?}\n         */\n        AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName) {\n            if (animationName === void 0) { animationName = null; }\n            var /** @type {?} */ players = [];\n            if (animationName) {\n                var /** @type {?} */ currentPlayer = this._players.find(element, animationName);\n                if (currentPlayer) {\n                    _recursePlayers(currentPlayer, players);\n                }\n            }\n            else {\n                this._players.findAllPlayersByElement(element).forEach(function (player) { return _recursePlayers(player, players); });\n            }\n            return players;\n        };\n        return AnimationViewContext;\n    }());\n    /**\n     * @param {?} player\n     * @param {?} collectedPlayers\n     * @return {?}\n     */\n    function _recursePlayers(player, collectedPlayers) {\n        if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {\n            player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers); });\n        }\n        else {\n            collectedPlayers.push(player);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$15 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var ElementInjector = (function (_super) {\n        __extends$15(ElementInjector, _super);\n        /**\n         * @param {?} _view\n         * @param {?} _nodeIndex\n         */\n        function ElementInjector(_view, _nodeIndex) {\n            _super.call(this);\n            this._view = _view;\n            this._nodeIndex = _nodeIndex;\n        }\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        ElementInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            return this._view.injectorGet(token, this._nodeIndex, notFoundValue);\n        };\n        return ElementInjector;\n    }(Injector));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$14 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ _scope_check = wtfCreateScope(\"AppView#check(ascii id)\");\n    /**\n     * @experimental\n     */\n    var /** @type {?} */ EMPTY_CONTEXT = new Object();\n    var /** @type {?} */ UNDEFINED$1 = new Object();\n    /**\n     * Cost of making objects: http://jsperf.com/instantiate-size-of-object\n     *\n     * @abstract\n     */\n    var AppView = (function () {\n        /**\n         * @param {?} clazz\n         * @param {?} componentType\n         * @param {?} type\n         * @param {?} viewUtils\n         * @param {?} parentView\n         * @param {?} parentIndex\n         * @param {?} parentElement\n         * @param {?} cdMode\n         * @param {?=} declaredViewContainer\n         */\n        function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {\n            if (declaredViewContainer === void 0) { declaredViewContainer = null; }\n            this.clazz = clazz;\n            this.componentType = componentType;\n            this.type = type;\n            this.viewUtils = viewUtils;\n            this.parentView = parentView;\n            this.parentIndex = parentIndex;\n            this.parentElement = parentElement;\n            this.cdMode = cdMode;\n            this.declaredViewContainer = declaredViewContainer;\n            this.numberOfChecks = 0;\n            this.ref = new ViewRef_(this, viewUtils.animationQueue);\n            if (type === ViewType.COMPONENT || type === ViewType.HOST) {\n                this.renderer = viewUtils.renderComponent(componentType);\n            }\n            else {\n                this.renderer = parentView.renderer;\n            }\n            this._directRenderer = this.renderer.directRenderer;\n        }\n        Object.defineProperty(AppView.prototype, \"animationContext\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                if (!this._animationContext) {\n                    this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);\n                }\n                return this._animationContext;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AppView.prototype, \"destroyed\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} context\n         * @return {?}\n         */\n        AppView.prototype.create = function (context) {\n            this.context = context;\n            return this.createInternal(null);\n        };\n        /**\n         * @param {?} rootSelectorOrNode\n         * @param {?} hostInjector\n         * @param {?} projectableNodes\n         * @return {?}\n         */\n        AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {\n            this.context = (EMPTY_CONTEXT);\n            this._hasExternalHostElement = isPresent(rootSelectorOrNode);\n            this._hostInjector = hostInjector;\n            this._hostProjectableNodes = projectableNodes;\n            return this.createInternal(rootSelectorOrNode);\n        };\n        /**\n         * Overwritten by implementations.\n         * Returns the ComponentRef for the host element for ViewType.HOST.\n         * @param {?} rootSelectorOrNode\n         * @return {?}\n         */\n        AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };\n        /**\n         * Overwritten by implementations.\n         * @param {?} templateNodeIndex\n         * @return {?}\n         */\n        AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };\n        /**\n         * @param {?} lastRootNode\n         * @param {?} allNodes\n         * @param {?} disposables\n         * @return {?}\n         */\n        AppView.prototype.init = function (lastRootNode, allNodes, disposables) {\n            this.lastRootNode = lastRootNode;\n            this.allNodes = allNodes;\n            this.disposables = disposables;\n            if (this.type === ViewType.COMPONENT) {\n                this.dirtyParentQueriesInternal();\n            }\n        };\n        /**\n         * @param {?} token\n         * @param {?} nodeIndex\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            var /** @type {?} */ result = UNDEFINED$1;\n            var /** @type {?} */ view = this;\n            while (result === UNDEFINED$1) {\n                if (isPresent(nodeIndex)) {\n                    result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);\n                }\n                if (result === UNDEFINED$1 && view.type === ViewType.HOST) {\n                    result = view._hostInjector.get(token, notFoundValue);\n                }\n                nodeIndex = view.parentIndex;\n                view = view.parentView;\n            }\n            return result;\n        };\n        /**\n         * Overwritten by implementations\n         * @param {?} token\n         * @param {?} nodeIndex\n         * @param {?} notFoundResult\n         * @return {?}\n         */\n        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {\n            return notFoundResult;\n        };\n        /**\n         * @param {?} nodeIndex\n         * @return {?}\n         */\n        AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };\n        /**\n         * @return {?}\n         */\n        AppView.prototype.detachAndDestroy = function () {\n            if (this.viewContainer) {\n                this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));\n            }\n            else if (this.appRef) {\n                this.appRef.detachView(this.ref);\n            }\n            else if (this._hasExternalHostElement) {\n                this.detach();\n            }\n            this.destroy();\n        };\n        /**\n         * @return {?}\n         */\n        AppView.prototype.destroy = function () {\n            var _this = this;\n            if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n                return;\n            }\n            var /** @type {?} */ hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;\n            if (this.disposables) {\n                for (var /** @type {?} */ i = 0; i < this.disposables.length; i++) {\n                    this.disposables[i]();\n                }\n            }\n            this.destroyInternal();\n            this.dirtyParentQueriesInternal();\n            if (this._animationContext) {\n                this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });\n            }\n            else {\n                this.renderer.destroyView(hostElement, this.allNodes);\n            }\n            this.cdMode = ChangeDetectorStatus.Destroyed;\n        };\n        /**\n         * Overwritten by implementations\n         * @return {?}\n         */\n        AppView.prototype.destroyInternal = function () { };\n        /**\n         * Overwritten by implementations\n         * @return {?}\n         */\n        AppView.prototype.detachInternal = function () { };\n        /**\n         * @return {?}\n         */\n        AppView.prototype.detach = function () {\n            var _this = this;\n            this.detachInternal();\n            if (this._animationContext) {\n                this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });\n            }\n            else {\n                this._renderDetach();\n            }\n            if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer &&\n                this.declaredViewContainer.projectedViews) {\n                var /** @type {?} */ projectedViews = this.declaredViewContainer.projectedViews;\n                var /** @type {?} */ index = projectedViews.indexOf(this);\n                // perf: pop is faster than splice!\n                if (index >= projectedViews.length - 1) {\n                    projectedViews.pop();\n                }\n                else {\n                    projectedViews.splice(index, 1);\n                }\n            }\n            this.appRef = null;\n            this.viewContainer = null;\n            this.dirtyParentQueriesInternal();\n        };\n        /**\n         * @return {?}\n         */\n        AppView.prototype._renderDetach = function () {\n            if (this._directRenderer) {\n                this.visitRootNodesInternal(this._directRenderer.remove, null);\n            }\n            else {\n                this.renderer.detachView(this.flatRootNodes);\n            }\n        };\n        /**\n         * @param {?} appRef\n         * @return {?}\n         */\n        AppView.prototype.attachToAppRef = function (appRef) {\n            if (this.viewContainer) {\n                throw new Error('This view is already attached to a ViewContainer!');\n            }\n            this.appRef = appRef;\n            this.dirtyParentQueriesInternal();\n        };\n        /**\n         * @param {?} viewContainer\n         * @param {?} prevView\n         * @return {?}\n         */\n        AppView.prototype.attachAfter = function (viewContainer, prevView) {\n            if (this.appRef) {\n                throw new Error('This view is already attached directly to the ApplicationRef!');\n            }\n            this._renderAttach(viewContainer, prevView);\n            this.viewContainer = viewContainer;\n            if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {\n                if (!this.declaredViewContainer.projectedViews) {\n                    this.declaredViewContainer.projectedViews = [];\n                }\n                this.declaredViewContainer.projectedViews.push(this);\n            }\n            this.dirtyParentQueriesInternal();\n        };\n        /**\n         * @param {?} viewContainer\n         * @param {?} prevView\n         * @return {?}\n         */\n        AppView.prototype.moveAfter = function (viewContainer, prevView) {\n            this._renderAttach(viewContainer, prevView);\n            this.dirtyParentQueriesInternal();\n        };\n        /**\n         * @param {?} viewContainer\n         * @param {?} prevView\n         * @return {?}\n         */\n        AppView.prototype._renderAttach = function (viewContainer, prevView) {\n            var /** @type {?} */ prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;\n            if (this._directRenderer) {\n                var /** @type {?} */ nextSibling = this._directRenderer.nextSibling(prevNode);\n                if (nextSibling) {\n                    this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);\n                }\n                else {\n                    var /** @type {?} */ parentElement = this._directRenderer.parentElement(prevNode);\n                    if (parentElement) {\n                        this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);\n                    }\n                }\n            }\n            else {\n                this.renderer.attachViewAfter(prevNode, this.flatRootNodes);\n            }\n        };\n        Object.defineProperty(AppView.prototype, \"changeDetectorRef\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.ref; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AppView.prototype, \"flatRootNodes\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ nodes = [];\n                this.visitRootNodesInternal(addToArray, nodes);\n                return nodes;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} parentElement\n         * @param {?} ngContentIndex\n         * @return {?}\n         */\n        AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {\n            if (this._directRenderer) {\n                this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);\n            }\n            else {\n                var /** @type {?} */ nodes = [];\n                this.visitProjectedNodes(ngContentIndex, addToArray, nodes);\n                this.renderer.projectNodes(parentElement, nodes);\n            }\n        };\n        /**\n         * @param {?} ngContentIndex\n         * @param {?} cb\n         * @param {?} c\n         * @return {?}\n         */\n        AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {\n            switch (this.type) {\n                case ViewType.EMBEDDED:\n                    this.parentView.visitProjectedNodes(ngContentIndex, cb, c);\n                    break;\n                case ViewType.COMPONENT:\n                    if (this.parentView.type === ViewType.HOST) {\n                        var /** @type {?} */ nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];\n                        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n                            cb(nodes[i], c);\n                        }\n                    }\n                    else {\n                        this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);\n                    }\n                    break;\n            }\n        };\n        /**\n         * Overwritten by implementations\n         * @param {?} cb\n         * @param {?} c\n         * @return {?}\n         */\n        AppView.prototype.visitRootNodesInternal = function (cb, c) { };\n        /**\n         * Overwritten by implementations\n         * @param {?} nodeIndex\n         * @param {?} ngContentIndex\n         * @param {?} cb\n         * @param {?} c\n         * @return {?}\n         */\n        AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };\n        /**\n         * Overwritten by implementations\n         * @return {?}\n         */\n        AppView.prototype.dirtyParentQueriesInternal = function () { };\n        /**\n         * @param {?} throwOnChange\n         * @return {?}\n         */\n        AppView.prototype.internalDetectChanges = function (throwOnChange) {\n            if (this.cdMode !== ChangeDetectorStatus.Detached) {\n                this.detectChanges(throwOnChange);\n            }\n        };\n        /**\n         * @param {?} throwOnChange\n         * @return {?}\n         */\n        AppView.prototype.detectChanges = function (throwOnChange) {\n            var /** @type {?} */ s = _scope_check(this.clazz);\n            if (this.cdMode === ChangeDetectorStatus.Checked ||\n                this.cdMode === ChangeDetectorStatus.Errored)\n                return;\n            if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n                this.throwDestroyedError('detectChanges');\n            }\n            this.detectChangesInternal(throwOnChange);\n            if (this.cdMode === ChangeDetectorStatus.CheckOnce)\n                this.cdMode = ChangeDetectorStatus.Checked;\n            this.numberOfChecks++;\n            wtfLeave(s);\n        };\n        /**\n         * Overwritten by implementations\n         * @param {?} throwOnChange\n         * @return {?}\n         */\n        AppView.prototype.detectChangesInternal = function (throwOnChange) { };\n        /**\n         * @return {?}\n         */\n        AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };\n        /**\n         * @return {?}\n         */\n        AppView.prototype.markPathToRootAsCheckOnce = function () {\n            var /** @type {?} */ c = this;\n            while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {\n                if (c.cdMode === ChangeDetectorStatus.Checked) {\n                    c.cdMode = ChangeDetectorStatus.CheckOnce;\n                }\n                if (c.type === ViewType.COMPONENT) {\n                    c = c.parentView;\n                }\n                else {\n                    c = c.viewContainer ? c.viewContainer.parentView : null;\n                }\n            }\n        };\n        /**\n         * @param {?} cb\n         * @return {?}\n         */\n        AppView.prototype.eventHandler = function (cb) {\n            return cb;\n        };\n        /**\n         * @param {?} details\n         * @return {?}\n         */\n        AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };\n        return AppView;\n    }());\n    var DebugAppView = (function (_super) {\n        __extends$14(DebugAppView, _super);\n        /**\n         * @param {?} clazz\n         * @param {?} componentType\n         * @param {?} type\n         * @param {?} viewUtils\n         * @param {?} parentView\n         * @param {?} parentIndex\n         * @param {?} parentNode\n         * @param {?} cdMode\n         * @param {?} staticNodeDebugInfos\n         * @param {?=} declaredViewContainer\n         */\n        function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {\n            if (declaredViewContainer === void 0) { declaredViewContainer = null; }\n            _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);\n            this.staticNodeDebugInfos = staticNodeDebugInfos;\n            this._currentDebugContext = null;\n        }\n        /**\n         * @param {?} context\n         * @return {?}\n         */\n        DebugAppView.prototype.create = function (context) {\n            this._resetDebug();\n            try {\n                return _super.prototype.create.call(this, context);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @param {?} rootSelectorOrNode\n         * @param {?} injector\n         * @param {?=} projectableNodes\n         * @return {?}\n         */\n        DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {\n            if (projectableNodes === void 0) { projectableNodes = null; }\n            this._resetDebug();\n            try {\n                return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @param {?} token\n         * @param {?} nodeIndex\n         * @param {?=} notFoundResult\n         * @return {?}\n         */\n        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {\n            this._resetDebug();\n            try {\n                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        DebugAppView.prototype.detach = function () {\n            this._resetDebug();\n            try {\n                _super.prototype.detach.call(this);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        DebugAppView.prototype.destroy = function () {\n            this._resetDebug();\n            try {\n                _super.prototype.destroy.call(this);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @param {?} throwOnChange\n         * @return {?}\n         */\n        DebugAppView.prototype.detectChanges = function (throwOnChange) {\n            this._resetDebug();\n            try {\n                _super.prototype.detectChanges.call(this, throwOnChange);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };\n        /**\n         * @param {?} nodeIndex\n         * @param {?} rowNum\n         * @param {?} colNum\n         * @return {?}\n         */\n        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {\n            return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);\n        };\n        /**\n         * @param {?} e\n         * @return {?}\n         */\n        DebugAppView.prototype._rethrowWithContext = function (e) {\n            if (!(e instanceof ViewWrappedError)) {\n                if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {\n                    this.cdMode = ChangeDetectorStatus.Errored;\n                }\n                if (isPresent(this._currentDebugContext)) {\n                    throw new ViewWrappedError(e, this._currentDebugContext);\n                }\n            }\n        };\n        /**\n         * @param {?} cb\n         * @return {?}\n         */\n        DebugAppView.prototype.eventHandler = function (cb) {\n            var _this = this;\n            var /** @type {?} */ superHandler = _super.prototype.eventHandler.call(this, cb);\n            return function (eventName, event) {\n                _this._resetDebug();\n                try {\n                    return superHandler.call(_this, eventName, event);\n                }\n                catch (e) {\n                    _this._rethrowWithContext(e);\n                    throw e;\n                }\n            };\n        };\n        return DebugAppView;\n    }(AppView));\n\n    /**\n     * A ViewContainer is created for elements that have a ViewContainerRef\n     * to keep track of the nested views.\n     */\n    var ViewContainer = (function () {\n        /**\n         * @param {?} index\n         * @param {?} parentIndex\n         * @param {?} parentView\n         * @param {?} nativeElement\n         */\n        function ViewContainer(index, parentIndex, parentView, nativeElement) {\n            this.index = index;\n            this.parentIndex = parentIndex;\n            this.parentView = parentView;\n            this.nativeElement = nativeElement;\n        }\n        Object.defineProperty(ViewContainer.prototype, \"elementRef\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return new ElementRef(this.nativeElement); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainer.prototype, \"vcRef\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return new ViewContainerRef_(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainer.prototype, \"parentInjector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.parentView.injector(this.parentIndex); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainer.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.parentView.injector(this.index); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} throwOnChange\n         * @return {?}\n         */\n        ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {\n            if (this.nestedViews) {\n                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n                    this.nestedViews[i].detectChanges(throwOnChange);\n                }\n            }\n        };\n        /**\n         * @return {?}\n         */\n        ViewContainer.prototype.destroyNestedViews = function () {\n            if (this.nestedViews) {\n                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n                    this.nestedViews[i].destroy();\n                }\n            }\n        };\n        /**\n         * @param {?} cb\n         * @param {?} c\n         * @return {?}\n         */\n        ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {\n            if (this.nestedViews) {\n                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n                    this.nestedViews[i].visitRootNodesInternal(cb, c);\n                }\n            }\n        };\n        /**\n         * @param {?} nestedViewClass\n         * @param {?} callback\n         * @return {?}\n         */\n        ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {\n            var /** @type {?} */ result = [];\n            if (this.nestedViews) {\n                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n                    var /** @type {?} */ nestedView = this.nestedViews[i];\n                    if (nestedView.clazz === nestedViewClass) {\n                        result.push(callback(nestedView));\n                    }\n                }\n            }\n            if (this.projectedViews) {\n                for (var /** @type {?} */ i = 0; i < this.projectedViews.length; i++) {\n                    var /** @type {?} */ projectedView = this.projectedViews[i];\n                    if (projectedView.clazz === nestedViewClass) {\n                        result.push(callback(projectedView));\n                    }\n                }\n            }\n            return result;\n        };\n        /**\n         * @param {?} view\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        ViewContainer.prototype.moveView = function (view, currentIndex) {\n            var /** @type {?} */ previousIndex = this.nestedViews.indexOf(view);\n            if (view.type === ViewType.COMPONENT) {\n                throw new Error(\"Component views can't be moved!\");\n            }\n            var /** @type {?} */ nestedViews = this.nestedViews;\n            if (nestedViews == null) {\n                nestedViews = [];\n                this.nestedViews = nestedViews;\n            }\n            nestedViews.splice(previousIndex, 1);\n            nestedViews.splice(currentIndex, 0, view);\n            var /** @type {?} */ prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;\n            view.moveAfter(this, prevView);\n        };\n        /**\n         * @param {?} view\n         * @param {?} viewIndex\n         * @return {?}\n         */\n        ViewContainer.prototype.attachView = function (view, viewIndex) {\n            if (view.type === ViewType.COMPONENT) {\n                throw new Error(\"Component views can't be moved!\");\n            }\n            var /** @type {?} */ nestedViews = this.nestedViews;\n            if (nestedViews == null) {\n                nestedViews = [];\n                this.nestedViews = nestedViews;\n            }\n            // perf: array.push is faster than array.splice!\n            if (viewIndex >= nestedViews.length) {\n                nestedViews.push(view);\n            }\n            else {\n                nestedViews.splice(viewIndex, 0, view);\n            }\n            var /** @type {?} */ prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;\n            view.attachAfter(this, prevView);\n        };\n        /**\n         * @param {?} viewIndex\n         * @return {?}\n         */\n        ViewContainer.prototype.detachView = function (viewIndex) {\n            var /** @type {?} */ view = this.nestedViews[viewIndex];\n            // perf: array.pop is faster than array.splice!\n            if (viewIndex >= this.nestedViews.length - 1) {\n                this.nestedViews.pop();\n            }\n            else {\n                this.nestedViews.splice(viewIndex, 1);\n            }\n            if (view.type === ViewType.COMPONENT) {\n                throw new Error(\"Component views can't be moved!\");\n            }\n            view.detach();\n            return view;\n        };\n        return ViewContainer;\n    }());\n\n    var /** @type {?} */ __core_private__ = {\n        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,\n        ChangeDetectorStatus: ChangeDetectorStatus,\n        constructDependencies: constructDependencies,\n        LifecycleHooks: LifecycleHooks,\n        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,\n        ReflectorReader: ReflectorReader,\n        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,\n        ComponentRef_: ComponentRef_,\n        ViewContainer: ViewContainer,\n        AppView: AppView,\n        DebugAppView: DebugAppView,\n        NgModuleInjector: NgModuleInjector,\n        registerModuleFactory: registerModuleFactory,\n        ViewType: ViewType,\n        view_utils: view_utils,\n        ViewMetadata: ViewMetadata,\n        DebugContext: DebugContext,\n        StaticNodeDebugInfo: StaticNodeDebugInfo,\n        devModeEqual: devModeEqual,\n        UNINITIALIZED: UNINITIALIZED,\n        ValueUnwrapper: ValueUnwrapper,\n        RenderDebugInfo: RenderDebugInfo,\n        TemplateRef_: TemplateRef_,\n        ReflectionCapabilities: ReflectionCapabilities,\n        makeDecorator: makeDecorator,\n        DebugDomRootRenderer: DebugDomRootRenderer,\n        Console: Console,\n        reflector: reflector,\n        Reflector: Reflector,\n        NoOpAnimationPlayer: NoOpAnimationPlayer,\n        AnimationPlayer: AnimationPlayer,\n        AnimationSequencePlayer: AnimationSequencePlayer,\n        AnimationGroupPlayer: AnimationGroupPlayer,\n        AnimationKeyframe: AnimationKeyframe,\n        prepareFinalAnimationStyles: prepareFinalAnimationStyles,\n        balanceAnimationKeyframes: balanceAnimationKeyframes,\n        flattenStyles: flattenStyles,\n        clearStyles: clearStyles,\n        renderStyles: renderStyles,\n        collectAndResolveStyles: collectAndResolveStyles,\n        APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,\n        AnimationStyles: AnimationStyles,\n        ANY_STATE: ANY_STATE,\n        DEFAULT_STATE: DEFAULT_STATE,\n        EMPTY_STATE: EMPTY_STATE,\n        FILL_STYLE_FLAG: FILL_STYLE_FLAG,\n        ComponentStillLoadingError: ComponentStillLoadingError,\n        isPromise: isPromise,\n        isObservable: isObservable,\n        AnimationTransition: AnimationTransition\n    };\n\n    exports.createPlatform = createPlatform;\n    exports.assertPlatform = assertPlatform;\n    exports.destroyPlatform = destroyPlatform;\n    exports.getPlatform = getPlatform;\n    exports.PlatformRef = PlatformRef;\n    exports.ApplicationRef = ApplicationRef;\n    exports.enableProdMode = enableProdMode;\n    exports.isDevMode = isDevMode;\n    exports.createPlatformFactory = createPlatformFactory;\n    exports.NgProbeToken = NgProbeToken;\n    exports.APP_ID = APP_ID;\n    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;\n    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;\n    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;\n    exports.APP_INITIALIZER = APP_INITIALIZER;\n    exports.ApplicationInitStatus = ApplicationInitStatus;\n    exports.DebugElement = DebugElement;\n    exports.DebugNode = DebugNode;\n    exports.asNativeElements = asNativeElements;\n    exports.getDebugNode = getDebugNode;\n    exports.Testability = Testability;\n    exports.TestabilityRegistry = TestabilityRegistry;\n    exports.setTestabilityGetter = setTestabilityGetter;\n    exports.TRANSLATIONS = TRANSLATIONS;\n    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;\n    exports.LOCALE_ID = LOCALE_ID;\n    exports.ApplicationModule = ApplicationModule;\n    exports.wtfCreateScope = wtfCreateScope;\n    exports.wtfLeave = wtfLeave;\n    exports.wtfStartTimeRange = wtfStartTimeRange;\n    exports.wtfEndTimeRange = wtfEndTimeRange;\n    exports.Type = Type;\n    exports.EventEmitter = EventEmitter;\n    exports.ErrorHandler = ErrorHandler;\n    exports.AnimationTransitionEvent = AnimationTransitionEvent;\n    exports.AnimationPlayer = AnimationPlayer;\n    exports.AnimationStyles = AnimationStyles;\n    exports.AnimationKeyframe = AnimationKeyframe;\n    exports.Sanitizer = Sanitizer;\n    exports.SecurityContext = SecurityContext;\n    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;\n    exports.Attribute = Attribute;\n    exports.ContentChild = ContentChild;\n    exports.ContentChildren = ContentChildren;\n    exports.Query = Query;\n    exports.ViewChild = ViewChild;\n    exports.ViewChildren = ViewChildren;\n    exports.Component = Component;\n    exports.Directive = Directive;\n    exports.HostBinding = HostBinding;\n    exports.HostListener = HostListener;\n    exports.Input = Input;\n    exports.Output = Output;\n    exports.Pipe = Pipe;\n    exports.AfterContentChecked = AfterContentChecked;\n    exports.AfterContentInit = AfterContentInit;\n    exports.AfterViewChecked = AfterViewChecked;\n    exports.AfterViewInit = AfterViewInit;\n    exports.DoCheck = DoCheck;\n    exports.OnChanges = OnChanges;\n    exports.OnDestroy = OnDestroy;\n    exports.OnInit = OnInit;\n    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;\n    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;\n    exports.NgModule = NgModule;\n    exports.ViewEncapsulation = ViewEncapsulation;\n    exports.Version = Version;\n    exports.VERSION = VERSION;\n    exports.Class = Class;\n    exports.forwardRef = forwardRef;\n    exports.resolveForwardRef = resolveForwardRef;\n    exports.Injector = Injector;\n    exports.ReflectiveInjector = ReflectiveInjector;\n    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;\n    exports.ReflectiveKey = ReflectiveKey;\n    exports.OpaqueToken = OpaqueToken;\n    exports.Inject = Inject;\n    exports.Optional = Optional;\n    exports.Injectable = Injectable;\n    exports.Self = Self;\n    exports.SkipSelf = SkipSelf;\n    exports.Host = Host;\n    exports.NgZone = NgZone;\n    exports.RenderComponentType = RenderComponentType;\n    exports.Renderer = Renderer;\n    exports.RootRenderer = RootRenderer;\n    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;\n    exports.Compiler = Compiler;\n    exports.CompilerFactory = CompilerFactory;\n    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;\n    exports.ComponentFactory = ComponentFactory;\n    exports.ComponentRef = ComponentRef;\n    exports.ComponentFactoryResolver = ComponentFactoryResolver;\n    exports.ElementRef = ElementRef;\n    exports.NgModuleFactory = NgModuleFactory;\n    exports.NgModuleRef = NgModuleRef;\n    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;\n    exports.getModuleFactory = getModuleFactory;\n    exports.QueryList = QueryList;\n    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;\n    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;\n    exports.TemplateRef = TemplateRef;\n    exports.ViewContainerRef = ViewContainerRef;\n    exports.EmbeddedViewRef = EmbeddedViewRef;\n    exports.ViewRef = ViewRef;\n    exports.ChangeDetectionStrategy = ChangeDetectionStrategy;\n    exports.ChangeDetectorRef = ChangeDetectorRef;\n    exports.CollectionChangeRecord = CollectionChangeRecord;\n    exports.DefaultIterableDiffer = DefaultIterableDiffer;\n    exports.IterableDiffers = IterableDiffers;\n    exports.KeyValueChangeRecord = KeyValueChangeRecord;\n    exports.KeyValueDiffers = KeyValueDiffers;\n    exports.SimpleChange = SimpleChange;\n    exports.WrappedValue = WrappedValue;\n    exports.platformCore = platformCore;\n    exports.__core_private__ = __core_private__;\n    exports.AUTO_STYLE = AUTO_STYLE;\n    exports.AnimationEntryMetadata = AnimationEntryMetadata;\n    exports.AnimationStateMetadata = AnimationStateMetadata;\n    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;\n    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;\n    exports.AnimationMetadata = AnimationMetadata;\n    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;\n    exports.AnimationStyleMetadata = AnimationStyleMetadata;\n    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;\n    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;\n    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;\n    exports.AnimationGroupMetadata = AnimationGroupMetadata;\n    exports.animate = animate;\n    exports.group = group;\n    exports.sequence = sequence;\n    exports.style = style;\n    exports.state = state;\n    exports.keyframes = keyframes;\n    exports.transition = transition;\n    exports.trigger = trigger;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/core/bundles/core.umd.js\n// module id = 10\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subject.js\n// module id = 11\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/SubjectSubscription.js\n// module id = 12\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/ObjectUnsubscribedError.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/UnsubscriptionError.js\n// module id = 14\n// module chunks = 0","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isArray.js\n// module id = 15\n// module chunks = 0","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isObject.js\n// module id = 16\n// module chunks = 0","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/toSubscriber.js\n// module id = 17\n// module chunks = 0","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/tryCatch.js\n// module id = 18\n// module chunks = 0"],"sourceRoot":""}