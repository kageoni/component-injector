{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///component-injector.js","webpack:///webpack/bootstrap 719ceb4a230d9234fb2a","webpack:///./src/component-injector.ts","webpack:///./~/@angular/core/bundles/core.umd.js","webpack:///./~/rxjs/symbol/observable.js","webpack:///./~/rxjs/util/root.js","webpack:///./~/rxjs/Subject.js","webpack:///./~/rxjs/Observable.js","webpack:///./~/rxjs/util/toSubscriber.js","webpack:///./~/rxjs/Subscriber.js","webpack:///./~/rxjs/util/isFunction.js","webpack:///./~/rxjs/Subscription.js","webpack:///./~/rxjs/util/isArray.js","webpack:///./~/rxjs/util/isObject.js","webpack:///./~/rxjs/util/tryCatch.js","webpack:///./~/rxjs/util/errorObject.js","webpack:///./~/rxjs/util/UnsubscriptionError.js","webpack:///./~/rxjs/Observer.js","webpack:///./~/rxjs/symbol/rxSubscriber.js","webpack:///./~/rxjs/util/ObjectUnsubscribedError.js","webpack:///./~/rxjs/SubjectSubscription.js"],"names":["webpackUniversalModuleDefinition","root","factory","exports","module","define","amd","a","i","this","modules","parentHotUpdateCallback","webpackHotUpdateCallback","chunkId","moreModules","hotAddUpdateChunk","hotDownloadUpdateChunk","head","document","getElementsByTagName","script","createElement","type","charset","src","__webpack_require__","p","hotCurrentHash","appendChild","hotDownloadManifest","callback","XMLHttpRequest","Error","request","requestPath","open","timeout","send","err","onreadystatechange","readyState","status","update","JSON","parse","responseText","e","canDefineProperty","Object","defineProperty","get","x","hotApplyOnUpdate","hotCurrentModuleData","hotCurrentParents","hotCreateRequire","moduleId","me","installedModules","fn","hot","active","parents","indexOf","push","children","console","warn","name","prototype","hasOwnProperty","call","configurable","enumerable","set","value","ensure","hotStatus","hotSetStatus","hotChunksLoading","finishChunkLoading","hotWaitingFilesMap","hotEnsureUpdateChunk","hotWaitingFiles","hotUpdateDownloaded","hotCreateModule","_acceptedDependencies","_declinedDependencies","_selfAccepted","_selfDeclined","_disposeHandlers","accept","dep","length","decline","dispose","addDisposeHandler","removeDisposeHandler","idx","splice","check","hotCheck","apply","hotApply","l","hotStatusHandlers","addStatusHandler","removeStatusHandler","data","newStatus","hotRequestedFilesMap","hotAvailibleFilesMap","hotCallback","hotUpdate","hotUpdateNewHash","toModuleId","id","isNumber","c","h","outdatedModules","options","getAffectedStuff","outdatedDependencies","queue","slice","pop","parentId","parent","addAllToSet","b","item","appliedUpdate","result","ignoreUnaccepted","outdatedSelfAcceptedModules","errorHandler","disposeHandlers","j","cb","child","moduleOutdatedDependencies","dependency","error","callbacks","loaded","m","__decorate","decorators","target","key","desc","arguments","r","getOwnPropertyDescriptor","d","Reflect","decorate","__metadata","k","v","metadata","core_1","ComponentInjector","resolver","inject","container","componentSelector","injectedComponent","componentFactory","getComponentFactory","injectComponentFactory","setProperties","componentRef","properties","property","instance","remove","destroy","factories","Array","from","find","component","selector","factoryClass","resolveComponentFactory","createComponent","Injectable","ComponentFactoryResolver","global","ng","core","rxjs_symbol_observable","Rx","rxjs_Subject","rxjs_Observable","globalScope","window","WorkerGlobalScope","self","scheduleMicroTask","Zone","current","global$1","getTypeNameForDebugging","assert","condition","isPresent","obj","isBlank","stringify","token","overriddenName","res","toString","newLineIndex","substring","looseIdentical","isNaN","isJsObject","o","print","log","_symbolIterator","getSymbolIterator","Symbol","iterator","keys","getOwnPropertyNames","Map","isPrimitive","_nextClassId","extractAnnotation","annotation","applyParams","fnOrArray","String","Function","Number","isArray","annotations","annoLength","paramsAnnotations","ii","paramAnnotations","defineMetadata","Class","clsDef","constructor","undefined","proto","extends","create","constructorName","makeDecorator","props","parentClass","chainFn","metaCtor","makeMetadataCtor","DecoratorFactory","objOrType","getOwnMetadata","annotationInstance","chainAnnotation","TypeDecorator","cls","annotationCls","ctor","_this","args","_i","forEach","prop","argVal","propName","makeParamDecorator","ParamDecoratorFactory","_a","bind","concat","ParamDecorator","unusedKey","index","parameters","makePropDecorator","PropDecoratorFactory","decoratorInstance","PropDecorator","meta","unshift","Inject","Optional","Self","SkipSelf","Host","OpaqueToken","_desc","ctorParameters","ANALYZE_FOR_ENTRY_COMPONENTS","Attribute","Query","ContentChildren","first","isViewQuery","descendants","read","ContentChild","ViewChildren","ViewChild","ChangeDetectionStrategy","OnPush","Default","ChangeDetectorStatus","CheckOnce","Checked","CheckAlways","Detached","Errored","Destroyed","isDefaultChangeDetectionStrategy","changeDetectionStrategy","Directive","inputs","outputs","host","providers","exportAs","queries","Component","viewProviders","changeDetection","templateUrl","template","styleUrls","styles","animations","encapsulation","interpolation","entryComponents","Pipe","pure","Input","Output","HostBinding","HostListener","LifecycleHooks","OnInit","OnDestroy","DoCheck","OnChanges","AfterContentInit","AfterContentChecked","AfterViewInit","AfterViewChecked","LIFECYCLE_HOOKS_VALUES","ngOnChanges","changes","ngOnInit","ngDoCheck","ngOnDestroy","ngAfterContentInit","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","CUSTOM_ELEMENTS_SCHEMA","NO_ERRORS_SCHEMA","NgModule","declarations","imports","bootstrap","schemas","ViewEncapsulation","Emulated","Native","None","ViewMetadata","_b","Version","full","split","join","VERSION","forwardRef","forwardRefFn","__forward_ref__","resolveForwardRef","_THROW_IF_NOT_FOUND","THROW_IF_NOT_FOUND","_NullInjector","notFoundValue","Injector","NULL","__extends$1","__extends","__","BaseError","_super","message","nativeError","_nativeError","stack","WrappedError","originalError","findFirstClosedCycle","constructResolvingPath","reversed","reverse","tokenStrs","map","AbstractProviderError","injector","constructResolvingMessage","injectors","addKey","NoProviderError","CyclicDependencyError","InstantiationError","originalException","originalStack","InvalidProviderError","provider","NoAnnotationError","typeOrFunc","params","_genMessage","signature","parameter","OutOfBoundsError","MixingMultiProvidersWithRegularProvidersError","provider1","provider2","ReflectiveKey","_globalKeyRegistry","numberOfKeys","KeyRegistry","_allKeys","has","newKey","size","Type","isType","DELEGATE_CTOR","ReflectionCapabilities","reflect","_reflect","isReflectionEnabled","t","_zipTypesAndAnnotations","paramTypes","_ownParameters","parentCtor","exec","tsickleCtorParams","ctorParam","convertTsickleDecoratorIntoMetadata","fill","getParentCtor","_ownAnnotations","ownAnnotations","parentAnnotations","_ownPropMetadata","propMetadata","propDecorators","propDecorators_1","propMetadata_1","parentPropMetadata_1","ownPropMetadata","hasLifecycleHook","lcProperty","getter","setter","method","functionBody","importUri","resolveIdentifier","moduleUrl","runtime","resolveEnum","enumIdentifier","decoratorInvocations","decoratorInvocation","decoratorType","annotationArgs","parentProto","getPrototypeOf","ReflectorReader","identifier","__extends$2","Reflector","reflectionCapabilities","updateCapabilities","caps","reflector","ReflectiveDependency","optional","visibility","fromKey","_EMPTY_LIST","ResolvedReflectiveProvider_","resolvedFactories","multiProvider","ResolvedReflectiveFactory","dependencies","resolveReflectiveFactory","factoryFn","resolvedDeps","useClass","_dependenciesFor","useExisting","aliasInstance","useFactory","constructDependencies","deps","useValue","resolveReflectiveProvider","provide","multi","resolveReflectiveProviders","normalized","_normalizeProviders","resolved","resolvedProviderMap","mergeResolvedReflectiveProviders","values","normalizedProvidersMap","existing","resolvedProvider","params_1","_extractToken","some","_createDependency","paramMetadata","UNDEFINED","ReflectiveInjector","resolve","resolveAndCreate","ResolvedReflectiveProviders","fromResolvedProviders","ReflectiveInjector_","resolveAndCreateChild","createChildFromResolved","resolveAndInstantiate","instantiateResolved","_providers","_parent","_constructionCounter","len","keyIds","objs","_getByKey","inj","_instantiateProvider","getProviderAtIndex","_new","_getMaxNumberOfObjects","_instantiate","_getByReflectiveDependency","INJECTOR_KEY","_getByKeySelf","_getByKeyDefault","_getObjByKeyId","keyId","_throwOrNull","inj_","_mapProviders","displayName","ErrorHandler","rethrowError","_console","handleError","_findOriginalError","_findOriginalStack","context","_findContext","_extractMessage","StringMapWrapper","merge","m1","m2","_c","equals","k1","k2","ListWrapper","findLast","arr","removeAll","list","items","el","flatten","reduce","flat","flatItem","isListLikeIterable","areIterablesEqual","comparator","iterator1","iterator2","item1","next","item2","done","iterateListLike","isPromise","then","isObservable","$$observable","APP_INITIALIZER","ApplicationInitStatus","appInits","_done","asyncInitPromises","initResult","_donePromise","Promise","all","APP_ID","_appIdRandomProviderFactory","_randomChar","APP_ID_RANDOM_PROVIDER","fromCharCode","Math","floor","random","PLATFORM_INITIALIZER","APP_BOOTSTRAP_LISTENER","PACKAGE_ROOT_URL","Console","__extends$4","ComponentStillLoadingError","compType","ModuleWithComponentFactories","ngModuleFactory","componentFactories","_throwError","Compiler","compileModuleSync","moduleType","compileModuleAsync","compileModuleAndAllComponentsSync","compileModuleAndAllComponentsAsync","getNgContentSelectors","clearCache","clearCacheFor","COMPILER_OPTIONS","CompilerFactory","createCompiler","ElementRef","nativeElement","__extends$6","EventEmitter","isAsync","__isAsync","emit","subscribe","generatorOrNext","complete","schedulerFn","errorFn","completeFn","setTimeout","Subject","NgZone","enableLongStackTrace","_hasPendingMicrotasks","_hasPendingMacrotasks","_isStable","_nesting","_onUnstable","_onMicrotaskEmpty","_onStable","_onErrorEvents","assertZonePatched","outer","inner","fork","forkInnerZoneWithAngularBehavior","isInAngularZone","assertInAngularZone","assertNotInAngularZone","run","runGuarded","runOutsideAngular","checkStable","isAngularZone","onInvokeTask","delegate","task","applyThis","applyArgs","onEnter","invokeTask","onLeave","onInvoke","source","invoke","onHasTask","hasTaskState","hasTask","change","setHasMicrotask","microTask","setHasMacrotask","macroTask","onHandleError","triggerError","hasMicrotasks","hasMacrotasks","AnimationQueue","_zone","entries","enqueue","player","flush","_triggerAnimations","shift","hasStarted","play","DefaultIterableDifferFactory","supports","cdRef","trackByFn","DefaultIterableDiffer","trackByIdentity","_trackByFn","_length","_collection","_linkedRecords","_unlinkedRecords","_previousItHead","_itHead","_itTail","_additionsHead","_additionsTail","_movesHead","_movesTail","_removalsHead","_removalsTail","_identityChangesHead","_identityChangesTail","forEachItem","record","_next","forEachOperation","nextIt","nextRemove","addRemoveOffset","moveOffsets","currentIndex","getPreviousIndex","adjPreviousIndex","_nextRemoved","previousIndex","localMovePreviousIndex","localCurrentIndex","offset","forEachPreviousItem","_nextPrevious","forEachAddedItem","_nextAdded","forEachMovedItem","_nextMoved","forEachRemovedItem","forEachIdentityChange","_nextIdentityChange","diff","collection","onDestroy","_reset","mayBeDirty","itemTrackBy","index_1","trackById","_mismatch","_verifyReinsertion","_addIdentityChange","_truncate","isDirty","nextRecord","previousRecord","_prev","_remove","_moveAfter","_reinsertAfter","_addAfter","CollectionChangeRecord","reinsertRecord","_addToMoves","_addToRemovals","_unlink","clear","prevRecord","prev","_prevRemoved","_insertAfter","_DuplicateMap","put","toIndex","previous","additions","moves","removals","identityChanges","_prevDup","_nextDup","_DuplicateItemRecordList","_head","_tail","add","afterIndex","duplicates","recordList","delete","moveOffset","DefaultKeyValueDifferFactory","DefaultKeyValueDiffer","_records","_mapHead","_previousMapHead","_changesHead","_changesTail","forEachChangedItem","_nextChanged","records","oldSeqRecord","lastOldSeqRecord","lastNewSeqRecord","seqChanged","_forEach","newSeqRecord","_maybeAddToChanges","_removeFromSeq","KeyValueChangeRecord","currentValue","_addToAdditions","_isInRemovals","_removeFromRemovals","previousValue","lastRecord","rec","newValue","_addToChanges","IterableDiffers","copied","extend","iterable","f","KeyValueDiffers","kv","UNINITIALIZED","devModeEqual","WrappedValue","wrapped","wrap","ValueUnwrapper","hasWrappedValue","unwrap","reset","SimpleChange","isFirstChange","ChangeDetectorRef","markForCheck","detach","detectChanges","checkNoChanges","reattach","keyValDiff","iterableDiff","defaultIterableDiffers","defaultKeyValueDiffers","RenderComponentType","slotCount","RenderDebugInfo","providerTokens","references","Renderer","selectRootElement","selectorOrNode","debugInfo","parentElement","createViewRoot","hostElement","createTemplateAnchor","createText","projectNodes","nodes","attachViewAfter","node","viewRootNodes","detachView","destroyView","viewAllNodes","listen","renderElement","listenGlobal","setElementProperty","propertyName","propertyValue","setElementAttribute","attributeName","attributeValue","setBindingDebugInfo","setElementClass","className","isAdd","setElementStyle","styleName","styleValue","invokeElementMethod","methodName","setText","renderNode","text","animate","element","startingStyles","keyframes","duration","delay","easing","previousPlayers","RootRenderer","renderComponent","componentType","SecurityContext","NONE","HTML","STYLE","SCRIPT","URL","RESOURCE_URL","Sanitizer","sanitize","__extends$7","ExpressionChangedAfterItHasBeenCheckedError","oldValue","currValue","msg","ViewWrappedError","ViewDestroyedError","details","ViewUtils","_renderer","sanitizer","animationQueue","renderComponentType","nextRenderComponentTypeId","createRenderComponentType","addToArray","array","interpolate","valueCount","constAndInterp","_toStringWithNull","inlineInterpolate","c0","a1","c1","a2","c2","a3","c3","a4","c4","a5","c5","a6","c6","a7","c7","a8","c8","a9","c9","checkBinding","throwOnChange","castByValue","input","EMPTY_ARRAY","EMPTY_MAP","pureProxy1","v0","p0","pureProxy2","v1","p1","pureProxy3","v2","p2","pureProxy4","v3","p3","pureProxy5","v4","p4","pureProxy6","v5","p5","pureProxy7","v6","p6","pureProxy8","v7","p7","pureProxy9","v8","p8","pureProxy10","v9","p9","setBindingDebugInfoForChanges","renderer","camelCaseToDashCase","CAMEL_CASE_REGEXP","replace","toLowerCase","createRenderElement","attrs","selectOrCreateRenderHostElement","elementName","rootSelectorOrNode","subscribeToRenderElement","view","eventNamesAndTargets","listener","disposables","createEmptyInlineArray","eventName","eventTarget","disposable","disposeInlineArray","noop","InlineArray2","InlineArray4","InlineArray8","InlineArray16","InlineArrayDynamic","InlineArray0","_v0","_v1","_v2","_v3","_v4","_v5","_v6","_v7","_v8","_v9","_v10","_v11","_v12","_v13","_v14","_v15","_values","EMPTY_INLINE_ARRAY","view_utils","freeze","__extends$5","ComponentRef","location","hostView","changeDetectorRef","ComponentRef_","_index","_parentView","_nativeElement","_component","ref","detachAndDestroy","ComponentFactory","_viewClass","_componentType","projectableNodes","vu","createHostView","__extends$8","NoComponentFactoryError","_NullComponentFactoryResolver","CodegenComponentFactoryResolver","_factories","trace","events","detectWTF","wtf","createScope","flags","leave","scope","returnValue","leaveScope","startTimeRange","rangeType","action","beginTimeRange","endTimeRange","range","wtfEnabled","noopScope","arg0","arg1","wtfCreateScope","wtfLeave","s","wtfStartTimeRange","wtfEndTimeRange","Testability","_ngZone","_pendingCount","_isZoneStable","_didWork","_callbacks","_watchAngularEvents","onUnstable","onStable","_runCallbacksIfReady","increasePendingRequestCount","decreasePendingRequestCount","isStable","hasPendingMacrotasks","whenStable","getPendingRequestCount","findBindings","using","exactMatch","findProviders","TestabilityRegistry","_applications","_testabilityGetter","addToWindow","registerApplication","testability","getTestability","elem","getAllTestabilities","getAllRootElements","findTestabilityInTree","findInAncestors","_NoopGetTestability","registry","setTestabilityGetter","__extends$3","_devMode","_runModeLocked","_platform","enableProdMode","isDevMode","NgProbeToken","createPlatform","destroyed","PlatformRef","inits","init","createPlatformFactory","parentPlatformFactory","marker","extraProviders","getPlatform","assertPlatform","requiredToken","platform","destroyPlatform","bootstrapModuleFactory","moduleFactory","bootstrapModule","compilerOptions","_callAndReportToErrorHandler","catch","PlatformRef_","_injector","_modules","_destroyListeners","_destroyed","_bootstrapModuleFactoryWithZone","ngZone","ngZoneInjector","moduleRef","exceptionHandler","onError","initStatus","donePromise","_moduleDoBootstrap","_bootstrapModuleWithZone","componentFactoryCallback","compilerFactory","compiler","appRef","ApplicationRef","bootstrapFactories","compFactory","ngDoBootstrap","tick","componentTypes","components","attachView","viewCount","ApplicationRef_","_exceptionHandler","_componentFactoryResolver","_initStatus","_testabilityRegistry","_testability","_bootstrapListeners","_rootComponents","_rootComponentTypes","_views","_runningTick","_enforceNoNewChanges","onMicrotaskEmpty","viewRef","internalView","attachToAppRef","componentOrFactory","compRef","_unloadComponent","_loadComponent","listeners","_tickScope","__extends$9","NgModuleRef","componentFactoryResolver","NgModuleFactory","_injectorClass","_moduleType","parentInjector","_UNDEFINED","NgModuleInjector","createInternal","getInternal","destroyInternal","NgModuleFactoryLoader","load","path","moduleFactories","registerModuleFactory","getModuleFactory","QueryList","_dirty","_results","_emitter","filter","toArray","notifyOnChanges","setDirty","_SEPARATOR","FACTORY_CLASS_SUFFIX","SystemJsNgModuleLoaderConfig","DEFAULT_CONFIG","factoryPathPrefix","factoryPathSuffix","SystemJsNgModuleLoader","_compiler","config","_config","offlineMode","loadFactory","loadAndCompile","exportName","System","import","checkNotEmpty","factoryClassSuffix","modulePath","__extends$10","TemplateRef","elementRef","createEmbeddedView","TemplateRef_","_nodeIndex","createEmbeddedViewInternal","ViewContainerRef","templateRef","insert","move","ViewContainerRef_","_element","_createComponentInContainerScope","_insertScope","_removeScope","_detachScope","nestedViews","views","contextInjector","viewRef_","moveView","__extends$11","ViewRef","EmbeddedViewRef","rootNodes","ViewRef_","_view","_originalMode","cdMode","flatRootNodes","markPathToRootAsCheckOnce","__extends$12","EventListener","DebugNode","nativeNode","_debugInfo","DebugElement","addChild","attributes","classes","childNodes","removeChild","childIndex","insertChildrenAfter","newChildren","siblingIndex","previousChildren","nextChildren","newChild","query","predicate","results","queryAll","matches","_queryElementChildren","queryAllNodes","_queryNodeChildren","triggerEventHandler","eventObj","asNativeElements","debugEls","parentNode","_nativeNodeToDebugNode","getDebugNode","indexDebugNode","removeDebugNodeFromIndex","_reflector","_CORE_PLATFORM_PROVIDERS","platformCore","LOCALE_ID","TRANSLATIONS","TRANSLATIONS_FORMAT","_iterableDiffersFactory","_keyValueDiffersFactory","_localeFactory","locale","ApplicationModule","FILL_STYLE_FLAG","ANY_STATE","DEFAULT_STATE","EMPTY_STATE","AnimationGroupPlayer","_players","_onDoneFns","_onStartFns","_finished","_started","parentPlayer","count","total","_onFinish","onDone","onStart","pause","restart","finish","setPosition","getPosition","min","AnimationKeyframe","AnimationPlayer","NoOpAnimationPlayer","AnimationSequencePlayer","_currentIndex","_onNext","start","_activePlayer","__extends$13","AUTO_STYLE","AnimationEntryMetadata","definitions","AnimationStateMetadata","AnimationStateDeclarationMetadata","stateNameExpr","AnimationStateTransitionMetadata","stateChangeExpr","steps","AnimationMetadata","AnimationKeyframesSequenceMetadata","AnimationStyleMetadata","AnimationAnimateMetadata","timings","AnimationWithStepsMetadata","AnimationSequenceMetadata","_steps","AnimationGroupMetadata","timing","stylesEntry","EMPTY_STYLE","group","sequence","style","tokens","entry","entryOffset","parseFloat","state","transition","animationData","trigger","animation","prepareFinalAnimationStyles","previousStyles","newStyles","nullValue","finalStyles","balanceAnimationKeyframes","collectedStyles","finalStateStyles","limit","firstKeyframe","flatenedFirstKeyframeStyles","flattenStyles","extraFirstKeyframeStyles","hasExtraFirstStyles","keyframeCollectedStyles","finalKeyframe","flatenedFinalKeyframeStyles","extraFinalKeyframeStyles","hasExtraFinalStyles","collectAndResolveStyles","clearStyles","stylesObj","renderStyles","AnimationStyles","AnimationTransitionEvent","fromState","toState","totalTime","phaseName","AnimationTransition","_player","_fromState","_toState","_totalTime","_createEvent","DebugDomRootRenderer","_delegate","componentProto","DebugDomRenderer","nativeEl","debugEl","comment","debugParent","debugElement_1","debugNode","debugViewRootNodes_1","rootNode","ViewType","HOST","COMPONENT","EMBEDDED","StaticNodeDebugInfo","componentToken","refTokens","DebugContext","_tplRow","_tplCol","staticNodeDebugInfos","staticNodeInfo","_staticNodeInfo","componentView","parentView","allNodes","varValues","refs_1","refName","refToken","varValue","injectorGet","ViewAnimationMap","_map","_allPlayers","animationName","playersByAnimation","findAllPlayersByElement","existingEntry","getAllPlayers","targetPlayer","AnimationViewContext","_animationQueue","onAllActiveAnimationsDone","activeAnimationPlayers","queueAnimation","getAnimationPlayers","players","currentPlayer","_recursePlayers","collectedPlayers","__extends$15","ElementInjector","__extends$14","_scope_check","EMPTY_CONTEXT","UNDEFINED$1","AppView","clazz","viewUtils","parentIndex","declaredViewContainer","numberOfChecks","_directRenderer","directRenderer","_animationContext","hostInjector","_hasExternalHostElement","_hostInjector","_hostProjectableNodes","templateNodeIndex","lastRootNode","dirtyParentQueriesInternal","nodeIndex","injectorGetInternal","notFoundResult","viewContainer","detachInternal","_renderDetach","projectedViews","visitRootNodesInternal","attachAfter","prevView","_renderAttach","moveAfter","prevNode","nextSibling","insertBefore","ngContentIndex","visitProjectedNodes","visitProjectableNodesInternal","internalDetectChanges","throwDestroyedError","detectChangesInternal","markAsCheckOnce","eventHandler","DebugAppView","_currentDebugContext","_resetDebug","_rethrowWithContext","debug","rowNum","colNum","superHandler","event","ViewContainer","detectChangesInNestedViews","destroyNestedViews","visitNestedViewRootNodes","mapNestedViews","nestedViewClass","nestedView","projectedView","viewIndex","__core_private__","root_1","getSymbolObservable","observable","__window","__self","__global","_root","Observable_1","Subscriber_1","Subscription_1","ObjectUnsubscribedError_1","SubjectSubscription_1","rxSubscriber_1","SubjectSubscriber","destination","Subscriber","observers","closed","isStopped","hasError","thrownError","rxSubscriber","lift","operator","subject","AnonymousSubject","ObjectUnsubscribedError","copy","unsubscribe","_trySubscribe","subscriber","_subscribe","Subscription","EMPTY","SubjectSubscription","asObservable","Observable","toSubscriber_1","observable_1","_isScalar","observerOrNext","sink","toSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","PromiseCtor","reject","subscription","Observer_1","nextOrObserver","empty","isFunction_1","destinationOrNext","SafeSubscriber","_error","_complete","_unsubscribeAndRecycle","_parents","_parentSubscriber","isFunction","_context","__tryOrUnsub","__tryOrSetError","wrappedComplete","_unsubscribe","isArray_1","isObject_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","_subscriptions","hasErrors","errors","trial","tryCatch","errorObject","UnsubscriptionError","flattenUnsubscriptionErrors","sub","isObject","teardown","_addParent","tmp","subscriptions","subscriptionIndex","errs","tryCatchTarget","tryCatcher","for","$$rxSubscriber","subscriberIndex"],"mappings":";CAAA,SAAAA,iCAAAC,MAAAC;IACA,WAAAC,YAAA,mBAAAC,WAAA,UACAA,OAAAD,UAAAD,gBACA,WAAAG,WAAA,cAAAA,OAAAC,KACAD,WAAAH,eACA;QACA,IAAAK,IAAAL;QACA,SAAAM,KAAAD,WAAAJ,YAAA,WAAAA,UAAAF,MAAAO,KAAAD,EAAAC;;GAECC,MAAA;IACD,OCAgB,SAAUC;QCV1B,IAAAC,0BAAAF,KAAA;QACAA,KAAA,sBACA,SAAAG,yBAAAC,SAAAC;YACAC,kBAAAF,SAAAC;YACA,IAAAH,iDAAAE,SAAAC;;QAGA,SAAAE,uBAAAH;YACA,IAAAI,OAAAC,SAAAC,qBAAA;YACA,IAAAC,SAAAF,SAAAG,cAAA;YACAD,OAAAE,OAAA;YACAF,OAAAG,UAAA;YACAH,OAAAI,MAAAC,oBAAAC,IAAA,KAAAb,UAAA,MAAAc,iBAAA;YACAV,KAAAW,YAAAR;;QAGA,SAAAS,oBAAAC;YACA,WAAAC,mBAAA,aACA,OAAAD,SAAA,IAAAE,MAAA;YACA;gBACA,IAAAC,UAAA,IAAAF;gBACA,IAAAG,cAAAT,oBAAAC,IAAA,KAAAC,iBAAA;gBACAM,QAAAE,KAAA,OAAAD,aAAA;gBACAD,QAAAG,UAAA;gBACAH,QAAAI,KAAA;cACI,OAAAC;gBACJ,OAAAR,SAAAQ;;YAEAL,QAAAM,qBAAA;gBACA,IAAAN,QAAAO,eAAA;gBACA,IAAAP,QAAAQ,WAAA;oBAEAX,SAAA,IAAAE,MAAA,yBAAAE,cAAA;uBACK,IAAAD,QAAAQ,WAAA;oBAELX;uBACK,IAAAG,QAAAQ,WAAA,OAAAR,QAAAQ,WAAA;oBAELX,SAAA,IAAAE,MAAA,yBAAAE,cAAA;uBACK;oBAEL;wBACA,IAAAQ,SAAAC,KAAAC,MAAAX,QAAAY;sBACM,OAAAC;wBACNhB,SAAAgB;wBACA;;oBAEAhB,SAAA,MAAAY;;;;QAQA,IAAAK,oBAAA;QACA;YACAC,OAAAC,mBAA2B;gBAC3BC,KAAA;;YAEAH,oBAAA;UACG,OAAAI;QAIH,IAAAC,mBAAA;QACA,IAAAzB,iBAAA;QACA,IAAA0B;QACA,IAAAC;QAEA,SAAAC,iBAAAC;YACA,IAAAC,KAAAC,iBAAAF;YACA,KAAAC,IAAA,OAAAhC;YACA,IAAAkC,KAAA,SAAA1B;gBACA,IAAAwB,GAAAG,IAAAC,QAAA;oBACA,IAAAH,iBAAAzB,UAAA;wBACA,IAAAyB,iBAAAzB,SAAA6B,QAAAC,QAAAP,YAAA,GACAE,iBAAAzB,SAAA6B,QAAAE,KAAAR;wBACA,IAAAC,GAAAQ,SAAAF,QAAA9B,WAAA,GACAwB,GAAAQ,SAAAD,KAAA/B;2BACMqB,sBAAAE;uBACD;oBACLU,QAAAC,KAAA,8BAAAlC,UAAA,4BAAAuB;oBACAF;;gBAEA,OAAA7B,oBAAAQ;;YAEA,SAAAmC,QAAA3C,qBAAA;gBACA,IAAAuB,OAAAqB,UAAAC,eAAAC,KAAA9C,qBAAA2C,OAAA;oBACA,IAAArB,mBAAA;wBACAC,OAAAC,eAAAU,IAAAS,MAAA,SAAAA;4BACA;gCACAI,cAAA;gCACAC,YAAA;gCACAvB,KAAA;oCACA,OAAAzB,oBAAA2C;;gCAEAM,KAAA,SAAAC;oCACAlD,oBAAA2C,QAAAO;;;0BAGOP;2BACD;wBACNT,GAAAS,QAAA3C,oBAAA2C;;;;YAKA,SAAAQ,OAAA/D,SAAAiB;gBACA,IAAA+C,cAAA,SACAC,aAAA;gBACAC;gBACAtD,oBAAAqB,EAAAjC,SAAA;oBACA;wBACAiB,SAAAyC,KAAA,MAAAZ;sBACM;wBACNqB;;oBAGA,SAAAA;wBACAD;wBACA,IAAAF,cAAA;4BACA,KAAAI,mBAAApE,UAAA;gCACAqE,qBAAArE;;4BAEA,IAAAkE,qBAAA,KAAAI,oBAAA;gCACAC;;;;;;YAMA,IAAArC,mBAAA;gBACAC,OAAAC,eAAAU,IAAA;oBACAc,YAAA;oBACAE,OAAAC;;mBAEI;gBACJjB,GAAAb,IAAA8B;;YAEA,OAAAjB;;QAGA,SAAA0B,gBAAA7B;YACA,IAAAI;gBAEA0B;gBACAC;gBACAC,eAAA;gBACAC,eAAA;gBACAC;gBAGA7B,QAAA;gBACA8B,QAAA,SAAAC,KAAA9D;oBACA,WAAA8D,QAAA,aACAhC,IAAA4B,gBAAA,WACA,WAAAI,QAAA,YACAhC,IAAA4B,gBAAAI,UACA,WAAAA,QAAA,UACA,SAAApF,IAAA,GAAoBA,IAAAoF,IAAAC,QAAgBrF,KACpCoD,IAAA0B,sBAAAM,IAAApF,MAAAsB,eAEA8B,IAAA0B,sBAAAM,OAAA9D;;gBAEAgE,SAAA,SAAAF;oBACA,WAAAA,QAAA,aACAhC,IAAA6B,gBAAA,WACA,WAAAG,QAAA,UACAhC,IAAA2B,sBAAAK,OAAA,WAEA,SAAApF,IAAA,GAAoBA,IAAAoF,IAAAC,QAAgBrF,KACpCoD,IAAA2B,sBAAAK,IAAApF,MAAA;;gBAEAuF,SAAA,SAAAjE;oBACA8B,IAAA8B,iBAAA1B,KAAAlC;;gBAEAkE,mBAAA,SAAAlE;oBACA8B,IAAA8B,iBAAA1B,KAAAlC;;gBAEAmE,sBAAA,SAAAnE;oBACA,IAAAoE,MAAAtC,IAAA8B,iBAAA3B,QAAAjC;oBACA,IAAAoE,OAAA,GAAAtC,IAAA8B,iBAAAS,OAAAD,KAAA;;gBAIAE,OAAAC;gBACAC,OAAAC;gBACA9D,QAAA,SAAA+D;oBACA,KAAAA,GAAA,OAAA3B;oBACA4B,kBAAAzC,KAAAwC;;gBAEAE,kBAAA,SAAAF;oBACAC,kBAAAzC,KAAAwC;;gBAEAG,qBAAA,SAAAH;oBACA,IAAAN,MAAAO,kBAAA1C,QAAAyC;oBACA,IAAAN,OAAA,GAAAO,kBAAAN,OAAAD,KAAA;;gBAIAU,MAAAvD,qBAAAG;;YAEA,OAAAI;;QAGA,IAAA6C;QACA,IAAA5B,YAAA;QAEA,SAAAC,aAAA+B;YACAhC,YAAAgC;YACA,SAAArG,IAAA,GAAiBA,IAAAiG,kBAAAZ,QAA8BrF,KAC/CiG,kBAAAjG,GAAA+D,KAAA,MAAAsC;;QAIA,IAAA1B,kBAAA;QACA,IAAAJ,mBAAA;QACA,IAAAE;QACA,IAAA6B;QACA,IAAAC;QACA,IAAAC;QAGA,IAAAC,WAAAC;QAEA,SAAAC,WAAAC;YACA,IAAAC,YAAAD,KAAA,OAAAA;YACA,OAAAC,YAAAD;;QAGA,SAAAf,SAAAC,OAAAxE;YACA,IAAA+C,cAAA,kBAAA7C,MAAA;YACA,WAAAsE,UAAA;gBACAlD,mBAAA;gBACAtB,WAAAwE;mBACI;gBACJlD,mBAAAkD;gBACAxE,uBAAA,SAAAQ;oBACA,IAAAA,KAAA,MAAAA;;;YAGAwC,aAAA;YACAjD,oBAAA,SAAAS,KAAAI;gBACA,IAAAJ,KAAA,OAAAR,SAAAQ;gBACA,KAAAI,QAAA;oBACAoC,aAAA;oBACAhD,SAAA;oBACA;;gBAGAgF;gBACAC;gBACA9B;gBACA,SAAAzE,IAAA,GAAkBA,IAAAkC,OAAA4E,EAAAzB,QAAqBrF,KACvCuG,qBAAArE,OAAA4E,EAAA9G,MAAA;gBACA0G,mBAAAxE,OAAA6E;gBAEAzC,aAAA;gBACAkC,cAAAlF;gBACAmF;gBACA,IAAApG,UAAA;gBACA;oBAEAqE,qBAAArE;;gBAEA,IAAAgE,cAAA,aAAAE,qBAAA,KAAAI,oBAAA;oBACAC;;;;QAKA,SAAArE,kBAAAF,SAAAC;YACA,KAAAiG,qBAAAlG,aAAAiG,qBAAAjG,UACA;YACAiG,qBAAAjG,WAAA;YACA,SAAA2C,YAAA1C,aAAA;gBACA,IAAAkC,OAAAqB,UAAAC,eAAAC,KAAAzD,aAAA0C,WAAA;oBACAyD,UAAAzD,YAAA1C,YAAA0C;;;YAGA,MAAA2B,oBAAA,KAAAJ,qBAAA;gBACAK;;;QAIA,SAAAF,qBAAArE;YACA,KAAAkG,qBAAAlG,UAAA;gBACAoE,mBAAApE,WAAA;mBACI;gBACJiG,qBAAAjG,WAAA;gBACAsE;gBACAnE,uBAAAH;;;QAIA,SAAAuE;YACAN,aAAA;YACA,IAAAhD,WAAAkF;YACAA,cAAA;YACA,KAAAlF,UAAA;YACA,IAAAsB,kBAAA;gBACAmD,SAAAnD,kBAAAtB;mBACI;gBACJ,IAAA0F;gBACA,SAAAJ,MAAAH,WAAA;oBACA,IAAAjE,OAAAqB,UAAAC,eAAAC,KAAA0C,WAAAG,KAAA;wBACAI,gBAAAxD,KAAAmD,WAAAC;;;gBAGAtF,SAAA,MAAA0F;;;QAIA,SAAAjB,SAAAkB,SAAA3F;YACA,IAAA+C,cAAA,mBAAA7C,MAAA;YACA,WAAAyF,YAAA;gBACA3F,WAAA2F;gBACAA;mBACI,IAAAA,8BAAA;gBACJ3F,uBAAA,SAAAQ;oBACA,IAAAA,KAAA,MAAAA;;mBAEI;gBACJmF;gBACA3F,uBAAA,SAAAQ;oBACA,IAAAA,KAAA,MAAAA;;;YAIA,SAAAoF,iBAAAtH;gBACA,IAAAoH,oBAAApH;gBACA,IAAAuH;gBAEA,IAAAC,QAAAJ,gBAAAK;gBACA,OAAAD,MAAA/B,SAAA;oBACA,IAAArC,WAAAoE,MAAAE;oBACA,IAAA1H,SAAAsD,iBAAAF;oBACA,KAAApD,iBAAAwD,IAAA4B,eACA;oBACA,IAAApF,OAAAwD,IAAA6B,eAAA;wBACA,WAAAzD,MAAA,sCAAAwB;;oBAEA,IAAAA,aAAA;wBACA;;oBAEA,SAAAhD,IAAA,GAAmBA,IAAAJ,OAAA0D,QAAA+B,QAA2BrF,KAAA;wBAC9C,IAAAuH,WAAA3H,OAAA0D,QAAAtD;wBACA,IAAAwH,SAAAtE,iBAAAqE;wBACA,IAAAC,OAAApE,IAAA2B,sBAAA/B,WAAA;4BACA,WAAAxB,MAAA,6CAAAwB,WAAA,SAAAuE;;wBAEA,IAAAP,gBAAAzD,QAAAgE,aAAA;wBACA,IAAAC,OAAApE,IAAA0B,sBAAA9B,WAAA;4BACA,KAAAmE,qBAAAI,WACAJ,qBAAAI;4BACAE,YAAAN,qBAAAI,aAAAvE;4BACA;;+BAEAmE,qBAAAI;wBACAP,gBAAAxD,KAAA+D;wBACAH,MAAA5D,KAAA+D;;;gBAIA,SAAAP,iBAAAG;;YAGA,SAAAM,YAAA1H,GAAA2H;gBACA,SAAA1H,IAAA,GAAkBA,IAAA0H,EAAArC,QAAcrF,KAAA;oBAChC,IAAA2H,OAAAD,EAAA1H;oBACA,IAAAD,EAAAwD,QAAAoE,QAAA,GACA5H,EAAAyD,KAAAmE;;;YAMA,IAAAR;YACA,IAAAH;YACA,IAAAY;YACA,SAAAhB,MAAAH,WAAA;gBACA,IAAAjE,OAAAqB,UAAAC,eAAAC,KAAA0C,WAAAG,KAAA;oBACA,IAAA5D,WAAA2D,WAAAC;oBACA,IAAAiB,SAAAX,iBAAAlE;oBACA,KAAA6E,QAAA;wBACA,IAAAZ,QAAAa,kBACA;wBACAxD,aAAA;wBACA,OAAAhD,SAAA,IAAAE,MAAA,qBAAAwB,WAAA;;oBAEA,IAAA6E,kBAAArG,OAAA;wBACA8C,aAAA;wBACA,OAAAhD,SAAAuG;;oBAEAD,cAAA5E,YAAAyD,UAAAzD;oBACAyE,YAAAT,iBAAAa,OAAA;oBACA,SAAA7E,YAAA6E,OAAA;wBACA,IAAArF,OAAAqB,UAAAC,eAAAC,KAAA8D,OAAA,IAAA7E,WAAA;4BACA,KAAAmE,qBAAAnE,WACAmE,qBAAAnE;4BACAyE,YAAAN,qBAAAnE,WAAA6E,OAAA,GAAA7E;;;;;YAOA,IAAA+E;YACA,SAAA/H,IAAA,GAAiBA,IAAAgH,gBAAA3B,QAA4BrF,KAAA;gBAC7C,IAAAgD,WAAAgE,gBAAAhH;gBACA,IAAAkD,iBAAAF,aAAAE,iBAAAF,UAAAI,IAAA4B,eACA+C,4BAAAvE;oBACA5D,QAAAoD;oBACAgF,cAAA9E,iBAAAF,UAAAI,IAAA4B;;;YAKAV,aAAA;YACA,IAAA8C,QAAAJ,gBAAAK;YACA,OAAAD,MAAA/B,SAAA;gBACA,IAAArC,WAAAoE,MAAAE;gBACA,IAAA1H,SAAAsD,iBAAAF;gBACA,KAAApD,QAAA;gBAEA,IAAAwG;gBAGA,IAAA6B,kBAAArI,OAAAwD,IAAA8B;gBACA,SAAAgD,IAAA,GAAkBA,IAAAD,gBAAA5C,QAA4B6C,KAAA;oBAC9C,IAAAC,KAAAF,gBAAAC;oBACAC,GAAA/B;;gBAEAvD,qBAAAG,YAAAoD;gBAGAxG,OAAAwD,IAAAC,SAAA;uBAGAH,iBAAAF;gBAGA,SAAAkF,IAAA,GAAkBA,IAAAtI,OAAA6D,SAAA4B,QAA4B6C,KAAA;oBAC9C,IAAAE,QAAAlF,iBAAAtD,OAAA6D,SAAAyE;oBACA,KAAAE,OAAA;oBACA,IAAA1C,MAAA0C,MAAA9E,QAAAC,QAAAP;oBACA,IAAA0C,OAAA;wBACA0C,MAAA9E,QAAAqC,OAAAD,KAAA;;;;YAMA,SAAA1C,YAAAmE,sBAAA;gBACA,IAAA3E,OAAAqB,UAAAC,eAAAC,KAAAoD,sBAAAnE,WAAA;oBACA,IAAApD,SAAAsD,iBAAAF;oBACA,IAAAqF,6BAAAlB,qBAAAnE;oBACA,SAAAkF,IAAA,GAAmBA,IAAAG,2BAAAhD,QAAuC6C,KAAA;wBAC1D,IAAAI,aAAAD,2BAAAH;wBACA,IAAAxC,MAAA9F,OAAA6D,SAAAF,QAAA+E;wBACA,IAAA5C,OAAA,GAAA9F,OAAA6D,SAAAkC,OAAAD,KAAA;;;;YAMApB,aAAA;YAEAnD,iBAAAuF;YAGA,SAAA1D,YAAA4E,eAAA;gBACA,IAAApF,OAAAqB,UAAAC,eAAAC,KAAA6D,eAAA5E,WAAA;oBACA9C,QAAA8C,YAAA4E,cAAA5E;;;YAKA,IAAAuF,QAAA;YACA,SAAAvF,YAAAmE,sBAAA;gBACA,IAAA3E,OAAAqB,UAAAC,eAAAC,KAAAoD,sBAAAnE,WAAA;oBACA,IAAApD,SAAAsD,iBAAAF;oBACA,IAAAqF,6BAAAlB,qBAAAnE;oBACA,IAAAwF;oBACA,SAAAxI,IAAA,GAAmBA,IAAAqI,2BAAAhD,QAAuCrF,KAAA;wBAC1D,IAAAsI,aAAAD,2BAAArI;wBACA,IAAAmI,KAAAvI,OAAAwD,IAAA0B,sBAAAwD;wBACA,IAAAE,UAAAjF,QAAA4E,OAAA;wBACAK,UAAAhF,KAAA2E;;oBAEA,SAAAnI,IAAA,GAAmBA,IAAAwI,UAAAnD,QAAsBrF,KAAA;wBACzC,IAAAmI,KAAAK,UAAAxI;wBACA;4BACAmI,GAAAhB;0BACO,OAAArF;4BACP,KAAAyG,OACAA,QAAAzG;;;;;YAOA,SAAA9B,IAAA,GAAiBA,IAAA+H,4BAAA1C,QAAwCrF,KAAA;gBACzD,IAAA2H,OAAAI,4BAAA/H;gBACA,IAAAgD,WAAA2E,KAAA/H;gBACAkD,sBAAAE;gBACA;oBACA/B,oBAAA+B;kBACK,OAAAlB;oBACL,WAAA6F,KAAAK,iBAAA;wBACA;4BACAL,KAAAK,aAAAlG;0BACO,OAAAA;4BACP,KAAAyG,OACAA,QAAAzG;;2BAEM,KAAAyG,OACNA,QAAAzG;;;YAKA,IAAAyG,OAAA;gBACAjE,aAAA;gBACA,OAAAhD,SAAAiH;;YAGAjE,aAAA;YACAhD,SAAA,MAAA0F;;QAIA,IAAA9D;QAGA,SAAAjC,oBAAA+B;YAGA,IAAAE,iBAAAF,WACA,OAAAE,iBAAAF,UAAArD;YAGA,IAAAC,SAAAsD,iBAAAF;gBACArD;gBACAiH,IAAA5D;gBACAyF,QAAA;gBACArF,KAAAyB,gBAAA7B;gBACAM,SAAAR;gBACAW;;YAIAvD,QAAA8C,UAAAe,KAAAnE,OAAAD,SAAAC,eAAAD,SAAAoD,iBAAAC;YAGApD,OAAA6I,SAAA;YAGA,OAAA7I,OAAAD;;QAKAsB,oBAAAyH,IAAAxI;QAGAe,oBAAA6F,IAAA5D;QAGAjC,oBAAAC,IAAA;QAGAD,oBAAA8F,IAAA;YAAsC,OAAA5F;;QAGtC,OAAA4B,iBAAA;QDgBM,SAAUnD,QAAQD,SAASsB;QEjlBjC;QACA,IAAA0H,aAAA1I,aAAA0I,cAAA,SAAAC,YAAAC,QAAAC,KAAAC;YACA,IAAAjC,IAAAkC,UAAA3D,QAAA4D,IAAAnC,IAAA,IAAA+B,SAAAE,SAAA,OAAAA,OAAAvG,OAAA0G,yBAAAL,QAAAC,OAAAC,MAAAI;YACA,WAAAC,YAAA,mBAAAA,QAAAC,aAAA,YAAAJ,IAAAG,QAAAC,SAAAT,YAAAC,QAAAC,KAAAC,YACA,SAAA/I,IAAA4I,WAAAvD,SAAA,GAA4CrF,KAAA,GAAQA,KAAA,IAAAmJ,IAAAP,WAAA5I,IAAAiJ,KAAAnC,IAAA,IAAAqC,EAAAF,KAAAnC,IAAA,IAAAqC,EAAAN,QAAAC,KAAAG,KAAAE,EAAAN,QAAAC,SAAAG;YACpD,OAAAnC,IAAA,KAAAmC,KAAAzG,OAAAC,eAAAoG,QAAAC,KAAAG;;QAEA,IAAAK,aAAArJ,aAAAqJ,cAAA,SAAAC,GAAAC;YACA,WAAAJ,YAAA,mBAAAA,QAAAK,aAAA,mBAAAL,QAAAK,SAAAF,GAAAC;;QAEAhH,OAAAC,eAAA9C,SAAA;YAA8CwE,OAAA;;QAC9C,IAAAuF,SAAAzI,oBAAA;QACA,IAAA0I,oBAAA;YACA,SAAAA,kBAAAC;gBACA3J,KAAA2J;;YAQAD,kBAAA9F,UAAAgG,SAAA,SAAAC,WAAAC;gBACA,IAAAC;gBACA,IAAAC,mBAAAhK,KAAAiK,oBAAAH;gBACA,IAAAE,kBAAA;oBACAD,oBAAA/J,KAAAkK,uBAAAL,WAAAG;uBAEA;oBACAvG,QAAAC,KAAA,gBAAAoG,oBAAA,wBACA;;gBAEA,OAAAC,wCAAA;;YAOAL,kBAAA9F,UAAAuG,gBAAA,SAAAC,cAAAC;gBACA,IAAAD,cAAA;oBACA,SAAAE,YAAAD,YAAA;wBACA,IAAAA,WAAAxG,eAAAyG,WAAA;4BACAF,aAAAG,SAAAD,YAAAD,WAAAC;;;;;YASAZ,kBAAA9F,UAAA4G,SAAA,SAAAJ;gBACAA,aAAAK;gBACAL,eAAA;;YASAV,kBAAA9F,UAAAqG,sBAAA,SAAAH;gBACA,IAAAE;gBACA,IAAAU,YAAAC,MAAAC,KAAA5K,KAAA2J,SAAA;gBACA,IAAAlK,UAAAiL,UAAAG,KAAA,SAAAC;oBACA,OAAAA,UAAA,GAAAC,aAAAjB;;gBAEA,IAAArK,SAAA;oBACA,IAAAuL,eAAAvL,QAAA;oBACAuK,mBAAAhK,KAAA2J,SAAAsB,wBAAAD;;gBAEA,OAAAhB,sCAAA;;YAQAN,kBAAA9F,UAAAsG,yBAAA,SAAAL,WAAAG;gBACA,OAAAH,UAAAqB,gBAAAlB;;YAEA,OAAAN;;QAEAA,oBAAAhB,aACAe,OAAA0B,cACA9B,WAAA,uBAAAI,OAAA2B,+BACA1B;QACAhK,QAAAgK;OFwlBM,SAAU/J,QAAQD,SAASsB;SGlrBjC,SAAAqK;aAKA,SAAAA,QAAA5L;gBACA,OAAAA,QAAAC,SAAAsB,oBAAA,IAAAA,oBAAA,IAAAA,oBAAA,aACApB,WAAA,cAAAA,OAAAC,MAAAD,SAAA,0EAAAH,WACAA,SAAA4L,OAAAC,KAAAD,OAAAC;gBAAyCD,OAAAC,GAAAC,OAAAF,OAAAC,GAAAC,aAAuCF,OAAAG,wBAAAH,OAAAI,IAAAJ,OAAAI;eAC/EzL,MAAA,SAAAN,SAAA8L,wBAAAE,cAAAC;gBAA+E;gBAShF,IAAqBC;gBACrB,WAAAC,WAAA;oBACA,WAAAC,sBAAA,eAAAC,gBAAAD,mBAAA;wBAEAF,cAAA;2BAEA;wBACAA,cAAA;;uBAGA;oBACAA,cAAA;;gBAMA,SAAAI,kBAAA9I;oBACA+I,KAAAC,QAAAF,kBAAA,qBAAA9I;;gBAIA,IAAqBiJ,WAAAP;gBAKrB,SAAAQ,wBAAAvL;oBACA,OAAAA,KAAA,kBAAAA;;gBAKAsL,SAAAE,SAAA,SAAAA,OAAAC;gBAOA,SAAAC,UAAAC;oBACA,OAAAA,OAAA;;gBAMA,SAAAC,QAAAD;oBACA,OAAAA,OAAA;;gBAMA,SAAAE,UAAAC;oBACA,WAAAA,UAAA;wBACA,OAAAA;;oBAEA,IAAAA,SAAA;wBACA,YAAAA;;oBAEA,IAAAA,MAAAC,gBAAA;wBACA,YAAAD,MAAAC;;oBAEA,IAAAD,MAAAhJ,MAAA;wBACA,YAAAgJ,MAAAhJ;;oBAEA,IAAyBkJ,MAAAF,MAAAG;oBACzB,IAAyBC,eAAAF,IAAAvJ,QAAA;oBACzB,OAAAyJ,kBAAA,IAAAF,UAAAG,UAAA,GAAAD;;gBAOA,SAAAE,eAAAnN,GAAA2H;oBACA,OAAA3H,MAAA2H,YAAA3H,MAAA,mBAAA2H,MAAA,YAAAyF,MAAApN,MAAAoN,MAAAzF;;gBAMA,SAAA0F,WAAAC;oBACA,OAAAA,MAAA,gBAAAA,MAAA,qBAAAA,MAAA;;gBAMA,SAAAC,MAAAb;oBAEA/I,QAAA6J,IAAAd;;gBAMA,SAAA9I,KAAA8I;oBACA/I,QAAAC,KAAA8I;;gBAEA,IAAqBe,kBAAA;gBAIrB,SAAAC;oBACA,KAAAD,iBAAA;wBACA,gBAAAE,iBAAAC,UAAA;4BACAH,kBAAAE,OAAAC;+BAEA;4BAEA,IAAiCC,OAAApL,OAAAqL,oBAAAC,IAAAjK;4BACjC,SAAsC7D,IAAA,GAAUA,IAAA4N,KAAAvI,UAAiBrF,GAAA;gCACjE,IAAqC8I,MAAA8E,KAAA5N;gCACrC,IAAA8I,QAAA,aAAAA,QAAA,UACA,IAAAjF,UAAAiF,SAAAgF,IAAAjK,UAAA;oCACA2J,kBAAA1E;;;;;oBAKA,OAAA0E;;gBAMA,SAAAO,YAAAtB;oBACA,QAAAW,WAAAX;;gBAGA,IAAqBuB,eAAA;gBACrB,IAAqB5E,UAAAgD,SAAAhD;gBAKrB,SAAA6E,kBAAAC;oBACA,WAAAA,eAAA,cAAAA,WAAApK,eAAA;wBAEAoK;;oBAEA,OAAAA;;gBAOA,SAAAC,YAAAC,WAAAtF;oBACA,IAAAsF,cAAA5L,UAAA4L,cAAAC,UAAAD,cAAAE,YACAF,cAAAG,UAAAH,cAAAxD,OAAA;wBACA,UAAApJ,MAAA,wBAAAmL,UAAAyB,aAAA;;oBAEA,WAAAA,cAAA;wBACA,OAAAA;;oBAEA,IAAAxD,MAAA4D,QAAAJ,YAAA;wBACA,IAA6BK,cAAAL;wBAC7B,IAA6BM,aAAAD,YAAApJ,SAAA;wBAC7B,IAA6BlC,KAAAiL,UAAAM;wBAC7B,WAAAvL,OAAA;4BACA,UAAA3B,MAAA,iEAAAsH,MAAA,WAAA6D,UAAAxJ,MAAA;;wBAEA,IAAAuL,cAAAvL,GAAAkC,QAAA;4BACA,UAAA7D,MAAA,4BAAAkN,aAAA,2CAAAvL,GAAAkC,SAAA,wBAAAsH,UAAAxJ;;wBAEA,IAA6BwL;wBAC7B,SAAkC3O,IAAA,GAAwB4O,KAAAH,YAAApJ,SAAA,GAAgCrF,IAAA4O,IAAQ5O,KAAA;4BAClG,IAAiC6O;4BACjCF,kBAAAnL,KAAAqL;4BACA,IAAiCX,aAAAO,YAAAzO;4BACjC,IAAA4K,MAAA4D,QAAAN,aAAA;gCACA,SAA0ChG,IAAA,GAAUA,IAAAgG,WAAA7I,QAAuB6C,KAAA;oCAC3E2G,iBAAArL,KAAAyK,kBAAAC,WAAAhG;;mCAGA,WAAAgG,eAAA;gCACAW,iBAAArL,KAAAyK,kBAAAC;mCAEA;gCACAW,iBAAArL,KAAA0K;;;wBAGA9E,QAAA0F,eAAA,cAAAH,mBAAAxL;wBACA,OAAAA;;oBAEA,UAAA3B,MAAA,sEAAAsH,MAAA,WAAA6D,UAAAyB,aAAA;;gBAsFA,SAAAW,MAAAC;oBACA,IAAyBC,cAAAd,YAAAa,OAAAlL,eAAA,iBAAAkL,OAAAC,cAAAC,WAAA;oBACzB,IAAyBC,QAAAF,YAAApL;oBACzB,IAAAmL,OAAAlL,eAAA;wBACA,WAAAkL,OAAAI,YAAA;4BACA,YAAAvL,YAAAsL,QACA3M,OAAA6M,OAAAL,OAAA,QAAAnL;+BAEA;4BACA,UAAArC,MAAA,6EAAAmL,UAAAqC,OAAAI;;;oBAGA,SAAAtG,OAAAkG,QAAA;wBACA,IAAAlG,QAAA,aAAAA,QAAA,eAAAkG,OAAAlL,eAAAgF,MAAA;4BACAqG,MAAArG,OAAAqF,YAAAa,OAAAlG;;;oBAGA,IAAA7I,aAAAwO,uBAAA7D,OAAA;wBACAxB,QAAA0F,eAAA,eAAA7O,KAAAwO,aAAAQ;;oBAEA,IAAyBK,kBAAAL,YAAA;oBACzB,KAAAK,uCAAA;wBACA,0CAAAtB;;oBAEA;;gBASA,SAAAuB,cAAA3L,MAAA4L,OAAAC,aAAAC;oBACA,IAAAA,iBAAA;wBAAiCA,UAAA;;oBACjC,IAAyBC,WAAAC,mBAAAJ;oBAKzB,SAAAK,iBAAAC;wBACA,MAAA1G,mBAAA2G,iBAAA;4BACA;;wBAEA,IAAA9P,gBAAA4P,kBAAA;4BACAF,SAAA5L,KAAA9D,MAAA6P;4BACA,OAAA7P;;wBAEA,IAA6B+P,qBAAA,qBAAAF;wBAC7B,IAA6BG,yBAAAhQ,SAAA,cAAA2K,MAAA4D,QAAAvO,KAAAwO,eAAAxO,KAAAwO;wBAC7BwB,gBAAAzM,KAAAwM;wBACA,IAA6BE,gBAAA,SAAAA,cAAAC;4BAC7B,IAAiC1B,cAAArF,QAAA2G,eAAA,eAAAI;4BACjC1B,YAAAjL,KAAAwM;4BACA5G,QAAA0F,eAAA,eAAAL,aAAA0B;4BACA,OAAAA;;wBAEAD,cAAAzB,cAAAwB;wBACAC,cAAAnB;wBACA,IAAAW,SACAA,QAAAQ;wBACA,OAAAA;;oBAEA,IAAAT,aAAA;wBACAI,iBAAAhM,YAAArB,OAAA6M,OAAAI,YAAA5L;;oBAEAgM,iBAAAhM,UAAAkJ,WAAA;wBAA2D,aAAAnJ;;oBAC3D,iBAAAwM,gBAAAP;oBACA,OAAAA;;gBAMA,SAAAD,iBAAAJ;oBACA,gBAAAa;wBACA,IAAAC,QAAArQ;wBACA,IAAAsQ;wBACA,SAAAC,KAAA,GAA4BA,KAAAxH,UAAA3D,QAAuBmL,MAAA;4BACnDD,KAAAC,KAAA,KAAAxH,UAAAwH;;wBAEAhB,MAAAiB,QAAA,SAAAC,MAAA1Q;4BACA,IAAiC2Q,SAAAJ,KAAAvQ;4BACjC,IAAA4K,MAAA4D,QAAAkC,OAAA;gCAEAJ,MAAAI,KAAA,MAAAC,WAAAzB,YAAAwB,KAAA,KAAAC;mCAEA;gCACA,SAAAC,YAAAF,MAAA;oCACAJ,MAAAM,YACAD,iBAAA7M,eAAA8M,YAAAD,OAAAC,YAAAF,KAAAE;;;;;;gBAYA,SAAAC,mBAAAjN,MAAA4L,OAAAC;oBACA,IAAyBE,WAAAC,iBAAAJ;oBAKzB,SAAAsB;wBACA,IAAAP;wBACA,SAAAC,KAAA,GAA4BA,KAAAxH,UAAA3D,QAAuBmL,MAAA;4BACnDD,KAAAC,KAAA,KAAAxH,UAAAwH;;wBAEA,IAAAvQ,gBAAA6Q,uBAAA;4BACAnB,SAAA7J,MAAA7F,MAAAsQ;4BACA,OAAAtQ;;wBAEA,IAA6B+P,qBAAA,MAAAe,KAAA,uBAAAC,KAAAlL,MAAAiL,WAAA,IAAAE,OAAAV;wBAC7B,eAAArC,aAAA8B;wBACA,OAAAkB;wBAOA,SAAAA,eAAAf,KAAAgB,WAAAC;4BACA,IAAiCC,aAAAjI,QAAA2G,eAAA,cAAAI;4BAGjC,OAAAkB,WAAAhM,UAAA+L,OAAA;gCACAC,WAAA7N,KAAA;;4BAEA6N,WAAAD,SAAAC,WAAAD;4BACAC,WAAAD,OAAA5N,KAAAwM;4BACA5G,QAAA0F,eAAA,cAAAuC,YAAAlB;4BACA,OAAAA;;wBAEA,IAAAY;;oBAEA,IAAAtB,aAAA;wBACAqB,sBAAAjN,YAAArB,OAAA6M,OAAAI,YAAA5L;;oBAEAiN,sBAAAjN,UAAAkJ,WAAA;wBAAgE,aAAAnJ;;oBAChE,sBAAAwM,gBAAAU;oBACA,OAAAA;;gBAQA,SAAAQ,kBAAA1N,MAAA4L,OAAAC;oBACA,IAAyBE,WAAAC,iBAAAJ;oBAKzB,SAAA+B;wBACA,IAAAhB;wBACA,SAAAC,KAAA,GAA4BA,KAAAxH,UAAA3D,QAAuBmL,MAAA;4BACnDD,KAAAC,KAAA,KAAAxH,UAAAwH;;wBAEA,IAAAvQ,gBAAAsR,sBAAA;4BACA5B,SAAA7J,MAAA7F,MAAAsQ;4BACA,OAAAtQ;;wBAEA,IAA6BuR,oBAAA,MAAAT,KAAA,sBAAAC,KAAAlL,MAAAiL,WAAA,IAAAE,OAAAV;wBAC7B,gBAAAkB,cAAA5I,QAAAjF;4BACA,IAAiC8N,OAAAtI,QAAA2G,eAAA,gBAAAlH,OAAAoG;4BACjCyC,KAAA9N,QAAA8N,KAAA5N,eAAAF,SAAA8N,KAAA9N;4BACA8N,KAAA9N,MAAA+N,QAAAH;4BACApI,QAAA0F,eAAA,gBAAA4C,MAAA7I,OAAAoG;;wBAEA,IAAA8B;;oBAEA,IAAAtB,aAAA;wBACA8B,qBAAA1N,YAAArB,OAAA6M,OAAAI,YAAA5L;;oBAEA0N,qBAAA1N,UAAAkJ,WAAA;wBAA+D,aAAAnJ;;oBAC/D,qBAAAwM,gBAAAmB;oBACA,OAAAA;;gBASA,IAAqBK,SAAAf,mBAAA,uBAAA3B;gBAOrB,IAAqB2C,WAAAhB,mBAAA;gBAOrB,IAAqBzF,aAAAmE,cAAA;gBAOrB,IAAqBuC,OAAAjB,mBAAA;gBAOrB,IAAqBkB,WAAAlB,mBAAA;gBAOrB,IAAqBmB,OAAAnB,mBAAA;gBAErB,IAAAoB,cAAA;oBAIA,SAAAA,YAAAC;wBACAjS,KAAAiS;;oBAKAD,YAAApO,UAAAkJ,WAAA;wBAAsD,kBAAA9M,KAAAiS;;oBACtDD,YAAArJ;wBACa9H,MAAAsK;;oBAGb6G,YAAAE,iBAAA;wBAAkD,SAClD;;oBAEA,OAAAF;;gBAqCA,IAAqBG,+BAAA,IAAAH,YAAA;gBAOrB,IAAqBI,YAAAxB,mBAAA,kCAAA3B;gBAUrB,IAAAoD,QAAA;oBACA,SAAAA;oBAEA,OAAAA;;gBAQA,IAAqBC,kBAAAjB,kBAAA,uBACrB,YAAApC;oBACAsD,OAAA;oBACAC,aAAA;oBACAC,aAAA;oBACAC,MAAAzD;qBAEAoD;gBAOA,IAAqBM,eAAAtB,kBAAA,oBACrB,YAAApC;oBACAsD,OAAA;oBACAC,aAAA;oBACAC,aAAA;oBACAC,MAAAzD;qBAEAoD;gBAOA,IAAqBO,eAAAvB,kBAAA,oBACrB,YAAApC;oBACAsD,OAAA;oBACAC,aAAA;oBACAC,aAAA;oBACAC,MAAAzD;qBAEAoD;gBAOA,IAAqBQ,YAAAxB,kBAAA,iBACrB,YAAApC;oBACAsD,OAAA;oBACAC,aAAA;oBACAC,aAAA;oBACAC,MAAAzD;qBAEAoD;gBAEA,IAAAS;gBACAA,wBAAAC,SAAA;gBACAD,wBAAAE,UAAA;gBACAF,gDAAAC,UAAA;gBACAD,gDAAAE,WAAA;gBACA,IAAAC;gBACAA,qBAAAC,YAAA;gBACAD,qBAAAE,UAAA;gBACAF,qBAAAG,cAAA;gBACAH,qBAAAI,WAAA;gBACAJ,qBAAAK,UAAA;gBACAL,qBAAAM,YAAA;gBACAN,0CAAAC,aAAA;gBACAD,0CAAAE,WAAA;gBACAF,0CAAAG,eAAA;gBACAH,0CAAAI,YAAA;gBACAJ,0CAAAK,WAAA;gBACAL,0CAAAM,aAAA;gBAKA,SAAAC,iCAAAC;oBACA,OAAAhH,QAAAgH,4BACAA,4BAAAX,wBAAAE;;gBASA,IAAqBU,YAAApE,cAAA;oBACrBvE,UAAAkE;oBACA0E,QAAA1E;oBACA2E,SAAA3E;oBACA4E,MAAA5E;oBACA6E,WAAA7E;oBACA8E,UAAA9E;oBACA+E,SAAA/E;;gBAQA,IAAqBgF,YAAA3E,cAAA;oBACrBvE,UAAAkE;oBACA0E,QAAA1E;oBACA2E,SAAA3E;oBACA4E,MAAA5E;oBACA8E,UAAA9E;oBACAlM,UAAAkM;oBACA6E,WAAA7E;oBACAiF,eAAAjF;oBACAkF,iBAAArB,wBAAAE;oBACAgB,SAAA/E;oBACAmF,aAAAnF;oBACAoF,UAAApF;oBACAqF,WAAArF;oBACAsF,QAAAtF;oBACAuF,YAAAvF;oBACAwF,eAAAxF;oBACAyF,eAAAzF;oBACA0F,iBAAA1F;mBACKyE;gBAOL,IAAqBkB,OAAAtF,cAAA;oBACrB3L,MAAAsL;oBACA4F,MAAA;;gBAQA,IAAqBC,QAAAzD,kBAAA,oCAAApC;gBAOrB,IAAqB8F,SAAA1D,kBAAA,qCAAApC;gBAOrB,IAAqB+F,cAAA3D,kBAAA,uCAAApC;gBAOrB,IAAqBgG,eAAA5D,kBAAA,iCAAApC,eAAA;gBASrB,IAAAiG;gBACAA,eAAAC,SAAA;gBACAD,eAAAE,YAAA;gBACAF,eAAAG,UAAA;gBACAH,eAAAI,YAAA;gBACAJ,eAAAK,mBAAA;gBACAL,eAAAM,sBAAA;gBACAN,eAAAO,gBAAA;gBACAP,eAAAQ,mBAAA;gBACAR,8BAAAC,UAAA;gBACAD,8BAAAE,aAAA;gBACAF,8BAAAG,WAAA;gBACAH,8BAAAI,aAAA;gBACAJ,8BAAAK,oBAAA;gBACAL,8BAAAM,uBAAA;gBACAN,8BAAAO,iBAAA;gBACAP,8BAAAQ,oBAAA;gBACA,IAAqBC,2BACrBT,eAAAC,QAAAD,eAAAE,WAAAF,eAAAG,SAAAH,eAAAI,WACAJ,eAAAK,kBAAAL,eAAAM,qBAAAN,eAAAO,eACAP,eAAAQ;gBAiBA,IAAAJ,YAAA;oBACA,SAAAA;oBAOAA,UAAA1R,UAAAgS,cAAA,SAAAC;oBACA,OAAAP;;gBAkBA,IAAAH,SAAA;oBACA,SAAAA;oBAMAA,OAAAvR,UAAAkS,WAAA;oBACA,OAAAX;;gBAwBA,IAAAE,UAAA;oBACA,SAAAA;oBAMAA,QAAAzR,UAAAmS,YAAA;oBACA,OAAAV;;gBAgBA,IAAAD,YAAA;oBACA,SAAAA;oBAMAA,UAAAxR,UAAAoS,cAAA;oBACA,OAAAZ;;gBAeA,IAAAG,mBAAA;oBACA,SAAAA;oBAMAA,iBAAA3R,UAAAqS,qBAAA;oBACA,OAAAV;;gBAaA,IAAAC,sBAAA;oBACA,SAAAA;oBAMAA,oBAAA5R,UAAAsS,wBAAA;oBACA,OAAAV;;gBAcA,IAAAC,gBAAA;oBACA,SAAAA;oBAMAA,cAAA7R,UAAAuS,kBAAA;oBACA,OAAAV;;gBAaA,IAAAC,mBAAA;oBACA,SAAAA;oBAMAA,iBAAA9R,UAAAwS,qBAAA;oBACA,OAAAV;;gBAWA,IAAqBW;oBACrB1S,MAAA;;gBAOA,IAAqB2S;oBACrB3S,MAAA;;gBAQA,IAAqB4S,WAAAjH,cAAA;oBACrBwE,WAAA7E;oBACAuH,cAAAvH;oBACAwH,SAAAxH;oBACAvP,SAAAuP;oBACA0F,iBAAA1F;oBACAyH,WAAAzH;oBACA0H,SAAA1H;oBACAtI,IAAAsI;;gBAUA,IAAA2H;gBACAA,kBAAAC,WAAA;gBACAD,kBAAAE,SAAA;gBACAF,kBAAAG,OAAA;gBACAH,oCAAAC,YAAA;gBACAD,oCAAAE,UAAA;gBACAF,oCAAAG,QAAA;gBA0BA,IAAAC,eAAA;oBAIA,SAAAA,aAAAlG;wBACA,IAAAmG,KAAAnG,YAAA,SAAuCA,IAAAsD,cAAA6C,GAAA7C,aAAAC,WAAA4C,GAAA5C,UAAAI,gBAAAwC,GAAAxC,eAAAF,SAAA0C,GAAA1C,QAAAD,YAAA2C,GAAA3C,WAAAE,aAAAyC,GAAAzC,YAAAE,gBAAAuC,GAAAvC;wBACvC1U,KAAAoU;wBACApU,KAAAqU;wBACArU,KAAAsU;wBACAtU,KAAAuU;wBACAvU,KAAAyU;wBACAzU,KAAAwU;wBACAxU,KAAA0U;;oBAEA,OAAAsC;;gBAQA,IAAAE,UAAA;oBAIA,SAAAA,QAAAC;wBACAnX,KAAAmX;;oBAEA5U,OAAAC,eAAA0U,QAAAtT,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAmX,KAAAC,MAAA;;wBAC9BpT,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA0U,QAAAtT,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAmX,KAAAC,MAAA;;wBAC9BpT,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA0U,QAAAtT,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAmX,KAAAC,MAAA,KAAAhQ,MAAA,GAAAiQ,KAAA;;wBAC9BrT,YAAA;wBACAD,cAAA;;oBAEA,OAAAmT;;gBAKA,IAAqBI,UAAA,IAAAJ,QAAA;gBAgBrB,SAAAK,WAAAC;oBACA,aAAAC,kBAAAF;oBACA,aAAAzK,WAAA;wBAAiD,OAAAJ,UAAA1M;;oBACjD;;gBAgBA,SAAA0X,kBAAA7W;oBACA,WAAAA,SAAA,cAAAA,KAAAgD,eAAA,sBACAhD,KAAA4W,oBAAAF,YAAA;wBACA;2BAEA;wBACA,OAAA1W;;;gBAIA,IAAqB8W,sBAAA,IAAApV;gBACrB,IAAqBqV,qBAAAD;gBACrB,IAAAE,gBAAA;oBACA,SAAAA;oBAOAA,cAAAjU,UAAAnB,MAAA,SAAAkK,OAAAmL;wBACA,IAAAA,uBAAA;4BAA2CA,gBAAAH;;wBAC3C,IAAAG,kBAAAH,qBAAA;4BACA,UAAApW,MAAA,qBAAAmL,UAAAC,SAAA;;wBAEA,OAAAmL;;oBAEA,OAAAD;;gBAuBA,IAAAE,WAAA;oBACA,SAAAA;oBAaAA,SAAAnU,UAAAnB,MAAA,SAAAkK,OAAAmL;oBACAC,SAAAH,qBAAAD;oBACAI,SAAAC,OAAA,IAAAH;oBACA,OAAAE;;gBAGA,IAAAE,cAAAjY,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAKA,IAAAC,YAAA,SAAAC;oBACAJ,YAAAG,WAAAC;oBAIA,SAAAD,UAAAE;wBACAD,OAAAvU,KAAA9D,MAAAsY;wBAKA,IAAAC,cAAA,IAAAhX,MAAA+W;wBACAtY,KAAAwY,eAAAD;;oBAEAhW,OAAAC,eAAA4V,UAAAxU,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAwY,aAAAF;;wBAK9BrU,KAAA,SAAAqU;4BAAqCtY,KAAAwY,aAAAF;;wBACrCtU,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA4V,UAAAxU,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAwY,aAAA7U;;wBAC9BK,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA4V,UAAAxU,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA,aAAAyY;;wBAK9BxU,KAAA,SAAAC;4BAAmClE,KAAA,aAAAyY,QAAAvU;;wBACnCF,YAAA;wBACAD,cAAA;;oBAKAqU,UAAAxU,UAAAkJ,WAAA;wBAAoD,OAAA9M,KAAAwY,aAAA1L;;oBACpD,OAAAsL;kBACK7W;gBAIL,IAAAmX,eAAA,SAAAL;oBACAJ,YAAAS,cAAAL;oBAKA,SAAAK,aAAAJ,SAAAhQ;wBACA+P,OAAAvU,KAAA9D,MAAAsY,UAAA,kBAAAhQ,iBAAA/G,QAAA+G,MAAAgQ,UAAAhQ;wBACAtI,KAAA2Y,gBAAArQ;;oBAEA/F,OAAAC,eAAAkW,aAAA9U,WAAA;wBAIAnB,KAAA;4BACA,QAAAzC,KAAA2Y,yBAAApX,QAAAvB,KAAA2Y,gBAAA3Y,KAAAwY,cACAC;;wBAEAzU,YAAA;wBACAD,cAAA;;oBAEA,OAAA2U;kBACKN;gBASL,IAAAF,YAAAlY,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAMA,SAAAS,qBAAAjL;oBACA,IAAyBd;oBACzB,SAA8B9M,IAAA,GAAUA,IAAA4N,KAAAvI,UAAiBrF,GAAA;wBACzD,IAAA8M,IAAAvJ,QAAAqK,KAAA5N,OAAA;4BACA8M,IAAAtJ,KAAAoK,KAAA5N;4BACA,OAAA8M;;wBAEAA,IAAAtJ,KAAAoK,KAAA5N;;oBAEA,OAAA8M;;gBAMA,SAAAgM,uBAAAlL;oBACA,IAAAA,KAAAvI,SAAA;wBACA,IAA6B0T,WAAAF,qBAAAjL,KAAAvG,QAAA2R;wBAC7B,IAA6BC,YAAAF,SAAAG,IAAA,SAAA3P;4BAA2C,OAAAoD,UAAApD,EAAAqD;;wBACxE,cAAAqM,UAAA3B,KAAA;;oBAEA;;gBAMA,IAAA6B,wBAAA,SAAAb;oBACAH,UAAAgB,uBAAAb;oBAMA,SAAAa,sBAAAC,UAAAtQ,KAAAuQ;wBACAf,OAAAvU,KAAA9D,MAAA;wBACAA,KAAA2N,SAAA9E;wBACA7I,KAAAqZ,cAAAF;wBACAnZ,KAAAoZ;wBACApZ,KAAAsY,UAAAtY,KAAAoZ,0BAAApZ,KAAA2N;;oBAOAuL,sBAAAtV,UAAA0V,SAAA,SAAAH,UAAAtQ;wBACA7I,KAAAqZ,UAAA9V,KAAA4V;wBACAnZ,KAAA2N,KAAApK,KAAAsF;wBACA7I,KAAAsY,UAAAtY,KAAAoZ,0BAAApZ,KAAA2N;;oBAEA,OAAAuL;kBACKd;gBAgBL,IAAAmB,kBAAA,SAAAlB;oBACAH,UAAAqB,iBAAAlB;oBAKA,SAAAkB,gBAAAJ,UAAAtQ;wBACAwP,OAAAvU,KAAA9D,MAAAmZ,UAAAtQ,KAAA,SAAA8E;4BACA,IAAA4E,QAAA7F,UAAAiB,KAAA,GAAAhB;4BACA,4BAAA4F,QAAA,MAAAsG,uBAAAlL;;;oBAGA,OAAA4L;kBACKL;gBAkBL,IAAAM,wBAAA,SAAAnB;oBACAH,UAAAsB,uBAAAnB;oBAKA,SAAAmB,sBAAAL,UAAAtQ;wBACAwP,OAAAvU,KAAA9D,MAAAmZ,UAAAtQ,KAAA,SAAA8E;4BACA,iDAAAkL,uBAAAlL;;;oBAGA,OAAA6L;kBACKN;gBA2BL,IAAAO,qBAAA,SAAApB;oBACAH,UAAAuB,oBAAApB;oBAOA,SAAAoB,mBAAAN,UAAAO,mBAAAC,eAAA9Q;wBACAwP,OAAAvU,KAAA9D,MAAA,YAAA0Z;wBACA1Z,KAAA2N,SAAA9E;wBACA7I,KAAAqZ,cAAAF;;oBAOAM,mBAAA7V,UAAA0V,SAAA,SAAAH,UAAAtQ;wBACA7I,KAAAqZ,UAAA9V,KAAA4V;wBACAnZ,KAAA2N,KAAApK,KAAAsF;;oBAEAtG,OAAAC,eAAAiX,mBAAA7V,WAAA;wBAIAnB,KAAA;4BACA,IAAiC8P,QAAA7F,UAAA1M,KAAA2N,KAAA,GAAAhB;4BACjC,OAAA3M,KAAA2Y,cAAAL,UAAA,qCAAA/F,QAAA,MAAAsG,uBAAA7Y,KAAA2N,QAAA;;wBAEA3J,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAiX,mBAAA7V,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA2N,KAAA;;wBAC9B3J,YAAA;wBACAD,cAAA;;oBAEA,OAAA0V;kBACKf;gBAYL,IAAAkB,uBAAA,SAAAvB;oBACAH,UAAA0B,sBAAAvB;oBAIA,SAAAuB,qBAAAC;wBACAxB,OAAAvU,KAAA9D,MAAA,8EAAA6Z;;oBAEA,OAAAD;kBACKxB;gBA8BL,IAAA0B,oBAAA,SAAAzB;oBACAH,UAAA4B,mBAAAzB;oBAKA,SAAAyB,kBAAAC,YAAAC;wBACA3B,OAAAvU,KAAA9D,MAAA8Z,kBAAAG,YAAAF,YAAAC;;oBAOAF,kBAAAG,cAAA,SAAAF,YAAAC;wBACA,IAA6BE;wBAC7B,SAAkCna,IAAA,GAAwB4O,KAAAqL,OAAA5U,QAAuBrF,IAAA4O,IAAQ5O,KAAA;4BACzF,IAAiCoa,YAAAH,OAAAja;4BACjC,KAAAoa,uBAAA/U,UAAA;gCACA8U,UAAA3W,KAAA;mCAEA;gCACA2W,UAAA3W,KAAA4W,UAAAlB,IAAAvM,WAAA2K,KAAA;;;wBAGA,+CAAA3K,UAAAqN,cAAA,OACAG,UAAA7C,KAAA,gBACA,0GACA3K,UAAAqN,cAAA;;oBAEA,OAAAD;kBACK1B;gBAeL,IAAAgC,mBAAA,SAAA/B;oBACAH,UAAAkC,kBAAA/B;oBAIA,SAAA+B,iBAAAjJ;wBACAkH,OAAAvU,KAAA9D,MAAA,WAAAmR,QAAA;;oBAEA,OAAAiJ;kBACKhC;gBAaL,IAAAiC,gDAAA,SAAAhC;oBACAH,UAAAmC,+CAAAhC;oBAKA,SAAAgC,8CAAAC,WAAAC;wBACAlC,OAAAvU,KAAA9D,MAAA,4DAAAsa,UAAAxN,aAAA,MACAyN,UAAAzN;;oBAEA,OAAAuN;kBACKjC;gBAkBL,IAAAoC,gBAAA;oBAMA,SAAAA,cAAA7N,OAAAhG;wBACA3G,KAAA2M;wBACA3M,KAAA2G;wBACA,KAAAgG,OAAA;4BACA,UAAApL,MAAA;;;oBAGAgB,OAAAC,eAAAgY,cAAA5W,WAAA;wBAKAnB,KAAA;4BAA8B,OAAAiK,UAAA1M,KAAA2M;;wBAC9B3I,YAAA;wBACAD,cAAA;;oBAOAyW,cAAA/X,MAAA,SAAAkK;wBACA,OAAA8N,mBAAAhY,IAAAiV,kBAAA/K;;oBAEApK,OAAAC,eAAAgY,eAAA;wBAIA/X,KAAA;4BAA8B,OAAAgY,mBAAAC;;wBAC9B1W,YAAA;wBACAD,cAAA;;oBAEA,OAAAyW;;gBAKA,IAAAG,cAAA;oBACA,SAAAA;wBACA3a,KAAA4a,WAAA,IAAA/M;;oBAMA8M,YAAA/W,UAAAnB,MAAA,SAAAkK;wBACA,IAAAA,iBAAA6N,eACA,OAAA7N;wBACA,IAAA3M,KAAA4a,SAAAC,IAAAlO,QAAA;4BACA,OAAA3M,KAAA4a,SAAAnY,IAAAkK;;wBAEA,IAA6BmO,SAAA,IAAAN,cAAA7N,OAAA6N,cAAAE;wBAC7B1a,KAAA4a,SAAA3W,IAAA0I,OAAAmO;wBACA,OAAAA;;oBAEAvY,OAAAC,eAAAmY,YAAA/W,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA4a,SAAAG;;wBAC9B/W,YAAA;wBACAD,cAAA;;oBAEA,OAAA4W;;gBAEA,IAAqBF,qBAAA,IAAAE;gBAmBrB,IAAqBK,OAAA3M;gBAKrB,SAAA4M,OAAA1R;oBACA,cAAAA,MAAA;;gBAMA,IAAqB2R,gBAAA;gBACrB,IAAAC,yBAAA;oBAIA,SAAAA,uBAAAC;wBACApb,KAAAqb,WAAAD,WAAAjP,SAAAhD;;oBAKAgS,uBAAAvX,UAAA0X,sBAAA;wBAA4E;;oBAK5EH,uBAAAvX,UAAAnE,UAAA,SAAA8b;wBAAiE;4BACjE,IAAAjL;4BACA,SAAAC,KAAA,GAA4BA,KAAAxH,UAAA3D,QAAuBmL,MAAA;gCACnDD,KAAAC,KAAA,KAAAxH,UAAAwH;;4BAEA,YAAAgL,EAAAxK,KAAAlL,MAAA0V,UAAA,IAAAvK,OAAAV;;;oBAQA6K,uBAAAvX,UAAA4X,0BAAA,SAAAC,YAAA7M;wBACA,IAA6BhH;wBAC7B,WAAA6T,eAAA;4BACA7T,SAAA,IAAA+C,MAAAiE,iBAAAxJ;+BAEA;4BACAwC,SAAA,IAAA+C,MAAA8Q,WAAArW;;wBAEA,SAAkCrF,IAAA,GAAUA,IAAA6H,OAAAxC,QAAmBrF,KAAA;4BAI/D,WAAA0b,eAAA;gCACA7T,OAAA7H;mCAEA,IAAA0b,WAAA1b,MAAAwC,QAAA;gCACAqF,OAAA7H,OAAA0b,WAAA1b;mCAEA;gCACA6H,OAAA7H;;4BAEA,IAAA6O,oBAAArC,UAAAqC,iBAAA7O,KAAA;gCACA6H,OAAA7H,KAAA6H,OAAA7H,GAAAiR,OAAApC,iBAAA7O;;;wBAGA,OAAA6H;;oBAOAuT,uBAAAvX,UAAA8X,iBAAA,SAAA7a,MAAA8a;wBAQA,IAAAT,cAAAU,KAAA/a,KAAAiM,aAAA;4BACA;;wBAGA,SAAAsE,cAAA,KAAAA,eAAAuK,WAAAvK,YAAA;4BACA,YAAAA;;wBAGA,IAA6ByK,oBAAA,KAAA3J;wBAC7B,IAAA2J,2CAAAF,WAAAzJ,gBAAA;4BAGA,IAAiCA,wBAAA2J,sBAAA,aAAAA;4BACjC,IAAiCJ,aAAAvJ,eAAA+G,IAAA,SAAA6C;gCAA0D,OAAAA,uBAAAjb;;4BAC3F,IAAiC+N,mBAAAsD,eAAA+G,IAAA,SAAA6C;gCACjC,OAAAA,aAAAC,oCAAAD,UAAAnT;;4BAEA,OAAA3I,KAAAwb,wBAAAC,YAAA7M;;wBAGA,IAAArC,UAAAvM,KAAAqb,aAAA9O,UAAAvM,KAAAqb,SAAAvL,iBAAA;4BACA,IAAiClB,mBAAA5O,KAAAqb,SAAAvL,eAAA,cAAAjP;4BACjC,IAAiC4a,aAAAzb,KAAAqb,SAAAvL,eAAA,qBAAAjP;4BACjC,IAAA4a,cAAA7M,kBAAA;gCACA,OAAA5O,KAAAwb,wBAAAC,YAAA7M;;;wBAOA,WAAAjE,MAAA9J,KAAA,QAAAmb,KAAA/M;;oBAMAkM,uBAAAvX,UAAAwN,aAAA,SAAAvQ;wBAGA,KAAAoa,OAAApa,OAAA;4BACA;;wBAEA,IAA6B8a,aAAAM,cAAApb;wBAC7B,IAA6BuQ,aAAApR,KAAA0b,eAAA7a,MAAA8a;wBAC7B,KAAAvK,cAAAuK,eAAApZ,QAAA;4BACA6O,aAAApR,KAAAoR,WAAAuK;;wBAEA,OAAAvK;;oBAOA+J,uBAAAvX,UAAAsY,kBAAA,SAAAnC,YAAA4B;wBAEA,eAAAnN,eAAA,WAAAA,gBAAAmN,WAAAnN,aAAA;4BACA,IAAiCA,cAAA,WAAAA;4BACjC,WAAAA,gBAAA,cAAAA,yBAAA;gCACAA;;4BAEA,OAAAA;;wBAGA,eAAA7F,cAAA,WAAAA,eAAAgT,WAAAhT,YAAA;4BACA,OAAAoT,oCAAA,WAAApT;;wBAGA,IAAA3I,KAAAqb,YAAArb,KAAAqb,SAAAvL,gBAAA;4BACA,OAAA9P,KAAAqb,SAAAvL,eAAA,eAAAiK;;;oBAOAoB,uBAAAvX,UAAA4K,cAAA,SAAAuL;wBACA,KAAAkB,OAAAlB,aAAA;4BACA;;wBAEA,IAA6B4B,aAAAM,cAAAlC;wBAC7B,IAA6BoC,iBAAAnc,KAAAkc,gBAAAnC,YAAA4B;wBAC7B,IAA6BS,oBAAAT,eAAApZ,SAAAvC,KAAAwO,YAAAmN;wBAC7B,OAAAS,kBAAApL,OAAAmL;;oBAOAhB,uBAAAvX,UAAAyY,mBAAA,SAAAtC,YAAA4B;wBAEA,eAAAW,gBACA,WAAAA,iBAAAX,WAAAW,cAAA;4BACA,IAAiCA,eAAA,WAAAA;4BACjC,WAAAA,iBAAA,cAAAA,2BAAA;gCACAA;;4BAEA,OAAAA;;wBAGA,eAAAC,kBACA,WAAAA,mBAAAZ,WAAAY,gBAAA;4BACA,IAAiCC,mBAAA,WAAAD;4BACjC,IAAiCE;4BACjCla,OAAAoL,KAAA6O,kBAAAhM,QAAA,SAAAC;gCACAgM,eAAAhM,QAAAsL,oCAAAS,iBAAA/L;;4BAEA,OAAAgM;;wBAGA,IAAAzc,KAAAqb,YAAArb,KAAAqb,SAAAvL,gBAAA;4BACA,OAAA9P,KAAAqb,SAAAvL,eAAA,gBAAAiK;;;oBAOAoB,uBAAAvX,UAAA0Y,eAAA,SAAAvC;wBACA,KAAAkB,OAAAlB,aAAA;4BACA;;wBAEA,IAA6B4B,aAAAM,cAAAlC;wBAC7B,IAA6BuC;wBAC7B,IAAAX,eAAApZ,QAAA;4BACA,IAAiCma,uBAAA1c,KAAAsc,aAAAX;4BACjCpZ,OAAAoL,KAAA+O,sBAAAlM,QAAA,SAAAG;gCACA2L,aAAA3L,YAAA+L,qBAAA/L;;;wBAGA,IAA6BgM,kBAAA3c,KAAAqc,iBAAAtC,YAAA4B;wBAC7B,IAAAgB,iBAAA;4BACApa,OAAAoL,KAAAgP,iBAAAnM,QAAA,SAAAG;gCACA,IAAqChI;gCACrC,IAAA2T,aAAAzY,eAAA8M,WAAA;oCACAhI,WAAApF,KAAAsC,MAAA8C,YAAA2T,aAAA3L;;gCAEAhI,WAAApF,KAAAsC,MAAA8C,YAAAgU,gBAAAhM;gCACA2L,aAAA3L,YAAAhI;;;wBAGA,OAAA2T;;oBAOAnB,uBAAAvX,UAAAgZ,mBAAA,SAAA/b,MAAAgc;wBACA,OAAAhc,gBAAAma,QAAA6B,cAAAhc,KAAA+C;;oBAMAuX,uBAAAvX,UAAAkZ,SAAA,SAAAnZ;wBAAmE,WAAA0K,SAAA,mBAAA1K,OAAA;;oBAKnEwX,uBAAAvX,UAAAmZ,SAAA,SAAApZ;wBACA,WAAA0K,SAAA,wBAAA1K,OAAA;;oBAMAwX,uBAAAvX,UAAAoZ,SAAA,SAAArZ;wBACA,IAA6BsZ,eAAA,YAAAtZ,OAAA,0BAAAA,OAAA,0CAA0FA,OAAA;wBACvH,WAAA0K,SAAA,aAAA4O;;oBAMA9B,uBAAAvX,UAAAsZ,YAAA,SAAArc;wBAEA,WAAAA,SAAA,YAAAA,KAAA;4BACA,OAAAA,KAAA;;wBAGA,cAAA6L,UAAA7L;;oBAQAsa,uBAAAvX,UAAAuZ,oBAAA,SAAAxZ,MAAAyZ,WAAAC;wBAAkG,OAAAA;;oBAMlGlC,uBAAAvX,UAAA0Z,cAAA,SAAAC,gBAAA5Z;wBAAwF,OAAA4Z,eAAA5Z;;oBACxF,OAAAwX;;gBAMA,SAAAY,oCAAAyB;oBACA,KAAAA,sBAAA;wBACA;;oBAEA,OAAAA,qBAAAvE,IAAA,SAAAwE;wBACA,IAA6BC,gBAAAD,oBAAA5c;wBAC7B,IAA6BsP,gBAAAuN,cAAAvN;wBAC7B,IAA6BwN,iBAAAF,oBAAAnN,OAAAmN,oBAAAnN;wBAC7B,YAAAH,cAAAY,KAAAlL,MAAAsK,sBAAA,IAAAa,OAAA2M;;;gBAOA,SAAA1B,cAAA7L;oBACA,IAAyBwN,cAAArb,OAAAsb,eAAAzN,KAAAxM;oBACzB,IAAyB+X,aAAAiC,0BAAA5O,cAAA;oBAGzB,OAAA2M,cAAApZ;;gBAQA,IAAAub,kBAAA;oBACA,SAAAA;oBAOAA,gBAAAla,UAAAwN,aAAA,SAAA2I;oBAMA+D,gBAAAla,UAAA4K,cAAA,SAAAuL;oBAMA+D,gBAAAla,UAAA0Y,eAAA,SAAAvC;oBAMA+D,gBAAAla,UAAAsZ,YAAA,SAAAnD;oBAQA+D,gBAAAla,UAAAuZ,oBAAA,SAAAxZ,MAAAyZ,WAAAC;oBAOAS,gBAAAla,UAAA0Z,cAAA,SAAAS,YAAApa;oBACA,OAAAma;;gBAUA,IAAAE,cAAAhe,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAMA,IAAA8F,YAAA,SAAA5F;oBACA2F,YAAAC,WAAA5F;oBAIA,SAAA4F,UAAAC;wBACA7F,OAAAvU,KAAA9D;wBACAA,KAAAke;;oBAMAD,UAAAra,UAAAua,qBAAA,SAAAC;wBAAkEpe,KAAAke,yBAAAE;;oBAKlEH,UAAAra,UAAAnE,UAAA,SAAAoB;wBAAuD,OAAAb,KAAAke,uBAAAze,QAAAoB;;oBAKvDod,UAAAra,UAAAwN,aAAA,SAAA2I;wBACA,OAAA/Z,KAAAke,uBAAA9M,WAAA2I;;oBAMAkE,UAAAra,UAAA4K,cAAA,SAAAuL;wBACA,OAAA/Z,KAAAke,uBAAA1P,YAAAuL;;oBAMAkE,UAAAra,UAAA0Y,eAAA,SAAAvC;wBACA,OAAA/Z,KAAAke,uBAAA5B,aAAAvC;;oBAOAkE,UAAAra,UAAAgZ,mBAAA,SAAA/b,MAAAgc;wBACA,OAAA7c,KAAAke,uBAAAtB,iBAAA/b,MAAAgc;;oBAMAoB,UAAAra,UAAAkZ,SAAA,SAAAnZ;wBAAsD,OAAA3D,KAAAke,uBAAApB,OAAAnZ;;oBAKtDsa,UAAAra,UAAAmZ,SAAA,SAAApZ;wBAAsD,OAAA3D,KAAAke,uBAAAnB,OAAApZ;;oBAKtDsa,UAAAra,UAAAoZ,SAAA,SAAArZ;wBAAsD,OAAA3D,KAAAke,uBAAAlB,OAAArZ;;oBAKtDsa,UAAAra,UAAAsZ,YAAA,SAAArc;wBAAyD,OAAAb,KAAAke,uBAAAhB,UAAArc;;oBAOzDod,UAAAra,UAAAuZ,oBAAA,SAAAxZ,MAAAyZ,WAAAC;wBACA,OAAArd,KAAAke,uBAAAf,kBAAAxZ,MAAAyZ,WAAAC;;oBAOAY,UAAAra,UAAA0Z,cAAA,SAAAS,YAAApa;wBACA,OAAA3D,KAAAke,uBAAAZ,YAAAS,YAAApa;;oBAEA,OAAAsa;kBACKH;gBAML,IAAqBO,YAAA,IAAAJ,UAAA,IAAA9C;gBAMrB,IAAAmD,uBAAA;oBAMA,SAAAA,qBAAAzV,KAAA0V,UAAAC;wBACAxe,KAAA6I;wBACA7I,KAAAue;wBACAve,KAAAwe;;oBAMAF,qBAAAG,UAAA,SAAA5V;wBACA,WAAAyV,qBAAAzV,KAAA;;oBAEA,OAAAyV;;gBAEA,IAAqBI;gBACrB,IAAAC,8BAAA;oBAMA,SAAAA,4BAAA9V,KAAA+V,mBAAAC;wBACA7e,KAAA6I;wBACA7I,KAAA4e;wBACA5e,KAAA6e;;oBAEAtc,OAAAC,eAAAmc,4BAAA/a,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA4e,kBAAA;;wBAC9B5a,YAAA;wBACAD,cAAA;;oBAEA,OAAA4a;;gBAOA,IAAAG,4BAAA;oBAKA,SAAAA,0BAAArf,SAAAsf;wBACA/e,KAAAP;wBACAO,KAAA+e;;oBAEA,OAAAD;;gBAOA,SAAAE,yBAAAnF;oBACA,IAAyBoF;oBACzB,IAAyBC;oBACzB,IAAArF,SAAAsF,UAAA;wBACA,IAA6BA,WAAAzH,kBAAAmC,SAAAsF;wBAC7BF,YAAAZ,UAAA5e,QAAA0f;wBACAD,eAAAE,iBAAAD;2BAEA,IAAAtF,SAAAwF,aAAA;wBACAJ,YAAA,SAAAK;4BAAkD,OAAAA;;wBAClDJ,iBAAAZ,qBAAAG,QAAAjE,cAAA/X,IAAAoX,SAAAwF;2BAEA,IAAAxF,SAAA0F,YAAA;wBACAN,YAAApF,SAAA0F;wBACAL,eAAAM,sBAAA3F,SAAA0F,YAAA1F,SAAA4F;2BAEA;wBACAR,YAAA;4BAAqC,OAAApF,SAAA6F;;wBACrCR,eAAAR;;oBAEA,WAAAI,0BAAAG,WAAAC;;gBAUA,SAAAS,0BAAA9F;oBACA,WAAA8E,4BAAAnE,cAAA/X,IAAAoX,SAAA+F,YAAAZ,yBAAAnF,sBAAAgG;;gBAOA,SAAAC,2BAAAhM;oBACA,IAAyBiM,aAAAC,oBAAAlM;oBACzB,IAAyBmM,WAAAF,WAAA9G,IAAA0G;oBACzB,IAAyBO,sBAAAC,iCAAAF,UAAA,IAAApS;oBACzB,OAAAlD,MAAAC,KAAAsV,oBAAAE;;gBAUA,SAAAD,iCAAArM,WAAAuM;oBACA,SAA8BtgB,IAAA,GAAUA,IAAA+T,UAAA1O,QAAsBrF,KAAA;wBAC9D,IAA6B8Z,WAAA/F,UAAA/T;wBAC7B,IAA6BugB,WAAAD,uBAAA5d,IAAAoX,SAAAhR,IAAAlC;wBAC7B,IAAA2Z,UAAA;4BACA,IAAAzG,SAAAgF,kBAAAyB,SAAAzB,eAAA;gCACA,UAAAxE,8CAAAiG,UAAAzG;;4BAEA,IAAAA,SAAAgF,eAAA;gCACA,SAA0C5W,IAAA,GAAUA,IAAA4R,SAAA+E,kBAAAxZ,QAAuC6C,KAAA;oCAC3FqY,SAAA1B,kBAAArb,KAAAsW,SAAA+E,kBAAA3W;;mCAGA;gCACAoY,uBAAApc,IAAA4V,SAAAhR,IAAAlC,IAAAkT;;+BAGA;4BACA,IAAiC0G,wBAAA;4BACjC,IAAA1G,SAAAgF,eAAA;gCACA0B,mBAAA,IAAA5B,4BAAA9E,SAAAhR,KAAAgR,SAAA+E,kBAAAxX,SAAAyS,SAAAgF;mCAEA;gCACA0B,mBAAA1G;;4BAEAwG,uBAAApc,IAAA4V,SAAAhR,IAAAlC,IAAA4Z;;;oBAGA,OAAAF;;gBAOA,SAAAL,oBAAAlM,WAAAjH;oBACAiH,UAAAtD,QAAA,SAAA/I;wBACA,IAAAA,aAAAuT,MAAA;4BACAnO,IAAAtJ;gCAA0Bqc,SAAAnY;gCAAA0X,UAAA1X;;+BAE1B,IAAAA,iBAAA,cAAAmY,YAAA3Q,WAAA;4BACApC,IAAAtJ,KAAsC;+BAEtC,IAAAkE,aAAAkD,OAAA;4BACAqV,oBAAAvY,GAAAoF;+BAEA;4BACA,UAAA+M,qBAAAnS;;;oBAGA,OAAAoF;;gBAOA,SAAA2S,sBAAAzF,YAAAgF;oBACA,KAAAA,cAAA;wBACA,OAAAK,iBAAArF;2BAEA;wBACA,IAA6ByG,WAAAzB,aAAA9F,IAAA,SAAAsC;4BAA8C,SAAAA;;wBAC3E,OAAAwD,aAAA9F,IAAA,SAAAsC;4BAAkD,OAAAkF,cAAA1G,YAAAwB,GAAAiF;;;;gBAOlD,SAAApB,iBAAArF;oBACA,IAAyBC,SAAAqE,UAAAjN,WAAA2I;oBACzB,KAAAC,QACA;oBACA,IAAAA,OAAA0G,KAAA,SAAAzf;wBAAsC,OAAAA,KAAA;wBAAoB;wBAC1D,UAAA6Y,kBAAAC,YAAAC;;oBAEA,OAAAA,OAAAf,IAAA,SAAAhY;wBAAwC,OAAAwf,cAAA1G,YAAA9Y,GAAA+Y;;;gBAQxC,SAAAyG,cAAA1G,YAAAvQ,UAAAwQ;oBACA,IAAyBrN,QAAA;oBACzB,IAAyB4R,WAAA;oBACzB,KAAA5T,MAAA4D,QAAA/E,WAAA;wBACA,IAAAA,oBAAAmI,QAAA;4BACA,OAAAgP,kBAAAnX,SAAAmD,OAAA4R,UAAA;+BAEA;4BACA,OAAAoC,kBAAAnX,UAAA+U,UAAA;;;oBAGA,IAAyBC,aAAA;oBACzB,SAA8Bze,IAAA,GAAUA,IAAAyJ,SAAApE,UAAqBrF,GAAA;wBAC7D,IAA6B6gB,gBAAApX,SAAAzJ;wBAC7B,IAAA6gB,yBAAA5F,MAAA;4BACArO,QAAAiU;+BAEA,IAAAA,yBAAAjP,QAAA;4BACAhF,QAAAiU,cAAAjU;+BAEA,IAAAiU,yBAAAhP,UAAA;4BACA2M,WAAA;+BAEA,IAAAqC,yBAAA/O,QAAA+O,yBAAA9O,UAAA;4BACA0M,aAAAoC;;;oBAGAjU,QAAA+K,kBAAA/K;oBACA,IAAAA,SAAA;wBACA,OAAAgU,kBAAAhU,OAAA4R,UAAAC;2BAEA;wBACA,UAAA1E,kBAAAC,YAAAC;;;gBASA,SAAA2G,kBAAAhU,OAAA4R,UAAAC;oBACA,WAAAF,qBAAA9D,cAAA/X,IAAAkK,QAAA4R,UAAAC;;gBAIA,IAAqBqC,YAAA,IAAAte;gBAqCrB,IAAAue,qBAAA;oBACA,SAAAA;oBAqCAA,mBAAAC,UAAA,SAAAjN;wBACA,OAAAgM,2BAAAhM;;oBA+BAgN,mBAAAE,mBAAA,SAAAlN,WAAAvM;wBACA,IAAAA,gBAAA;4BAAoCA,SAAA;;wBACpC,IAA6B0Z,8BAAAH,mBAAAC,QAAAjN;wBAC7B,OAAAgN,mBAAAI,sBAAAD,6BAAA1Z;;oBA4BAuZ,mBAAAI,wBAAA,SAAApN,WAAAvM;wBACA,IAAAA,gBAAA;4BAAoCA,SAAA;;wBACpC,WAAA4Z,oBAAArN,WAAAvM;;oBAkBAuZ,mBAAAld,UAAA2D,SAAA;oBA+BAuZ,mBAAAld,UAAAwd,wBAAA,SAAAtN;oBA6BAgN,mBAAAld,UAAAyd,0BAAA,SAAAvN;oBA4BAgN,mBAAAld,UAAA0d,wBAAA,SAAAzH;oBA4BAiH,mBAAAld,UAAA2d,sBAAA,SAAA1H;oBAOAiH,mBAAAld,UAAAnB,MAAA,SAAAkK,OAAAmL;oBACA,OAAAgJ;;gBAEA,IAAAK,sBAAA;oBAMA,SAAAA,oBAAAK,YAAAC;wBACA,IAAAA,iBAAA;4BAAqCA,UAAA;;wBAErCzhB,KAAA0hB,uBAAA;wBACA1hB,KAAAwhB;wBACAxhB,KAAAyhB;wBACA,IAAAE,MAAAH,WAAApc;wBACApF,KAAA4hB,SAAA,IAAAjX,MAAAgX;wBACA3hB,KAAA6hB,OAAA,IAAAlX,MAAAgX;wBACA,SAAA5hB,IAAA,GAA2BA,IAAA4hB,KAAS5hB,KAAA;4BACpCC,KAAA4hB,OAAA7hB,KAAAyhB,WAAAzhB,GAAA8I,IAAAlC;4BACA3G,KAAA6hB,KAAA9hB,KAAA8gB;;;oBAQAM,oBAAAvd,UAAAnB,MAAA,SAAAkK,OAAAmL;wBACA,IAAAA,uBAAA;4BAA2CA,gBAAAF;;wBAC3C,OAAA5X,KAAA8hB,UAAAtH,cAAA/X,IAAAkK,QAAA,MAAAmL;;oBAEAvV,OAAAC,eAAA2e,oBAAAvd,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAyhB;;wBAC9Bzd,YAAA;wBACAD,cAAA;;oBAMAod,oBAAAvd,UAAAwd,wBAAA,SAAAtN;wBACA,IAA6BmN,8BAAAH,mBAAAC,QAAAjN;wBAC7B,OAAA9T,KAAAqhB,wBAAAJ;;oBAMAE,oBAAAvd,UAAAyd,0BAAA,SAAAvN;wBACA,IAA6BiO,MAAA,IAAAZ,oBAAArN;wBAC7BiO,IAAAN,UAAAzhB;wBACA,OAAA+hB;;oBAMAZ,oBAAAvd,UAAA0d,wBAAA,SAAAzH;wBACA,OAAA7Z,KAAAuhB,oBAAAT,mBAAAC,UAAAlH,YAAA;;oBAMAsH,oBAAAvd,UAAA2d,sBAAA,SAAA1H;wBACA,OAAA7Z,KAAAgiB,qBAAAnI;;oBAMAsH,oBAAAvd,UAAAqe,qBAAA,SAAA9Q;wBACA,IAAAA,QAAA,KAAAA,SAAAnR,KAAAwhB,WAAApc,QAAA;4BACA,UAAAgV,iBAAAjJ;;wBAEA,OAAAnR,KAAAwhB,WAAArQ;;oBAOAgQ,oBAAAvd,UAAAse,OAAA,SAAArI;wBACA,IAAA7Z,KAAA0hB,yBAAA1hB,KAAAmiB,0BAAA;4BACA,UAAA3I,sBAAAxZ,MAAA6Z,SAAAhR;;wBAEA,OAAA7I,KAAAgiB,qBAAAnI;;oBAKAsH,oBAAAvd,UAAAue,yBAAA;wBAA4E,OAAAniB,KAAA6hB,KAAAzc;;oBAK5E+b,oBAAAvd,UAAAoe,uBAAA,SAAAnI;wBACA,IAAAA,SAAAgF,eAAA;4BACA,IAAiChS,MAAA,IAAAlC,MAAAkP,SAAA+E,kBAAAxZ;4BACjC,SAAsCrF,IAAA,GAAUA,IAAA8Z,SAAA+E,kBAAAxZ,UAAuCrF,GAAA;gCACvF8M,IAAA9M,KAAAC,KAAAoiB,aAAAvI,mBAAA+E,kBAAA7e;;4BAEA,OAAA8M;+BAEA;4BACA,OAAA7M,KAAAoiB,aAAAvI,mBAAA+E,kBAAA;;;oBAQAuC,oBAAAvd,UAAAwe,eAAA,SAAAvI,UAAAiF;wBACA,IAAAzO,QAAArQ;wBACA,IAA6BP,UAAAqf,0BAAArf;wBAC7B,IAA6BggB;wBAC7B;4BACAA,OACAX,0BAAAC,aAAA9F,IAAA,SAAA9T;gCAA+E,OAAAkL,MAAAgS,2BAAAld;;0BAE/E,OAAA9C;4BACA,IAAAA,aAAA6W,yBAAA7W,aAAAoX,oBAAA;gCACApX,EAAAiX,OAAAtZ,MAAA6Z,SAAAhR;;4BAEA,MAAAxG;;wBAEA,IAA6BmK;wBAC7B;4BACAA,MAAA/M,QAAAoG,WAAA,GAAA4Z;0BAEA,OAAApd;4BACA,UAAAoX,mBAAAzZ,MAAAqC,KAAAoW,OAAAoB,SAAAhR;;wBAEA,OAAA2D;;oBAMA2U,oBAAAvd,UAAAye,6BAAA,SAAAld;wBACA,OAAAnF,KAAA8hB,UAAA3c,IAAA0D,KAAA1D,IAAAqZ,YAAArZ,IAAAoZ,WAAA,OAAA3G;;oBAQAuJ,oBAAAvd,UAAAke,YAAA,SAAAjZ,KAAA2V,YAAA1G;wBACA,IAAAjP,QAAAyZ,cAAA;4BACA,OAAAtiB;;wBAEA,IAAAwe,sBAAA3M,MAAA;4BACA,OAAA7R,KAAAuiB,cAAA1Z,KAAAiP;+BAEA;4BACA,OAAA9X,KAAAwiB,iBAAA3Z,KAAAiP,eAAA0G;;;oBAOA2C,oBAAAvd,UAAA6e,iBAAA,SAAAC;wBACA,SAAkC3iB,IAAA,GAAUA,IAAAC,KAAA4hB,OAAAxc,QAAwBrF,KAAA;4BACpE,IAAAC,KAAA4hB,OAAA7hB,OAAA2iB,OAAA;gCACA,IAAA1iB,KAAA6hB,KAAA9hB,OAAA8gB,WAAA;oCACA7gB,KAAA6hB,KAAA9hB,KAAAC,KAAAkiB,KAAAliB,KAAAwhB,WAAAzhB;;gCAEA,OAAAC,KAAA6hB,KAAA9hB;;;wBAGA,OAAA8gB;;oBAQAM,oBAAAvd,UAAA+e,eAAA,SAAA9Z,KAAAiP;wBACA,IAAAA,kBAAAF,oBAAA;4BACA,OAAAE;+BAEA;4BACA,UAAAyB,gBAAAvZ,MAAA6I;;;oBASAsY,oBAAAvd,UAAA2e,gBAAA,SAAA1Z,KAAAiP;wBACA,IAA6BtL,MAAAxM,KAAAyiB,eAAA5Z,IAAAlC;wBAC7B,OAAA6F,QAAAqU,YAAArU,MAAAxM,KAAA2iB,aAAA9Z,KAAAiP;;oBASAqJ,oBAAAvd,UAAA4e,mBAAA,SAAA3Z,KAAAiP,eAAA0G;wBACA,IAA6BuD;wBAC7B,IAAAvD,sBAAA1M,UAAA;4BACAiQ,MAAA/hB,KAAAyhB;+BAEA;4BACAM,MAAA/hB;;wBAEA,OAAA+hB,eAAAZ,qBAAA;4BACA,IAAiCyB,OAAA;4BACjC,IAAiCpW,MAAAoW,KAAAH,eAAA5Z,IAAAlC;4BACjC,IAAA6F,QAAAqU,WACA,OAAArU;4BACAuV,MAAAa,KAAAnB;;wBAEA,IAAAM,QAAA;4BACA,OAAAA,IAAAtf,IAAAoG,IAAA8D,OAAAmL;+BAEA;4BACA,OAAA9X,KAAA2iB,aAAA9Z,KAAAiP;;;oBAGAvV,OAAAC,eAAA2e,oBAAAvd,WAAA;wBAIAnB,KAAA;4BACA,IAAiCqR,YAAA+O,cAAA7iB,MAAA,SAAAyH;gCAAkD,cAAAA,EAAAoB,IAAAia,cAAA;+BACnFzL,KAAA;4BACA,2CAAAvD,YAAA;;wBAEA9P,YAAA;wBACAD,cAAA;;oBAKAod,oBAAAvd,UAAAkJ,WAAA;wBAA8D,OAAA9M,KAAA8iB;;oBAC9D,OAAA3B;;gBAEA,IAAqBmB,eAAA9H,cAAA/X,IAAAsV;gBAMrB,SAAA8K,cAAA1J,UAAAjW;oBACA,IAAyB2J,MAAA,IAAAlC,MAAAwO,SAAAqI,WAAApc;oBACzB,SAA8BrF,IAAA,GAAUA,IAAAoZ,SAAAqI,WAAApc,UAAgCrF,GAAA;wBACxE8M,IAAA9M,KAAAmD,GAAAiW,SAAA8I,mBAAAliB;;oBAEA,OAAA8M;;gBAoCA,IAAAkW,eAAA;oBAIA,SAAAA,aAAAC;wBACA,IAAAA,sBAAA;4BAA0CA,eAAA;;wBAI1ChjB,KAAAijB,WAAAxf;wBACAzD,KAAAgjB;;oBAMAD,aAAAnf,UAAAsf,cAAA,SAAA5a;wBACA,IAA6BqQ,gBAAA3Y,KAAAmjB,mBAAA7a;wBAC7B,IAA6BqR,gBAAA3Z,KAAAojB,mBAAA9a;wBAC7B,IAA6B+a,UAAArjB,KAAAsjB,aAAAhb;wBAC7BtI,KAAAijB,SAAA3a,MAAA,gBAAAtI,KAAAujB,gBAAAjb;wBACA,IAAAqQ,eAAA;4BACA3Y,KAAAijB,SAAA3a,MAAA,yBAAAtI,KAAAujB,gBAAA5K;;wBAEA,IAAAgB,eAAA;4BACA3Z,KAAAijB,SAAA3a,MAAA;4BACAtI,KAAAijB,SAAA3a,MAAAqR;;wBAEA,IAAA0J,SAAA;4BACArjB,KAAAijB,SAAA3a,MAAA;4BACAtI,KAAAijB,SAAA3a,MAAA+a;;wBAIA,IAAArjB,KAAAgjB,cACA,MAAA1a;;oBAOAya,aAAAnf,UAAA2f,kBAAA,SAAAjb;wBACA,OAAAA,iBAAA/G,QAAA+G,MAAAgQ,UAAAhQ,MAAAwE;;oBAOAiW,aAAAnf,UAAA0f,eAAA,SAAAhb;wBACA,IAAAA,OAAA;4BACA,OAAAA,MAAA+a,UAAA/a,MAAA+a,UACArjB,KAAAsjB,aAAA,MAAA3K;;wBAEA;;oBAOAoK,aAAAnf,UAAAuf,qBAAA,SAAA7a;wBACA,IAA6BjG,IAAA,MAAAsW;wBAC7B,OAAAtW,KAAA,EAAAsW,eAAA;4BACAtW,IAAA,EAAAsW;;wBAEA,OAAAtW;;oBAOA0gB,aAAAnf,UAAAwf,qBAAA,SAAA9a;wBACA,MAAAA,iBAAA/G,QACA;wBACA,IAA6Bc,IAAAiG;wBAC7B,IAA6BmQ,QAAApW,EAAAoW;wBAC7B,OAAApW,aAAAd,SAAA,EAAAoX,eAAA;4BACAtW,IAAA,EAAAsW;4BACA,IAAAtW,aAAAd,SAAAc,EAAAoW,OAAA;gCACAA,QAAApW,EAAAoW;;;wBAGA,OAAAA;;oBAEA,OAAAsK;;gBAMA,IAAAS,mBAAA;oBACA,SAAAA;oBAOAA,iBAAAC,QAAA,SAAAC,IAAAC;wBACA,IAA6Blb;wBAC7B,SAAA8H,KAAA,GAAAO,KAAAvO,OAAAoL,KAAA+V,KAAkDnT,KAAAO,GAAA1L,QAAgBmL,MAAA;4BAClE,IAAAjH,IAAAwH,GAAAP;4BACA9H,EAAAa,KAAAoa,GAAApa;;wBAEA,SAAA2N,KAAA,GAAA2M,KAAArhB,OAAAoL,KAAAgW,KAAkD1M,KAAA2M,GAAAxe,QAAgB6R,MAAA;4BAClE,IAAA3N,IAAAsa,GAAA3M;4BACAxO,EAAAa,KAAAqa,GAAAra;;wBAEA,OAAAb;;oBAOA+a,iBAAAK,SAAA,SAAAH,IAAAC;wBACA,IAA6BG,KAAAvhB,OAAAoL,KAAA+V;wBAC7B,IAA6BK,KAAAxhB,OAAAoL,KAAAgW;wBAC7B,IAAAG,GAAA1e,UAAA2e,GAAA3e,QAAA;4BACA;;wBAEA,SAAkCrF,IAAA,GAAUA,IAAA+jB,GAAA1e,QAAerF,KAAA;4BAC3D,IAAiC8I,MAAAib,GAAA/jB;4BACjC,IAAA2jB,GAAA7a,SAAA8a,GAAA9a,MAAA;gCACA;;;wBAGA;;oBAEA,OAAA2a;;gBAEA,IAAAQ,cAAA;oBACA,SAAAA;oBAOAA,YAAAC,WAAA,SAAAC,KAAA5X;wBACA,SAAkCvM,IAAAmkB,IAAA9e,SAAA,GAAuBrF,KAAA,GAAQA,KAAA;4BACjE,IAAAuM,UAAA4X,IAAAnkB,KAAA;gCACA,OAAAmkB,IAAAnkB;;;wBAGA;;oBAOAikB,YAAAG,YAAA,SAAAC,MAAAC;wBACA,SAAkCtkB,IAAA,GAAUA,IAAAskB,MAAAjf,UAAkBrF,GAAA;4BAC9D,IAAiCoR,QAAAiT,KAAA9gB,QAAA+gB,MAAAtkB;4BACjC,IAAAoR,SAAA;gCACAiT,KAAA1e,OAAAyL,OAAA;;;;oBASA6S,YAAAxZ,SAAA,SAAA4Z,MAAAE;wBACA,IAA6BnT,QAAAiT,KAAA9gB,QAAAghB;wBAC7B,IAAAnT,SAAA;4BACAiT,KAAA1e,OAAAyL,OAAA;4BACA;;wBAEA;;oBAOA6S,YAAAH,SAAA,SAAA/jB,GAAA2H;wBACA,IAAA3H,EAAAsF,UAAAqC,EAAArC,QACA;wBACA,SAAkCrF,IAAA,GAAUA,IAAAD,EAAAsF,UAAcrF,GAAA;4BAC1D,IAAAD,EAAAC,OAAA0H,EAAA1H,IACA;;wBAEA;;oBAMAikB,YAAAO,UAAA,SAAAH;wBACA,OAAAA,KAAAI,OAAA,SAAAC,MAAA/c;4BACA,IAAiCgd,WAAA/Z,MAAA4D,QAAA7G,QAAAsc,YAAAO,QAAA7c;4BACjC,YAAAsJ,OAAA0T;;;oBAGA,OAAAV;;gBAMA,SAAAW,mBAAAnY;oBACA,KAAAW,WAAAX,MACA;oBACA,OAAA7B,MAAA4D,QAAA/B,UACAA,eAAAqB,QACAL,uBAAAhB;;gBAQA,SAAAoY,kBAAA9kB,GAAA2H,GAAAod;oBACA,IAAyBC,YAAAhlB,EAAA0N;oBACzB,IAAyBuX,YAAAtd,EAAA+F;oBACzB;wBACA,IAA6BwX,QAAAF,UAAAG;wBAC7B,IAA6BC,QAAAH,UAAAE;wBAC7B,IAAAD,MAAAG,QAAAD,MAAAC,MACA;wBACA,IAAAH,MAAAG,QAAAD,MAAAC,MACA;wBACA,KAAAN,WAAAG,MAAA9gB,OAAAghB,MAAAhhB,QACA;;;gBAQA,SAAAkhB,gBAAA5Y,KAAAtJ;oBACA,IAAAyH,MAAA4D,QAAA/B,MAAA;wBACA,SAAkCzM,IAAA,GAAUA,IAAAyM,IAAApH,QAAgBrF,KAAA;4BAC5DmD,GAAAsJ,IAAAzM;;2BAGA;wBACA,IAA6B2N,WAAAlB,IAAAgB;wBAC7B,IAA6B9F,YAAA;wBAC7B,SAAAA,OAAAgG,SAAAuX,QAAA;4BACA/hB,GAAAwE,KAAAxD;;;;gBAUA,SAAAmhB,UAAA7Y;oBAGA,SAAAA,kBAAA8Y,SAAA;;gBAOA,SAAAC,aAAA/Y;oBACA,UAAAA,WAAAhB,uBAAAga;;gBAOA,IAAqBC,kBAAA,IAAAzT,YAAA;gBAMrB,IAAA0T,wBAAA;oBAIA,SAAAA,sBAAAC;wBACA,IAAAtV,QAAArQ;wBACAA,KAAA4lB,QAAA;wBACA,IAAAC;wBACA,IAAAF,UAAA;4BACA,SAAA5lB,IAAA,GAA+BA,IAAA4lB,SAAAvgB,QAAqBrF,KAAA;gCACpD,IAAA+lB,aAAAH,SAAA5lB;gCACA,IAAAslB,UAAAS,aAAA;oCACAD,kBAAAtiB,KAAAuiB;;;;wBAIA9lB,KAAA+lB,eAAAC,QAAAC,IAAAJ,mBAAAP,KAAA;4BAAiFjV,MAAAuV,QAAA;;wBACjF,IAAAC,kBAAAzgB,WAAA;4BACApF,KAAA4lB,QAAA;;;oBAGArjB,OAAAC,eAAAkjB,sBAAA9hB,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA4lB;;wBAC9B5hB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAkjB,sBAAA9hB,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA+lB;;wBAC9B/hB,YAAA;wBACAD,cAAA;;oBAEA2hB,sBAAA/c;wBACa9H,MAAAsK;;oBAGbua,sBAAAxT,iBAAA;wBAA4D;4BAC/CrR,MAAA8J;4BAAAhC;gCAA4B9H,MAAA8Q;gCAAArB,QAAAmV;;gCAA4C5kB,MAAA+Q;;;;oBAErF,OAAA8T;;gBAaA,IAAqBQ,SAAA,IAAAlU,YAAA;gBAIrB,SAAAmU;oBACA,YAAAC;;gBAMA,IAAqBC;oBACrBzG,SAAAsG;oBACA3G,YAAA4G;oBACA1G;;gBAKA,SAAA2G;oBACA,OAAAhY,OAAAkY,aAAA,KAAAC,KAAAC,MAAAD,KAAAE,WAAA;;gBAMA,IAAqBC,uBAAA,IAAA1U,YAAA;gBASrB,IAAqB2U,yBAAA,IAAA3U,YAAA;gBAKrB,IAAqB4U,mBAAA,IAAA5U,YAAA;gBAErB,IAAA6U,UAAA;oBACA,SAAAA;oBAMAA,QAAAjjB,UAAA0J,MAAA,SAAAgL;wBAAoDjL,MAAAiL;;oBAKpDuO,QAAAjjB,UAAAF,OAAA,SAAA4U;wBAAqD5U,KAAA4U;;oBACrDuO,QAAAle;wBACa9H,MAAAsK;;oBAGb0b,QAAA3U,iBAAA;wBAA8C;;oBAC9C,OAAA2U;;gBAUA,IAAAC,cAAA9mB,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAOA,IAAA4O,6BAAA,SAAA1O;oBACAyO,YAAAC,4BAAA1O;oBAIA,SAAA0O,2BAAAC;wBACA3O,OAAAvU,KAAA9D,MAAA,oCAAA0M,UAAAsa,YAAA;wBACAhnB,KAAAgnB;;oBAEA,OAAAD;kBACK3O;gBAML,IAAA6O,+BAAA;oBAKA,SAAAA,6BAAAC,iBAAAC;wBACAnnB,KAAAknB;wBACAlnB,KAAAmnB;;oBAEA,OAAAF;;gBAKA,SAAAG;oBACA,UAAA7lB,MAAA;;gBAYA,IAAA8lB,WAAA;oBACA,SAAAA;oBASAA,SAAAzjB,UAAA0jB,oBAAA,SAAAC;wBAAsE,MAAAH;;oBAMtEC,SAAAzjB,UAAA4jB,qBAAA,SAAAD;wBAAuE,MAAAH;;oBAMvEC,SAAAzjB,UAAA6jB,oCAAA,SAAAF;wBACA,MAAAH;;oBAOAC,SAAAzjB,UAAA8jB,qCAAA,SAAAH;wBACA,MAAAH;;oBAUAC,SAAAzjB,UAAA+jB,wBAAA,SAAA7c;wBAAyE,MAAAsc;;oBAKzEC,SAAAzjB,UAAAgkB,aAAA;oBAMAP,SAAAzjB,UAAAikB,gBAAA,SAAAhnB;oBACAwmB,SAAA1e;wBACa9H,MAAAsK;;oBAGbkc,SAAAnV,iBAAA;wBAA+C;;oBAC/C,OAAAmV;;gBAOA,IAAqBS,mBAAA,IAAA9V,YAAA;gBAOrB,IAAA+V,kBAAA;oBACA,SAAAA;oBAOAA,gBAAAnkB,UAAAokB,iBAAA,SAAAhhB;oBACA,OAAA+gB;;gBAGA,IAAAE,aAAA;oBAIA,SAAAA,WAAAC;wBACAloB,KAAAkoB;;oBAEA,OAAAD;;gBAUA,IAAAE,cAAAnoB,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAiDA,IAAAiQ,eAAA,SAAA/P;oBACA8P,YAAAC,cAAA/P;oBAMA,SAAA+P,aAAAC;wBACA,IAAAA,iBAAA;4BAAqCA,UAAA;;wBACrChQ,OAAAvU,KAAA9D;wBACAA,KAAAsoB,YAAAD;;oBAMAD,aAAAxkB,UAAA2kB,OAAA,SAAArkB;wBAAwDmU,OAAAzU,UAAAqhB,KAAAnhB,KAAA9D,MAAAkE;;oBAOxDkkB,aAAAxkB,UAAA4kB,YAAA,SAAAC,iBAAAngB,OAAAogB;wBACA,IAA6BC;wBAC7B,IAA6BC,UAAA,SAAA/mB;4BAA8B;;wBAC3D,IAA6BgnB,aAAA;4BAA8B;;wBAC3D,IAAAJ,8CAAA;4BACAE,cAAA3oB,KAAAsoB,YAAA,SAAApkB;gCACA4kB,WAAA;oCAA4C,OAAAL,gBAAAxD,KAAA/gB;;gCAC3B,SAAAA;gCAAqBukB,gBAAAxD,KAAA/gB;;4BACtC,IAAAukB,gBAAAngB,OAAA;gCACAsgB,UAAA5oB,KAAAsoB,YAAA,SAAAzmB;oCAA+DinB,WAAA;wCAAyB,OAAAL,gBAAAngB,MAAAzG;;oCACxF,SAAAA;oCAAwC4mB,gBAAAngB,MAAAzG;;;4BAExC,IAAA4mB,gBAAAC,UAAA;gCACAG,aAAA7oB,KAAAsoB,YAAA;oCAA+DQ,WAAA;wCAAyB,OAAAL,gBAAAC;;oCACxF;oCAAqCD,gBAAAC;;;+BAGrC;4BACAC,cAAA3oB,KAAAsoB,YAAA,SAAApkB;gCAAiE4kB,WAAA;oCAAyB,OAAAL,gBAAAvkB;;gCAC1F,SAAAA;gCAAsCukB,gBAAAvkB;;4BACtC,IAAAoE,OAAA;gCACAsgB,UACA5oB,KAAAsoB,YAAA,SAAAzmB;oCAAyDinB,WAAA;wCAAyB,OAAAxgB,MAAAzG;;oCAAyB,SAAAA;oCAAmByG,MAAAzG;;;4BAE9H,IAAA6mB,UAAA;gCACAG,aACA7oB,KAAAsoB,YAAA;oCAAsDQ,WAAA;wCAAyB,OAAAJ;;oCAAyB;oCAAgBA;;;;wBAGxH,OAAArQ,OAAAzU,UAAA4kB,UAAA1kB,KAAA9D,MAAA2oB,aAAAC,SAAAC;;oBAEA,OAAAT;kBACK1c,aAAAqd;gBA0EL,IAAAC,SAAA;oBAIA,SAAAA,OAAAlY;wBACA,IAAAmG,KAAAnG,GAAAmY,6CAAAhS,YAAA,YAAAA;wBACAjX,KAAAkpB,wBAAA;wBACAlpB,KAAAmpB,wBAAA;wBACAnpB,KAAAopB,YAAA;wBACAppB,KAAAqpB,WAAA;wBACArpB,KAAAspB,cAAA,IAAAlB,aAAA;wBACApoB,KAAAupB,oBAAA,IAAAnB,aAAA;wBACApoB,KAAAwpB,YAAA,IAAApB,aAAA;wBACApoB,KAAAypB,iBAAA,IAAArB,aAAA;wBACA,WAAAnc,QAAA;4BACA,UAAA1K,MAAA;;wBAEA0K,KAAAyd;wBACA1pB,KAAA2pB,QAAA3pB,KAAA4pB,QAAA3d,KAAAC;wBACA,IAAAD,KAAA;4BACAjM,KAAA4pB,QAAA5pB,KAAA4pB,MAAAC,KAAA5d,KAAA;;wBAEA,IAAAgd,wBAAAhd,KAAA;4BACAjM,KAAA4pB,QAAA5pB,KAAA4pB,MAAAC,KAAA5d,KAAA;;wBAEAjM,KAAA8pB;;oBAKAd,OAAAe,kBAAA;wBAA8C,OAAA9d,KAAAC,QAAAzJ,IAAA;;oBAI9CumB,OAAAgB,sBAAA;wBACA,KAAAhB,OAAAe,mBAAA;4BACA,UAAAxoB,MAAA;;;oBAMAynB,OAAAiB,yBAAA;wBACA,IAAAjB,OAAAe,mBAAA;4BACA,UAAAxoB,MAAA;;;oBAiBAynB,OAAAplB,UAAAsmB,MAAA,SAAAhnB;wBAA8C,OAAAlD,KAAA4pB,MAAAM,IAAAhnB;;oBAO9C8lB,OAAAplB,UAAAumB,aAAA,SAAAjnB;wBAAqD,OAAAlD,KAAA4pB,MAAAO,WAAAjnB;;oBAerD8lB,OAAAplB,UAAAwmB,oBAAA,SAAAlnB;wBAA4D,OAAAlD,KAAA2pB,MAAAO,IAAAhnB;;oBAC5DX,OAAAC,eAAAwmB,OAAAplB,WAAA;wBAKAnB,KAAA;4BAA8B,OAAAzC,KAAAspB;;wBAC9BtlB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAwmB,OAAAplB,WAAA;wBAOAnB,KAAA;4BAA8B,OAAAzC,KAAAupB;;wBAC9BvlB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAwmB,OAAAplB,WAAA;wBAOAnB,KAAA;4BAA8B,OAAAzC,KAAAwpB;;wBAC9BxlB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAwmB,OAAAplB,WAAA;wBAKAnB,KAAA;4BAA8B,OAAAzC,KAAAypB;;wBAC9BzlB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAwmB,OAAAplB,WAAA;wBAKAnB,KAAA;4BAA8B,OAAAzC,KAAAopB;;wBAC9BplB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAwmB,OAAAplB,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAkpB;;wBAC9BllB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAwmB,OAAAplB,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAmpB;;wBAC9BnlB,YAAA;wBACAD,cAAA;;oBAKAilB,OAAAplB,UAAAymB,cAAA;wBACA,IAAAha,QAAArQ;wBACA,IAAAA,KAAAqpB,YAAA,MAAArpB,KAAAkpB,0BAAAlpB,KAAAopB,WAAA;4BACA;gCACAppB,KAAAqpB;gCACArpB,KAAAupB,kBAAAhB,KAAA;8BAEA;gCACAvoB,KAAAqpB;gCACA,KAAArpB,KAAAkpB,uBAAA;oCACA;wCACAlpB,KAAAoqB,kBAAA;4CAAgE,OAAA/Z,MAAAmZ,UAAAjB,KAAA;;sCAEhE;wCACAvoB,KAAAopB,YAAA;;;;;;oBASAJ,OAAAplB,UAAAkmB,mCAAA;wBACA,IAAAzZ,QAAArQ;wBACAA,KAAA4pB,QAAA5pB,KAAA4pB,MAAAC;4BACAlmB,MAAA;4BACA0G;gCAA+CigB,eAAA;;4BAC/CC,cAAA,SAAAC,UAAAte,SAAAtD,QAAA6hB,MAAAC,WAAAC;gCACA;oCACAta,MAAAua;oCACA,OAAAJ,SAAAK,WAAAjiB,QAAA6hB,MAAAC,WAAAC;kCAEA;oCACAta,MAAAya;;;4BAGAC,UAAA,SAAAP,UAAAte,SAAAtD,QAAAvH,UAAAqpB,WAAAC,WAAAK;gCACA;oCACA3a,MAAAua;oCACA,OAAAJ,SAAAS,OAAAriB,QAAAvH,UAAAqpB,WAAAC,WAAAK;kCAEA;oCACA3a,MAAAya;;;4BAGAI,WAAA,SAAAV,UAAAte,SAAAtD,QAAAuiB;gCACAX,SAAAY,QAAAxiB,QAAAuiB;gCACA,IAAAjf,YAAAtD,QAAA;oCAGA,IAAAuiB,aAAAE,UAAA;wCACAhb,MAAAib,gBAAAH,aAAAI;2CAEA,IAAAJ,aAAAE,UAAA;wCACAhb,MAAAmb,gBAAAL,aAAAM;;;;4BAIAC,eAAA,SAAAlB,UAAAte,SAAAtD,QAAAN;gCACAkiB,SAAAtH,YAAAta,QAAAN;gCACA+H,MAAAsb,aAAArjB;gCACA;;;;oBAOA0gB,OAAAplB,UAAAgnB,UAAA;wBACA5qB,KAAAqpB;wBACA,IAAArpB,KAAAopB,WAAA;4BACAppB,KAAAopB,YAAA;4BACAppB,KAAAspB,YAAAf,KAAA;;;oBAMAS,OAAAplB,UAAAknB,UAAA;wBACA9qB,KAAAqpB;wBACArpB,KAAAqqB;;oBAMArB,OAAAplB,UAAA0nB,kBAAA,SAAAM;wBACA5rB,KAAAkpB,wBAAA0C;wBACA5rB,KAAAqqB;;oBAMArB,OAAAplB,UAAA4nB,kBAAA,SAAAK;wBAAqE7rB,KAAAmpB,wBAAA0C;;oBAKrE7C,OAAAplB,UAAA+nB,eAAA,SAAArjB;wBAA0DtI,KAAAypB,eAAAlB,KAAAjgB;;oBAC1D,OAAA0gB;;gBAGA,IAAA8C,iBAAA;oBAIA,SAAAA,eAAAC;wBACA/rB,KAAA+rB;wBACA/rB,KAAAgsB;;oBAMAF,eAAAloB,UAAAqoB,UAAA,SAAAC;wBAA8DlsB,KAAAgsB,QAAAzoB,KAAA2oB;;oBAI9DJ,eAAAloB,UAAAuoB,QAAA;wBACA,IAAA9b,QAAArQ;wBAQA,IAAAA,KAAAgsB,QAAA5mB,QAAA;4BACApF,KAAA+rB,MAAA3B,kBAAA;gCAIApE,QAAAjF,QAAA,MAAAuE,KAAA;oCAA4D,OAAAjV,MAAA+b;;;;;oBAO5DN,eAAAloB,UAAAwoB,qBAAA;wBACApD,OAAAiB;wBACA,OAAAjqB,KAAAgsB,QAAA5mB,QAAA;4BACA,IAAiC8mB,SAAAlsB,KAAAgsB,QAAAK;4BAIjC,KAAAH,OAAAI,cAAA;gCACAJ,OAAAK;;;;oBAIAT,eAAAnjB;wBACa9H,MAAAsK;;oBAGb2gB,eAAA5Z,iBAAA;wBAAqD;4BACxCrR,MAAAmoB;;;oBAEb,OAAA8C;;gBAGA,IAAAU,+BAAA;oBACA,SAAAA;oBAMAA,6BAAA5oB,UAAA6oB,WAAA,SAAAjgB;wBAA0E,OAAAmY,mBAAAnY;;oBAM1EggB,6BAAA5oB,UAAAwL,SAAA,SAAAsd,OAAAC;wBACA,WAAAC,sBAAAD;;oBAEA,OAAAH;;gBAEA,IAAqBK,kBAAA,SAAA1b,OAAAzJ;oBAA8C,OAAAA;;gBAInE,IAAAklB,wBAAA;oBAIA,SAAAA,sBAAAE;wBACA9sB,KAAA8sB;wBACA9sB,KAAA+sB,UAAA;wBACA/sB,KAAAgtB,cAAA;wBACAhtB,KAAAitB,iBAAA;wBACAjtB,KAAAktB,mBAAA;wBACAltB,KAAAmtB,kBAAA;wBACAntB,KAAAotB,UAAA;wBACAptB,KAAAqtB,UAAA;wBACArtB,KAAAstB,iBAAA;wBACAttB,KAAAutB,iBAAA;wBACAvtB,KAAAwtB,aAAA;wBACAxtB,KAAAytB,aAAA;wBACAztB,KAAA0tB,gBAAA;wBACA1tB,KAAA2tB,gBAAA;wBACA3tB,KAAA4tB,uBAAA;wBACA5tB,KAAA6tB,uBAAA;wBACA7tB,KAAA8sB,aAAA9sB,KAAA8sB,cAAAD;;oBAEAtqB,OAAAC,eAAAoqB,sBAAAhpB,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAgtB;;wBAC9BhpB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAoqB,sBAAAhpB,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA+sB;;wBAC9B/oB,YAAA;wBACAD,cAAA;;oBAMA6oB,sBAAAhpB,UAAAkqB,cAAA,SAAA5qB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAAotB,SAAuCW,WAAA,MAAiBA,gBAAAC,OAAA;4BACxD9qB,GAAA6qB;;;oBAOAnB,sBAAAhpB,UAAAqqB,mBAAA,SAAA/qB;wBACA,IAA6BgrB,SAAAluB,KAAAotB;wBAC7B,IAA6Be,aAAAnuB,KAAA0tB;wBAC7B,IAA6BU,kBAAA;wBAC7B,IAA6BC,cAAA;wBAC7B,OAAAH,UAAAC,YAAA;4BAGA,IAAiCJ,UAAAI,cACjCD,UACAA,OAAAI,eAAAC,iBAAAJ,YAAAC,iBAAAC,eACAH,SACAC;4BACA,IAAiCK,mBAAAD,iBAAAR,QAAAK,iBAAAC;4BACjC,IAAiCC,eAAAP,OAAAO;4BAEjC,IAAAP,WAAAI,YAAA;gCACAC;gCACAD,wBAAAM;mCAEA;gCACAP,gBAAAF;gCACA,IAAAD,OAAAW,iBAAA;oCACAN;uCAEA;oCAEA,KAAAC,aACAA;oCACA,IAAyCM,yBAAAH,mBAAAJ;oCACzC,IAAyCQ,oBAAAN,eAAAF;oCACzC,IAAAO,0BAAAC,mBAAA;wCACA,SAAkD7uB,IAAA,GAAUA,IAAA4uB,wBAA4B5uB,KAAA;4CACxF,IAAiD8uB,SAAA9uB,IAAAsuB,YAAAjpB,SAAAipB,YAAAtuB,KAAAsuB,YAAAtuB,KAAA;4CACjD,IAAiDoR,QAAA0d,SAAA9uB;4CACjD,IAAA6uB,qBAAAzd,iBAAAwd,wBAAA;gDACAN,YAAAtuB,KAAA8uB,SAAA;;;wCAGA,IAA6CH,gBAAAX,OAAAW;wCAC7CL,YAAAK,iBAAAE,oBAAAD;;;;4BAIA,IAAAH,qBAAAF,cAAA;gCACAprB,GAAA6qB,QAAAS,kBAAAF;;;;oBAQA1B,sBAAAhpB,UAAAkrB,sBAAA,SAAA5rB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAAmtB,iBAA+CY,WAAA,MAAiBA,gBAAAgB,eAAA;4BAChE7rB,GAAA6qB;;;oBAOAnB,sBAAAhpB,UAAAorB,mBAAA,SAAA9rB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAAstB,gBAA8CS,WAAA,MAAiBA,gBAAAkB,YAAA;4BAC/D/rB,GAAA6qB;;;oBAOAnB,sBAAAhpB,UAAAsrB,mBAAA,SAAAhsB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAAwtB,YAA0CO,WAAA,MAAiBA,gBAAAoB,YAAA;4BAC3DjsB,GAAA6qB;;;oBAOAnB,sBAAAhpB,UAAAwrB,qBAAA,SAAAlsB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAA0tB,eAA6CK,WAAA,MAAiBA,gBAAAU,cAAA;4BAC9DvrB,GAAA6qB;;;oBAOAnB,sBAAAhpB,UAAAyrB,wBAAA,SAAAnsB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAA4tB,sBAAoDG,WAAA,MAAiBA,gBAAAuB,qBAAA;4BACrEpsB,GAAA6qB;;;oBAOAnB,sBAAAhpB,UAAA2rB,OAAA,SAAAC;wBACA,IAAA/iB,QAAA+iB,aACAA;wBACA,KAAA7K,mBAAA6K,aAAA;4BACA,UAAAjuB,MAAA,2BAAAiuB,aAAA;;wBAEA,IAAAxvB,KAAA2F,MAAA6pB,aAAA;4BACA,OAAAxvB;+BAEA;4BACA;;;oBAMA4sB,sBAAAhpB,UAAA6rB,YAAA;oBAKA7C,sBAAAhpB,UAAA+B,QAAA,SAAA6pB;wBACA,IAAAnf,QAAArQ;wBACAA,KAAA0vB;wBACA,IAA6B3B,SAAA/tB,KAAAotB;wBAC7B,IAA6BuC,aAAA;wBAC7B,IAA6Bxe;wBAC7B,IAA6BzJ;wBAC7B,IAA6BkoB;wBAC7B,IAAAjlB,MAAA4D,QAAAihB,aAAA;4BACA,IAAiCpL,OAAAoL;4BACjCxvB,KAAA+sB,UAAAyC,WAAApqB;4BACA,SAAsCyqB,UAAA,GAAgBA,UAAA7vB,KAAA+sB,SAAwB8C,WAAA;gCAC9EnoB,OAAA0c,KAAAyL;gCACAD,cAAA5vB,KAAA8sB,WAAA+C,SAAAnoB;gCACA,IAAAqmB,WAAA,SAAA9gB,eAAA8gB,OAAA+B,WAAAF,cAAA;oCACA7B,SAAA/tB,KAAA+vB,UAAAhC,QAAArmB,MAAAkoB,aAAAC;oCACAF,aAAA;uCAEA;oCACA,IAAAA,YAAA;wCAEA5B,SAAA/tB,KAAAgwB,mBAAAjC,QAAArmB,MAAAkoB,aAAAC;;oCAEA,KAAA5iB,eAAA8gB,OAAArmB,aACA1H,KAAAiwB,mBAAAlC,QAAArmB;;gCAEAqmB,gBAAAC;;+BAGA;4BACA7c,QAAA;4BACAiU,gBAAAoK,YAAA,SAAA9nB;gCACAkoB,cAAAvf,MAAAyc,WAAA3b,OAAAzJ;gCACA,IAAAqmB,WAAA,SAAA9gB,eAAA8gB,OAAA+B,WAAAF,cAAA;oCACA7B,SAAA1d,MAAA0f,UAAAhC,QAAArmB,MAAAkoB,aAAAze;oCACAwe,aAAA;uCAEA;oCACA,IAAAA,YAAA;wCAEA5B,SAAA1d,MAAA2f,mBAAAjC,QAAArmB,MAAAkoB,aAAAze;;oCAEA,KAAAlE,eAAA8gB,OAAArmB,aACA2I,MAAA4f,mBAAAlC,QAAArmB;;gCAEAqmB,gBAAAC;gCACA7c;;4BAEAnR,KAAA+sB,UAAA5b;;wBAEAnR,KAAAkwB,UAAAnC;wBACA/tB,KAAAgtB,cAAAwC;wBACA,OAAAxvB,KAAAmwB;;oBAEA5tB,OAAAC,eAAAoqB,sBAAAhpB,WAAA;wBAIAnB,KAAA;4BACA,OAAAzC,KAAAstB,mBAAA,QAAAttB,KAAAwtB,eAAA,QACAxtB,KAAA0tB,kBAAA,QAAA1tB,KAAA4tB,yBAAA;;wBAEA5pB,YAAA;wBACAD,cAAA;;oBAWA6oB,sBAAAhpB,UAAA8rB,SAAA;wBACA,IAAA1vB,KAAAmwB,SAAA;4BACA,IAAiCpC,cAAA;4BACjC,IAAiCqC,kBAAA;4BACjC,KAAArC,SAAA/tB,KAAAmtB,kBAAAntB,KAAAotB,SAAkEW,WAAA,MAAiBA,gBAAAC,OAAA;gCACnFD,OAAAgB,gBAAAhB,OAAAC;;4BAEA,KAAAD,SAAA/tB,KAAAstB,gBAAkDS,WAAA,MAAiBA,gBAAAkB,YAAA;gCACnElB,OAAAW,gBAAAX,OAAAO;;4BAEAtuB,KAAAstB,iBAAAttB,KAAAutB,iBAAA;4BACA,KAAAQ,SAAA/tB,KAAAwtB,YAA8CO,WAAA,MAAiBA,SAAAqC,YAAA;gCAC/DrC,OAAAW,gBAAAX,OAAAO;gCACA8B,aAAArC,OAAAoB;;4BAEAnvB,KAAAwtB,aAAAxtB,KAAAytB,aAAA;4BACAztB,KAAA0tB,gBAAA1tB,KAAA2tB,gBAAA;4BACA3tB,KAAA4tB,uBAAA5tB,KAAA6tB,uBAAA;;;oBAkBAjB,sBAAAhpB,UAAAmsB,YAAA,SAAAhC,QAAArmB,MAAAkoB,aAAAze;wBAEA,IAA6Bkf;wBAC7B,IAAAtC,WAAA;4BACAsC,iBAAArwB,KAAAqtB;+BAEA;4BACAgD,iBAAAtC,OAAAuC;4BAEAtwB,KAAAuwB,QAAAxC;;wBAGAA,SAAA/tB,KAAAitB,mBAAA,cAAAjtB,KAAAitB,eAAAxqB,IAAAmtB,aAAAze;wBACA,IAAA4c,WAAA;4BAGA,KAAA9gB,eAAA8gB,OAAArmB,aACA1H,KAAAiwB,mBAAAlC,QAAArmB;4BACA1H,KAAAwwB,WAAAzC,QAAAsC,gBAAAlf;+BAEA;4BAEA4c,SAAA/tB,KAAAktB,qBAAA,cAAAltB,KAAAktB,iBAAAzqB,IAAAmtB;4BACA,IAAA7B,WAAA;gCAGA,KAAA9gB,eAAA8gB,OAAArmB,aACA1H,KAAAiwB,mBAAAlC,QAAArmB;gCACA1H,KAAAywB,eAAA1C,QAAAsC,gBAAAlf;mCAEA;gCAEA4c,SACA/tB,KAAA0wB,UAAA,IAAAC,uBAAAjpB,MAAAkoB,cAAAS,gBAAAlf;;;wBAGA,OAAA4c;;oBAkCAnB,sBAAAhpB,UAAAosB,qBAAA,SAAAjC,QAAArmB,MAAAkoB,aAAAze;wBACA,IAA6Byf,iBAAA5wB,KAAAktB,qBAAA,cAAAltB,KAAAktB,iBAAAzqB,IAAAmtB;wBAC7B,IAAAgB,mBAAA;4BACA7C,SAAA/tB,KAAAywB,eAAAG,gBAAA7C,OAAAuC,OAAAnf;+BAEA,IAAA4c,OAAAO,gBAAAnd,OAAA;4BACA4c,OAAAO,eAAAnd;4BACAnR,KAAA6wB,YAAA9C,QAAA5c;;wBAEA,OAAA4c;;oBAWAnB,sBAAAhpB,UAAAssB,YAAA,SAAAnC;wBAEA,OAAAA,WAAA;4BACA,IAAiCqC,aAAArC,OAAAC;4BACjChuB,KAAA8wB,eAAA9wB,KAAA+wB,QAAAhD;4BACAA,SAAAqC;;wBAEA,IAAApwB,KAAAktB,qBAAA;4BACAltB,KAAAktB,iBAAA8D;;wBAEA,IAAAhxB,KAAAutB,mBAAA;4BACAvtB,KAAAutB,eAAA0B,aAAA;;wBAEA,IAAAjvB,KAAAytB,eAAA;4BACAztB,KAAAytB,WAAA0B,aAAA;;wBAEA,IAAAnvB,KAAAqtB,YAAA;4BACArtB,KAAAqtB,QAAAW,QAAA;;wBAEA,IAAAhuB,KAAA2tB,kBAAA;4BACA3tB,KAAA2tB,cAAAc,eAAA;;wBAEA,IAAAzuB,KAAA6tB,yBAAA;4BACA7tB,KAAA6tB,qBAAAyB,sBAAA;;;oBAUA1C,sBAAAhpB,UAAA6sB,iBAAA,SAAA1C,QAAAkD,YAAA9f;wBACA,IAAAnR,KAAAktB,qBAAA;4BACAltB,KAAAktB,iBAAA1iB,OAAAujB;;wBAEA,IAA6BmD,OAAAnD,OAAAoD;wBAC7B,IAA6BlM,OAAA8I,OAAAU;wBAC7B,IAAAyC,SAAA;4BACAlxB,KAAA0tB,gBAAAzI;+BAEA;4BACAiM,KAAAzC,eAAAxJ;;wBAEA,IAAAA,SAAA;4BACAjlB,KAAA2tB,gBAAAuD;+BAEA;4BACAjM,KAAAkM,eAAAD;;wBAEAlxB,KAAAoxB,aAAArD,QAAAkD,YAAA9f;wBACAnR,KAAA6wB,YAAA9C,QAAA5c;wBACA,OAAA4c;;oBASAnB,sBAAAhpB,UAAA4sB,aAAA,SAAAzC,QAAAkD,YAAA9f;wBACAnR,KAAA+wB,QAAAhD;wBACA/tB,KAAAoxB,aAAArD,QAAAkD,YAAA9f;wBACAnR,KAAA6wB,YAAA9C,QAAA5c;wBACA,OAAA4c;;oBASAnB,sBAAAhpB,UAAA8sB,YAAA,SAAA3C,QAAAkD,YAAA9f;wBACAnR,KAAAoxB,aAAArD,QAAAkD,YAAA9f;wBACA,IAAAnR,KAAAutB,mBAAA;4BAGAvtB,KAAAutB,iBAAAvtB,KAAAstB,iBAAAS;+BAEA;4BAIA/tB,KAAAutB,iBAAAvtB,KAAAutB,eAAA0B,aAAAlB;;wBAEA,OAAAA;;oBASAnB,sBAAAhpB,UAAAwtB,eAAA,SAAArD,QAAAkD,YAAA9f;wBAKA,IAA6B8T,OAAAgM,eAAA,OAAAjxB,KAAAotB,UAAA6D,WAAAjD;wBAI7BD,OAAAC,QAAA/I;wBACA8I,OAAAuC,QAAAW;wBACA,IAAAhM,SAAA;4BACAjlB,KAAAqtB,UAAAU;+BAEA;4BACA9I,KAAAqL,QAAAvC;;wBAEA,IAAAkD,eAAA;4BACAjxB,KAAAotB,UAAAW;+BAEA;4BACAkD,WAAAjD,QAAAD;;wBAEA,IAAA/tB,KAAAitB,mBAAA;4BACAjtB,KAAAitB,iBAAA,IAAAoE;;wBAEArxB,KAAAitB,eAAAqE,IAAAvD;wBACAA,OAAAO,eAAAnd;wBACA,OAAA4c;;oBAOAnB,sBAAAhpB,UAAA2sB,UAAA,SAAAxC;wBACA,OAAA/tB,KAAA8wB,eAAA9wB,KAAA+wB,QAAAhD;;oBAOAnB,sBAAAhpB,UAAAmtB,UAAA,SAAAhD;wBACA,IAAA/tB,KAAAitB,mBAAA;4BACAjtB,KAAAitB,eAAAziB,OAAAujB;;wBAEA,IAA6BmD,OAAAnD,OAAAuC;wBAC7B,IAA6BrL,OAAA8I,OAAAC;wBAI7B,IAAAkD,SAAA;4BACAlxB,KAAAotB,UAAAnI;+BAEA;4BACAiM,KAAAlD,QAAA/I;;wBAEA,IAAAA,SAAA;4BACAjlB,KAAAqtB,UAAA6D;+BAEA;4BACAjM,KAAAqL,QAAAY;;wBAEA,OAAAnD;;oBAQAnB,sBAAAhpB,UAAAitB,cAAA,SAAA9C,QAAAwD;wBAGA,IAAAxD,OAAAW,kBAAA6C,SAAA;4BACA,OAAAxD;;wBAEA,IAAA/tB,KAAAytB,eAAA;4BAGAztB,KAAAytB,aAAAztB,KAAAwtB,aAAAO;+BAEA;4BAGA/tB,KAAAytB,aAAAztB,KAAAytB,WAAA0B,aAAApB;;wBAEA,OAAAA;;oBAOAnB,sBAAAhpB,UAAAktB,iBAAA,SAAA/C;wBACA,IAAA/tB,KAAAktB,qBAAA;4BACAltB,KAAAktB,mBAAA,IAAAmE;;wBAEArxB,KAAAktB,iBAAAoE,IAAAvD;wBACAA,OAAAO,eAAA;wBACAP,OAAAU,eAAA;wBACA,IAAAzuB,KAAA2tB,kBAAA;4BAGA3tB,KAAA2tB,gBAAA3tB,KAAA0tB,gBAAAK;4BACAA,OAAAoD,eAAA;+BAEA;4BAIApD,OAAAoD,eAAAnxB,KAAA2tB;4BACA3tB,KAAA2tB,gBAAA3tB,KAAA2tB,cAAAc,eAAAV;;wBAEA,OAAAA;;oBAQAnB,sBAAAhpB,UAAAqsB,qBAAA,SAAAlC,QAAArmB;wBACAqmB,OAAArmB;wBACA,IAAA1H,KAAA6tB,yBAAA;4BACA7tB,KAAA6tB,uBAAA7tB,KAAA4tB,uBAAAG;+BAEA;4BACA/tB,KAAA6tB,uBAAA7tB,KAAA6tB,qBAAAyB,sBAAAvB;;wBAEA,OAAAA;;oBAKAnB,sBAAAhpB,UAAAkJ,WAAA;wBACA,IAA6BsX;wBAC7BpkB,KAAA8tB,YAAA,SAAAC;4BAAkE,OAAA3J,KAAA7gB,KAAAwqB;;wBAClE,IAA6ByD;wBAC7BxxB,KAAA8uB,oBAAA,SAAAf;4BAA0E,OAAAyD,SAAAjuB,KAAAwqB;;wBAC1E,IAA6B0D;wBAC7BzxB,KAAAgvB,iBAAA,SAAAjB;4BAAuE,OAAA0D,UAAAluB,KAAAwqB;;wBACvE,IAA6B2D;wBAC7B1xB,KAAAkvB,iBAAA,SAAAnB;4BAAuE,OAAA2D,MAAAnuB,KAAAwqB;;wBACvE,IAA6B4D;wBAC7B3xB,KAAAovB,mBAAA,SAAArB;4BAAyE,OAAA4D,SAAApuB,KAAAwqB;;wBACzE,IAA6B6D;wBAC7B5xB,KAAAqvB,sBAAA,SAAAtB;4BAA4E,OAAA6D,gBAAAruB,KAAAwqB;;wBAC5E,wBAAA3J,KAAA/M,KAAA,eACA,eAAAma,SAAAna,KAAA,eACA,gBAAAoa,UAAApa,KAAA,eACA,YAAAqa,MAAAra,KAAA,eACA,eAAAsa,SAAAta,KAAA,eACA,sBAAAua,gBAAAva,KAAA;;oBAEA,OAAAuV;;gBAKA,IAAA+D,yBAAA;oBAKA,SAAAA,uBAAAjpB,MAAAooB;wBACA9vB,KAAA0H;wBACA1H,KAAA8vB;wBACA9vB,KAAAsuB,eAAA;wBACAtuB,KAAA0uB,gBAAA;wBAEA1uB,KAAA+uB,gBAAA;wBAEA/uB,KAAAswB,QAAA;wBAEAtwB,KAAAguB,QAAA;wBAEAhuB,KAAA6xB,WAAA;wBAEA7xB,KAAA8xB,WAAA;wBAEA9xB,KAAAmxB,eAAA;wBAEAnxB,KAAAyuB,eAAA;wBAEAzuB,KAAAivB,aAAA;wBAEAjvB,KAAAmvB,aAAA;wBAEAnvB,KAAAsvB,sBAAA;;oBAKAqB,uBAAA/sB,UAAAkJ,WAAA;wBACA,OAAA9M,KAAA0uB,kBAAA1uB,KAAAsuB,eAAA5hB,UAAA1M,KAAA0H,QACAgF,UAAA1M,KAAA0H,QAAA,MACAgF,UAAA1M,KAAA0uB,iBAAA,OAAAhiB,UAAA1M,KAAAsuB,gBAAA;;oBAEA,OAAAqC;;gBAEA,IAAAoB,2BAAA;oBACA,SAAAA;wBAEA/xB,KAAAgyB,QAAA;wBAEAhyB,KAAAiyB,QAAA;;oBASAF,yBAAAnuB,UAAAsuB,MAAA,SAAAnE;wBACA,IAAA/tB,KAAAgyB,UAAA;4BACAhyB,KAAAgyB,QAAAhyB,KAAAiyB,QAAAlE;4BACAA,OAAA+D,WAAA;4BACA/D,OAAA8D,WAAA;+BAEA;4BAIA7xB,KAAAiyB,MAAAH,WAAA/D;4BACAA,OAAA8D,WAAA7xB,KAAAiyB;4BACAlE,OAAA+D,WAAA;4BACA9xB,KAAAiyB,QAAAlE;;;oBAQAgE,yBAAAnuB,UAAAnB,MAAA,SAAAqtB,WAAAqC;wBACA,IAA6BpE;wBAC7B,KAAAA,SAAA/tB,KAAAgyB,OAAqCjE,WAAA,MAAiBA,gBAAA+D,UAAA;4BACtD,KAAAK,eAAA,QAAAA,aAAApE,OAAAO,iBACArhB,eAAA8gB,OAAA+B,uBAAA;gCACA,OAAA/B;;;wBAGA;;oBASAgE,yBAAAnuB,UAAA4G,SAAA,SAAAujB;wBASA,IAA6BmD,OAAAnD,OAAA8D;wBAC7B,IAA6B5M,OAAA8I,OAAA+D;wBAC7B,IAAAZ,SAAA;4BACAlxB,KAAAgyB,QAAA/M;+BAEA;4BACAiM,KAAAY,WAAA7M;;wBAEA,IAAAA,SAAA;4BACAjlB,KAAAiyB,QAAAf;+BAEA;4BACAjM,KAAA4M,WAAAX;;wBAEA,OAAAlxB,KAAAgyB,UAAA;;oBAEA,OAAAD;;gBAEA,IAAAV,gBAAA;oBACA,SAAAA;wBACArxB,KAAAiZ,MAAA,IAAApL;;oBAMAwjB,cAAAztB,UAAA0tB,MAAA,SAAAvD;wBACA,IAA6BllB,MAAAklB,OAAA+B;wBAC7B,IAA6BsC,aAAApyB,KAAAiZ,IAAAxW,IAAAoG;wBAC7B,KAAAupB,YAAA;4BACAA,aAAA,IAAAL;4BACA/xB,KAAAiZ,IAAAhV,IAAA4E,KAAAupB;;wBAEAA,WAAAF,IAAAnE;;oBAYAsD,cAAAztB,UAAAnB,MAAA,SAAAqtB,WAAAqC;wBACA,IAAAA,oBAAA;4BAAwCA,aAAA;;wBACxC,IAA6BtpB,MAAAinB;wBAC7B,IAA6BuC,aAAAryB,KAAAiZ,IAAAxW,IAAAoG;wBAC7B,OAAAwpB,wBAAA5vB,IAAAqtB,WAAAqC,cAAA;;oBASAd,cAAAztB,UAAA4G,SAAA,SAAAujB;wBACA,IAA6BllB,MAAAklB,OAAA+B;wBAC7B,IAA6BuC,aAAAryB,KAAAiZ,IAAAxW,IAAAoG;wBAE7B,IAAAwpB,WAAA7nB,OAAAujB,SAAA;4BACA/tB,KAAAiZ,IAAAqZ,OAAAzpB;;wBAEA,OAAAklB;;oBAEAxrB,OAAAC,eAAA6uB,cAAAztB,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAiZ,IAAA8B,SAAA;;wBAC9B/W,YAAA;wBACAD,cAAA;;oBAKAstB,cAAAztB,UAAAotB,QAAA;wBAAqDhxB,KAAAiZ,IAAA+X;;oBAIrDK,cAAAztB,UAAAkJ,WAAA;wBAAwD,0BAAAJ,UAAA1M,KAAAiZ,OAAA;;oBACxD,OAAAoY;;gBAQA,SAAA9C,iBAAA7mB,MAAA0mB,iBAAAC;oBACA,IAAyBK,gBAAAhnB,KAAAgnB;oBACzB,IAAAA,kBAAA,MACA,OAAAA;oBACA,IAAyB6D,aAAA;oBACzB,IAAAlE,eAAAK,gBAAAL,YAAAjpB,QAAA;wBACAmtB,aAAAlE,YAAAK;;oBAEA,OAAAA,gBAAAN,kBAAAmE;;gBAGA,IAAAC,+BAAA;oBACA,SAAAA;oBAMAA,6BAAA5uB,UAAA6oB,WAAA,SAAAjgB;wBAA0E,OAAAA,eAAAqB,OAAAV,WAAAX;;oBAK1EgmB,6BAAA5uB,UAAAwL,SAAA,SAAAsd;wBAA0E,WAAA+F;;oBAC1E,OAAAD;;gBAEA,IAAAC,wBAAA;oBACA,SAAAA;wBACAzyB,KAAA0yB,WAAA,IAAA7kB;wBACA7N,KAAA2yB,WAAA;wBACA3yB,KAAA4yB,mBAAA;wBACA5yB,KAAA6yB,eAAA;wBACA7yB,KAAA8yB,eAAA;wBACA9yB,KAAAstB,iBAAA;wBACAttB,KAAAutB,iBAAA;wBACAvtB,KAAA0tB,gBAAA;wBACA1tB,KAAA2tB,gBAAA;;oBAEAprB,OAAAC,eAAAiwB,sBAAA7uB,WAAA;wBAIAnB,KAAA;4BACA,OAAAzC,KAAAstB,mBAAA,QAAAttB,KAAA6yB,iBAAA,QACA7yB,KAAA0tB,kBAAA;;wBAEA1pB,YAAA;wBACAD,cAAA;;oBAMA0uB,sBAAA7uB,UAAAkqB,cAAA,SAAA5qB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAA2yB,UAAwC5E,WAAA,MAAiBA,gBAAAC,OAAA;4BACzD9qB,GAAA6qB;;;oBAOA0E,sBAAA7uB,UAAAkrB,sBAAA,SAAA5rB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAA4yB,kBAAgD7E,WAAA,MAAiBA,gBAAAgB,eAAA;4BACjE7rB,GAAA6qB;;;oBAOA0E,sBAAA7uB,UAAAmvB,qBAAA,SAAA7vB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAA6yB,cAA4C9E,WAAA,MAAiBA,gBAAAiF,cAAA;4BAC7D9vB,GAAA6qB;;;oBAOA0E,sBAAA7uB,UAAAorB,mBAAA,SAAA9rB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAAstB,gBAA8CS,WAAA,MAAiBA,gBAAAkB,YAAA;4BAC/D/rB,GAAA6qB;;;oBAOA0E,sBAAA7uB,UAAAwrB,qBAAA,SAAAlsB;wBACA,IAA6B6qB;wBAC7B,KAAAA,SAAA/tB,KAAA0tB,eAA6CK,WAAA,MAAiBA,gBAAAU,cAAA;4BAC9DvrB,GAAA6qB;;;oBAOA0E,sBAAA7uB,UAAA2rB,OAAA,SAAAtW;wBACA,KAAAA,KAAA;4BACAA,MAAA,IAAApL;+BAEA,MAAAoL,eAAApL,OAAAV,WAAA8L,OAAA;4BACA,UAAA1X,MAAA,2BAAA0X,MAAA;;wBAEA,OAAAjZ,KAAA2F,MAAAsT,OAAAjZ,OAAA;;oBAKAyyB,sBAAA7uB,UAAA6rB,YAAA;oBAKAgD,sBAAA7uB,UAAA+B,QAAA,SAAAsT;wBACA,IAAA5I,QAAArQ;wBACAA,KAAA0vB;wBACA,IAA6BuD,UAAAjzB,KAAA0yB;wBAC7B,IAA6BQ,eAAAlzB,KAAA2yB;wBAC7B,IAA6BQ,mBAAA;wBAC7B,IAA6BC,mBAAA;wBAC7B,IAA6BC,aAAA;wBAC7BrzB,KAAAszB,SAAAra,KAAA,SAAA/U,OAAA2E;4BACA,IAAiC0qB;4BACjC,IAAAL,gBAAArqB,QAAAqqB,aAAArqB,KAAA;gCACA0qB,eAAAL;gCACA7iB,MAAAmjB,mBAAAD,cAAArvB;mCAEA;gCACAmvB,aAAA;gCACA,IAAAH,iBAAA;oCACA7iB,MAAAojB,eAAAN,kBAAAD;oCACA7iB,MAAAygB,eAAAoC;;gCAEA,IAAAD,QAAApY,IAAAhS,MAAA;oCACA0qB,eAAAN,QAAAxwB,IAAAoG;oCACAwH,MAAAmjB,mBAAAD,cAAArvB;uCAEA;oCACAqvB,eAAA,IAAAG,qBAAA7qB;oCACAoqB,QAAAhvB,IAAA4E,KAAA0qB;oCACAA,aAAAI,eAAAzvB;oCACAmM,MAAAujB,gBAAAL;;;4BAGA,IAAAF,YAAA;gCACA,IAAAhjB,MAAAwjB,cAAAN,eAAA;oCACAljB,MAAAyjB,oBAAAP;;gCAEA,IAAAH,oBAAA;oCACA/iB,MAAAsiB,WAAAY;uCAEA;oCACAH,iBAAApF,QAAAuF;;;4BAGAJ,mBAAAD;4BACAE,mBAAAG;4BACAL,4CAAAlF;;wBAEAhuB,KAAAkwB,UAAAiD,kBAAAD;wBACA,OAAAlzB,KAAAmwB;;oBAMAsC,sBAAA7uB,UAAA8rB,SAAA;wBACA,IAAA1vB,KAAAmwB,SAAA;4BACA,IAAiCpC,cAAA;4BAEjC,KAAAA,SAAA/tB,KAAA4yB,mBAAA5yB,KAAA2yB,UAAoE5E,WAAA,MAAiBA,gBAAAC,OAAA;gCACrFD,OAAAgB,gBAAAhB,OAAAC;;4BAEA,KAAAD,SAAA/tB,KAAA6yB,cAAgD9E,WAAA,MAAiBA,gBAAAiF,cAAA;gCACjEjF,OAAAgG,gBAAAhG,OAAA4F;;4BAEA,KAAA5F,SAAA/tB,KAAAstB,gBAAkDS,UAAA,MAAgBA,gBAAAkB,YAAA;gCAClElB,OAAAgG,gBAAAhG,OAAA4F;;4BAEA3zB,KAAA6yB,eAAA7yB,KAAA8yB,eAAA;4BACA9yB,KAAAstB,iBAAAttB,KAAAutB,iBAAA;4BACAvtB,KAAA0tB,gBAAA1tB,KAAA2tB,gBAAA;;;oBASA8E,sBAAA7uB,UAAAssB,YAAA,SAAA8D,YAAAjG;wBACA,OAAAA,WAAA;4BACA,IAAAiG,eAAA;gCACAh0B,KAAA2yB,WAAA;mCAEA;gCACAqB,WAAAhG,QAAA;;4BAEA,IAAiCoC,aAAArC,OAAAC;4BACjChuB,KAAA8wB,eAAA/C;4BACAiG,aAAAjG;4BACAA,SAAAqC;;wBAEA,SAAkC6D,MAAAj0B,KAAA0tB,eAA6BuG,QAAA,MAAcA,UAAAxF,cAAA;4BAC7EwF,IAAAF,gBAAAE,IAAAN;4BACAM,IAAAN,eAAA;4BACA3zB,KAAA0yB,SAAAJ,OAAA2B,IAAAprB;;;oBAQA4pB,sBAAA7uB,UAAA4vB,qBAAA,SAAAzF,QAAAmG;wBACA,KAAAjnB,eAAAinB,UAAAnG,OAAA4F,eAAA;4BACA5F,OAAAgG,gBAAAhG,OAAA4F;4BACA5F,OAAA4F,eAAAO;4BACAl0B,KAAAm0B,cAAApG;;;oBAQA0E,sBAAA7uB,UAAAiwB,gBAAA,SAAA9F;wBACA,OAAAA,WAAA/tB,KAAA0tB,iBAAAK,OAAAU,iBAAA,QACAV,OAAAoD,iBAAA;;oBAOAsB,sBAAA7uB,UAAAktB,iBAAA,SAAA/C;wBACA,IAAA/tB,KAAA0tB,kBAAA;4BACA1tB,KAAA0tB,gBAAA1tB,KAAA2tB,gBAAAI;+BAEA;4BACA/tB,KAAA2tB,cAAAc,eAAAV;4BACAA,OAAAoD,eAAAnxB,KAAA2tB;4BACA3tB,KAAA2tB,gBAAAI;;;oBASA0E,sBAAA7uB,UAAA6vB,iBAAA,SAAAvC,MAAAnD;wBACA,IAA6B9I,OAAA8I,OAAAC;wBAC7B,IAAAkD,SAAA;4BACAlxB,KAAA2yB,WAAA1N;+BAEA;4BACAiM,KAAAlD,QAAA/I;;wBAEA8I,OAAAC,QAAA;;oBAOAyE,sBAAA7uB,UAAAkwB,sBAAA,SAAA/F;wBACA,IAA6BmD,OAAAnD,OAAAoD;wBAC7B,IAA6BlM,OAAA8I,OAAAU;wBAC7B,IAAAyC,SAAA;4BACAlxB,KAAA0tB,gBAAAzI;+BAEA;4BACAiM,KAAAzC,eAAAxJ;;wBAEA,IAAAA,SAAA;4BACAjlB,KAAA2tB,gBAAAuD;+BAEA;4BACAjM,KAAAkM,eAAAD;;wBAEAnD,OAAAoD,eAAApD,OAAAU,eAAA;;oBAOAgE,sBAAA7uB,UAAAgwB,kBAAA,SAAA7F;wBACA,IAAA/tB,KAAAstB,mBAAA;4BACAttB,KAAAstB,iBAAAttB,KAAAutB,iBAAAQ;+BAEA;4BACA/tB,KAAAutB,eAAA0B,aAAAlB;4BACA/tB,KAAAutB,iBAAAQ;;;oBAQA0E,sBAAA7uB,UAAAuwB,gBAAA,SAAApG;wBACA,IAAA/tB,KAAA6yB,iBAAA;4BACA7yB,KAAA6yB,eAAA7yB,KAAA8yB,eAAA/E;+BAEA;4BACA/tB,KAAA8yB,aAAAE,eAAAjF;4BACA/tB,KAAA8yB,eAAA/E;;;oBAMA0E,sBAAA7uB,UAAAkJ,WAAA;wBACA,IAA6BuX;wBAC7B,IAA6BmN;wBAC7B,IAA6B3b;wBAC7B,IAA6B4b;wBAC7B,IAA6BE;wBAC7B,IAA6B5D;wBAC7B,KAAAA,SAAA/tB,KAAA2yB,UAAwC5E,WAAA,MAAiBA,gBAAAC,OAAA;4BACzD3J,MAAA9gB,KAAAmJ,UAAAqhB;;wBAEA,KAAAA,SAAA/tB,KAAA4yB,kBAAgD7E,WAAA,MAAiBA,gBAAAgB,eAAA;4BACjEyC,SAAAjuB,KAAAmJ,UAAAqhB;;wBAEA,KAAAA,SAAA/tB,KAAA6yB,cAA4C9E,WAAA,MAAiBA,gBAAAiF,cAAA;4BAC7Dnd,QAAAtS,KAAAmJ,UAAAqhB;;wBAEA,KAAAA,SAAA/tB,KAAAstB,gBAA8CS,WAAA,MAAiBA,gBAAAkB,YAAA;4BAC/DwC,UAAAluB,KAAAmJ,UAAAqhB;;wBAEA,KAAAA,SAAA/tB,KAAA0tB,eAA6CK,WAAA,MAAiBA,gBAAAU,cAAA;4BAC9DkD,SAAApuB,KAAAmJ,UAAAqhB;;wBAEA,iBAAA1J,MAAAhN,KAAA,eACA,eAAAma,SAAAna,KAAA,eACA,gBAAAoa,UAAApa,KAAA,eACA,cAAAxB,QAAAwB,KAAA,eACA,eAAAsa,SAAAta,KAAA;;oBAQAob,sBAAA7uB,UAAA0vB,WAAA,SAAA9mB,KAAAtJ;wBACA,IAAAsJ,eAAAqB,KAAA;4BACArB,IAAAgE,QAAAtN;+BAEA;4BACAX,OAAAoL,KAAAnB,KAAAgE,QAAA,SAAAlH;gCAAuD,OAAApG,GAAAsJ,IAAAlD;;;;oBAGvD,OAAAmpB;;gBAKA,IAAAiB,uBAAA;oBAIA,SAAAA,qBAAA7qB;wBACA7I,KAAA6I;wBACA7I,KAAA+zB,gBAAA;wBACA/zB,KAAA2zB,eAAA;wBAEA3zB,KAAA+uB,gBAAA;wBAEA/uB,KAAAguB,QAAA;wBAEAhuB,KAAAivB,aAAA;wBAEAjvB,KAAAyuB,eAAA;wBAEAzuB,KAAAmxB,eAAA;wBAEAnxB,KAAAgzB,eAAA;;oBAKAU,qBAAA9vB,UAAAkJ,WAAA;wBACA,OAAAG,eAAAjN,KAAA+zB,eAAA/zB,KAAA2zB,gBACAjnB,UAAA1M,KAAA6I,OACA6D,UAAA1M,KAAA6I,OAAA,MAAA6D,UAAA1M,KAAA+zB,iBAAA,OACArnB,UAAA1M,KAAA2zB,gBAAA;;oBAEA,OAAAD;;gBAOA,IAAAU,kBAAA;oBAIA,SAAAA,gBAAA1pB;wBACA1K,KAAA0K;;oBAOA0pB,gBAAAhlB,SAAA,SAAA1E,WAAAnD;wBACA,IAAAgF,UAAAhF,SAAA;4BACA,IAAiC8sB,SAAA9sB,OAAAmD,UAAAtD;4BACjCsD,sBAAAsG,OAAAqjB;4BACA,WAAAD,gBAAA1pB;+BAEA;4BACA,WAAA0pB,gBAAA1pB;;;oBAwBA0pB,gBAAAE,SAAA,SAAA5pB;wBACA;4BACAkV,SAAAwU;4BACA7U,YAAA,SAAAhY;gCACA,KAAAA,QAAA;oCAIA,UAAAhG,MAAA;;gCAEA,OAAA6yB,gBAAAhlB,OAAA1E,WAAAnD;;4BAGAkY,UAAA2U,iBAAA,IAAAtiB,YAAA,IAAAF;;;oBAOAwiB,gBAAAxwB,UAAAiH,OAAA,SAAA0pB;wBACA,IAA6B90B,UAAAO,KAAA0K,UAAAG,KAAA,SAAA2pB;4BAAgD,OAAAA,EAAA/H,SAAA8H;;wBAC7E,IAAAhoB,UAAA9M,UAAA;4BACA,OAAAA;+BAEA;4BACA,UAAA8B,MAAA,6CAAAgzB,WAAA,gBAAAnoB,wBAAAmoB,YAAA;;;oBAGA,OAAAH;;gBAOA,IAAAK,kBAAA;oBAIA,SAAAA,gBAAA/pB;wBACA1K,KAAA0K;;oBAOA+pB,gBAAArlB,SAAA,SAAA1E,WAAAnD;wBACA,IAAAgF,UAAAhF,SAAA;4BACA,IAAiC8sB,SAAA9sB,OAAAmD,UAAAtD;4BACjCsD,sBAAAsG,OAAAqjB;4BACA,WAAAI,gBAAA/pB;+BAEA;4BACA,WAAA+pB,gBAAA/pB;;;oBAwBA+pB,gBAAAH,SAAA,SAAA5pB;wBACA;4BACAkV,SAAA6U;4BACAlV,YAAA,SAAAhY;gCACA,KAAAA,QAAA;oCAIA,UAAAhG,MAAA;;gCAEA,OAAAkzB,gBAAArlB,OAAA1E,WAAAnD;;4BAGAkY,UAAAgV,iBAAA,IAAA3iB,YAAA,IAAAF;;;oBAOA6iB,gBAAA7wB,UAAAiH,OAAA,SAAA6pB;wBACA,IAA6Bj1B,UAAAO,KAAA0K,UAAAG,KAAA,SAAA2pB;4BAAgD,OAAAA,EAAA/H,SAAAiI;;wBAC7E,IAAAnoB,UAAA9M,UAAA;4BACA,OAAAA;+BAEA;4BACA,UAAA8B,MAAA,6CAAAmzB,KAAA;;;oBAGA,OAAAD;;gBAGA,IAAqBE;oBACrB7nB,UAAA;wBAA+B;;;gBAO/B,SAAA8nB,aAAA90B,GAAA2H;oBACA,IAAAkd,mBAAA7kB,MAAA6kB,mBAAAld,IAAA;wBACA,OAAAmd,kBAAA9kB,GAAA2H,GAAAmtB;2BAEA,KAAAjQ,mBAAA7kB,OAAAgO,YAAAhO,OAAA6kB,mBAAAld,OAAAqG,YAAArG,IAAA;wBACA;2BAEA;wBACA,OAAAwF,eAAAnN,GAAA2H;;;gBAsBA,IAAAotB,eAAA;oBAIA,SAAAA,aAAAC;wBACA90B,KAAA80B;;oBAMAD,aAAAE,OAAA,SAAA7wB;wBAA8C,WAAA2wB,aAAA3wB;;oBAC9C,OAAA2wB;;gBAKA,IAAAG,iBAAA;oBACA,SAAAA;wBACAh1B,KAAAi1B,kBAAA;;oBAMAD,eAAApxB,UAAAsxB,SAAA,SAAAhxB;wBACA,IAAAA,iBAAA2wB,cAAA;4BACA70B,KAAAi1B,kBAAA;4BACA,OAAA/wB,MAAA4wB;;wBAEA,OAAA5wB;;oBAKA8wB,eAAApxB,UAAAuxB,QAAA;wBAAsDn1B,KAAAi1B,kBAAA;;oBACtD,OAAAD;;gBAMA,IAAAI,eAAA;oBAKA,SAAAA,aAAArB,eAAAJ;wBACA3zB,KAAA+zB;wBACA/zB,KAAA2zB;;oBAMAyB,aAAAxxB,UAAAyxB,gBAAA;wBAA4D,OAAAr1B,KAAA+zB,kBAAAY;;oBAC5D,OAAAS;;gBAOA,IAAAE,oBAAA;oBACA,SAAAA;oBAwCAA,kBAAA1xB,UAAA2xB,eAAA;oBAwDAD,kBAAA1xB,UAAA4xB,SAAA;oBAyBAF,kBAAA1xB,UAAA6xB,gBAAA;oBASAH,kBAAA1xB,UAAA8xB,iBAAA;oBAyDAJ,kBAAA1xB,UAAA+xB,WAAA;oBACA,OAAAL;;gBAMA,IAAqBM,eAAA,IAAApD;gBAIrB,IAAqBqD,iBAAA,IAAArJ;gBACrB,IAAqBsJ,yBAAA,IAAA1B,gBAAAyB;gBACrB,IAAqBE,yBAAA,IAAAtB,gBAAAmB;gBASrB,IAAAI,sBAAA;oBASA,SAAAA,oBAAArvB,IAAAyN,aAAA6hB,WAAAxhB,eAAAF,QAAAC;wBACAxU,KAAA2G;wBACA3G,KAAAoU;wBACApU,KAAAi2B;wBACAj2B,KAAAyU;wBACAzU,KAAAuU;wBACAvU,KAAAwU;;oBAEA,OAAAwhB;;gBAKA,IAAAE,kBAAA;oBACA,SAAAA;oBAMAA,gBAAAtyB,UAAAuV,WAAA;oBAKA+c,gBAAAtyB,UAAAkH,YAAA;oBAKAorB,gBAAAtyB,UAAAuyB,iBAAA;oBAKAD,gBAAAtyB,UAAAwyB,aAAA;oBAKAF,gBAAAtyB,UAAAyf,UAAA;oBAKA6S,gBAAAtyB,UAAAonB,SAAA;oBACA,OAAAkL;;gBAMA,IAAAG,WAAA;oBACA,SAAAA;oBAQAA,SAAAzyB,UAAA0yB,oBAAA,SAAAC,gBAAAC;oBAQAH,SAAAzyB,UAAAhD,gBAAA,SAAA61B,eAAA9yB,MAAA6yB;oBAMAH,SAAAzyB,UAAA8yB,iBAAA,SAAAC;oBAOAN,SAAAzyB,UAAAgzB,uBAAA,SAAAH,eAAAD;oBAQAH,SAAAzyB,UAAAizB,aAAA,SAAAJ,eAAAvyB,OAAAsyB;oBAOAH,SAAAzyB,UAAAkzB,eAAA,SAAAL,eAAAM;oBAOAV,SAAAzyB,UAAAozB,kBAAA,SAAAC,MAAAC;oBAMAb,SAAAzyB,UAAAuzB,aAAA,SAAAD;oBAOAb,SAAAzyB,UAAAwzB,cAAA,SAAAT,aAAAU;oBAQAhB,SAAAzyB,UAAA0zB,SAAA,SAAAC,eAAA5zB,MAAAtC;oBAQAg1B,SAAAzyB,UAAA4zB,eAAA,SAAA5uB,QAAAjF,MAAAtC;oBAQAg1B,SAAAzyB,UAAA6zB,qBAAA,SAAAF,eAAAG,cAAAC;oBAQAtB,SAAAzyB,UAAAg0B,sBAAA,SAAAL,eAAAM,eAAAC;oBASAzB,SAAAzyB,UAAAm0B,sBAAA,SAAAR,eAAAG,cAAAC;oBAQAtB,SAAAzyB,UAAAo0B,kBAAA,SAAAT,eAAAU,WAAAC;oBAQA7B,SAAAzyB,UAAAu0B,kBAAA,SAAAZ,eAAAa,WAAAC;oBAQAhC,SAAAzyB,UAAA00B,sBAAA,SAAAf,eAAAgB,YAAAjoB;oBAOA+lB,SAAAzyB,UAAA40B,UAAA,SAAAC,YAAAC;oBAYArC,SAAAzyB,UAAA+0B,UAAA,SAAAC,SAAAC,gBAAAC,WAAAC,UAAAC,OAAAC,QAAAC;oBACA,OAAA7C;;gBAgBA,IAAA8C,eAAA;oBACA,SAAAA;oBAOAA,aAAAv1B,UAAAw1B,kBAAA,SAAAC;oBACA,OAAAF;;gBAGA,IAAAG;gBACAA,gBAAAC,OAAA;gBACAD,gBAAAE,OAAA;gBACAF,gBAAAG,QAAA;gBACAH,gBAAAI,SAAA;gBACAJ,gBAAAK,MAAA;gBACAL,gBAAAM,eAAA;gBACAN,gCAAAC,QAAA;gBACAD,gCAAAE,QAAA;gBACAF,gCAAAG,SAAA;gBACAH,gCAAAI,UAAA;gBACAJ,gCAAAK,OAAA;gBACAL,gCAAAM,gBAAA;gBAOA,IAAAC,YAAA;oBACA,SAAAA;oBAQAA,UAAAj2B,UAAAk2B,WAAA,SAAAzW,SAAAnf;oBACA,OAAA21B;;gBAUA,IAAAE,cAAA/5B,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAiCA,IAAA6hB,8CAAA,SAAA3hB;oBACA0hB,YAAAC,6CAAA3hB;oBAKA,SAAA2hB,4CAAAC,UAAAC;wBACA,IAAAC,MAAA,mEAAAF,WAAA,wBAAAC,YAAA;wBACA,IAAAD,aAAAtF,eAAA;4BACAwF,OACA,wGACA;;wBAEA9hB,OAAAvU,KAAA9D,MAAAm6B;;oBAEA,OAAAH;kBACK5hB;gBAQL,IAAAgiB,mBAAA,SAAA/hB;oBACA0hB,YAAAK,kBAAA/hB;oBAKA,SAAA+hB,iBAAAzhB,eAAA0K;wBACAhL,OAAAvU,KAAA9D,MAAA,cAAAqjB,QAAA2H,QAAArS;wBACA3Y,KAAAqjB;;oBAEA,OAAA+W;kBACK1hB;gBASL,IAAA2hB,qBAAA,SAAAhiB;oBACA0hB,YAAAM,oBAAAhiB;oBAIA,SAAAgiB,mBAAAC;wBACAjiB,OAAAvU,KAAA9D,MAAA,sCAAAs6B;;oBAEA,OAAAD;kBACKjiB;gBAEL,IAAAmiB,YAAA;oBAMA,SAAAA,UAAAC,WAAAC,WAAAC;wBACA16B,KAAAw6B;wBACAx6B,KAAA06B;wBACA16B,KAAAy6B;;oBAOAF,UAAA32B,UAAAw1B,kBAAA,SAAAuB;wBACA,OAAA36B,KAAAw6B,UAAApB,gBAAAuB;;oBAEAJ,UAAA5xB;wBACa9H,MAAAsK;;oBAGbovB,UAAAroB,iBAAA;wBAAgD;4BACnCrR,MAAAs4B;;4BACAt4B,MAAAg5B;;4BACAh5B,MAAAirB;;;oBAEb,OAAAyO;;gBAEA,IAAqBK,4BAAA;gBASrB,SAAAC,0BAAAzmB,aAAA6hB,WAAAxhB,eAAAF,QAAAC;oBACA,WAAAwhB,oBAAA,KAAA4E,6BAAAxmB,aAAA6hB,WAAAxhB,eAAAF,QAAAC;;gBAOA,SAAAsmB,WAAAz4B,GAAA04B;oBACAA,MAAAx3B,KAAAlB;;gBAOA,SAAA24B,YAAAC,YAAAC;oBACA,IAAyBtzB,SAAA;oBACzB,SAA8B7H,IAAA,GAAUA,IAAAk7B,aAAA,GAAoBl7B,QAAA;wBAC5D6H,kBAAAszB,eAAAn7B,KAAAo7B,kBAAAD,eAAAn7B,IAAA;;oBAEA,OAAA6H,SAAAszB,eAAAD,aAAA;;gBAyBA,SAAAG,kBAAAH,YAAAI,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC,IAAAC;oBACA,QAAAtB;sBACA;wBACA,OAAAI,KAAAF,kBAAAG,MAAAC;;sBACA;wBACA,OAAAF,KAAAF,kBAAAG,MAAAC,KAAAJ,kBAAAK,MAAAC;;sBACA;wBACA,OAAAJ,KAAAF,kBAAAG,MAAAC,KAAAJ,kBAAAK,MAAAC,KAAAN,kBAAAO,MACAC;;sBACA;wBACA,OAAAN,KAAAF,kBAAAG,MAAAC,KAAAJ,kBAAAK,MAAAC,KAAAN,kBAAAO,MACAC,KAAAR,kBAAAS,MAAAC;;sBACA;wBACA,OAAAR,KAAAF,kBAAAG,MAAAC,KAAAJ,kBAAAK,MAAAC,KAAAN,kBAAAO,MACAC,KAAAR,kBAAAS,MAAAC,KAAAV,kBAAAW,MAAAC;;sBACA;wBACA,OAAAV,KAAAF,kBAAAG,MAAAC,KAAAJ,kBAAAK,MAAAC,KAAAN,kBAAAO,MACAC,KAAAR,kBAAAS,MAAAC,KAAAV,kBAAAW,MAAAC,KAAAZ,kBAAAa,MAAAC;;sBACA;wBACA,OAAAZ,KAAAF,kBAAAG,MAAAC,KAAAJ,kBAAAK,MAAAC,KAAAN,kBAAAO,MACAC,KAAAR,kBAAAS,MAAAC,KAAAV,kBAAAW,MAAAC,KAAAZ,kBAAAa,MACAC,KAAAd,kBAAAe,MAAAC;;sBACA;wBACA,OAAAd,KAAAF,kBAAAG,MAAAC,KAAAJ,kBAAAK,MAAAC,KAAAN,kBAAAO,MACAC,KAAAR,kBAAAS,MAAAC,KAAAV,kBAAAW,MAAAC,KAAAZ,kBAAAa,MACAC,KAAAd,kBAAAe,MAAAC,KAAAhB,kBAAAiB,MAAAC;;sBACA;wBACA,OAAAhB,KAAAF,kBAAAG,MAAAC,KAAAJ,kBAAAK,MAAAC,KAAAN,kBAAAO,MACAC,KAAAR,kBAAAS,MAAAC,KAAAV,kBAAAW,MAAAC,KAAAZ,kBAAAa,MACAC,KAAAd,kBAAAe,MAAAC,KAAAhB,kBAAAiB,MAAAC,KAAAlB,kBAAAmB,MAAAC;;sBACA;wBACA,UAAAh7B,MAAA;;;gBAOA,SAAA45B,kBAAA5xB;oBACA,OAAAA,KAAA,OAAAA,EAAAuD,aAAA;;gBAQA,SAAA0vB,aAAAC,eAAAxC,UAAA/F;oBACA,IAAAuI,eAAA;wBACA,KAAA7H,aAAAqF,UAAA/F,WAAA;4BACA,UAAA8F,4CAAAC,UAAA/F;;wBAEA;2BAEA;wBACA,QAAAjnB,eAAAgtB,UAAA/F;;;gBAQA,SAAAwI,YAAAC,OAAAz4B;oBACA;;gBAEA,IAAqB04B;gBACrB,IAAqBC;gBAKrB,SAAAC,WAAA55B;oBACA,IAAyB0E;oBACzB,IAAyBm1B,KAAApI;oBACzB,gBAAAqI;wBACA,KAAA/vB,eAAA8vB,IAAAC,KAAA;4BACAD,KAAAC;4BACAp1B,SAAA1E,GAAA85B;;wBAEA,OAAAp1B;;;gBAOA,SAAAq1B,WAAA/5B;oBACA,IAAyB0E;oBACzB,IAAyBm1B,KAAApI;oBACzB,IAAyBuI,KAAAvI;oBACzB,gBAAAqI,IAAAG;wBACA,KAAAlwB,eAAA8vB,IAAAC,QAAA/vB,eAAAiwB,IAAAC,KAAA;4BACAJ,KAAAC;4BACAE,KAAAC;4BACAv1B,SAAA1E,GAAA85B,IAAAG;;wBAEA,OAAAv1B;;;gBAOA,SAAAw1B,WAAAl6B;oBACA,IAAyB0E;oBACzB,IAAyBm1B,KAAApI;oBACzB,IAAyBuI,KAAAvI;oBACzB,IAAyB0I,KAAA1I;oBACzB,gBAAAqI,IAAAG,IAAAG;wBACA,KAAArwB,eAAA8vB,IAAAC,QAAA/vB,eAAAiwB,IAAAC,QAAAlwB,eAAAowB,IAAAC,KAAA;4BACAP,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACA11B,SAAA1E,GAAA85B,IAAAG,IAAAG;;wBAEA,OAAA11B;;;gBAOA,SAAA21B,WAAAr6B;oBACA,IAAyB0E;oBACzB,IAAyBm1B,IAAqBG,IAAqBG,IAAqBG;oBACxFT,KAAAG,KAAAG,KAAAG,KAAA7I;oBACA,gBAAAqI,IAAAG,IAAAG,IAAAG;wBACA,KAAAxwB,eAAA8vB,IAAAC,QAAA/vB,eAAAiwB,IAAAC,QAAAlwB,eAAAowB,IAAAC,QACArwB,eAAAuwB,IAAAC,KAAA;4BACAV,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACA71B,SAAA1E,GAAA85B,IAAAG,IAAAG,IAAAG;;wBAEA,OAAA71B;;;gBAOA,SAAA81B,WAAAx6B;oBACA,IAAyB0E;oBACzB,IAAyBm1B,IAAqBG,IAAqBG,IAAqBG,IAAqBG;oBAC7GZ,KAAAG,KAAAG,KAAAG,KAAAG,KAAAhJ;oBACA,gBAAAqI,IAAAG,IAAAG,IAAAG,IAAAG;wBACA,KAAA3wB,eAAA8vB,IAAAC,QAAA/vB,eAAAiwB,IAAAC,QAAAlwB,eAAAowB,IAAAC,QACArwB,eAAAuwB,IAAAC,QAAAxwB,eAAA0wB,IAAAC,KAAA;4BACAb,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAh2B,SAAA1E,GAAA85B,IAAAG,IAAAG,IAAAG,IAAAG;;wBAEA,OAAAh2B;;;gBAOA,SAAAi2B,WAAA36B;oBACA,IAAyB0E;oBACzB,IAAyBm1B,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG;oBAClIf,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAnJ;oBACA,gBAAAqI,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG;wBACA,KAAA9wB,eAAA8vB,IAAAC,QAAA/vB,eAAAiwB,IAAAC,QAAAlwB,eAAAowB,IAAAC,QACArwB,eAAAuwB,IAAAC,QAAAxwB,eAAA0wB,IAAAC,QAAA3wB,eAAA6wB,IAAAC,KAAA;4BACAhB,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAn2B,SAAA1E,GAAA85B,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG;;wBAEA,OAAAn2B;;;gBAOA,SAAAo2B,WAAA96B;oBACA,IAAyB0E;oBACzB,IAAyBm1B,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG;oBACvJlB,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAtJ;oBACA,gBAAAqI,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG;wBACA,KAAAjxB,eAAA8vB,IAAAC,QAAA/vB,eAAAiwB,IAAAC,QAAAlwB,eAAAowB,IAAAC,QACArwB,eAAAuwB,IAAAC,QAAAxwB,eAAA0wB,IAAAC,QAAA3wB,eAAA6wB,IAAAC,QACA9wB,eAAAgxB,IAAAC,KAAA;4BACAnB,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAt2B,SAAA1E,GAAA85B,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG;;wBAEA,OAAAt2B;;;gBAOA,SAAAu2B,WAAAj7B;oBACA,IAAyB0E;oBACzB,IAAyBm1B,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG;oBAC5KrB,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAzJ;oBACA,gBAAAqI,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG;wBACA,KAAApxB,eAAA8vB,IAAAC,QAAA/vB,eAAAiwB,IAAAC,QAAAlwB,eAAAowB,IAAAC,QACArwB,eAAAuwB,IAAAC,QAAAxwB,eAAA0wB,IAAAC,QAAA3wB,eAAA6wB,IAAAC,QACA9wB,eAAAgxB,IAAAC,QAAAjxB,eAAAmxB,IAAAC,KAAA;4BACAtB,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAz2B,SAAA1E,GAAA85B,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG;;wBAEA,OAAAz2B;;;gBAOA,SAAA02B,WAAAp7B;oBACA,IAAyB0E;oBACzB,IAAyBm1B,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG;oBACjMxB,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAA5J;oBACA,gBAAAqI,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG;wBACA,KAAAvxB,eAAA8vB,IAAAC,QAAA/vB,eAAAiwB,IAAAC,QAAAlwB,eAAAowB,IAAAC,QACArwB,eAAAuwB,IAAAC,QAAAxwB,eAAA0wB,IAAAC,QAAA3wB,eAAA6wB,IAAAC,QACA9wB,eAAAgxB,IAAAC,QAAAjxB,eAAAmxB,IAAAC,QAAApxB,eAAAsxB,IAAAC,KAAA;4BACAzB,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACA52B,SAAA1E,GAAA85B,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG;;wBAEA,OAAA52B;;;gBAOA,SAAA62B,YAAAv7B;oBACA,IAAyB0E;oBACzB,IAAyBm1B,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG,IAAqBG;oBACtN3B,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAAG,KAAA/J;oBACA,gBAAAqI,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG;wBACA,KAAA1xB,eAAA8vB,IAAAC,QAAA/vB,eAAAiwB,IAAAC,QAAAlwB,eAAAowB,IAAAC,QACArwB,eAAAuwB,IAAAC,QAAAxwB,eAAA0wB,IAAAC,QAAA3wB,eAAA6wB,IAAAC,QACA9wB,eAAAgxB,IAAAC,QAAAjxB,eAAAmxB,IAAAC,QAAApxB,eAAAsxB,IAAAC,QACAvxB,eAAAyxB,IAAAC,KAAA;4BACA5B,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACAE,KAAAC;4BACA/2B,SAAA1E,GAAA85B,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG,IAAAG;;wBAEA,OAAA/2B;;;gBASA,SAAAg3B,8BAAAC,UAAAva,IAAAzO;oBACAtT,OAAAoL,KAAAkI,SAAArF,QAAA,SAAAG;wBACAonB,oBAAA8G,UAAAva,IAAA3T,UAAAkF,QAAAlF,UAAAgjB;;;gBAUA,SAAAoE,oBAAA8G,UAAAva,IAAA3T,UAAAzM;oBACA;wBACA26B,SAAA9G,oBAAAzT,IAAA,gBAAAwa,oBAAAnuB,WAAAzM,cAAA4I,aAAA;sBAEA,OAAAzK;wBACAw8B,SAAA9G,oBAAAzT,IAAA,gBAAAwa,oBAAAnuB,WAAA;;;gBAGA,IAAqBouB,oBAAA;gBAKrB,SAAAD,oBAAAnC;oBACA,OAAAA,MAAAqC,QAAAD,mBAAA;wBACA,IAAAt2B;wBACA,SAAA8H,KAAA,GAA4BA,KAAAxH,UAAA3D,QAAuBmL,MAAA;4BACnD9H,EAAA8H,KAAA,KAAAxH,UAAAwH;;wBAEA,aAAA9H,EAAA,GAAAw2B;;;gBAWA,SAAAC,oBAAAL,UAAApI,eAAA9yB,MAAAw7B,OAAA3I;oBACA,IAAyBlS,KAAAua,SAAAj+B,cAAA61B,eAAA9yB,MAAA6yB;oBACzB,SAA8Bz2B,IAAA,GAAUA,IAAAo/B,MAAA/5B,QAAkBrF,KAAA;wBAC1D8+B,SAAAjH,oBAAAtT,IAAA6a,MAAA18B,IAAA1C,IAAAo/B,MAAA18B,IAAA1C,IAAA;;oBAEA,OAAAukB;;gBAUA,SAAA8a,gCAAAP,UAAAQ,aAAAF,OAAAG,oBAAA9I;oBACA,IAAyBG;oBACzB,IAAApqB,UAAA+yB,qBAAA;wBACA3I,cAAAkI,SAAAvI,kBAAAgJ,oBAAA9I;wBACA,SAAkCz2B,IAAA,GAAUA,IAAAo/B,MAAA/5B,QAAkBrF,KAAA;4BAC9D8+B,SAAAjH,oBAAAjB,aAAAwI,MAAA18B,IAAA1C,IAAAo/B,MAAA18B,IAAA1C,IAAA;;wBAEA8+B,SAAAjH,oBAAAjB,aAAA,cAAArf,QAAAH;2BAEA;wBACAwf,cAAAuI,oBAAAL,UAAA,MAAAQ,aAAAF,OAAA3I;;oBAEA,OAAAG;;gBASA,SAAA4I,yBAAAC,MAAA5G,SAAA6G,sBAAAC;oBACA,IAAyBC,cAAAC,uBAAAH,qBAAAr6B,SAAA;oBACzB,SAA8BrF,IAAA,GAAUA,IAAA0/B,qBAAAr6B,QAAiCrF,KAAA;wBACzE,IAA6B8/B,YAAAJ,qBAAAh9B,IAAA1C;wBAC7B,IAA6B+/B,cAAAL,qBAAAh9B,IAAA1C,IAAA;wBAC7B,IAA6BggC,kBAAA;wBAC7B,IAAAD,aAAA;4BACAC,aAAAP,KAAAX,SAAArH,aAAAsI,aAAAD,WAAAH,SAAA3uB,KAAAyuB,MAAAM,cAAA,MAAAD;+BAEA;4BACAE,aAAAP,KAAAX,SAAAvH,OAAAsB,SAAAiH,WAAAH,SAAA3uB,KAAAyuB,MAAAK;;wBAEAF,YAAA17B,IAAAlE,IAAA,GAAAggC;;oBAEA,OAAAC,mBAAAjvB,KAAA,MAAA4uB;;gBAMA,SAAAK,mBAAAL;oBACA,SAA8B5/B,IAAA,GAAUA,IAAA4/B,YAAAv6B,QAAwBrF,KAAA;wBAChE4/B,YAAAl9B,IAAA1C;;;gBAMA,SAAAkgC;gBAKA,SAAAL,uBAAAx6B;oBACA,IAAyBgL;oBACzB,IAAAhL,UAAA;wBACAgL,OAAA8vB;2BAEA,IAAA96B,UAAA;wBACAgL,OAAA+vB;2BAEA,IAAA/6B,UAAA;wBACAgL,OAAAgwB;2BAEA,IAAAh7B,UAAA;wBACAgL,OAAAiwB;2BAEA;wBACAjwB,OAAAkwB;;oBAEA,WAAAlwB,KAAAhL;;gBAEA,IAAAm7B,eAAA;oBACA,SAAAA;wBACAvgC,KAAAoF,SAAA;;oBAMAm7B,aAAA38B,UAAAnB,MAAA,SAAA0O;wBAAuD,OAAAlC;;oBAMvDsxB,aAAA38B,UAAAK,MAAA,SAAAkN,OAAAjN;oBACA,OAAAq8B;;gBAEA,IAAAL,eAAA;oBAMA,SAAAA,aAAA96B,QAAAo7B,KAAAC;wBACAzgC,KAAAoF;wBACApF,KAAAwgC;wBACAxgC,KAAAygC;;oBAMAP,aAAAt8B,UAAAnB,MAAA,SAAA0O;wBACA,QAAAA;0BACA;4BACA,OAAAnR,KAAAwgC;;0BACA;4BACA,OAAAxgC,KAAAygC;;0BACA;4BACA,OAAAxxB;;;oBAQAixB,aAAAt8B,UAAAK,MAAA,SAAAkN,OAAAjN;wBACA,QAAAiN;0BACA;4BACAnR,KAAAwgC,MAAAt8B;4BACA;;0BACA;4BACAlE,KAAAygC,MAAAv8B;4BACA;;;oBAGA,OAAAg8B;;gBAEA,IAAAC,eAAA;oBAQA,SAAAA,aAAA/6B,QAAAo7B,KAAAC,KAAAC,KAAAC;wBACA3gC,KAAAoF;wBACApF,KAAAwgC;wBACAxgC,KAAAygC;wBACAzgC,KAAA0gC;wBACA1gC,KAAA2gC;;oBAMAR,aAAAv8B,UAAAnB,MAAA,SAAA0O;wBACA,QAAAA;0BACA;4BACA,OAAAnR,KAAAwgC;;0BACA;4BACA,OAAAxgC,KAAAygC;;0BACA;4BACA,OAAAzgC,KAAA0gC;;0BACA;4BACA,OAAA1gC,KAAA2gC;;0BACA;4BACA,OAAA1xB;;;oBAQAkxB,aAAAv8B,UAAAK,MAAA,SAAAkN,OAAAjN;wBACA,QAAAiN;0BACA;4BACAnR,KAAAwgC,MAAAt8B;4BACA;;0BACA;4BACAlE,KAAAygC,MAAAv8B;4BACA;;0BACA;4BACAlE,KAAA0gC,MAAAx8B;4BACA;;0BACA;4BACAlE,KAAA2gC,MAAAz8B;4BACA;;;oBAGA,OAAAi8B;;gBAEA,IAAAC,eAAA;oBAYA,SAAAA,aAAAh7B,QAAAo7B,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC;wBACA/gC,KAAAoF;wBACApF,KAAAwgC;wBACAxgC,KAAAygC;wBACAzgC,KAAA0gC;wBACA1gC,KAAA2gC;wBACA3gC,KAAA4gC;wBACA5gC,KAAA6gC;wBACA7gC,KAAA8gC;wBACA9gC,KAAA+gC;;oBAMAX,aAAAx8B,UAAAnB,MAAA,SAAA0O;wBACA,QAAAA;0BACA;4BACA,OAAAnR,KAAAwgC;;0BACA;4BACA,OAAAxgC,KAAAygC;;0BACA;4BACA,OAAAzgC,KAAA0gC;;0BACA;4BACA,OAAA1gC,KAAA2gC;;0BACA;4BACA,OAAA3gC,KAAA4gC;;0BACA;4BACA,OAAA5gC,KAAA6gC;;0BACA;4BACA,OAAA7gC,KAAA8gC;;0BACA;4BACA,OAAA9gC,KAAA+gC;;0BACA;4BACA,OAAA9xB;;;oBAQAmxB,aAAAx8B,UAAAK,MAAA,SAAAkN,OAAAjN;wBACA,QAAAiN;0BACA;4BACAnR,KAAAwgC,MAAAt8B;4BACA;;0BACA;4BACAlE,KAAAygC,MAAAv8B;4BACA;;0BACA;4BACAlE,KAAA0gC,MAAAx8B;4BACA;;0BACA;4BACAlE,KAAA2gC,MAAAz8B;4BACA;;0BACA;4BACAlE,KAAA4gC,MAAA18B;4BACA;;0BACA;4BACAlE,KAAA6gC,MAAA38B;4BACA;;0BACA;4BACAlE,KAAA8gC,MAAA58B;4BACA;;0BACA;4BACAlE,KAAA+gC,MAAA78B;4BACA;;;oBAGA,OAAAk8B;;gBAEA,IAAAC,gBAAA;oBAoBA,SAAAA,cAAAj7B,QAAAo7B,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,KAAAC,MAAAC,MAAAC,MAAAC,MAAAC,MAAAC;wBACAvhC,KAAAoF;wBACApF,KAAAwgC;wBACAxgC,KAAAygC;wBACAzgC,KAAA0gC;wBACA1gC,KAAA2gC;wBACA3gC,KAAA4gC;wBACA5gC,KAAA6gC;wBACA7gC,KAAA8gC;wBACA9gC,KAAA+gC;wBACA/gC,KAAAghC;wBACAhhC,KAAAihC;wBACAjhC,KAAAkhC;wBACAlhC,KAAAmhC;wBACAnhC,KAAAohC;wBACAphC,KAAAqhC;wBACArhC,KAAAshC;wBACAthC,KAAAuhC;;oBAMAlB,cAAAz8B,UAAAnB,MAAA,SAAA0O;wBACA,QAAAA;0BACA;4BACA,OAAAnR,KAAAwgC;;0BACA;4BACA,OAAAxgC,KAAAygC;;0BACA;4BACA,OAAAzgC,KAAA0gC;;0BACA;4BACA,OAAA1gC,KAAA2gC;;0BACA;4BACA,OAAA3gC,KAAA4gC;;0BACA;4BACA,OAAA5gC,KAAA6gC;;0BACA;4BACA,OAAA7gC,KAAA8gC;;0BACA;4BACA,OAAA9gC,KAAA+gC;;0BACA;4BACA,OAAA/gC,KAAAghC;;0BACA;4BACA,OAAAhhC,KAAAihC;;0BACA;4BACA,OAAAjhC,KAAAkhC;;0BACA;4BACA,OAAAlhC,KAAAmhC;;0BACA;4BACA,OAAAnhC,KAAAohC;;0BACA;4BACA,OAAAphC,KAAAqhC;;0BACA;4BACA,OAAArhC,KAAAshC;;0BACA;4BACA,OAAAthC,KAAAuhC;;0BACA;4BACA,OAAAtyB;;;oBAQAoxB,cAAAz8B,UAAAK,MAAA,SAAAkN,OAAAjN;wBACA,QAAAiN;0BACA;4BACAnR,KAAAwgC,MAAAt8B;4BACA;;0BACA;4BACAlE,KAAAygC,MAAAv8B;4BACA;;0BACA;4BACAlE,KAAA0gC,MAAAx8B;4BACA;;0BACA;4BACAlE,KAAA2gC,MAAAz8B;4BACA;;0BACA;4BACAlE,KAAA4gC,MAAA18B;4BACA;;0BACA;4BACAlE,KAAA6gC,MAAA38B;4BACA;;0BACA;4BACAlE,KAAA8gC,MAAA58B;4BACA;;0BACA;4BACAlE,KAAA+gC,MAAA78B;4BACA;;0BACA;4BACAlE,KAAAghC,MAAA98B;4BACA;;0BACA;4BACAlE,KAAAihC,MAAA/8B;4BACA;;0BACA;4BACAlE,KAAAkhC,OAAAh9B;4BACA;;0BACA;4BACAlE,KAAAmhC,OAAAj9B;4BACA;;0BACA;4BACAlE,KAAAohC,OAAAl9B;4BACA;;0BACA;4BACAlE,KAAAqhC,OAAAn9B;4BACA;;0BACA;4BACAlE,KAAAshC,OAAAp9B;4BACA;;0BACA;4BACAlE,KAAAuhC,OAAAr9B;4BACA;;;oBAGA,OAAAm8B;;gBAEA,IAAAC,qBAAA;oBAKA,SAAAA,mBAAAl7B;wBACA,IAAAgb;wBACA,SAAA7P,KAAA,GAA4BA,KAAAxH,UAAA3D,QAAuBmL,MAAA;4BACnD6P,OAAA7P,KAAA,KAAAxH,UAAAwH;;wBAEAvQ,KAAAoF;wBACApF,KAAAwhC,UAAAphB;;oBAMAkgB,mBAAA18B,UAAAnB,MAAA,SAAA0O;wBAA6D,OAAAnR,KAAAwhC,QAAArwB;;oBAM7DmvB,mBAAA18B,UAAAK,MAAA,SAAAkN,OAAAjN;wBAAoElE,KAAAwhC,QAAArwB,SAAAjN;;oBACpE,OAAAo8B;;gBAEA,IAAqBmB,qBAAA,IAAAlB;gBAGrB,IAAAmB,aAAAn/B,OAAAo/B;oBACApH;oBACAM;oBACAC;oBACAE;oBACAI;oBACAoB;oBACAE;oBACAE;oBACAC;oBACAC;oBACAG;oBACAG;oBACAG;oBACAG;oBACAG;oBACAG;oBACAG;oBACAG;oBACAG;oBACAG;oBACA7G;oBACAmH;oBACAE;oBACAG;oBACAU;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC;oBACAmB;;gBAUA,IAAAG,cAAA5hC,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAWA,IAAA0pB,eAAA;oBACA,SAAAA;oBAOAA,aAAAj+B,UAAAk+B,WAAA;oBAMAD,aAAAj+B,UAAAuV,WAAA;oBAMA0oB,aAAAj+B,UAAA2G,WAAA;oBAMAs3B,aAAAj+B,UAAAm+B,WAAA;oBAMAF,aAAAj+B,UAAAo+B,oBAAA;oBAMAH,aAAAj+B,UAAAy1B,gBAAA;oBAMAwI,aAAAj+B,UAAA6G,UAAA;oBAOAo3B,aAAAj+B,UAAA6rB,YAAA,SAAApuB;oBACA,OAAAwgC;;gBAEA,IAAAI,gBAAA,SAAA5pB;oBACAupB,YAAAK,eAAA5pB;oBAOA,SAAA4pB,cAAAC,QAAAC,aAAAC,gBAAAC;wBACAhqB,OAAAvU,KAAA9D;wBACAA,KAAAkiC;wBACAliC,KAAAmiC;wBACAniC,KAAAoiC;wBACApiC,KAAAqiC;;oBAEA9/B,OAAAC,eAAAy/B,cAAAr+B,WAAA;wBAIAnB,KAAA;4BAA8B,WAAAwlB,WAAAjoB,KAAAoiC;;wBAC9Bp+B,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAy/B,cAAAr+B,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAmiC,YAAAhpB,SAAAnZ,KAAAkiC;;wBAC9Bl+B,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAy/B,cAAAr+B,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAqiC;;wBAC9Br+B,YAAA;wBACAD,cAAA;;oBAGAxB,OAAAC,eAAAy/B,cAAAr+B,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAmiC,YAAAG;;wBAC9Bt+B,YAAA;wBACAD,cAAA;;oBAGAxB,OAAAC,eAAAy/B,cAAAr+B,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAmiC,YAAAG;;wBAC9Bt+B,YAAA;wBACAD,cAAA;;oBAGAxB,OAAAC,eAAAy/B,cAAAr+B,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAqiC,WAAA;;wBAC9Br+B,YAAA;wBACAD,cAAA;;oBAKAk+B,cAAAr+B,UAAA6G,UAAA;wBAAuDzK,KAAAmiC,YAAAI;;oBAKvDN,cAAAr+B,UAAA6rB,YAAA,SAAApuB;wBAAiErB,KAAA+hC,SAAAtS,UAAApuB;;oBACjE,OAAA4gC;kBACKJ;gBAIL,IAAAW,mBAAA;oBAMA,SAAAA,iBAAAz3B,UAAA03B,YAAAC;wBACA1iC,KAAA+K;wBACA/K,KAAAyiC;wBACAziC,KAAA0iC;;oBAEAngC,OAAAC,eAAAggC,iBAAA5+B,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA0iC;;wBAC9B1+B,YAAA;wBACAD,cAAA;;oBASAy+B,iBAAA5+B,UAAAwL,SAAA,SAAA+J,UAAAwpB,kBAAArD;wBACA,IAAAqD,0BAAA;4BAA8CA,mBAAA;;wBAC9C,IAAArD,4BAAA;4BAAgDA,qBAAA;;wBAChD,IAA6BsD,KAAAzpB,SAAA1W,IAAA83B;wBAC7B,KAAAoI,kBAAA;4BACAA;;wBAEA,IAA6BZ,WAAA,IAAA/hC,KAAAyiC,WAAAG,IAAA;wBAC7B,OAAAb,SAAAc,eAAAvD,oBAAAnmB,UAAAwpB;;oBAEA,OAAAH;;gBAUA,IAAAM,cAAA9iC,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAKA,IAAA4qB,0BAAA,SAAA1qB;oBACAyqB,YAAAC,yBAAA1qB;oBAIA,SAAA0qB,wBAAAj4B;wBACAuN,OAAAvU,KAAA9D,MAAA,oCAAA0M,UAAA5B,aAAA;wBACA9K,KAAA8K;;oBAEA,OAAAi4B;kBACK3qB;gBACL,IAAA4qB,gCAAA;oBACA,SAAAA;oBAMAA,8BAAAp/B,UAAAqH,0BAAA,SAAAH;wBACA,UAAAi4B,wBAAAj4B;;oBAEA,OAAAk4B;;gBAMA,IAAA53B,2BAAA;oBACA,SAAAA;oBAOAA,yBAAAxH,UAAAqH,0BAAA,SAAAH;oBACAM,yBAAA4M,OAAA,IAAAgrB;oBACA,OAAA53B;;gBAEA,IAAA63B,kCAAA;oBAKA,SAAAA,gCAAAv4B,WAAA+W;wBACAzhB,KAAAyhB;wBACAzhB,KAAAkjC,aAAA,IAAAr1B;wBACA,SAAA9N,IAAA,GAA2BA,IAAA2K,UAAAtF,QAAsBrF,KAAA;4BACjD,IAAAN,UAAAiL,UAAA3K;4BACAC,KAAAkjC,WAAAj/B,IAAAxE,QAAA45B,eAAA55B;;;oBAOAwjC,gCAAAr/B,UAAAqH,0BAAA,SAAAH;wBACA,IAA6BlD,SAAA5H,KAAAkjC,WAAAzgC,IAAAqI;wBAC7B,KAAAlD,QAAA;4BACAA,SAAA5H,KAAAyhB,QAAAxW,wBAAAH;;wBAEA,OAAAlD;;oBAEA,OAAAq7B;;gBAGA,IAAqBE;gBACrB,IAAqBC;gBAIrB,SAAAC;oBACA,IAAyBC,MAAA;oBACzB,IAAAA,KAAA;wBACAH,QAAAG,IAAA;wBACA,IAAAH,OAAA;4BACAC,SAAAD,MAAA;4BACA;;;oBAGA;;gBAOA,SAAAI,YAAArpB,WAAAspB;oBACA,IAAAA,eAAA;wBAA+BA,QAAA;;oBAC/B,OAAAJ,OAAAG,YAAArpB,WAAAspB;;gBAOA,SAAAC,MAAAC,OAAAC;oBACAR,MAAAS,WAAAF,OAAAC;oBACA,OAAAA;;gBAOA,SAAAE,eAAAC,WAAAC;oBACA,OAAAZ,MAAAa,eAAAF,WAAAC;;gBAMA,SAAAE,aAAAC;oBACAf,MAAAc,aAAAC;;gBAMA,IAAqBC,aAAAd;gBAMrB,SAAAe,UAAAC,MAAAC;oBACA;;gBAgCA,IAAqBC,iBAAAJ,aAAAZ,cAAA,SAAArpB,WAAAspB;oBAA6E,OAAAY;;gBAUlG,IAAqBI,WAAAL,aAAAV,QAAA,SAAAgB,GAAAz7B;oBAAqD,OAAAA;;gBAc1E,IAAqB07B,oBAAAP,aAAAN,iBAAA,SAAAC,WAAAC;oBAAoF;;gBAOzG,IAAqBY,kBAAAR,aAAAF,eAAA,SAAAj7B;oBAAgE;;gBAQrF,IAAA47B,cAAA;oBAIA,SAAAA,YAAAC;wBACA7kC,KAAA6kC;wBAEA7kC,KAAA8kC,gBAAA;wBAEA9kC,KAAA+kC,gBAAA;wBAOA/kC,KAAAglC,WAAA;wBAEAhlC,KAAAilC;wBACAjlC,KAAAklC;;oBAMAN,YAAAhhC,UAAAshC,sBAAA;wBACA,IAAA70B,QAAArQ;wBACAA,KAAA6kC,QAAAM,WAAA3c;4BACAvD,MAAA;gCACA5U,MAAA20B,WAAA;gCACA30B,MAAA00B,gBAAA;;;wBAGA/kC,KAAA6kC,QAAAza,kBAAA;4BACA/Z,MAAAw0B,QAAAO,SAAA5c;gCACAvD,MAAA;oCACA+D,OAAAiB;oCACAje,kBAAA;wCACAqE,MAAA00B,gBAAA;wCACA10B,MAAAg1B;;;;;;oBASAT,YAAAhhC,UAAA0hC,8BAAA;wBACAtlC,KAAA8kC,iBAAA;wBACA9kC,KAAAglC,WAAA;wBACA,OAAAhlC,KAAA8kC;;oBAKAF,YAAAhhC,UAAA2hC,8BAAA;wBACAvlC,KAAA8kC,iBAAA;wBACA,IAAA9kC,KAAA8kC,gBAAA;4BACA,UAAAvjC,MAAA;;wBAEAvB,KAAAqlC;wBACA,OAAArlC,KAAA8kC;;oBAKAF,YAAAhhC,UAAA4hC,WAAA;wBACA,OAAAxlC,KAAA+kC,iBAAA/kC,KAAA8kC,iBAAA,MAAA9kC,KAAA6kC,QAAAY;;oBAMAb,YAAAhhC,UAAAyhC,uBAAA;wBACA,IAAAh1B,QAAArQ;wBACA,IAAAA,KAAAwlC,YAAA;4BAEAx5B,kBAAA;gCACA,OAAAqE,MAAA40B,WAAA7/B,WAAA;oCACAiL,MAAA40B,WAAA59B,MAAAgJ,MAAA20B;;gCAEA30B,MAAA20B,WAAA;;+BAGA;4BAEAhlC,KAAAglC,WAAA;;;oBAOAJ,YAAAhhC,UAAA8hC,aAAA,SAAArkC;wBACArB,KAAAilC,WAAA1hC,KAAAlC;wBACArB,KAAAqlC;;oBAKAT,YAAAhhC,UAAA+hC,yBAAA;wBAAoE,OAAA3lC,KAAA8kC;;oBAQpEF,YAAAhhC,UAAAgiC,eAAA,SAAAC,OAAAhsB,UAAAisB;wBAEA;;oBAQAlB,YAAAhhC,UAAAmiC,gBAAA,SAAAF,OAAAhsB,UAAAisB;wBAEA;;oBAEAlB,YAAAj8B;wBACa9H,MAAAsK;;oBAGby5B,YAAA1yB,iBAAA;wBAAkD;4BACrCrR,MAAAmoB;;;oBAEb,OAAA4b;;gBAMA,IAAAoB,sBAAA;oBACA,SAAAA;wBAEAhmC,KAAAimC,gBAAA,IAAAp4B;wBACAq4B,mBAAAC,YAAAnmC;;oBAOAgmC,oBAAApiC,UAAAwiC,sBAAA,SAAAz5B,OAAA05B;wBACArmC,KAAAimC,cAAAhiC,IAAA0I,OAAA05B;;oBAMAL,oBAAApiC,UAAA0iC,iBAAA,SAAAC;wBAAwE,OAAAvmC,KAAAimC,cAAAxjC,IAAA8jC;;oBAIxEP,oBAAApiC,UAAA4iC,sBAAA;wBAAyE,OAAA77B,MAAAC,KAAA5K,KAAAimC,cAAA7lB;;oBAIzE4lB,oBAAApiC,UAAA6iC,qBAAA;wBAAwE,OAAA97B,MAAAC,KAAA5K,KAAAimC,cAAAt4B;;oBAMxEq4B,oBAAApiC,UAAA8iC,wBAAA,SAAAH,MAAAI;wBACA,IAAAA,yBAAA;4BAA6CA,kBAAA;;wBAC7C,OAAAT,mBAAAQ,sBAAA1mC,MAAAumC,MAAAI;;oBAEAX,oBAAAr9B;wBACa9H,MAAAsK;;oBAGb66B,oBAAA9zB,iBAAA;wBAA0D;;oBAC1D,OAAA8zB;;gBAEA,IAAAY,sBAAA;oBACA,SAAAA;oBAMAA,oBAAAhjC,UAAAuiC,cAAA,SAAAU;oBAOAD,oBAAAhjC,UAAA8iC,wBAAA,SAAAG,UAAAN,MAAAI;wBACA;;oBAEA,OAAAC;;gBAQA,SAAAE,qBAAAhqB;oBACAopB,qBAAAppB;;gBAEA,IAAqBopB,qBAAA,IAAAU;gBASrB,IAAAG,cAAA/mC,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAEA,IAAqB6uB,WAAA;gBACrB,IAAqBC,iBAAA;gBACrB,IAAqBC;gBAYrB,SAAAC;oBACA,IAAAF,gBAAA;wBACA,UAAA1lC,MAAA;;oBAEAylC,WAAA;;gBAWA,SAAAI;oBACAH,iBAAA;oBACA,OAAAD;;gBAOA,IAAAK,eAAA;oBAKA,SAAAA,aAAA1jC,MAAAgJ;wBACA3M,KAAA2D;wBACA3D,KAAA2M;;oBAEA,OAAA06B;;gBAUA,SAAAC,eAAAnuB;oBACA,IAAA+tB,wBAAAK,WAAA;wBACA,UAAAhmC,MAAA;;oBAEA2lC,YAAA/tB,SAAA1W,IAAA+kC;oBACA,IAAyBC,QAAAtuB,SAAA1W,IAAAikB,sBAAA;oBACzB,IAAA+gB,OACAA,MAAAj3B,QAAA,SAAAk3B;wBAA2C,OAAAA;;oBAC3C,OAAAR;;gBAWA,SAAAS,sBAAAC,uBAAAjkC,MAAAmQ;oBACA,IAAAA,mBAAA;wBAAmCA;;oBACnC,IAAyB+zB,SAAA,IAAA71B,YAAA,eAAArO;oBACzB,gBAAAmkC;wBACA,IAAAA,wBAAA;4BAA4CA;;wBAC5C,KAAAC,eAAA;4BACA,IAAAH,uBAAA;gCACAA,sBAAA9zB,UAAA9C,OAAA82B,gBAAA92B;oCAAmF4O,SAAAioB;oCAAAnoB,UAAA;;mCAEnF;gCACA4nB,eAAAxmB,mBAAAE,iBAAAlN,UAAA9C,OAAA82B,gBAAA92B;oCAAgH4O,SAAAioB;oCAAAnoB,UAAA;;;;wBAGhH,OAAAsoB,eAAAH;;;gBAWA,SAAAG,eAAAC;oBACA,IAAyBC,WAAAH;oBACzB,KAAAG,UAAA;wBACA,UAAA3mC,MAAA;;oBAEA,KAAA2mC,SAAA/uB,SAAA1W,IAAAwlC,eAAA;wBACA,UAAA1mC,MAAA;;oBAEA,OAAA2mC;;gBAQA,SAAAC;oBACA,IAAAjB,wBAAAK,WAAA;wBACAL,UAAAz8B;;;gBASA,SAAAs9B;oBACA,OAAAb,wBAAAK,YAAAL,YAAA;;gBAaA,IAAAM,cAAA;oBACA,SAAAA;oBA4BAA,YAAA5jC,UAAAwkC,yBAAA,SAAAC;oBAoBAb,YAAA5jC,UAAA0kC,kBAAA,SAAA/gB,YAAAghB;oBAOAf,YAAA5jC,UAAA6rB,YAAA,SAAApuB;oBAOAmmC,YAAA5jC,UAAAuV,WAAA;oBAMAquB,YAAA5jC,UAAA6G,UAAA;oBAKA+8B,YAAA5jC,UAAA2jC,YAAA;oBACA,OAAAC;;gBAOA,SAAAgB,6BAAAzgC,cAAA1G;oBACA;wBACA,IAA6BuG,SAAAvG;wBAC7B,IAAAgkB,UAAAzd,SAAA;4BACA,OAAAA,OAAA6gC,MAAA,SAAApmC;gCACA0F,aAAAmb,YAAA7gB;gCAEA,MAAAA;;;wBAGA,OAAAuF;sBAEA,OAAAvF;wBACA0F,aAAAmb,YAAA7gB;wBAEA,MAAAA;;;gBAGA,IAAAqmC,eAAA,SAAArwB;oBACA0uB,YAAA2B,cAAArwB;oBAIA,SAAAqwB,aAAAC;wBACAtwB,OAAAvU,KAAA9D;wBACAA,KAAA2oC;wBACA3oC,KAAA4oC;wBACA5oC,KAAA6oC;wBACA7oC,KAAA8oC,aAAA;;oBAMAJ,aAAA9kC,UAAA6rB,YAAA,SAAApuB;wBAAgErB,KAAA6oC,kBAAAtlC,KAAAlC;;oBAChEkB,OAAAC,eAAAkmC,aAAA9kC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA2oC;;wBAC9B3kC,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAkmC,aAAA9kC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA8oC;;wBAC9B9kC,YAAA;wBACAD,cAAA;;oBAKA2kC,aAAA9kC,UAAA6G,UAAA;wBACA,IAAAzK,KAAA8oC,YAAA;4BACA,UAAAvnC,MAAA;;wBAEAvB,KAAA4oC,SAAAxhC,QAAAoJ,QAAA,SAAA7Q;4BAA6D,OAAAA,OAAA8K;;wBAC7DzK,KAAA6oC,kBAAAr4B,QAAA,SAAAkvB;4BAAgE,OAAAA;;wBAChE1/B,KAAA8oC,aAAA;;oBAMAJ,aAAA9kC,UAAAwkC,yBAAA,SAAAC;wBACA,OAAAroC,KAAA+oC,gCAAAV,eAAA;;oBAOAK,aAAA9kC,UAAAmlC,kCAAA,SAAAV,eAAAW;wBACA,IAAA34B,QAAArQ;wBAKA,KAAAgpC,QACAA,SAAA,IAAAhgB;4BAAqCC,sBAAAme;;wBAGrC,OAAA4B,OAAA9e,IAAA;4BACA,IAAiC+e,iBAAAnoB,mBAAAE;gCAA2DpB,SAAAoJ;gCAAAtJ,UAAAspB;iCAAoC34B,MAAA8I;4BAChI,IAAiC+vB,YAAAb,cAAAj5B,OAAA65B;4BACjC,IAAiCE,mBAAAD,UAAA/vB,SAAA1W,IAAAsgB,cAAA;4BACjC,KAAAomB,kBAAA;gCACA,UAAA5nC,MAAA;;4BAEA2nC,UAAAzZ,UAAA;gCAAiD,OAAAzL,YAAAxZ,OAAA6F,MAAAu4B,UAAAM;;4BACjDF,OAAAI,QAAA5gB;gCAA0CvD,MAAA,SAAA3c;oCAAyB6gC,iBAAAjmB,YAAA5a;;;4BACnE,OAAAkgC,6BAAAW,kBAAA;gCACA,IAAqCE,aAAAH,UAAA/vB,SAAA1W,IAAAijB;gCACrC,OAAA2jB,WAAAC,YAAAhkB,KAAA;oCACAjV,MAAAk5B,mBAAAL;oCACA,OAAAA;;;;;oBAUAR,aAAA9kC,UAAA0kC,kBAAA,SAAA/gB,YAAAghB;wBACA,IAAAA,yBAAA;4BAA6CA;;wBAC7C,OAAAvoC,KAAAwpC,yBAAAjiB,YAAAghB,iBAAA;;oBASAG,aAAA9kC,UAAA4lC,2BAAA,SAAAjiB,YAAAghB,iBAAAS,QAAAS;wBACA,IAAAp5B,QAAArQ;wBACA,IAAAuoC,yBAAA;4BAA6CA;;wBAC7C,IAA6BmB,kBAAA1pC,KAAAmZ,SAAA1W,IAAAslB;wBAC7B,IAA6B4hB,WAAAD,gBAAA1hB,eAAArd,MAAA4D,QAAAg6B;wBAI7B,IAAAkB,0BAAA;4BACA,OAAAE,SAAAjiB,mCAAAH,YACAjC,KAAA,SAAAxU;gCACA,IAAAoW,kBAAApW,GAAAoW,iBAAAC,qBAAArW,GAAAqW;gCACAsiB,yBAAAtiB;gCACA,OAAA9W,MAAA04B,gCAAA7hB,iBAAA8hB;;;wBAGA,OAAAW,SAAAniB,mBAAAD,YACAjC,KAAA,SAAA+iB;4BAAgD,OAAAh4B,MAAA04B,gCAAAV,eAAAW;;;oBAMhDN,aAAA9kC,UAAA2lC,qBAAA,SAAAL;wBACA,IAA6BU,SAAAV,UAAA/vB,SAAA1W,IAAAonC;wBAC7B,IAAAX,UAAAY,mBAAA1kC,SAAA;4BACA8jC,UAAAY,mBAAAt5B,QAAA,SAAAu5B;gCAA6E,OAAAH,OAAAlzB,UAAAqzB;;+BAE7E,IAAAb,UAAA3+B,SAAAy/B,eAAA;4BACAd,UAAA3+B,SAAAy/B,cAAAJ;+BAEA;4BACA,UAAAroC,MAAA,gBAAAmL,UAAAw8B,UAAA3+B,SAAAyE,eAAA,+GACA;;wBAEAhP,KAAA4oC,SAAArlC,KAAA2lC;;oBAEAR,aAAA//B;wBACa9H,MAAAsK;;oBAGbu9B,aAAAx2B,iBAAA;wBAAmD;4BACtCrR,MAAAkX;;;oBAEb,OAAA2wB;kBACKlB;gBASL,IAAAqC,iBAAA;oBACA,SAAAA;oBAiBAA,eAAAjmC,UAAA8S,YAAA,SAAA1M;oBAaA6/B,eAAAjmC,UAAAqmC,OAAA;oBAOAJ,eAAAjmC,UAAAsmC,iBAAA;oBAMAL,eAAAjmC,UAAAumC,aAAA;oBASAN,eAAAjmC,UAAAwmC,aAAA,SAAA5K;oBAOAqK,eAAAjmC,UAAAuzB,aAAA,SAAAqI;oBAMAqK,eAAAjmC,UAAAymC,YAAA;oBACA,OAAAR;;gBAEA,IAAAS,kBAAA,SAAAjyB;oBACA0uB,YAAAuD,iBAAAjyB;oBAWA,SAAAiyB,gBAAAve,OAAA9I,UAAA0lB,WAAA4B,mBAAAC,2BAAAC,aAAAC,sBAAAC;wBACA,IAAAt6B,QAAArQ;wBACAqY,OAAAvU,KAAA9D;wBACAA,KAAA+rB;wBACA/rB,KAAAijB;wBACAjjB,KAAA2oC;wBACA3oC,KAAAuqC;wBACAvqC,KAAAwqC;wBACAxqC,KAAAyqC;wBACAzqC,KAAA0qC;wBACA1qC,KAAA2qC;wBACA3qC,KAAA4qC;wBACA5qC,KAAA6qC;wBACA7qC,KAAA8qC;wBACA9qC,KAAA+qC;wBACA/qC,KAAAgrC,eAAA;wBACAhrC,KAAAirC,uBAAA;wBACAjrC,KAAAirC,uBAAA7D;wBACApnC,KAAA+rB,MAAAmf,iBAAA1iB;4BAAmDvD,MAAA;gCAAoB5U,MAAA0b,MAAA7B,IAAA;oCAA8B7Z,MAAA45B;;;;;oBAMrGK,gBAAA1mC,UAAAwmC,aAAA,SAAAe;wBACA,IAA6B3L,OAAA,QAAA4L;wBAC7BprC,KAAA+qC,OAAAxnC,KAAAi8B;wBACAA,KAAA6L,eAAArrC;;oBAMAsqC,gBAAA1mC,UAAAuzB,aAAA,SAAAgU;wBACA,IAA6B3L,OAAA,QAAA4L;wBAC7BpnB,YAAAxZ,OAAAxK,KAAA+qC,QAAAvL;wBACAA,KAAAhK;;oBAMA8U,gBAAA1mC,UAAA8S,YAAA,SAAA40B;wBACA,IAAAj7B,QAAArQ;wBACA,KAAAA,KAAAyqC,YAAAtlB,MAAA;4BACA,UAAA5jB,MAAA;;wBAEA,IAA6ByI;wBAC7B,IAAAshC,8BAAA9I,kBAAA;4BACAx4B,mBAAAshC;+BAEA;4BACAthC,mBAAAhK,KAAAwqC,0BAAAv/B,wBAAAqgC;;wBAEAtrC,KAAA8qC,oBAAAvnC,KAAAyG,iBAAAqvB;wBACA,IAA6BkS,UAAAvhC,iBAAAoF,OAAApP,KAAA2oC,eAAA3+B,iBAAAe;wBAC7BwgC,QAAA9b,UAAA;4BAA2Cpf,MAAAm7B,iBAAAD;;wBAC3C,IAA6BlF,cAAAkF,QAAApyB,SAAA1W,IAAAmiC,aAAA;wBAC7B,IAAAyB,aAAA;4BACAkF,QAAApyB,SAAA1W,IAAAujC,qBACAI,oBAAAmF,QAAAzJ,SAAA5Z,eAAAme;;wBAEArmC,KAAAyrC,eAAAF;wBACA,IAAAnE,aAAA;4BACApnC,KAAAijB,SAAA3V,IAAA;;wBAEA,OAAAi+B;;oBAMAjB,gBAAA1mC,UAAA6nC,iBAAA,SAAArhC;wBACApK,KAAAoqC,WAAAhgC,aAAA23B;wBACA/hC,KAAAiqC;wBACAjqC,KAAA6qC,gBAAAtnC,KAAA6G;wBAEA,IAA6BshC,YAAA1rC,KAAA2oC,UAAAlmC,IAAAkkB,4BAC7B3V,OAAAhR,KAAA4qC;wBACAc,UAAAl7B,QAAA,SAAAkvB;4BAAmD,OAAAA,SAAAt1B;;;oBAMnDkgC,gBAAA1mC,UAAA4nC,mBAAA,SAAAphC;wBACApK,KAAAm3B,WAAA/sB,aAAA23B;wBACA/d,YAAAxZ,OAAAxK,KAAA6qC,iBAAAzgC;;oBAKAkgC,gBAAA1mC,UAAAqmC,OAAA;wBACA,IAAAjqC,KAAAgrC,cAAA;4BACA,UAAAzpC,MAAA;;wBAEA,IAA6BmiC,QAAA4G,gBAAAqB;wBAC7B;4BACA3rC,KAAAgrC,eAAA;4BACAhrC,KAAA+qC,OAAAv6B,QAAA,SAAAgvB;gCAAqD,OAAAA,KAAA8C,IAAA7M;;4BACrD,IAAAz1B,KAAAirC,sBAAA;gCACAjrC,KAAA+qC,OAAAv6B,QAAA,SAAAgvB;oCAAyD,OAAAA,KAAA8C,IAAA5M;;;0BAGzD;4BACA11B,KAAAgrC,eAAA;4BACAxG,SAAAd;;;oBAMA4G,gBAAA1mC,UAAAoS,cAAA;wBAEAhW,KAAA+qC,OAAA3jC,QAAAoJ,QAAA,SAAAgvB;4BAAyD,OAAAA,KAAA/0B;;;oBAEzDlI,OAAAC,eAAA8nC,gBAAA1mC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA+qC,OAAA3lC;;wBAC9BpB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA8nC,gBAAA1mC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA8qC;;wBAC9B9mC,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA8nC,gBAAA1mC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA6qC;;wBAC9B7mC,YAAA;wBACAD,cAAA;;oBAGAumC,gBAAAqB,aAAApH,eAAA;oBACA+F,gBAAA3hC;wBACa9H,MAAAsK;;oBAGbm/B,gBAAAp4B,iBAAA;wBAAsD;4BACzCrR,MAAAmoB;;4BACAnoB,MAAAgmB;;4BACAhmB,MAAAkX;;4BACAlX,MAAAkiB;;4BACAliB,MAAAuK;;4BACAvK,MAAA6kB;;4BACA7kB,MAAAmlC;4BAAAr9B;gCAA0C9H,MAAA+Q;;;4BAC1C/Q,MAAA+jC;4BAAAj8B;gCAAkC9H,MAAA+Q;;;;oBAE/C,OAAA04B;kBACKT;gBASL,IAAA+B,cAAA5rC,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAWA,IAAA0zB,cAAA;oBACA,SAAAA;oBAOAA,YAAAjoC,UAAAuV,WAAA;oBAOA0yB,YAAAjoC,UAAAkoC,2BAAA;oBAMAD,YAAAjoC,UAAA2G,WAAA;oBAMAshC,YAAAjoC,UAAA6G,UAAA;oBAOAohC,YAAAjoC,UAAA6rB,YAAA,SAAApuB;oBACA,OAAAwqC;;gBAKA,IAAAE,kBAAA;oBAKA,SAAAA,gBAAAC,gBAAAC;wBACAjsC,KAAAgsC;wBACAhsC,KAAAisC;;oBAEA1pC,OAAAC,eAAAupC,gBAAAnoC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAisC;;wBAC9BjoC,YAAA;wBACAD,cAAA;;oBAMAgoC,gBAAAnoC,UAAAwL,SAAA,SAAA88B;wBACA,KAAAA,gBAAA;4BACAA,iBAAAn0B,SAAAC;;wBAEA,IAA6BzN,WAAA,IAAAvK,KAAAgsC,eAAAE;wBAC7B3hC,SAAA6E;wBACA,OAAA7E;;oBAEA,OAAAwhC;;gBAEA,IAAqBI,aAAA,IAAA5pC;gBAIrB,IAAA6pC,mBAAA,SAAA/zB;oBACAuzB,YAAAQ,kBAAA/zB;oBAMA,SAAA+zB,iBAAA7kC,QAAAmD,WAAAo/B;wBACAzxB,OAAAvU,KAAA9D,MAAA0K,WAAAnD,OAAA9E,IAAA2I,mDAAA4M;wBACAhY,KAAAuH;wBACAvH,KAAA8pC;wBACA9pC,KAAA6oC;wBACA7oC,KAAA8oC,aAAA;;oBAKAsD,iBAAAxoC,UAAAwL,SAAA;wBAAyDpP,KAAAuK,WAAAvK,KAAAqsC;;oBAKzDD,iBAAAxoC,UAAAyoC,iBAAA;oBAMAD,iBAAAxoC,UAAAnB,MAAA,SAAAkK,OAAAmL;wBACA,IAAAA,uBAAA;4BAA2CA,gBAAAF;;wBAC3C,IAAAjL,UAAAoL,YAAApL,UAAAvB,0BAAA;4BACA,OAAApL;;wBAEA,IAA6B4H,SAAA5H,KAAAssC,YAAA3/B,OAAAw/B;wBAC7B,OAAAvkC,WAAAukC,aAAAnsC,KAAAuH,OAAA9E,IAAAkK,OAAAmL,iBAAAlQ;;oBAQAwkC,iBAAAxoC,UAAA0oC,cAAA,SAAA3/B,OAAAmL;oBACAvV,OAAAC,eAAA4pC,iBAAAxoC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC;;wBAC9BgE,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA4pC,iBAAAxoC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC;;wBAC9BgE,YAAA;wBACAD,cAAA;;oBAKAqoC,iBAAAxoC,UAAA6G,UAAA;wBACA,IAAAzK,KAAA8oC,YAAA;4BACA,UAAAvnC,MAAA,mBAAAmL,UAAA1M,KAAAuK,SAAAyE,eAAA;;wBAEAhP,KAAA8oC,aAAA;wBACA9oC,KAAAusC;wBACAvsC,KAAA6oC,kBAAAr4B,QAAA,SAAAkvB;4BAAgE,OAAAA;;;oBAMhE0M,iBAAAxoC,UAAA6rB,YAAA,SAAApuB;wBAAoErB,KAAA6oC,kBAAAtlC,KAAAlC;;oBAKpE+qC,iBAAAxoC,UAAA2oC,kBAAA;oBACA,OAAAH;kBACKnJ;gBAcL,IAAAuJ,wBAAA;oBACA,SAAAA;oBAOAA,sBAAA5oC,UAAA6oC,OAAA,SAAAC;oBACA,OAAAF;;gBAEA,IAAqBG,kBAAA,IAAA9+B;gBAQrB,SAAA++B,sBAAAjmC,IAAAlH;oBACA,IAAyB6gB,WAAAqsB,gBAAAlqC,IAAAkE;oBACzB,IAAA2Z,UAAA;wBACA,UAAA/e,MAAA,qCAAAoF,KAAA,QAAA2Z,SAAAiH,WAAA5jB,OAAA,SAAAlE,QAAA8nB,WAAA5jB;;oBAEAgpC,gBAAA1oC,IAAA0C,IAAAlH;;gBAUA,SAAAotC,iBAAAlmC;oBACA,IAAyBlH,UAAAktC,gBAAAlqC,IAAAkE;oBACzB,KAAAlH,SACA,UAAA8B,MAAA,uBAAAoF,KAAA;oBACA,OAAAlH;;gBA0BA,IAAAqtC,YAAA;oBACA,SAAAA;wBACA9sC,KAAA+sC,SAAA;wBACA/sC,KAAAgtC;wBACAhtC,KAAAitC,WAAA,IAAA7kB;;oBAEA7lB,OAAAC,eAAAsqC,UAAAlpC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAitC;;wBAC9BjpC,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAsqC,UAAAlpC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAgtC,SAAA5nC;;wBAC9BpB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAsqC,UAAAlpC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAgtC,SAAA;;wBAC9BhpC,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAsqC,UAAAlpC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAgtC,SAAAhtC,KAAAoF,SAAA;;wBAC9BpB,YAAA;wBACAD,cAAA;;oBAQA+oC,UAAAlpC,UAAAqV,MAAA,SAAA/V;wBAAiD,OAAAlD,KAAAgtC,SAAA/zB,IAAA/V;;oBAOjD4pC,UAAAlpC,UAAAspC,SAAA,SAAAhqC;wBACA,OAAAlD,KAAAgtC,SAAAE,OAAAhqC;;oBAQA4pC,UAAAlpC,UAAAiH,OAAA,SAAA3H;wBAAkD,OAAAlD,KAAAgtC,SAAAniC,KAAA3H;;oBAQlD4pC,UAAAlpC,UAAA4gB,SAAA,SAAAthB,IAAAwkC;wBACA,OAAA1nC,KAAAgtC,SAAAxoB,OAAAthB,IAAAwkC;;oBAQAoF,UAAAlpC,UAAA4M,UAAA,SAAAtN;wBAAqDlD,KAAAgtC,SAAAx8B,QAAAtN;;oBAOrD4pC,UAAAlpC,UAAA8c,OAAA,SAAAxd;wBACA,OAAAlD,KAAAgtC,SAAAtsB,KAAAxd;;oBAKA4pC,UAAAlpC,UAAAupC,UAAA;wBAAmD,OAAAntC,KAAAgtC,SAAA5lC;;oBAInD0lC,UAAAlpC,UAAA4J,uBAAA;wBAAgE,OAAAxN,KAAA,SAAAwN;;oBAIhEs/B,UAAAlpC,UAAAkJ,WAAA;wBAAoD,OAAA9M,KAAAgtC,SAAAlgC;;oBAKpDggC,UAAAlpC,UAAAuxB,QAAA,SAAAtoB;wBACA7M,KAAAgtC,WAAAhpB,YAAAO,QAAA1X;wBACA7M,KAAA+sC,SAAA;;oBAKAD,UAAAlpC,UAAAwpC,kBAAA;wBAA2DptC,KAAAitC,SAAA1kB,KAAAvoB;;oBAK3D8sC,UAAAlpC,UAAAypC,WAAA;wBAAoDrtC,KAAA+sC,SAAA;;oBACpDxqC,OAAAC,eAAAsqC,UAAAlpC,WAAA;wBAKAnB,KAAA;4BAA8B,OAAAzC,KAAA+sC;;wBAC9B/oC,YAAA;wBACAD,cAAA;;oBAEA,OAAA+oC;;gBAGA,IAAqBQ,aAAA;gBACrB,IAAqBC,uBAAA;gBAQrB,IAAAC,+BAAA;oBACA,SAAAA;oBAEA,OAAAA;;gBAEA,IAAqBC;oBACrBC,mBAAA;oBACAC,mBAAA;;gBAMA,IAAAC,yBAAA;oBAKA,SAAAA,uBAAAC,WAAAC;wBACA9tC,KAAA6tC;wBACA7tC,KAAA+tC,UAAAD,UAAAL;;oBAMAG,uBAAAhqC,UAAA6oC,OAAA,SAAAC;wBACA,IAA6BsB,cAAAhuC,KAAA6tC,qBAAAxmB;wBAC7B,OAAA2mB,cAAAhuC,KAAAiuC,YAAAvB,QAAA1sC,KAAAkuC,eAAAxB;;oBAMAkB,uBAAAhqC,UAAAsqC,iBAAA,SAAAxB;wBACA,IAAAr8B,QAAArQ;wBACA,IAAA8Q,KAAA47B,KAAAt1B,MAAAk2B,aAAA3tC,SAAAmR,GAAA,IAAAq9B,aAAAr9B,GAAA;wBACA,IAAAq9B,eAAAl/B,WAAA;4BACAk/B,aAAA;;wBAEA,OAAAC,OAAAC,OAAA1uC,QACA2lB,KAAA,SAAA3lB;4BAAyC,OAAAA,OAAAwuC;2BACzC7oB,KAAA,SAAAzkB;4BAAuC,OAAAytC,cAAAztC,MAAAlB,QAAAwuC;2BACvC7oB,KAAA,SAAAzkB;4BAAuC,OAAAwP,MAAAw9B,UAAArmB,mBAAA3mB;;;oBAMvC+sC,uBAAAhqC,UAAAqqC,cAAA,SAAAvB;wBACA,IAAA57B,KAAA47B,KAAAt1B,MAAAk2B,aAAA3tC,SAAAmR,GAAA,IAAAq9B,aAAAr9B,GAAA;wBACA,IAA6By9B,qBAAAhB;wBAC7B,IAAAY,eAAAl/B,WAAA;4BACAk/B,aAAA;4BACAI,qBAAA;;wBAEA,OAAAH,OAAAC,OAAAruC,KAAA+tC,QAAAL,oBAAA/tC,SAAAK,KAAA+tC,QAAAJ,mBACAroB,KAAA,SAAA3lB;4BAAyC,OAAAA,OAAAwuC,aAAAI;2BACzCjpB,KAAA,SAAA7lB;4BAA0C,OAAA6uC,cAAA7uC,SAAAE,QAAAwuC;;;oBAE1CP,uBAAAjlC;wBACa9H,MAAAsK;;oBAGbyiC,uBAAA17B,iBAAA;wBAA6D;4BAChDrR,MAAAwmB;;4BACAxmB,MAAA2sC;4BAAA7kC;gCAAmD9H,MAAA+Q;;;;oBAEhE,OAAAg8B;;gBAQA,SAAAU,cAAApqC,OAAAsqC,YAAAL;oBACA,KAAAjqC,OAAA;wBACA,UAAA3C,MAAA,kBAAA4sC,aAAA,WAAAK,aAAA;;oBAEA,OAAAtqC;;gBAUA,IAAAuqC,eAAAzuC,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAgBA,IAAAu2B,cAAA;oBACA,SAAAA;oBAMAA,YAAA9qC,UAAA+qC,aAAA;oBAMAD,YAAA9qC,UAAAgrC,qBAAA,SAAAvrB;oBACA,OAAAqrB;;gBAEA,IAAAG,eAAA,SAAAx2B;oBACAo2B,aAAAI,cAAAx2B;oBAMA,SAAAw2B,aAAA1M,aAAA2M,YAAA1M;wBACA/pB,OAAAvU,KAAA9D;wBACAA,KAAAmiC;wBACAniC,KAAA8uC;wBACA9uC,KAAAoiC;;oBAMAyM,aAAAjrC,UAAAgrC,qBAAA,SAAAvrB;wBACA,IAA6Bmc,OAAAx/B,KAAAmiC,YAAA4M,2BAAA/uC,KAAA8uC;wBAC7BtP,KAAApwB,OAAAiU;wBACA,OAAAmc,KAAA8C;;oBAEA//B,OAAAC,eAAAqsC,aAAAjrC,WAAA;wBAIAnB,KAAA;4BAA8B,WAAAwlB,WAAAjoB,KAAAoiC;;wBAC9Bp+B,YAAA;wBACAD,cAAA;;oBAEA,OAAA8qC;kBACKH;gBAqBL,IAAAM,mBAAA;oBACA,SAAAA;oBAQAA,iBAAAprC,UAAAg1B,UAAA;oBAKAoW,iBAAAprC,UAAAuV,WAAA;oBAKA61B,iBAAAprC,UAAAsoC,iBAAA;oBAMA8C,iBAAAprC,UAAAotB,QAAA;oBAOAge,iBAAAprC,UAAAnB,MAAA,SAAA0O;oBAMA69B,iBAAAprC,UAAAwB,SAAA;oBAcA4pC,iBAAAprC,UAAAgrC,qBAAA,SAAAK,aAAA5rB,SAAAlS;oBAoBA69B,iBAAAprC,UAAAsH,kBAAA,SAAAlB,kBAAAmH,OAAAgI,UAAAwpB;oBAYAqM,iBAAAprC,UAAAsrC,SAAA,SAAA/D,SAAAh6B;oBAUA69B,iBAAAprC,UAAAurC,OAAA,SAAAhE,SAAA7c;oBAQA0gB,iBAAAprC,UAAAN,UAAA,SAAA6nC;oBASA6D,iBAAAprC,UAAA4G,SAAA,SAAA2G;oBASA69B,iBAAAprC,UAAA4xB,SAAA,SAAArkB;oBACA,OAAA69B;;gBAEA,IAAAI,oBAAA;oBAIA,SAAAA,kBAAAC;wBACArvC,KAAAqvC;wBAEArvC,KAAAsvC,mCAAA/K,eAAA;wBAEAvkC,KAAAuvC,eAAAhL,eAAA;wBAEAvkC,KAAAwvC,eAAAjL,eAAA;wBAEAvkC,KAAAyvC,eAAAlL,eAAA;;oBAMA6K,kBAAAxrC,UAAAnB,MAAA,SAAA0O;wBAA4D,OAAAnR,KAAAqvC,SAAAK,YAAAv+B,OAAAmxB;;oBAC5D//B,OAAAC,eAAA4sC,kBAAAxrC,WAAA;wBAIAnB,KAAA;4BACA,IAAiCktC,QAAA3vC,KAAAqvC,SAAAK;4BACjC,OAAAnjC,UAAAojC,eAAAvqC,SAAA;;wBAEApB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA4sC,kBAAAxrC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAqvC,SAAAV;;wBAC9B3qC,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA4sC,kBAAAxrC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAqvC,SAAAl2B;;wBAC9BnV,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA4sC,kBAAAxrC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAqvC,SAAAnD;;wBAC9BloC,YAAA;wBACAD,cAAA;;oBAQAqrC,kBAAAxrC,UAAAgrC,qBAAA,SAAAK,aAAA5rB,SAAAlS;wBACA,IAAAkS,iBAAA;4BAAqCA,UAAA;;wBACrC,IAAAlS,eAAA;4BAAmCA,SAAA;;wBACnC,IAA6Bg6B,UAAA8D,YAAAL,mBAAAvrB;wBAC7BrjB,KAAAkvC,OAAA/D,SAAAh6B;wBACA,OAAAg6B;;oBASAiE,kBAAAxrC,UAAAsH,kBAAA,SAAAlB,kBAAAmH,OAAAgI,UAAAwpB;wBACA,IAAAxxB,eAAA;4BAAmCA,SAAA;;wBACnC,IAAAgI,kBAAA;4BAAsCA,WAAA;;wBACtC,IAAAwpB,0BAAA;4BAA8CA,mBAAA;;wBAC9C,IAA6B8B,IAAAzkC,KAAAsvC;wBAC7B,IAA6BM,kBAAAz2B,YAAAnZ,KAAAqvC,SAAAnD;wBAC7B,IAA6B9hC,eAAAJ,iBAAAoF,OAAAwgC,iBAAAjN;wBAC7B3iC,KAAAkvC,OAAA9kC,aAAA23B,UAAA5wB;wBACA,OAAAqzB,SAAAC,GAAAr6B;;oBAOAglC,kBAAAxrC,UAAAsrC,SAAA,SAAA/D,SAAAh6B;wBACA,IAAAA,eAAA;4BAAmCA,SAAA;;wBACnC,IAA6BszB,IAAAzkC,KAAAuvC;wBAC7B,IAAAp+B,UAAA,GACAA,QAAAnR,KAAAoF;wBACA,IAA6ByqC,WAAA;wBAC7B7vC,KAAAqvC,SAAAjF,WAAAyF,SAAAzE,cAAAj6B;wBACA,OAAAqzB,SAAAC,GAAAoL;;oBAOAT,kBAAAxrC,UAAAurC,OAAA,SAAAhE,SAAA7c;wBACA,IAA6BmW,IAAAzkC,KAAAuvC;wBAC7B,IAAAjhB,iBAAA,GACA;wBACA,IAA6BuhB,WAAA;wBAC7B7vC,KAAAqvC,SAAAS,SAAAD,SAAAzE,cAAA9c;wBACA,OAAAkW,SAAAC,GAAAoL;;oBAMAT,kBAAAxrC,UAAAN,UAAA,SAAA6nC;wBACA,OAAAnrC,KAAAoF,SAAApF,KAAAqvC,SAAAK,YAAApsC,QAAA,QAAA8nC,iBACA;;oBAMAgE,kBAAAxrC,UAAA4G,SAAA,SAAA2G;wBACA,IAAAA,eAAA;4BAAmCA,SAAA;;wBACnC,IAA6BszB,IAAAzkC,KAAAwvC;wBAC7B,IAAAr+B,UAAA,GACAA,QAAAnR,KAAAoF,SAAA;wBACA,IAA6Bo6B,OAAAx/B,KAAAqvC,SAAAlY,WAAAhmB;wBAC7BquB,KAAA/0B;wBAEA+5B,SAAAC;;oBAMA2K,kBAAAxrC,UAAA4xB,SAAA,SAAArkB;wBACA,IAAAA,eAAA;4BAAmCA,SAAA;;wBACnC,IAA6BszB,IAAAzkC,KAAAyvC;wBAC7B,IAAAt+B,UAAA,GACAA,QAAAnR,KAAAoF,SAAA;wBACA,IAA6Bo6B,OAAAx/B,KAAAqvC,SAAAlY,WAAAhmB;wBAC7B,OAAAqzB,SAAAC,GAAAjF,KAAA8C;;oBAKA8M,kBAAAxrC,UAAAotB,QAAA;wBACA,SAAkCjxB,IAAAC,KAAAoF,SAAA,GAAwBrF,KAAA,GAAQA,KAAA;4BAClEC,KAAAwK,OAAAzK;;;oBAGA,OAAAqvC;;gBAUA,IAAAW,eAAA/vC,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAMA,IAAA63B,UAAA,SAAA33B;oBACA03B,aAAAC,SAAA33B;oBACA,SAAA23B;wBACA33B,OAAAxS,MAAA7F,MAAA+I;;oBAOAinC,QAAApsC,UAAA6G,UAAA;oBAKAulC,QAAApsC,UAAA2jC,YAAA;oBAMAyI,QAAApsC,UAAA6rB,YAAA,SAAApuB;oBACA,OAAA2uC;kBACK1a;gBAwDL,IAAA2a,kBAAA,SAAA53B;oBACA03B,aAAAE,iBAAA53B;oBACA,SAAA43B;wBACA53B,OAAAxS,MAAA7F,MAAA+I;;oBAMAknC,gBAAArsC,UAAAyf,UAAA;oBAKA4sB,gBAAArsC,UAAAssC,YAAA;oBACA,OAAAD;kBACKD;gBACL,IAAAG,WAAA;oBAKA,SAAAA,SAAAC,OAAA1V;wBACA16B,KAAAowC;wBACApwC,KAAA06B;wBACA16B,KAAAowC;wBACApwC,KAAAqwC,gBAAArwC,KAAAowC,MAAAE;;oBAEA/tC,OAAAC,eAAA2tC,SAAAvsC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAowC;;wBAC9BpsC,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA2tC,SAAAvsC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAowC,MAAAG;;wBAC9BvsC,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA2tC,SAAAvsC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAowC,MAAA/sB;;wBAC9Brf,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA2tC,SAAAvsC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAowC,MAAA7I;;wBAC9BvjC,YAAA;wBACAD,cAAA;;oBAKAosC,SAAAvsC,UAAA2xB,eAAA;wBAAuDv1B,KAAAowC,MAAAI;;oBAIvDL,SAAAvsC,UAAA4xB,SAAA;wBAAiDx1B,KAAAowC,MAAAE,SAAAr9B,qBAAAI;;oBAIjD88B,SAAAvsC,UAAA6xB,gBAAA;wBACAz1B,KAAAowC,MAAA3a,cAAA;wBACAz1B,KAAA06B,eAAAvO;;oBAKAgkB,SAAAvsC,UAAA8xB,iBAAA;wBAAyD11B,KAAAowC,MAAA3a,cAAA;;oBAIzD0a,SAAAvsC,UAAA+xB,WAAA;wBACA31B,KAAAowC,MAAAE,SAAAtwC,KAAAqwC;wBACArwC,KAAAu1B;;oBAMA4a,SAAAvsC,UAAA6rB,YAAA,SAAApuB;wBACA,KAAArB,KAAAowC,MAAAzQ,aAAA;4BACA3/B,KAAAowC,MAAAzQ;;wBAEA3/B,KAAAowC,MAAAzQ,YAAAp8B,KAAAlC;;oBAKA8uC,SAAAvsC,UAAA6G,UAAA;wBAAkDzK,KAAAowC,MAAA7N;;oBAClD,OAAA4N;;gBAUA,IAAAM,eAAAzwC,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAEA,IAAAu4B,gBAAA;oBAKA,SAAAA,cAAA/sC,MAAAtC;wBACArB,KAAA2D;wBACA3D,KAAAqB;;oBAGA,OAAAqvC;;gBAKA,IAAAC,YAAA;oBAMA,SAAAA,UAAAC,YAAArpC,QAAAspC;wBACA7wC,KAAA6wC;wBACA7wC,KAAA4wC;wBACA,IAAArpC,4BAAAupC,cAAA;4BACAvpC,OAAAwpC,SAAA/wC;+BAEA;4BACAA,KAAAuH,SAAA;;wBAEAvH,KAAA0rC;;oBAEAnpC,OAAAC,eAAAmuC,UAAA/sC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA6wC,aAAA7wC,KAAA6wC,WAAA13B,WAAA;;wBAC9BnV,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAmuC,UAAA/sC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA6wC,aAAA7wC,KAAA6wC,WAAA/lC,YAAA;;wBAC9B9G,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAmuC,UAAA/sC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA6wC,aAAA7wC,KAAA6wC,WAAAxtB,UAAA;;wBAC9Brf,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAmuC,UAAA/sC,WAAA;wBAIAnB,KAAA;4BACA,OAAAzC,KAAA6wC,aAAA7wC,KAAA6wC,WAAAza,aAAA;;wBAEApyB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAmuC,UAAA/sC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA6wC,aAAA7wC,KAAA6wC,WAAA1a,iBAAA;;wBAC9BnyB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAmuC,UAAA/sC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA6wC,aAAA7wC,KAAA6wC,WAAA7lB,SAAA;;wBAC9BhnB,YAAA;wBACAD,cAAA;;oBAEA,OAAA4sC;;gBAKA,IAAAG,eAAA,SAAAz4B;oBACAo4B,aAAAK,cAAAz4B;oBAMA,SAAAy4B,aAAAF,YAAArpC,QAAAspC;wBACAx4B,OAAAvU,KAAA9D,MAAA4wC,YAAArpC,QAAAspC;wBACA7wC,KAAAqK;wBACArK,KAAAgxC;wBACAhxC,KAAAixC;wBACAjxC,KAAAuU;wBACAvU,KAAAkxC;wBACAlxC,KAAAkoB,gBAAA0oB;;oBAMAE,aAAAltC,UAAAmtC,WAAA,SAAA5oC;wBACA,IAAAA,OAAA;4BACAnI,KAAAkxC,WAAA3tC,KAAA4E;4BACAA,MAAAZ,SAAAvH;;;oBAOA8wC,aAAAltC,UAAAutC,cAAA,SAAAhpC;wBACA,IAA6BipC,aAAApxC,KAAAkxC,WAAA5tC,QAAA6E;wBAC7B,IAAAipC,gBAAA;4BACAjpC,MAAAZ,SAAA;4BACAvH,KAAAkxC,WAAAxrC,OAAA0rC,YAAA;;;oBAQAN,aAAAltC,UAAAytC,sBAAA,SAAAlpC,OAAAmpC;wBACA,IAA6BC,eAAAvxC,KAAAkxC,WAAA5tC,QAAA6E;wBAC7B,IAAAopC,kBAAA;4BACA,IAAiCC,mBAAAxxC,KAAAkxC,WAAA9pC,MAAA,GAAAmqC,eAAA;4BACjC,IAAiCE,eAAAzxC,KAAAkxC,WAAA9pC,MAAAmqC,eAAA;4BACjCvxC,KAAAkxC,aAAAM,iBAAAxgC,OAAAsgC,aAAAG;4BACA,SAAsC1xC,IAAA,GAAUA,IAAAuxC,YAAAlsC,UAAwBrF,GAAA;gCACxE,IAAqC2xC,WAAAJ,YAAAvxC;gCACrC,IAAA2xC,SAAAnqC,QAAA;oCACAmqC,SAAAnqC,OAAA4pC,YAAAO;;gCAEAA,SAAAnqC,SAAAvH;;;;oBAQA8wC,aAAAltC,UAAA+tC,QAAA,SAAAC;wBACA,IAA6BC,UAAA7xC,KAAA8xC,SAAAF;wBAC7B,OAAAC,QAAA;;oBAMAf,aAAAltC,UAAAkuC,WAAA,SAAAF;wBACA,IAA6BG;wBAC7BC,sBAAAhyC,MAAA4xC,WAAAG;wBACA,OAAAA;;oBAMAjB,aAAAltC,UAAAquC,gBAAA,SAAAL;wBACA,IAA6BG;wBAC7BG,mBAAAlyC,MAAA4xC,WAAAG;wBACA,OAAAA;;oBAEAxvC,OAAAC,eAAAsuC,aAAAltC,WAAA;wBAIAnB,KAAA;4BACA,OAAAzC,KAAAkxC,WAAAhE,OAAA,SAAAjW;gCAAgE,OAAAA,gBAAA6Z;;;wBAEhE9sC,YAAA;wBACAD,cAAA;;oBAOA+sC,aAAAltC,UAAAuuC,sBAAA,SAAAtS,WAAAuS;wBACApyC,KAAA0rC,UAAAl7B,QAAA,SAAAkvB;4BACA,IAAAA,SAAA/7B,QAAAk8B,WAAA;gCACAH,SAAAr+B,SAAA+wC;;;;oBAIA,OAAAtB;kBACKH;gBAML,SAAA0B,iBAAAC;oBACA,OAAAA,SAAAr5B,IAAA,SAAAqL;wBAA2C,OAAAA,GAAA4D;;;gBAQ3C,SAAA8pB,sBAAApZ,SAAAgZ,WAAAG;oBACAnZ,QAAAsY,WAAA1gC,QAAA,SAAAymB;wBACA,IAAAA,gBAAA6Z,cAAA;4BACA,IAAAc,UAAA3a,OAAA;gCACA8a,QAAAxuC,KAAA0zB;;4BAEA+a,sBAAA/a,MAAA2a,WAAAG;;;;gBAUA,SAAAG,mBAAAK,YAAAX,WAAAG;oBACA,IAAAQ,sBAAAzB,cAAA;wBACAyB,WAAArB,WAAA1gC,QAAA,SAAAymB;4BACA,IAAA2a,UAAA3a,OAAA;gCACA8a,QAAAxuC,KAAA0zB;;4BAEA,IAAAA,gBAAA6Z,cAAA;gCACAoB,mBAAAjb,MAAA2a,WAAAG;;;;;gBAMA,IAAqBS,yBAAA,IAAA3kC;gBAMrB,SAAA4kC,aAAA7B;oBACA,OAAA4B,uBAAA/vC,IAAAmuC;;gBAMA,SAAA8B,eAAAzb;oBACAub,uBAAAvuC,IAAAgzB,KAAA2Z,YAAA3Z;;gBAMA,SAAA0b,yBAAA1b;oBACAub,uBAAAlgB,OAAA2E,KAAA2Z;;gBAMA,SAAAgC;oBACA,OAAAv0B;;gBAEA,IAAqBw0B,6BACrBnK;oBACS9oB,SAAA4nB;oBAAAnoB,aAAAqpB;;oBACA9oB,SAAA3B;oBAAAsB,YAAAqzB;oBAAAnzB;;oBACAG,SAAA9B;oBAAAuB,aAAApB;mBACT+nB,qBACAnf;gBAOA,IAAqBisB,eAAAnL,sBAAA,cAAAkL;gBAKrB,IAAqBE,YAAA,IAAA/gC,YAAA;gBAIrB,IAAqBghC,eAAA,IAAAhhC,YAAA;gBAIrB,IAAqBihC,sBAAA,IAAAjhC,YAAA;gBAKrB,SAAAkhC;oBACA,OAAApd;;gBAKA,SAAAqd;oBACA,OAAApd;;gBAMA,SAAAqd,eAAAC;oBACA,OAAAA,UAAA;;gBAQA,IAAAC,oBAAA;oBACA,SAAAA;oBAEAA,kBAAA3qC;wBACa9H,MAAA0V;wBAAAjG;4BACbwD,aACAw2B;gCAC6B1qB,SAAAiqB;gCAAAxqB,aAAAirB;+BAC7B5kB,uBACA2B,UACAhB,wBACAkU,WACAzO;gCAC6BlM,SAAAwU;gCAAA7U,YAAA2zB;;gCACAtzB,SAAA6U;gCAAAlV,YAAA4zB;;gCAE7BvzB,SAAAmzB;gCACAxzB,YAAA6zB;gCACA3zB,UAAA,IAAA9N,OAAAohC,YAAA,IAAAnhC,YAAA,IAAAE;;;;oBAMAwhC,kBAAAphC,iBAAA;wBAAwD;;oBACxD,OAAAohC;;gBAUA,IAAqBC,kBAAA;gBACrB,IAAqBC,YAAA;gBACrB,IAAqBC,gBAAA;gBACrB,IAAqBC,cAAA;gBAErB,IAAAC,uBAAA;oBAIA,SAAAA,qBAAAC;wBACA,IAAAvjC,QAAArQ;wBACAA,KAAA4zC;wBACA5zC,KAAA6zC;wBACA7zC,KAAA8zC;wBACA9zC,KAAA+zC,YAAA;wBACA/zC,KAAAg0C,WAAA;wBACAh0C,KAAA8oC,aAAA;wBACA9oC,KAAAi0C,eAAA;wBACA,IAAAC,QAAA;wBACA,IAAAC,QAAAn0C,KAAA4zC,SAAAxuC;wBACA,IAAA+uC,SAAA;4BACAnoC,kBAAA;gCAA+C,OAAAqE,MAAA+jC;;+BAE/C;4BACAp0C,KAAA4zC,SAAApjC,QAAA,SAAA0b;gCACAA,OAAA+nB,eAAA5jC;gCACA6b,OAAAmoB,OAAA;oCACA,MAAAH,SAAAC,OAAA;wCACA9jC,MAAA+jC;;;;;;oBASAT,qBAAA/vC,UAAAwwC,YAAA;wBACA,KAAAp0C,KAAA+zC,WAAA;4BACA/zC,KAAA+zC,YAAA;4BACA/zC,KAAA6zC,WAAArjC,QAAA,SAAAtN;gCAAuD,OAAAA;;4BACvDlD,KAAA6zC;;;oBAMAF,qBAAA/vC,UAAA8jC,OAAA;wBAA2D1nC,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAA0C,OAAAA,OAAAwb;;;oBAKrGiM,qBAAA/vC,UAAA0wC,UAAA,SAAApxC;wBAAgElD,KAAA8zC,YAAAvwC,KAAAL;;oBAKhEywC,qBAAA/vC,UAAAywC,SAAA,SAAAnxC;wBAA+DlD,KAAA6zC,WAAAtwC,KAAAL;;oBAI/DywC,qBAAA/vC,UAAA0oB,aAAA;wBAAiE,OAAAtsB,KAAAg0C;;oBAIjEL,qBAAA/vC,UAAA2oB,OAAA;wBACA,KAAAhgB,UAAAvM,KAAAi0C,eAAA;4BACAj0C,KAAA0nC;;wBAEA,KAAA1nC,KAAAssB,cAAA;4BACAtsB,KAAA8zC,YAAAtjC,QAAA,SAAAtN;gCAAwD,OAAAA;;4BACxDlD,KAAA8zC;4BACA9zC,KAAAg0C,WAAA;;wBAEAh0C,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAAqD,OAAAA,OAAAK;;;oBAKrDonB,qBAAA/vC,UAAA2wC,QAAA;wBAA4Dv0C,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAA0C,OAAAA,OAAAqoB;;;oBAItGZ,qBAAA/vC,UAAA4wC,UAAA;wBAA8Dx0C,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAA0C,OAAAA,OAAAsoB;;;oBAIxGb,qBAAA/vC,UAAA6wC,SAAA;wBACAz0C,KAAAo0C;wBACAp0C,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAAqD,OAAAA,OAAAuoB;;;oBAKrDd,qBAAA/vC,UAAA6G,UAAA;wBACA,KAAAzK,KAAA8oC,YAAA;4BACA9oC,KAAAo0C;4BACAp0C,KAAA4zC,SAAApjC,QAAA,SAAA0b;gCAAyD,OAAAA,OAAAzhB;;4BACzDzK,KAAA8oC,aAAA;;;oBAMA6K,qBAAA/vC,UAAAuxB,QAAA;wBACAn1B,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAAqD,OAAAA,OAAAiJ;;wBACrDn1B,KAAA8oC,aAAA;wBACA9oC,KAAA+zC,YAAA;wBACA/zC,KAAAg0C,WAAA;;oBAMAL,qBAAA/vC,UAAA8wC,cAAA,SAAAzzC;wBACAjB,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAAqDA,OAAAwoB,YAAAzzC;;;oBAKrD0yC,qBAAA/vC,UAAA+wC,cAAA;wBACA,IAA6BC,MAAA;wBAC7B50C,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BACA,IAAiCjrB,IAAAirB,OAAAyoB;4BACjCC,MAAAruB,KAAAquB,IAAA3zC,GAAA2zC;;wBAEA,OAAAA;;oBAEAryC,OAAAC,eAAAmxC,qBAAA/vC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA4zC;;wBAC9B5vC,YAAA;wBACAD,cAAA;;oBAEA,OAAA4vC;;gBAoBA,IAAAkB,oBAAA;oBAKA,SAAAA,kBAAAhmB,QAAAta;wBACAvU,KAAA6uB;wBACA7uB,KAAAuU;;oBAEA,OAAAsgC;;gBAOA,IAAAC,kBAAA;oBACA,SAAAA;oBAOAA,gBAAAlxC,UAAAywC,SAAA,SAAAnxC;oBAMA4xC,gBAAAlxC,UAAA0wC,UAAA,SAAApxC;oBAKA4xC,gBAAAlxC,UAAA8jC,OAAA;oBAKAoN,gBAAAlxC,UAAA0oB,aAAA;oBAKAwoB,gBAAAlxC,UAAA2oB,OAAA;oBAKAuoB,gBAAAlxC,UAAA2wC,QAAA;oBAKAO,gBAAAlxC,UAAA4wC,UAAA;oBAKAM,gBAAAlxC,UAAA6wC,SAAA;oBAKAK,gBAAAlxC,UAAA6G,UAAA;oBAKAqqC,gBAAAlxC,UAAAuxB,QAAA;oBAMA2f,gBAAAlxC,UAAA8wC,cAAA,SAAAzzC;oBAKA6zC,gBAAAlxC,UAAA+wC,cAAA;oBACApyC,OAAAC,eAAAsyC,gBAAAlxC,WAAA;wBAIAnB,KAAA;4BAA8B,UAAAlB,MAAA;;wBAK9B0C,KAAA,SAAAioB;4BAAoC,UAAA3qB,MAAA;;wBACpCyC,YAAA;wBACAD,cAAA;;oBAEA,OAAA+wC;;gBAEA,IAAAC,sBAAA;oBACA,SAAAA;wBACA,IAAA1kC,QAAArQ;wBACAA,KAAA6zC;wBACA7zC,KAAA8zC;wBACA9zC,KAAAg0C,WAAA;wBACAh0C,KAAAi0C,eAAA;wBACAjoC,kBAAA;4BAA2C,OAAAqE,MAAA+jC;;;oBAM3CW,oBAAAnxC,UAAAwwC,YAAA;wBACAp0C,KAAA6zC,WAAArjC,QAAA,SAAAtN;4BAAmD,OAAAA;;wBACnDlD,KAAA6zC;;oBAMAkB,oBAAAnxC,UAAA0wC,UAAA,SAAApxC;wBAA+DlD,KAAA8zC,YAAAvwC,KAAAL;;oBAK/D6xC,oBAAAnxC,UAAAywC,SAAA,SAAAnxC;wBAA8DlD,KAAA6zC,WAAAtwC,KAAAL;;oBAI9D6xC,oBAAAnxC,UAAA0oB,aAAA;wBAAgE,OAAAtsB,KAAAg0C;;oBAIhEe,oBAAAnxC,UAAA8jC,OAAA;oBAIAqN,oBAAAnxC,UAAA2oB,OAAA;wBACA,KAAAvsB,KAAAssB,cAAA;4BACAtsB,KAAA8zC,YAAAtjC,QAAA,SAAAtN;gCAAwD,OAAAA;;4BACxDlD,KAAA8zC;;wBAEA9zC,KAAAg0C,WAAA;;oBAKAe,oBAAAnxC,UAAA2wC,QAAA;oBAIAQ,oBAAAnxC,UAAA4wC,UAAA;oBAIAO,oBAAAnxC,UAAA6wC,SAAA;wBAA4Dz0C,KAAAo0C;;oBAI5DW,oBAAAnxC,UAAA6G,UAAA;oBAIAsqC,oBAAAnxC,UAAAuxB,QAAA;oBAKA4f,oBAAAnxC,UAAA8wC,cAAA,SAAAzzC;oBAIA8zC,oBAAAnxC,UAAA+wC,cAAA;wBAAiE;;oBACjE,OAAAI;;gBAGA,IAAAC,0BAAA;oBAIA,SAAAA,wBAAApB;wBACA,IAAAvjC,QAAArQ;wBACAA,KAAA4zC;wBACA5zC,KAAAi1C,gBAAA;wBACAj1C,KAAA6zC;wBACA7zC,KAAA8zC;wBACA9zC,KAAA+zC,YAAA;wBACA/zC,KAAAg0C,WAAA;wBACAh0C,KAAA8oC,aAAA;wBACA9oC,KAAAi0C,eAAA;wBACAj0C,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAAqDA,OAAA+nB,eAAA5jC;;wBACrDrQ,KAAAk1C,QAAA;;oBAMAF,wBAAApxC,UAAAsxC,UAAA,SAAAC;wBACA,IAAA9kC,QAAArQ;wBACA,IAAAA,KAAA+zC,WACA;wBACA,IAAA/zC,KAAA4zC,SAAAxuC,UAAA;4BACApF,KAAAo1C,gBAAA,IAAAL;4BACA/oC,kBAAA;gCAA+C,OAAAqE,MAAA+jC;;+BAE/C,IAAAp0C,KAAAi1C,iBAAAj1C,KAAA4zC,SAAAxuC,QAAA;4BACApF,KAAAo1C,gBAAA,IAAAL;4BACA/0C,KAAAo0C;+BAEA;4BACA,IAAiCloB,SAAAlsB,KAAA4zC,SAAA5zC,KAAAi1C;4BACjC/oB,OAAAmoB,OAAA;gCAA2C,OAAAhkC,MAAA6kC,QAAA;;4BAC3Cl1C,KAAAo1C,gBAAAlpB;4BACA,IAAAipB,OAAA;gCACAjpB,OAAAK;;;;oBAOAyoB,wBAAApxC,UAAAwwC,YAAA;wBACA,KAAAp0C,KAAA+zC,WAAA;4BACA/zC,KAAA+zC,YAAA;4BACA/zC,KAAA6zC,WAAArjC,QAAA,SAAAtN;gCAAuD,OAAAA;;4BACvDlD,KAAA6zC;;;oBAMAmB,wBAAApxC,UAAA8jC,OAAA;wBAA8D1nC,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAA0C,OAAAA,OAAAwb;;;oBAKxGsN,wBAAApxC,UAAA0wC,UAAA,SAAApxC;wBAAmElD,KAAA8zC,YAAAvwC,KAAAL;;oBAKnE8xC,wBAAApxC,UAAAywC,SAAA,SAAAnxC;wBAAkElD,KAAA6zC,WAAAtwC,KAAAL;;oBAIlE8xC,wBAAApxC,UAAA0oB,aAAA;wBAAoE,OAAAtsB,KAAAg0C;;oBAIpEgB,wBAAApxC,UAAA2oB,OAAA;wBACA,KAAAhgB,UAAAvM,KAAAi0C,eAAA;4BACAj0C,KAAA0nC;;wBAEA,KAAA1nC,KAAAssB,cAAA;4BACAtsB,KAAA8zC,YAAAtjC,QAAA,SAAAtN;gCAAwD,OAAAA;;4BACxDlD,KAAA8zC;4BACA9zC,KAAAg0C,WAAA;;wBAEAh0C,KAAAo1C,cAAA7oB;;oBAKAyoB,wBAAApxC,UAAA2wC,QAAA;wBAA+Dv0C,KAAAo1C,cAAAb;;oBAI/DS,wBAAApxC,UAAA4wC,UAAA;wBACAx0C,KAAAm1B;wBACA,IAAAn1B,KAAA4zC,SAAAxuC,SAAA;4BACApF,KAAA4zC,SAAA,GAAAY;;;oBAMAQ,wBAAApxC,UAAAuxB,QAAA;wBACAn1B,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAAqD,OAAAA,OAAAiJ;;wBACrDn1B,KAAA8oC,aAAA;wBACA9oC,KAAA+zC,YAAA;wBACA/zC,KAAAg0C,WAAA;;oBAKAgB,wBAAApxC,UAAA6wC,SAAA;wBACAz0C,KAAAo0C;wBACAp0C,KAAA4zC,SAAApjC,QAAA,SAAA0b;4BAAqD,OAAAA,OAAAuoB;;;oBAKrDO,wBAAApxC,UAAA6G,UAAA;wBACA,KAAAzK,KAAA8oC,YAAA;4BACA9oC,KAAAo0C;4BACAp0C,KAAA4zC,SAAApjC,QAAA,SAAA0b;gCAAyD,OAAAA,OAAAzhB;;4BACzDzK,KAAA8oC,aAAA;4BACA9oC,KAAAo1C,gBAAA,IAAAL;;;oBAOAC,wBAAApxC,UAAA8wC,cAAA,SAAAzzC;wBAAsEjB,KAAA4zC,SAAA,GAAAc,YAAAzzC;;oBAItE+zC,wBAAApxC,UAAA+wC,cAAA;wBAAqE,OAAA30C,KAAA4zC,SAAA,GAAAe;;oBACrEpyC,OAAAC,eAAAwyC,wBAAApxC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAA4zC;;wBAC9B5vC,YAAA;wBACAD,cAAA;;oBAEA,OAAAixC;;gBAUA,IAAAK,eAAAr1C,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAKA,IAAqBm9B,aAAA;gBAQrB,IAAAC,yBAAA;oBAKA,SAAAA,uBAAA5xC,MAAA6xC;wBACAx1C,KAAA2D;wBACA3D,KAAAw1C;;oBAEA,OAAAD;;gBAMA,IAAAE,yBAAA;oBACA,SAAAA;oBAEA,OAAAA;;gBASA,IAAAC,oCAAA,SAAAr9B;oBACAg9B,aAAAK,mCAAAr9B;oBAKA,SAAAq9B,kCAAAC,eAAAphC;wBACA8D,OAAAvU,KAAA9D;wBACAA,KAAA21C;wBACA31C,KAAAuU;;oBAEA,OAAAmhC;kBACKD;gBAQL,IAAAG,mCAAA,SAAAv9B;oBACAg9B,aAAAO,kCAAAv9B;oBAKA,SAAAu9B,iCAAAC,iBAAAC;wBACAz9B,OAAAvU,KAAA9D;wBACAA,KAAA61C;wBACA71C,KAAA81C;;oBAEA,OAAAF;kBACKH;gBAKL,IAAAM,oBAAA;oBACA,SAAAA;oBAEA,OAAAA;;gBASA,IAAAC,qCAAA,SAAA39B;oBACAg9B,aAAAW,oCAAA39B;oBAIA,SAAA29B,mCAAAF;wBACAz9B,OAAAvU,KAAA9D;wBACAA,KAAA81C;;oBAEA,OAAAE;kBACKD;gBAQL,IAAAE,yBAAA,SAAA59B;oBACAg9B,aAAAY,wBAAA59B;oBAKA,SAAA49B,uBAAA1hC,QAAAsa;wBACA,IAAAA,gBAAA;4BAAoCA,SAAA;;wBACpCxW,OAAAvU,KAAA9D;wBACAA,KAAAuU;wBACAvU,KAAA6uB;;oBAEA,OAAAonB;kBACKF;gBAQL,IAAAG,2BAAA,SAAA79B;oBACAg9B,aAAAa,0BAAA79B;oBAKA,SAAA69B,yBAAAC,SAAA5hC;wBACA8D,OAAAvU,KAAA9D;wBACAA,KAAAm2C;wBACAn2C,KAAAuU;;oBAEA,OAAA2hC;kBACKH;gBAKL,IAAAK,6BAAA,SAAA/9B;oBACAg9B,aAAAe,4BAAA/9B;oBACA,SAAA+9B;wBACA/9B,OAAAvU,KAAA9D;;oBAEAuC,OAAAC,eAAA4zC,2BAAAxyC,WAAA;wBAIAnB,KAAA;4BAA8B,UAAAlB,MAAA;;wBAC9ByC,YAAA;wBACAD,cAAA;;oBAEA,OAAAqyC;kBACKL;gBAQL,IAAAM,4BAAA,SAAAh+B;oBACAg9B,aAAAgB,2BAAAh+B;oBAIA,SAAAg+B,0BAAAC;wBACAj+B,OAAAvU,KAAA9D;wBACAA,KAAAs2C;;oBAEA/zC,OAAAC,eAAA6zC,0BAAAzyC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAs2C;;wBAC9BtyC,YAAA;wBACAD,cAAA;;oBAEA,OAAAsyC;kBACKD;gBAQL,IAAAG,yBAAA,SAAAl+B;oBACAg9B,aAAAkB,wBAAAl+B;oBAIA,SAAAk+B,uBAAAD;wBACAj+B,OAAAvU,KAAA9D;wBACAA,KAAAs2C;;oBAEA/zC,OAAAC,eAAA+zC,uBAAA3yC,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAs2C;;wBAC9BtyC,YAAA;wBACAD,cAAA;;oBAEA,OAAAwyC;kBACKH;gBAwDL,SAAAzd,QAAA6d,QAAAjiC;oBACA,IAAAA,gBAAA;wBAAgCA,SAAA;;oBAChC,IAAyBkiC,cAAAliC;oBACzB,KAAAhI,UAAAkqC,cAAA;wBACA,IAA6BC;wBAC7BD,cAAA,IAAAR,yBAAAS,eAAA;;oBAEA,WAAAR,yBAAAM,QAAAC;;gBA0CA,SAAAE,MAAAb;oBACA,WAAAS,uBAAAT;;gBA2CA,SAAAc,SAAAd;oBACA,WAAAO,0BAAAP;;gBAmDA,SAAAe,MAAAC;oBACA,IAAyBna;oBACzB,IAAyB9N,SAAA;oBACzB,WAAAioB,WAAA;wBACAna,UAAA;2BAEA;wBACA,IAAAhyB,MAAA4D,QAAAuoC,SAAA;4BACAna,QAAA;+BAEA;4BACAA,UAAA;;wBAEAA,MAAAnsB,QAAA,SAAAumC;4BACA,IAAiCC,cAAA;4BACjC,IAAAzqC,UAAAyqC,cAAA;gCACAnoB,mBAAA,OAAAooB,WAAAD,eAAAnoB;;;;oBAIA,WAAAonB,uBAAAtZ,OAAA9N;;gBA2DA,SAAAqoB,MAAAvB,eAAAphC;oBACA,WAAAmhC,kCAAAC,eAAAphC;;gBAqDA,SAAAukB,UAAAgd;oBACA,WAAAE,mCAAAF;;gBA6GA,SAAAqB,WAAAtB,iBAAAC;oBACA,IAAyBsB,gBAAAzsC,MAAA4D,QAAAunC,SAAA,IAAAO,0BAAAP;oBACzB,WAAAF,iCAAAC,iBAAAuB;;gBA6DA,SAAAC,QAAA1zC,MAAA2zC;oBACA,WAAA/B,uBAAA5xC,MAAA2zC;;gBASA,SAAAC,4BAAAC,gBAAAC,WAAAC;oBACA,IAAAA,mBAAA;wBAAmCA,YAAA;;oBACnC,IAAyBC;oBACzBp1C,OAAAoL,KAAA8pC,WAAAjnC,QAAA,SAAAC;wBACA,IAA6BvM,QAAAuzC,UAAAhnC;wBAC7BknC,YAAAlnC,QAAAvM,SAAAoxC,aAAAoC,YAAAxzC,MAAA4I;;oBAEAvK,OAAAoL,KAAA6pC,gBAAAhnC,QAAA,SAAAC;wBACA,KAAAlE,UAAAorC,YAAAlnC,QAAA;4BACAknC,YAAAlnC,QAAAinC;;;oBAGA,OAAAC;;gBAQA,SAAAC,0BAAAC,iBAAAC,kBAAAhf;oBACA,IAAyBif,QAAAjf,UAAA1zB,SAAA;oBACzB,IAAyB4yC,gBAAAlf,UAAA;oBAEzB,IAAyBmf,8BAAAC,cAAAF,cAAAzjC;oBACzB,IAAyB4jC;oBACzB,IAAyBC,sBAAA;oBACzB71C,OAAAoL,KAAAkqC,iBAAArnC,QAAA,SAAAC;wBACA,IAA6BvM,QAAA2zC,gBAAApnC;wBAG7B,KAAAwnC,4BAAAxnC,OAAA;4BACAwnC,4BAAAxnC,QAAAvM;4BACAi0C,yBAAA1nC,QAAAvM;4BACAk0C,sBAAA;;;oBAGA,IAAyBC,0BAAA70B,iBAAAC,UAAuDw0B;oBAEhF,IAAyBK,gBAAAxf,UAAAif;oBACzBO,cAAA/jC,cAAA7C,QAAAomC;oBACA,IAAyBS,8BAAAL,cAAAI,cAAA/jC;oBACzB,IAAyBikC;oBACzB,IAAyBC,sBAAA;oBACzBl2C,OAAAoL,KAAA0qC,yBAAA7nC,QAAA,SAAAC;wBACA,KAAAlE,UAAAgsC,4BAAA9nC,QAAA;4BACA+nC,yBAAA/nC,QAAA6kC;4BACAmD,sBAAA;;;oBAGA,IAAAA,qBAAA;wBACAH,cAAA/jC,cAAAhR,KAAAi1C;;oBAEAj2C,OAAAoL,KAAA4qC,6BAAA/nC,QAAA,SAAAC;wBACA,KAAAlE,UAAA0rC,4BAAAxnC,QAAA;4BACA0nC,yBAAA1nC,QAAA6kC;4BACA8C,sBAAA;;;oBAGA,IAAAA,qBAAA;wBACAJ,cAAAzjC,cAAAhR,KAAA40C;;oBAEAO,wBAAAb,mBAAAC;oBACA,OAAAhf;;gBAMA,SAAA6f,YAAApkC;oBACA,IAAyBojC;oBACzBp1C,OAAAoL,KAAA4G,QAAA/D,QAAA,SAAA3H;wBAAoD8uC,YAAA9uC,OAAA;;oBACpD,OAAA8uC;;gBAOA,SAAAe,wBAAAlpB,YAAAjb;oBACA,OAAAA,OAAA0E,IAAA,SAAA89B;wBACA,IAA6B6B;wBAC7Br2C,OAAAoL,KAAAopC,OAAAvmC,QAAA,SAAAC;4BACA,IAAiCvM,QAAA6yC,MAAAtmC;4BACjC,IAAAvM,SAAAqvC,iBAAA;gCACArvC,QAAAsrB,WAAA/e;gCACA,KAAAlE,UAAArI,QAAA;oCACAA,QAAAoxC;;;4BAGA9lB,WAAA/e,QAAAvM;4BACA00C,UAAAnoC,QAAAvM;;wBAEA,OAAA00C;;;gBASA,SAAAC,aAAAjgB,SAAAiG,UAAAtqB;oBACAhS,OAAAoL,KAAA4G,QAAA/D,QAAA,SAAAC;wBAAqDouB,SAAA1G,gBAAAS,SAAAnoB,MAAA8D,OAAA9D;;;gBAMrD,SAAAynC,cAAA3jC;oBACA,IAAyBojC;oBACzBpjC,OAAA/D,QAAA,SAAAumC;wBACAx0C,OAAAoL,KAAAopC,OAAAvmC,QAAA,SAAAC;4BAAwDknC,YAAAlnC,QAAAsmC,MAAAtmC;;;oBAExD,OAAAknC;;gBAoBA,IAAAmB,kBAAA;oBAIA,SAAAA,gBAAAvkC;wBACAvU,KAAAuU;;oBAEA,OAAAukC;;gBAkCA,IAAAC,2BAAA;oBAIA,SAAAA,yBAAAjoC;wBACA,IAAAkoC,YAAAloC,GAAAkoC,WAAAC,UAAAnoC,GAAAmoC,SAAAC,YAAApoC,GAAAooC,WAAAC,YAAAroC,GAAAqoC;wBACAn5C,KAAAg5C;wBACAh5C,KAAAi5C;wBACAj5C,KAAAk5C;wBACAl5C,KAAAm5C;;oBAEA,OAAAJ;;gBAGA,IAAAK,sBAAA;oBAOA,SAAAA,oBAAAC,SAAAC,YAAAC,UAAAC;wBACAx5C,KAAAq5C;wBACAr5C,KAAAs5C;wBACAt5C,KAAAu5C;wBACAv5C,KAAAw5C;;oBAMAJ,oBAAAx1C,UAAA61C,eAAA,SAAAN;wBACA,WAAAJ;4BACAC,WAAAh5C,KAAAs5C;4BACAL,SAAAj5C,KAAAu5C;4BACAL,WAAAl5C,KAAAw5C;4BACAL;;;oBAOAC,oBAAAx1C,UAAA0wC,UAAA,SAAAjzC;wBACA,IAAAgP,QAAArQ;wBACA,IAA6BkD,KAAA+I,KAAAC,QAAA6oB,KAAA;4BAAyC,OAAA1zB,SAAAgP,MAAAopC,aAAA;2BAAgD;wBACtHz5C,KAAAq5C,QAAA/E,QAAApxC;;oBAMAk2C,oBAAAx1C,UAAAywC,SAAA,SAAAhzC;wBACA,IAAAgP,QAAArQ;wBACA,IAA6BkD,KAAA+I,KAAAC,QAAA6oB,KAAA;4BAAyC,OAAA1zB,SAAAgP,MAAAopC,aAAA;2BAA+C;wBACrHz5C,KAAAq5C,QAAAhF,OAAAnxC;;oBAEA,OAAAk2C;;gBAGA,IAAAM,uBAAA;oBAIA,SAAAA,qBAAAC;wBACA35C,KAAA25C;;oBAMAD,qBAAA91C,UAAAw1B,kBAAA,SAAAwgB;wBACA,WAAAC,iBAAA75C,KAAA25C,UAAAvgB,gBAAAwgB;;oBAEA,OAAAF;;gBAEA,IAAAG,mBAAA;oBAIA,SAAAA,iBAAAF;wBACA35C,KAAA25C;;oBAOAE,iBAAAj2C,UAAA0yB,oBAAA,SAAAC,gBAAAC;wBACA,IAA6BsjB,WAAA95C,KAAA25C,UAAArjB,kBAAAC,gBAAAC;wBAC7B,IAA6BujB,UAAA,IAAAjJ,aAAAgJ,UAAA,MAAAtjB;wBAC7Bkc,eAAAqH;wBACA,OAAAD;;oBAQAD,iBAAAj2C,UAAAhD,gBAAA,SAAA61B,eAAA9yB,MAAA6yB;wBACA,IAA6BsjB,WAAA95C,KAAA25C,UAAA/4C,cAAA61B,eAAA9yB,MAAA6yB;wBAC7B,IAA6BujB,UAAA,IAAAjJ,aAAAgJ,UAAArH,aAAAhc,gBAAAD;wBAC7BujB,QAAAp2C;wBACA+uC,eAAAqH;wBACA,OAAAD;;oBAMAD,iBAAAj2C,UAAA8yB,iBAAA,SAAAC;wBAA4E,OAAA32B,KAAA25C,UAAAjjB,eAAAC;;oBAM5EkjB,iBAAAj2C,UAAAgzB,uBAAA,SAAAH,eAAAD;wBACA,IAA6BwjB,UAAAh6C,KAAA25C,UAAA/iB,qBAAAH,eAAAD;wBAC7B,IAA6BujB,UAAA,IAAApJ,UAAAqJ,SAAAvH,aAAAhc,gBAAAD;wBAC7Bkc,eAAAqH;wBACA,OAAAC;;oBAQAH,iBAAAj2C,UAAAizB,aAAA,SAAAJ,eAAAvyB,OAAAsyB;wBACA,IAA6BkC,OAAA14B,KAAA25C,UAAA9iB,WAAAJ,eAAAvyB,OAAAsyB;wBAC7B,IAA6BujB,UAAA,IAAApJ,UAAAjY,MAAA+Z,aAAAhc,gBAAAD;wBAC7Bkc,eAAAqH;wBACA,OAAArhB;;oBAOAmhB,iBAAAj2C,UAAAkzB,eAAA,SAAAL,eAAAM;wBACA,IAA6BkjB,cAAAxH,aAAAhc;wBAC7B,IAAAlqB,UAAA0tC,uCAAAnJ,cAAA;4BACA,IAAiCoJ,iBAAAD;4BACjCljB,MAAAvmB,QAAA,SAAAymB;gCAA+CijB,eAAAnJ,SAAA0B,aAAAxb;;;wBAE/Cj3B,KAAA25C,UAAA7iB,aAAAL,eAAAM;;oBAOA8iB,iBAAAj2C,UAAAozB,kBAAA,SAAAC,MAAAC;wBACA,IAA6BijB,YAAA1H,aAAAxb;wBAC7B,IAAA1qB,UAAA4tC,YAAA;4BACA,IAAiCF,cAAAE,UAAA5yC;4BACjC,IAAA2vB,cAAA9xB,SAAA,KAAAmH,UAAA0tC,cAAA;gCACA,IAAqCG;gCACrCljB,cAAA1mB,QAAA,SAAA6pC;oCAA+D,OAAAD,qBAAA72C,KAAAkvC,aAAA4H;;gCAC/DJ,YAAA5I,oBAAA8I,WAAAC;;;wBAGAp6C,KAAA25C,UAAA3iB,gBAAAC,MAAAC;;oBAMA2iB,iBAAAj2C,UAAAuzB,aAAA,SAAAD;wBACAA,cAAA1mB,QAAA,SAAAymB;4BACA,IAAiCkjB,YAAA1H,aAAAxb;4BACjC,IAAA1qB,UAAA4tC,cAAA5tC,UAAA4tC,UAAA5yC,SAAA;gCACA4yC,UAAA5yC,OAAA4pC,YAAAgJ;;;wBAGAn6C,KAAA25C,UAAAxiB,WAAAD;;oBAOA2iB,iBAAAj2C,UAAAwzB,cAAA,SAAAT,aAAAU;wBACAA;wBACAA,aAAA7mB,QAAA,SAAAymB;4BAAkD0b,yBAAAF,aAAAxb;;wBAClDj3B,KAAA25C,UAAAviB,YAAAT,aAAAU;;oBAQAwiB,iBAAAj2C,UAAA0zB,SAAA,SAAAC,eAAA5zB,MAAAtC;wBACA,IAA6B04C,UAAAtH,aAAAlb;wBAC7B,IAAAhrB,UAAAwtC,UAAA;4BACAA,QAAArO,UAAAnoC,KAAA,IAAAmtC,cAAA/sC,MAAAtC;;wBAEA,OAAArB,KAAA25C,UAAAriB,OAAAC,eAAA5zB,MAAAtC;;oBAQAw4C,iBAAAj2C,UAAA4zB,eAAA,SAAA5uB,QAAAjF,MAAAtC;wBACA,OAAArB,KAAA25C,UAAAniB,aAAA5uB,QAAAjF,MAAAtC;;oBAQAw4C,iBAAAj2C,UAAA6zB,qBAAA,SAAAF,eAAAG,cAAAC;wBACA,IAA6BoiB,UAAAtH,aAAAlb;wBAC7B,IAAAhrB,UAAAwtC,+BAAAjJ,cAAA;4BACAiJ,QAAA1vC,WAAAqtB,gBAAAC;;wBAEA33B,KAAA25C,UAAAliB,mBAAAF,eAAAG,cAAAC;;oBAQAkiB,iBAAAj2C,UAAAg0B,sBAAA,SAAAL,eAAAM,eAAAC;wBACA,IAA6BiiB,UAAAtH,aAAAlb;wBAC7B,IAAAhrB,UAAAwtC,+BAAAjJ,cAAA;4BACAiJ,QAAA/I,WAAAnZ,iBAAAC;;wBAEA93B,KAAA25C,UAAA/hB,oBAAAL,eAAAM,eAAAC;;oBAQA+hB,iBAAAj2C,UAAAm0B,sBAAA,SAAAR,eAAAG,cAAAC;wBACA33B,KAAA25C,UAAA5hB,oBAAAR,eAAAG,cAAAC;;oBAQAkiB,iBAAAj2C,UAAAo0B,kBAAA,SAAAT,eAAAU,WAAAC;wBACA,IAA6B6hB,UAAAtH,aAAAlb;wBAC7B,IAAAhrB,UAAAwtC,+BAAAjJ,cAAA;4BACAiJ,QAAA9I,QAAAhZ,aAAAC;;wBAEAl4B,KAAA25C,UAAA3hB,gBAAAT,eAAAU,WAAAC;;oBAQA2hB,iBAAAj2C,UAAAu0B,kBAAA,SAAAZ,eAAAa,WAAAC;wBACA,IAA6B0hB,UAAAtH,aAAAlb;wBAC7B,IAAAhrB,UAAAwtC,+BAAAjJ,cAAA;4BACAiJ,QAAAxlC,OAAA6jB,aAAAC;;wBAEAr4B,KAAA25C,UAAAxhB,gBAAAZ,eAAAa,WAAAC;;oBAQAwhB,iBAAAj2C,UAAA00B,sBAAA,SAAAf,eAAAgB,YAAAjoB;wBACAtQ,KAAA25C,UAAArhB,oBAAAf,eAAAgB,YAAAjoB;;oBAOAupC,iBAAAj2C,UAAA40B,UAAA,SAAAC,YAAAC;wBAA0E14B,KAAA25C,UAAAnhB,QAAAC,YAAAC;;oBAW1EmhB,iBAAAj2C,UAAA+0B,UAAA,SAAAC,SAAAC,gBAAAC,WAAAC,UAAAC,OAAAC,QAAAC;wBACA,IAAAA,yBAAA;4BAA6CA;;wBAC7C,OAAAl5B,KAAA25C,UAAAhhB,QAAAC,SAAAC,gBAAAC,WAAAC,UAAAC,OAAAC,QAAAC;;oBAEA,OAAA2gB;;gBAGA,IAAAS;gBACAA,SAAAC,OAAA;gBACAD,SAAAE,YAAA;gBACAF,SAAAG,WAAA;gBACAH,kBAAAC,QAAA;gBACAD,kBAAAE,aAAA;gBACAF,kBAAAG,YAAA;gBAEA,IAAAC,sBAAA;oBAMA,SAAAA,oBAAAvkB,gBAAAwkB,gBAAAC;wBACA56C,KAAAm2B;wBACAn2B,KAAA26C;wBACA36C,KAAA46C;;oBAEA,OAAAF;;gBAEA,IAAAG,eAAA;oBAOA,SAAAA,aAAAzK,OAAAtB,YAAAgM,SAAAC;wBACA/6C,KAAAowC;wBACApwC,KAAA8uC;wBACA9uC,KAAA86C;wBACA96C,KAAA+6C;;oBAEAx4C,OAAAC,eAAAq4C,aAAAj3C,WAAA;wBAIAnB,KAAA;4BACA,OAAA8J,UAAAvM,KAAA8uC,cAAA9uC,KAAAowC,MAAA4K,qBAAAh7C,KAAA8uC,cAAA;;wBAEA9qC,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAq4C,aAAAj3C,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAowC,MAAA/sB;;wBAC9Brf,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAq4C,aAAAj3C,WAAA;wBAIAnB,KAAA;4BACA,IAAiCw4C,iBAAAj7C,KAAAk7C;4BACjC,IAAA3uC,UAAA0uC,mBAAA1uC,UAAA0uC,eAAAN,iBAAA;gCACA,OAAA36C,KAAAmZ,SAAA1W,IAAAw4C,eAAAN;;4BAEA;;wBAEA32C,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAq4C,aAAAj3C,WAAA;wBAIAnB,KAAA;4BACA,IAAiC04C,gBAAAn7C,KAAAowC;4BACjC,OAAA7jC,UAAA4uC,cAAAC,eAAAD,cAAAt6C,SAAAy5C,SAAAE,WAAA;gCACAW,8BAAA;;4BAEA,OAAAA,cAAA1kB;;wBAEAzyB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAq4C,aAAAj3C,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAowC,MAAAj3B,SAAAnZ,KAAA8uC;;wBAC9B9qC,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAq4C,aAAAj3C,WAAA;wBAIAnB,KAAA;4BACA,IAAA8J,UAAAvM,KAAA8uC,eAAA9uC,KAAAowC,MAAAiL,UAAA;gCACA,OAAAr7C,KAAAowC,MAAAiL,SAAAr7C,KAAA8uC;mCAEA;gCACA;;;wBAGA9qC,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAq4C,aAAAj3C,WAAA;wBAIAnB,KAAA;4BACA,IAAiCw4C,iBAAAj7C,KAAAk7C;4BACjC,OAAA3uC,UAAA0uC,iCAAA9kB,iBAAA;;wBAEAnyB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAq4C,aAAAj3C,WAAA;wBAIAnB,KAAA;4BACA,OAAAzC,KAAAowC,MAAA/W,cAAAjlB,cAAA,MAAApU,KAAA86C,UAAA,MAAA96C,KAAA+6C;;wBAEA/2C,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAAq4C,aAAAj3C,WAAA;wBAIAnB,KAAA;4BACA,IAAA4N,QAAArQ;4BACA,IAAiCs7C;4BACjC,IAAiCL,iBAAAj7C,KAAAk7C;4BACjC,IAAA3uC,UAAA0uC,iBAAA;gCACA,IAAqCM,SAAAN,eAAAL;gCACrCr4C,OAAAoL,KAAA4tC,QAAA/qC,QAAA,SAAAgrC;oCACA,IAAyCC,WAAAF,OAAAC;oCACzC,IAAyCE;oCACzC,IAAAjvC,QAAAgvC,WAAA;wCACAC,WAAArrC,MAAA+/B,MAAAiL,WAAAhrC,MAAA+/B,MAAAiL,SAAAhrC,MAAAy+B,cAAA;2CAEA;wCACA4M,WAAArrC,MAAA+/B,MAAAuL,YAAAF,UAAAprC,MAAAy+B,YAAA;;oCAEAwM,UAAAE,WAAAE;;;4BAGA,OAAAJ;;wBAEAt3C,YAAA;wBACAD,cAAA;;oBAEA,OAAA82C;;gBAGA,IAAAe,mBAAA;oBACA,SAAAA;wBACA57C,KAAA67C,OAAA,IAAAhuC;wBACA7N,KAAA87C;;oBAOAF,iBAAAh4C,UAAAiH,OAAA,SAAA+tB,SAAAmjB;wBACA,IAA6BC,qBAAAh8C,KAAA67C,KAAAp5C,IAAAm2B;wBAC7B,IAAArsB,UAAAyvC,qBAAA;4BACA,OAAAA,mBAAAD;;;oBAOAH,iBAAAh4C,UAAAq4C,0BAAA,SAAArjB;wBACA,IAA6BtU,KAAAtkB,KAAA67C,KAAAp5C,IAAAm2B;wBAC7B,OAAAtU,KAAA/hB,OAAAoL,KAAA2W,IAAArL,IAAA,SAAA3P;4BAA0D,OAAAgb,GAAAhb;;;oBAQ1DsyC,iBAAAh4C,UAAAK,MAAA,SAAA20B,SAAAmjB,eAAA7vB;wBACA,IAA6B8vB,qBAAAh8C,KAAA67C,KAAAp5C,IAAAm2B;wBAC7B,KAAArsB,UAAAyvC,qBAAA;4BACAA;;wBAEA,IAA6BE,gBAAAF,mBAAAD;wBAC7B,IAAAxvC,UAAA2vC,gBAAA;4BACAl8C,KAAAwK,OAAAouB,SAAAmjB;;wBAEAC,mBAAAD,iBAAA7vB;wBACAlsB,KAAA87C,YAAAv4C,KAAA2oB;wBACAlsB,KAAA67C,KAAA53C,IAAA20B,SAAAojB;;oBAKAJ,iBAAAh4C,UAAAu4C,gBAAA;wBAAgE,OAAAn8C,KAAA87C;;oBAOhEF,iBAAAh4C,UAAA4G,SAAA,SAAAouB,SAAAmjB,eAAAK;wBACA,IAAAA,sBAAA;4BAA0CA,eAAA;;wBAC1C,IAA6BJ,qBAAAh8C,KAAA67C,KAAAp5C,IAAAm2B;wBAC7B,IAAAojB,oBAAA;4BACA,IAAiC9vB,SAAA8vB,mBAAAD;4BACjC,KAAAK,gBAAAlwB,WAAAkwB,cAAA;uCACAJ,mBAAAD;gCACA,IAAqC5qC,QAAAnR,KAAA87C,YAAAx4C,QAAA4oB;gCACrClsB,KAAA87C,YAAAp2C,OAAAyL,OAAA;gCACA,IAAA5O,OAAAoL,KAAAquC,oBAAA52C,WAAA;oCACApF,KAAA67C,KAAAvpB,OAAAsG;;;;;oBAKA,OAAAgjB;;gBAGA,IAAAS,uBAAA;oBAIA,SAAAA,qBAAAC;wBACAt8C,KAAAs8C;wBACAt8C,KAAA4zC,WAAA,IAAAgI;;oBAMAS,qBAAAz4C,UAAA24C,4BAAA,SAAAl7C;wBACA,IAA6Bm7C,yBAAAx8C,KAAA4zC,SAAAuI;wBAG7B,IAAAK,uBAAAp3C,QAAA;4BACA,IAAAuuC,qBAAA6I,wBAAAnI,OAAA;gCAAqF,OAAAhzC;;+BAErF;4BACAA;;;oBASAg7C,qBAAAz4C,UAAA64C,iBAAA,SAAA7jB,SAAAmjB,eAAA7vB;wBACA,IAAA7b,QAAArQ;wBACAA,KAAAs8C,gBAAArwB,QAAAC;wBACAlsB,KAAA4zC,SAAA3vC,IAAA20B,SAAAmjB,eAAA7vB;wBACAA,OAAAmoB,OAAA;4BAAuC,OAAAhkC,MAAAujC,SAAAppC,OAAAouB,SAAAmjB,eAAA7vB;;;oBAOvCmwB,qBAAAz4C,UAAA84C,sBAAA,SAAA9jB,SAAAmjB;wBACA,IAAAA,uBAAA;4BAA2CA,gBAAA;;wBAC3C,IAA6BY;wBAC7B,IAAAZ,eAAA;4BACA,IAAiCa,gBAAA58C,KAAA4zC,SAAA/oC,KAAA+tB,SAAAmjB;4BACjC,IAAAa,eAAA;gCACAC,gBAAAD,eAAAD;;+BAGA;4BACA38C,KAAA4zC,SAAAqI,wBAAArjB,SAAApoB,QAAA,SAAA0b;gCAA0F,OAAA2wB,gBAAA3wB,QAAAywB;;;wBAE1F,OAAAA;;oBAEA,OAAAN;;gBAOA,SAAAQ,gBAAA3wB,QAAA4wB;oBACA,IAAA5wB,kBAAAynB,wBAAAznB,kBAAA8oB,yBAAA;wBACA9oB,OAAAywB,QAAAnsC,QAAA,SAAA0b;4BAAsD,OAAA2wB,gBAAA3wB,QAAA4wB;;2BAEtD;wBACAA,iBAAAv5C,KAAA2oB;;;gBAWA,IAAA6wB,eAAA/8C,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAEA,IAAA6kC,kBAAA,SAAA3kC;oBACA0kC,aAAAC,iBAAA3kC;oBAKA,SAAA2kC,gBAAA5M,OAAAtB;wBACAz2B,OAAAvU,KAAA9D;wBACAA,KAAAowC;wBACApwC,KAAA8uC;;oBAOAkO,gBAAAp5C,UAAAnB,MAAA,SAAAkK,OAAAmL;wBACA,IAAAA,uBAAA;4BAA2CA,gBAAAF;;wBAC3C,OAAA5X,KAAAowC,MAAAuL,YAAAhvC,OAAA3M,KAAA8uC,YAAAh3B;;oBAEA,OAAAklC;kBACKjlC;gBASL,IAAAklC,eAAAj9C,aAAAkY,aAAA,SAAAhP,GAAAzB;oBACA,SAAAxG,KAAAwG,GAAA,IAAAA,EAAA5D,eAAA5C,IAAAiI,EAAAjI,KAAAwG,EAAAxG;oBACA,SAAAkX;wBAAuBnY,KAAAgP,cAAA9F;;oBACvBA,EAAAtF,YAAA6D,MAAA,OAAAlF,OAAA6M,OAAA3H,MAAA0Q,GAAAvU,YAAA6D,EAAA7D,WAAA,IAAAuU;;gBAEA,IAAqB+kC,eAAA3Y,eAAA;gBAIrB,IAAqB4Y,gBAAA,IAAA56C;gBACrB,IAAqB66C,cAAA,IAAA76C;gBAMrB,IAAA86C,UAAA;oBAYA,SAAAA,QAAAC,OAAAjkB,eAAAx4B,MAAA08C,WAAAnC,YAAAoC,aAAA/mB,eAAA6Z,QAAAmN;wBACA,IAAAA,+BAAA;4BAAmDA,wBAAA;;wBACnDz9C,KAAAs9C;wBACAt9C,KAAAq5B;wBACAr5B,KAAAa;wBACAb,KAAAu9C;wBACAv9C,KAAAo7C;wBACAp7C,KAAAw9C;wBACAx9C,KAAAy2B;wBACAz2B,KAAAswC;wBACAtwC,KAAAy9C;wBACAz9C,KAAA09C,iBAAA;wBACA19C,KAAAsiC,MAAA,IAAA6N,SAAAnwC,MAAAu9C,UAAA7iB;wBACA,IAAA75B,SAAAy5C,SAAAE,aAAA35C,SAAAy5C,SAAAC,MAAA;4BACAv6C,KAAA6+B,WAAA0e,UAAAnkB,gBAAAC;+BAEA;4BACAr5B,KAAA6+B,WAAAuc,WAAAvc;;wBAEA7+B,KAAA29C,kBAAA39C,KAAA6+B,SAAA+e;;oBAEAr7C,OAAAC,eAAA66C,QAAAz5C,WAAA;wBAIAnB,KAAA;4BACA,KAAAzC,KAAA69C,mBAAA;gCACA79C,KAAA69C,oBAAA,IAAAxB,qBAAAr8C,KAAAu9C,UAAA7iB;;4BAEA,OAAA16B,KAAA69C;;wBAEA75C,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA66C,QAAAz5C,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAswC,WAAAr9B,qBAAAM;;wBAC9BvP,YAAA;wBACAD,cAAA;;oBAMAs5C,QAAAz5C,UAAAwL,SAAA,SAAAiU;wBACArjB,KAAAqjB;wBACA,OAAArjB,KAAAqsC,eAAA;;oBAQAgR,QAAAz5C,UAAAi/B,iBAAA,SAAAvD,oBAAAwe,cAAAnb;wBACA3iC,KAAAqjB,UAAA;wBACArjB,KAAA+9C,0BAAAxxC,UAAA+yB;wBACAt/B,KAAAg+C,gBAAAF;wBACA99C,KAAAi+C,wBAAAtb;wBACA,OAAA3iC,KAAAqsC,eAAA/M;;oBAQA+d,QAAAz5C,UAAAyoC,iBAAA,SAAA/M;wBAA0E;;oBAM1E+d,QAAAz5C,UAAAmrC,6BAAA,SAAAmP;wBAAqF;;oBAOrFb,QAAAz5C,UAAA8jC,OAAA,SAAAyW,cAAA9C,UAAA1b;wBACA3/B,KAAAm+C;wBACAn+C,KAAAq7C;wBACAr7C,KAAA2/B;wBACA,IAAA3/B,KAAAa,SAAAy5C,SAAAE,WAAA;4BACAx6C,KAAAo+C;;;oBASAf,QAAAz5C,UAAA+3C,cAAA,SAAAhvC,OAAA0xC,WAAAvmC;wBACA,IAAAA,uBAAA;4BAA2CA,gBAAAF;;wBAC3C,IAA6BhQ,SAAAw1C;wBAC7B,IAA6B5d,OAAAx/B;wBAC7B,OAAA4H,WAAAw1C,aAAA;4BACA,IAAA7wC,UAAA8xC,YAAA;gCACAz2C,SAAA43B,KAAA8e,oBAAA3xC,OAAA0xC,WAAAjB;;4BAEA,IAAAx1C,WAAAw1C,eAAA5d,KAAA3+B,SAAAy5C,SAAAC,MAAA;gCACA3yC,SAAA43B,KAAAwe,cAAAv7C,IAAAkK,OAAAmL;;4BAEAumC,YAAA7e,KAAAge;4BACAhe,YAAA4b;;wBAEA,OAAAxzC;;oBASAy1C,QAAAz5C,UAAA06C,sBAAA,SAAA3xC,OAAA0xC,WAAAE;wBACA,OAAAA;;oBAMAlB,QAAAz5C,UAAAuV,WAAA,SAAAklC;wBAA2D,WAAArB,gBAAAh9C,MAAAq+C;;oBAI3DhB,QAAAz5C,UAAA2+B,mBAAA;wBACA,IAAAviC,KAAAw+C,eAAA;4BACAx+C,KAAAw+C,cAAArnB,WAAAn3B,KAAAw+C,cAAA9O,YAAApsC,QAAAtD;+BAEA,IAAAA,KAAA4pC,QAAA;4BACA5pC,KAAA4pC,OAAAzS,WAAAn3B,KAAAsiC;+BAEA,IAAAtiC,KAAA+9C,yBAAA;4BACA/9C,KAAAw1B;;wBAEAx1B,KAAAyK;;oBAKA4yC,QAAAz5C,UAAA6G,UAAA;wBACA,IAAA4F,QAAArQ;wBACA,IAAAA,KAAAswC,WAAAr9B,qBAAAM,WAAA;4BACA;;wBAEA,IAA6BojB,cAAA32B,KAAAa,SAAAy5C,SAAAE,YAAAx6C,KAAAy2B,gBAAA;wBAC7B,IAAAz2B,KAAA2/B,aAAA;4BACA,SAAsC5/B,IAAA,GAAUA,IAAAC,KAAA2/B,YAAAv6B,QAA6BrF,KAAA;gCAC7EC,KAAA2/B,YAAA5/B;;;wBAGAC,KAAAusC;wBACAvsC,KAAAo+C;wBACA,IAAAp+C,KAAA69C,mBAAA;4BACA79C,KAAA69C,kBAAAtB,0BAAA;gCAA8E,OAAAlsC,MAAAwuB,SAAAzH,YAAAT,aAAAtmB,MAAAgrC;;+BAE9E;4BACAr7C,KAAA6+B,SAAAzH,YAAAT,aAAA32B,KAAAq7C;;wBAEAr7C,KAAAswC,SAAAr9B,qBAAAM;;oBAMA8pC,QAAAz5C,UAAA2oC,kBAAA;oBAKA8Q,QAAAz5C,UAAA66C,iBAAA;oBAIApB,QAAAz5C,UAAA4xB,SAAA;wBACA,IAAAnlB,QAAArQ;wBACAA,KAAAy+C;wBACA,IAAAz+C,KAAA69C,mBAAA;4BACA79C,KAAA69C,kBAAAtB,0BAAA;gCAA8E,OAAAlsC,MAAAquC;;+BAE9E;4BACA1+C,KAAA0+C;;wBAEA,IAAA1+C,KAAAy9C,yBAAAz9C,KAAAy9C,0BAAAz9C,KAAAw+C,iBACAx+C,KAAAy9C,sBAAAkB,gBAAA;4BACA,IAAiCA,iBAAA3+C,KAAAy9C,sBAAAkB;4BACjC,IAAiCxtC,QAAAwtC,eAAAr7C,QAAAtD;4BAEjC,IAAAmR,SAAAwtC,eAAAv5C,SAAA;gCACAu5C,eAAAt3C;mCAEA;gCACAs3C,eAAAj5C,OAAAyL,OAAA;;;wBAGAnR,KAAA4pC,SAAA;wBACA5pC,KAAAw+C,gBAAA;wBACAx+C,KAAAo+C;;oBAKAf,QAAAz5C,UAAA86C,gBAAA;wBACA,IAAA1+C,KAAA29C,iBAAA;4BACA39C,KAAA4+C,uBAAA5+C,KAAA29C,gBAAAnzC,QAAA;+BAEA;4BACAxK,KAAA6+B,SAAA1H,WAAAn3B,KAAAuwC;;;oBAOA8M,QAAAz5C,UAAAynC,iBAAA,SAAAzB;wBACA,IAAA5pC,KAAAw+C,eAAA;4BACA,UAAAj9C,MAAA;;wBAEAvB,KAAA4pC;wBACA5pC,KAAAo+C;;oBAOAf,QAAAz5C,UAAAi7C,cAAA,SAAAL,eAAAM;wBACA,IAAA9+C,KAAA4pC,QAAA;4BACA,UAAAroC,MAAA;;wBAEAvB,KAAA++C,cAAAP,eAAAM;wBACA9+C,KAAAw+C;wBACA,IAAAx+C,KAAAy9C,yBAAAz9C,KAAAy9C,0BAAAe,eAAA;4BACA,KAAAx+C,KAAAy9C,sBAAAkB,gBAAA;gCACA3+C,KAAAy9C,sBAAAkB;;4BAEA3+C,KAAAy9C,sBAAAkB,eAAAp7C,KAAAvD;;wBAEAA,KAAAo+C;;oBAOAf,QAAAz5C,UAAAo7C,YAAA,SAAAR,eAAAM;wBACA9+C,KAAA++C,cAAAP,eAAAM;wBACA9+C,KAAAo+C;;oBAOAf,QAAAz5C,UAAAm7C,gBAAA,SAAAP,eAAAM;wBACA,IAA6BG,WAAAH,oBAAAX,eAAAK,cAAAt2B;wBAC7B,IAAAloB,KAAA29C,iBAAA;4BACA,IAAiCuB,cAAAl/C,KAAA29C,gBAAAuB,YAAAD;4BACjC,IAAAC,aAAA;gCACAl/C,KAAA4+C,uBAAA5+C,KAAA29C,gBAAAwB,cAAAD;mCAEA;gCACA,IAAqCzoB,gBAAAz2B,KAAA29C,gBAAAlnB,cAAAwoB;gCACrC,IAAAxoB,eAAA;oCACAz2B,KAAA4+C,uBAAA5+C,KAAA29C,gBAAAx8C,aAAAs1B;;;+BAIA;4BACAz2B,KAAA6+B,SAAA7H,gBAAAioB,UAAAj/C,KAAAuwC;;;oBAGAhuC,OAAAC,eAAA66C,QAAAz5C,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAsiC;;wBAC9Bt+B,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA66C,QAAAz5C,WAAA;wBAIAnB,KAAA;4BACA,IAAiCs0B;4BACjC/2B,KAAA4+C,uBAAA9jB,YAAA/D;4BACA,OAAAA;;wBAEA/yB,YAAA;wBACAD,cAAA;;oBAOAs5C,QAAAz5C,UAAAkzB,eAAA,SAAAL,eAAA2oB;wBACA,IAAAp/C,KAAA29C,iBAAA;4BACA39C,KAAAq/C,oBAAAD,gBAAAp/C,KAAA29C,gBAAAx8C,aAAAs1B;+BAEA;4BACA,IAAiCM;4BACjC/2B,KAAAq/C,oBAAAD,gBAAAtkB,YAAA/D;4BACA/2B,KAAA6+B,SAAA/H,aAAAL,eAAAM;;;oBASAsmB,QAAAz5C,UAAAy7C,sBAAA,SAAAD,gBAAAl3C,IAAArB;wBACA,QAAA7G,KAAAa;0BACA,KAAAy5C,SAAAG;4BACAz6C,KAAAo7C,WAAAiE,oBAAAD,gBAAAl3C,IAAArB;4BACA;;0BACA,KAAAyzC,SAAAE;4BACA,IAAAx6C,KAAAo7C,WAAAv6C,SAAAy5C,SAAAC,MAAA;gCACA,IAAyCxjB,QAAA/2B,KAAAo7C,WAAA6C,sBAAAmB;gCACzC,SAA8Cr/C,IAAA,GAAUA,IAAAg3B,MAAA3xB,QAAkBrF,KAAA;oCAC1EmI,GAAA6uB,MAAAh3B,IAAA8G;;mCAGA;gCACA7G,KAAAo7C,WAAAkE,8BAAAt/C,KAAAw9C,aAAA4B,gBAAAl3C,IAAArB;;4BAEA;;;oBASAw2C,QAAAz5C,UAAAg7C,yBAAA,SAAA12C,IAAArB;oBASAw2C,QAAAz5C,UAAA07C,gCAAA,SAAAjB,WAAAe,gBAAAl3C,IAAArB;oBAKAw2C,QAAAz5C,UAAAw6C,6BAAA;oBAKAf,QAAAz5C,UAAA27C,wBAAA,SAAA9iB;wBACA,IAAAz8B,KAAAswC,WAAAr9B,qBAAAI,UAAA;4BACArT,KAAAy1B,cAAAgH;;;oBAOA4gB,QAAAz5C,UAAA6xB,gBAAA,SAAAgH;wBACA,IAA6BgI,IAAAyY,aAAAl9C,KAAAs9C;wBAC7B,IAAAt9C,KAAAswC,WAAAr9B,qBAAAE,WACAnT,KAAAswC,WAAAr9B,qBAAAK,SACA;wBACA,IAAAtT,KAAAswC,WAAAr9B,qBAAAM,WAAA;4BACAvT,KAAAw/C,oBAAA;;wBAEAx/C,KAAAy/C,sBAAAhjB;wBACA,IAAAz8B,KAAAswC,WAAAr9B,qBAAAC,WACAlT,KAAAswC,SAAAr9B,qBAAAE;wBACAnT,KAAA09C;wBACAlZ,SAAAC;;oBAOA4Y,QAAAz5C,UAAA67C,wBAAA,SAAAhjB;oBAIA4gB,QAAAz5C,UAAA87C,kBAAA;wBAAyD1/C,KAAAswC,SAAAr9B,qBAAAC;;oBAIzDmqC,QAAAz5C,UAAA4sC,4BAAA;wBACA,IAA6B3pC,IAAA7G;wBAC7B,OAAAuM,UAAA1F,QAAAypC,WAAAr9B,qBAAAI,UAAA;4BACA,IAAAxM,EAAAypC,WAAAr9B,qBAAAE,SAAA;gCACAtM,EAAAypC,SAAAr9B,qBAAAC;;4BAEA,IAAArM,EAAAhG,SAAAy5C,SAAAE,WAAA;gCACA3zC,MAAAu0C;mCAEA;gCACAv0C,MAAA23C,gBAAA33C,EAAA23C,cAAApD,aAAA;;;;oBAQAiC,QAAAz5C,UAAA+7C,eAAA,SAAAz3C;wBACA,OAAAA;;oBAMAm1C,QAAAz5C,UAAA47C,sBAAA,SAAAllB;wBAAoE,UAAAD,mBAAAC;;oBACpE,OAAA+iB;;gBAEA,IAAAuC,eAAA,SAAAvnC;oBACA4kC,aAAA2C,cAAAvnC;oBAaA,SAAAunC,aAAAtC,OAAAjkB,eAAAx4B,MAAA08C,WAAAnC,YAAAoC,aAAAjL,YAAAjC,QAAA0K,sBAAAyC;wBACA,IAAAA,+BAAA;4BAAmDA,wBAAA;;wBACnDplC,OAAAvU,KAAA9D,MAAAs9C,OAAAjkB,eAAAx4B,MAAA08C,WAAAnC,YAAAoC,aAAAjL,YAAAjC,QAAAmN;wBACAz9C,KAAAg7C;wBACAh7C,KAAA6/C,uBAAA;;oBAMAD,aAAAh8C,UAAAwL,SAAA,SAAAiU;wBACArjB,KAAA8/C;wBACA;4BACA,OAAAznC,OAAAzU,UAAAwL,OAAAtL,KAAA9D,MAAAqjB;0BAEA,OAAAhhB;4BACArC,KAAA+/C,oBAAA19C;4BACA,MAAAA;;;oBASAu9C,aAAAh8C,UAAAi/B,iBAAA,SAAAvD,oBAAAnmB,UAAAwpB;wBACA,IAAAA,0BAAA;4BAA8CA,mBAAA;;wBAC9C3iC,KAAA8/C;wBACA;4BACA,OAAAznC,OAAAzU,UAAAi/B,eAAA/+B,KAAA9D,MAAAs/B,oBAAAnmB,UAAAwpB;0BAEA,OAAAtgC;4BACArC,KAAA+/C,oBAAA19C;4BACA,MAAAA;;;oBASAu9C,aAAAh8C,UAAA+3C,cAAA,SAAAhvC,OAAA0xC,WAAAE;wBACAv+C,KAAA8/C;wBACA;4BACA,OAAAznC,OAAAzU,UAAA+3C,YAAA73C,KAAA9D,MAAA2M,OAAA0xC,WAAAE;0BAEA,OAAAl8C;4BACArC,KAAA+/C,oBAAA19C;4BACA,MAAAA;;;oBAMAu9C,aAAAh8C,UAAA4xB,SAAA;wBACAx1B,KAAA8/C;wBACA;4BACAznC,OAAAzU,UAAA4xB,OAAA1xB,KAAA9D;0BAEA,OAAAqC;4BACArC,KAAA+/C,oBAAA19C;4BACA,MAAAA;;;oBAMAu9C,aAAAh8C,UAAA6G,UAAA;wBACAzK,KAAA8/C;wBACA;4BACAznC,OAAAzU,UAAA6G,QAAA3G,KAAA9D;0BAEA,OAAAqC;4BACArC,KAAA+/C,oBAAA19C;4BACA,MAAAA;;;oBAOAu9C,aAAAh8C,UAAA6xB,gBAAA,SAAAgH;wBACAz8B,KAAA8/C;wBACA;4BACAznC,OAAAzU,UAAA6xB,cAAA3xB,KAAA9D,MAAAy8B;0BAEA,OAAAp6B;4BACArC,KAAA+/C,oBAAA19C;4BACA,MAAAA;;;oBAMAu9C,aAAAh8C,UAAAk8C,cAAA;wBAA0D9/C,KAAA6/C,uBAAA;;oBAO1DD,aAAAh8C,UAAAo8C,QAAA,SAAA3B,WAAA4B,QAAAC;wBACA,OAAAlgD,KAAA6/C,uBAAA,IAAAhF,aAAA76C,MAAAq+C,WAAA4B,QAAAC;;oBAMAN,aAAAh8C,UAAAm8C,sBAAA,SAAA19C;wBACA,MAAAA,aAAA+3B,mBAAA;4BACA,MAAA/3B,aAAA23B,8CAAA;gCACAh6B,KAAAswC,SAAAr9B,qBAAAK;;4BAEA,IAAA/G,UAAAvM,KAAA6/C,uBAAA;gCACA,UAAAzlB,iBAAA/3B,GAAArC,KAAA6/C;;;;oBAQAD,aAAAh8C,UAAA+7C,eAAA,SAAAz3C;wBACA,IAAAmI,QAAArQ;wBACA,IAA6BmgD,eAAA9nC,OAAAzU,UAAA+7C,aAAA77C,KAAA9D,MAAAkI;wBAC7B,gBAAA23B,WAAAugB;4BACA/vC,MAAAyvC;4BACA;gCACA,OAAAK,aAAAr8C,KAAAuM,OAAAwvB,WAAAugB;8BAEA,OAAA/9C;gCACAgO,MAAA0vC,oBAAA19C;gCACA,MAAAA;;;;oBAIA,OAAAu9C;kBACKvC;gBAML,IAAAgD,gBAAA;oBAOA,SAAAA,cAAAlvC,OAAAqsC,aAAApC,YAAAlzB;wBACAloB,KAAAmR;wBACAnR,KAAAw9C;wBACAx9C,KAAAo7C;wBACAp7C,KAAAkoB;;oBAEA3lB,OAAAC,eAAA69C,cAAAz8C,WAAA;wBAIAnB,KAAA;4BAA8B,WAAAwlB,WAAAjoB,KAAAkoB;;wBAC9BlkB,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA69C,cAAAz8C,WAAA;wBAIAnB,KAAA;4BAA8B,WAAA2sC,kBAAApvC;;wBAC9BgE,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA69C,cAAAz8C,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAo7C,WAAAjiC,SAAAnZ,KAAAw9C;;wBAC9Bx5C,YAAA;wBACAD,cAAA;;oBAEAxB,OAAAC,eAAA69C,cAAAz8C,WAAA;wBAIAnB,KAAA;4BAA8B,OAAAzC,KAAAo7C,WAAAjiC,SAAAnZ,KAAAmR;;wBAC9BnN,YAAA;wBACAD,cAAA;;oBAMAs8C,cAAAz8C,UAAA08C,6BAAA,SAAA7jB;wBACA,IAAAz8B,KAAA0vC,aAAA;4BACA,SAAsC3vC,IAAA,GAAUA,IAAAC,KAAA0vC,YAAAtqC,QAA6BrF,KAAA;gCAC7EC,KAAA0vC,YAAA3vC,GAAA01B,cAAAgH;;;;oBAOA4jB,cAAAz8C,UAAA28C,qBAAA;wBACA,IAAAvgD,KAAA0vC,aAAA;4BACA,SAAsC3vC,IAAA,GAAUA,IAAAC,KAAA0vC,YAAAtqC,QAA6BrF,KAAA;gCAC7EC,KAAA0vC,YAAA3vC,GAAA0K;;;;oBASA41C,cAAAz8C,UAAA48C,2BAAA,SAAAt4C,IAAArB;wBACA,IAAA7G,KAAA0vC,aAAA;4BACA,SAAsC3vC,IAAA,GAAUA,IAAAC,KAAA0vC,YAAAtqC,QAA6BrF,KAAA;gCAC7EC,KAAA0vC,YAAA3vC,GAAA6+C,uBAAA12C,IAAArB;;;;oBASAw5C,cAAAz8C,UAAA68C,iBAAA,SAAAC,iBAAAr/C;wBACA,IAA6BuG;wBAC7B,IAAA5H,KAAA0vC,aAAA;4BACA,SAAsC3vC,IAAA,GAAUA,IAAAC,KAAA0vC,YAAAtqC,QAA6BrF,KAAA;gCAC7E,IAAqC4gD,aAAA3gD,KAAA0vC,YAAA3vC;gCACrC,IAAA4gD,WAAArD,UAAAoD,iBAAA;oCACA94C,OAAArE,KAAAlC,SAAAs/C;;;;wBAIA,IAAA3gD,KAAA2+C,gBAAA;4BACA,SAAsC5+C,IAAA,GAAUA,IAAAC,KAAA2+C,eAAAv5C,QAAgCrF,KAAA;gCAChF,IAAqC6gD,gBAAA5gD,KAAA2+C,eAAA5+C;gCACrC,IAAA6gD,cAAAtD,UAAAoD,iBAAA;oCACA94C,OAAArE,KAAAlC,SAAAu/C;;;;wBAIA,OAAAh5C;;oBAOAy4C,cAAAz8C,UAAAksC,WAAA,SAAAtQ,MAAAlR;wBACA,IAA6BI,gBAAA1uB,KAAA0vC,YAAApsC,QAAAk8B;wBAC7B,IAAAA,KAAA3+B,SAAAy5C,SAAAE,WAAA;4BACA,UAAAj5C,MAAA;;wBAEA,IAA6BmuC,cAAA1vC,KAAA0vC;wBAC7B,IAAAA,eAAA;4BACAA;4BACA1vC,KAAA0vC;;wBAEAA,YAAAhqC,OAAAgpB,eAAA;wBACAghB,YAAAhqC,OAAA4oB,cAAA,GAAAkR;wBACA,IAA6Bsf,WAAAxwB,eAAA,IAAAohB,YAAAphB,eAAA;wBAC7BkR,KAAAwf,UAAAh/C,MAAA8+C;;oBAOAuB,cAAAz8C,UAAAwmC,aAAA,SAAA5K,MAAAqhB;wBACA,IAAArhB,KAAA3+B,SAAAy5C,SAAAE,WAAA;4BACA,UAAAj5C,MAAA;;wBAEA,IAA6BmuC,cAAA1vC,KAAA0vC;wBAC7B,IAAAA,eAAA;4BACAA;4BACA1vC,KAAA0vC;;wBAGA,IAAAmR,aAAAnR,YAAAtqC,QAAA;4BACAsqC,YAAAnsC,KAAAi8B;+BAEA;4BACAkQ,YAAAhqC,OAAAm7C,WAAA,GAAArhB;;wBAEA,IAA6Bsf,WAAA+B,YAAA,IAAAnR,YAAAmR,YAAA;wBAC7BrhB,KAAAqf,YAAA7+C,MAAA8+C;;oBAMAuB,cAAAz8C,UAAAuzB,aAAA,SAAA0pB;wBACA,IAA6BrhB,OAAAx/B,KAAA0vC,YAAAmR;wBAE7B,IAAAA,aAAA7gD,KAAA0vC,YAAAtqC,SAAA;4BACApF,KAAA0vC,YAAAroC;+BAEA;4BACArH,KAAA0vC,YAAAhqC,OAAAm7C,WAAA;;wBAEA,IAAArhB,KAAA3+B,SAAAy5C,SAAAE,WAAA;4BACA,UAAAj5C,MAAA;;wBAEAi+B,KAAAhK;wBACA,OAAAgK;;oBAEA,OAAA6gB;;gBAGA,IAAqBS;oBACrBttC;oBACAP;oBACAuM;oBACAtK;oBACAS;oBACAmI;oBACAmlB;oBACAhB;oBACAoe;oBACAhD;oBACAuC;oBACAxT;oBACAQ;oBACA0N;oBACA5Y;oBACA1qB;oBACA6jC;oBACAH;oBACA9lB;oBACAD;oBACAK;oBACAkB;oBACA2Y;oBACA1zB;oBACA7L;oBACAoqC;oBACA7yB;oBACAxI;oBACAJ;oBACA82B;oBACAD;oBACAE;oBACArB;oBACAkB;oBACA0C;oBACAK;oBACAM;oBACAS;oBACAE;oBACAH;oBACAryB;oBACAyyB;oBACAtF;oBACAC;oBACAC;oBACAH;oBACAxsB;oBACA1B;oBACAE;oBACA6zB;;gBAGA15C,QAAA4nC;gBACA5nC,QAAAsoC;gBACAtoC,QAAAyoC;gBACAzoC,QAAAqoC;gBACAroC,QAAA8nC;gBACA9nC,QAAAmqC;gBACAnqC,QAAAynC;gBACAznC,QAAA0nC;gBACA1nC,QAAAioC;gBACAjoC,QAAA2nC;gBACA3nC,QAAAwmB;gBACAxmB,QAAAknB;gBACAlnB,QAAAgnB;gBACAhnB,QAAAinB;gBACAjnB,QAAA+lB;gBACA/lB,QAAAgmB;gBACAhmB,QAAAoxC;gBACApxC,QAAAixC;gBACAjxC,QAAA2yC;gBACA3yC,QAAA+yC;gBACA/yC,QAAAklC;gBACAllC,QAAAsmC;gBACAtmC,QAAAonC;gBACApnC,QAAAszC;gBACAtzC,QAAAuzC;gBACAvzC,QAAAqzC;gBACArzC,QAAA4zC;gBACA5zC,QAAA6kC;gBACA7kC,QAAA8kC;gBACA9kC,QAAAglC;gBACAhlC,QAAAilC;gBACAjlC,QAAAsb;gBACAtb,QAAA0oB;gBACA1oB,QAAAqjB;gBACArjB,QAAAq5C;gBACAr5C,QAAAo1C;gBACAp1C,QAAAo5C;gBACAp5C,QAAAm1C;gBACAn1C,QAAAm6B;gBACAn6B,QAAA45B;gBACA55B,QAAAyS;gBACAzS,QAAA0S;gBACA1S,QAAAiT;gBACAjT,QAAA4S;gBACA5S,QAAA2S;gBACA3S,QAAAmT;gBACAnT,QAAAkT;gBACAlT,QAAAuU;gBACAvU,QAAAgU;gBACAhU,QAAAsV;gBACAtV,QAAAuV;gBACAvV,QAAAoV;gBACApV,QAAAqV;gBACArV,QAAAkV;gBACAlV,QAAA8V;gBACA9V,QAAA6V;gBACA7V,QAAAgW;gBACAhW,QAAA+V;gBACA/V,QAAA2V;gBACA3V,QAAA4V;gBACA5V,QAAA0V;gBACA1V,QAAAyV;gBACAzV,QAAA2W;gBACA3W,QAAA4W;gBACA5W,QAAA6W;gBACA7W,QAAAkX;gBACAlX,QAAAwX;gBACAxX,QAAA4X;gBACA5X,QAAAoP;gBACApP,QAAA6X;gBACA7X,QAAAgY;gBACAhY,QAAAqY;gBACArY,QAAAohB;gBACAphB,QAAAof;gBACApf,QAAA8a;gBACA9a,QAAAsS;gBACAtS,QAAAiS;gBACAjS,QAAAkS;gBACAlS,QAAAyL;gBACAzL,QAAAmS;gBACAnS,QAAAoS;gBACApS,QAAAqS;gBACArS,QAAAspB;gBACAtpB,QAAAs2B;gBACAt2B,QAAA22B;gBACA32B,QAAAy5B;gBACAz5B,QAAAooB;gBACApoB,QAAA2nB;gBACA3nB,QAAAqoB;gBACAroB,QAAAunB;gBACAvnB,QAAA8iC;gBACA9iC,QAAAmiC;gBACAniC,QAAA0L;gBACA1L,QAAAuoB;gBACAvoB,QAAAqsC;gBACArsC,QAAAmsC;gBACAnsC,QAAA8sC;gBACA9sC,QAAAmtC;gBACAntC,QAAAotC;gBACAptC,QAAAkuC;gBACAluC,QAAA8tC;gBACA9tC,QAAAgvC;gBACAhvC,QAAAsvC;gBACAtvC,QAAAuwC;gBACAvwC,QAAAswC;gBACAtwC,QAAAoT;gBACApT,QAAA41B;gBACA51B,QAAAixB;gBACAjxB,QAAAktB;gBACAltB,QAAA00B;gBACA10B,QAAAg0B;gBACAh0B,QAAA+0B;gBACA/0B,QAAA01B;gBACA11B,QAAAm1B;gBACAn1B,QAAAozC;gBACApzC,QAAAohD;gBACAphD,QAAA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","file":"component-injector.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \tvar parentHotUpdateCallback = this[\"webpackHotUpdate\"];\n/******/ \tthis[\"webpackHotUpdate\"] = \r\n/******/ \tfunction webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars\r\n/******/ \t\thotAddUpdateChunk(chunkId, moreModules);\r\n/******/ \t\tif(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars\r\n/******/ \t\tvar head = document.getElementsByTagName(\"head\")[0];\r\n/******/ \t\tvar script = document.createElement(\"script\");\r\n/******/ \t\tscript.type = \"text/javascript\";\r\n/******/ \t\tscript.charset = \"utf-8\";\r\n/******/ \t\tscript.src = __webpack_require__.p + \"\" + chunkId + \".\" + hotCurrentHash + \".hot-update.js\";\r\n/******/ \t\thead.appendChild(script);\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars\r\n/******/ \t\tif(typeof XMLHttpRequest === \"undefined\")\r\n/******/ \t\t\treturn callback(new Error(\"No browser support\"));\r\n/******/ \t\ttry {\r\n/******/ \t\t\tvar request = new XMLHttpRequest();\r\n/******/ \t\t\tvar requestPath = __webpack_require__.p + \"\" + hotCurrentHash + \".hot-update.json\";\r\n/******/ \t\t\trequest.open(\"GET\", requestPath, true);\r\n/******/ \t\t\trequest.timeout = 10000;\r\n/******/ \t\t\trequest.send(null);\r\n/******/ \t\t} catch(err) {\r\n/******/ \t\t\treturn callback(err);\r\n/******/ \t\t}\r\n/******/ \t\trequest.onreadystatechange = function() {\r\n/******/ \t\t\tif(request.readyState !== 4) return;\r\n/******/ \t\t\tif(request.status === 0) {\r\n/******/ \t\t\t\t// timeout\r\n/******/ \t\t\t\tcallback(new Error(\"Manifest request to \" + requestPath + \" timed out.\"));\r\n/******/ \t\t\t} else if(request.status === 404) {\r\n/******/ \t\t\t\t// no update available\r\n/******/ \t\t\t\tcallback();\r\n/******/ \t\t\t} else if(request.status !== 200 && request.status !== 304) {\r\n/******/ \t\t\t\t// other failure\r\n/******/ \t\t\t\tcallback(new Error(\"Manifest request to \" + requestPath + \" failed.\"));\r\n/******/ \t\t\t} else {\r\n/******/ \t\t\t\t// success\r\n/******/ \t\t\t\ttry {\r\n/******/ \t\t\t\t\tvar update = JSON.parse(request.responseText);\r\n/******/ \t\t\t\t} catch(e) {\r\n/******/ \t\t\t\t\tcallback(e);\r\n/******/ \t\t\t\t\treturn;\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tcallback(null, update);\r\n/******/ \t\t\t}\r\n/******/ \t\t};\r\n/******/ \t}\r\n/******/\n/******/ \t\r\n/******/ \t\r\n/******/ \t// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js\r\n/******/ \tvar canDefineProperty = false;\r\n/******/ \ttry {\r\n/******/ \t\tObject.defineProperty({}, \"x\", {\r\n/******/ \t\t\tget: function() {}\r\n/******/ \t\t});\r\n/******/ \t\tcanDefineProperty = true;\r\n/******/ \t} catch(x) {\r\n/******/ \t\t// IE will fail on defineProperty\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tvar hotApplyOnUpdate = true;\r\n/******/ \tvar hotCurrentHash = \"719ceb4a230d9234fb2a\"; // eslint-disable-line no-unused-vars\r\n/******/ \tvar hotCurrentModuleData = {};\r\n/******/ \tvar hotCurrentParents = []; // eslint-disable-line no-unused-vars\r\n/******/ \t\r\n/******/ \tfunction hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars\r\n/******/ \t\tvar me = installedModules[moduleId];\r\n/******/ \t\tif(!me) return __webpack_require__;\r\n/******/ \t\tvar fn = function(request) {\r\n/******/ \t\t\tif(me.hot.active) {\r\n/******/ \t\t\t\tif(installedModules[request]) {\r\n/******/ \t\t\t\t\tif(installedModules[request].parents.indexOf(moduleId) < 0)\r\n/******/ \t\t\t\t\t\tinstalledModules[request].parents.push(moduleId);\r\n/******/ \t\t\t\t\tif(me.children.indexOf(request) < 0)\r\n/******/ \t\t\t\t\t\tme.children.push(request);\r\n/******/ \t\t\t\t} else hotCurrentParents = [moduleId];\r\n/******/ \t\t\t} else {\r\n/******/ \t\t\t\tconsole.warn(\"[HMR] unexpected require(\" + request + \") from disposed module \" + moduleId);\r\n/******/ \t\t\t\thotCurrentParents = [];\r\n/******/ \t\t\t}\r\n/******/ \t\t\treturn __webpack_require__(request);\r\n/******/ \t\t};\r\n/******/ \t\tfor(var name in __webpack_require__) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {\r\n/******/ \t\t\t\tif(canDefineProperty) {\r\n/******/ \t\t\t\t\tObject.defineProperty(fn, name, (function(name) {\r\n/******/ \t\t\t\t\t\treturn {\r\n/******/ \t\t\t\t\t\t\tconfigurable: true,\r\n/******/ \t\t\t\t\t\t\tenumerable: true,\r\n/******/ \t\t\t\t\t\t\tget: function() {\r\n/******/ \t\t\t\t\t\t\t\treturn __webpack_require__[name];\r\n/******/ \t\t\t\t\t\t\t},\r\n/******/ \t\t\t\t\t\t\tset: function(value) {\r\n/******/ \t\t\t\t\t\t\t\t__webpack_require__[name] = value;\r\n/******/ \t\t\t\t\t\t\t}\r\n/******/ \t\t\t\t\t\t};\r\n/******/ \t\t\t\t\t}(name)));\r\n/******/ \t\t\t\t} else {\r\n/******/ \t\t\t\t\tfn[name] = __webpack_require__[name];\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\tfunction ensure(chunkId, callback) {\r\n/******/ \t\t\tif(hotStatus === \"ready\")\r\n/******/ \t\t\t\thotSetStatus(\"prepare\");\r\n/******/ \t\t\thotChunksLoading++;\r\n/******/ \t\t\t__webpack_require__.e(chunkId, function() {\r\n/******/ \t\t\t\ttry {\r\n/******/ \t\t\t\t\tcallback.call(null, fn);\r\n/******/ \t\t\t\t} finally {\r\n/******/ \t\t\t\t\tfinishChunkLoading();\r\n/******/ \t\t\t\t}\r\n/******/ \t\r\n/******/ \t\t\t\tfunction finishChunkLoading() {\r\n/******/ \t\t\t\t\thotChunksLoading--;\r\n/******/ \t\t\t\t\tif(hotStatus === \"prepare\") {\r\n/******/ \t\t\t\t\t\tif(!hotWaitingFilesMap[chunkId]) {\r\n/******/ \t\t\t\t\t\t\thotEnsureUpdateChunk(chunkId);\r\n/******/ \t\t\t\t\t\t}\r\n/******/ \t\t\t\t\t\tif(hotChunksLoading === 0 && hotWaitingFiles === 0) {\r\n/******/ \t\t\t\t\t\t\thotUpdateDownloaded();\r\n/******/ \t\t\t\t\t\t}\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t});\r\n/******/ \t\t}\r\n/******/ \t\tif(canDefineProperty) {\r\n/******/ \t\t\tObject.defineProperty(fn, \"e\", {\r\n/******/ \t\t\t\tenumerable: true,\r\n/******/ \t\t\t\tvalue: ensure\r\n/******/ \t\t\t});\r\n/******/ \t\t} else {\r\n/******/ \t\t\tfn.e = ensure;\r\n/******/ \t\t}\r\n/******/ \t\treturn fn;\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars\r\n/******/ \t\tvar hot = {\r\n/******/ \t\t\t// private stuff\r\n/******/ \t\t\t_acceptedDependencies: {},\r\n/******/ \t\t\t_declinedDependencies: {},\r\n/******/ \t\t\t_selfAccepted: false,\r\n/******/ \t\t\t_selfDeclined: false,\r\n/******/ \t\t\t_disposeHandlers: [],\r\n/******/ \t\r\n/******/ \t\t\t// Module API\r\n/******/ \t\t\tactive: true,\r\n/******/ \t\t\taccept: function(dep, callback) {\r\n/******/ \t\t\t\tif(typeof dep === \"undefined\")\r\n/******/ \t\t\t\t\thot._selfAccepted = true;\r\n/******/ \t\t\t\telse if(typeof dep === \"function\")\r\n/******/ \t\t\t\t\thot._selfAccepted = dep;\r\n/******/ \t\t\t\telse if(typeof dep === \"object\")\r\n/******/ \t\t\t\t\tfor(var i = 0; i < dep.length; i++)\r\n/******/ \t\t\t\t\t\thot._acceptedDependencies[dep[i]] = callback;\r\n/******/ \t\t\t\telse\r\n/******/ \t\t\t\t\thot._acceptedDependencies[dep] = callback;\r\n/******/ \t\t\t},\r\n/******/ \t\t\tdecline: function(dep) {\r\n/******/ \t\t\t\tif(typeof dep === \"undefined\")\r\n/******/ \t\t\t\t\thot._selfDeclined = true;\r\n/******/ \t\t\t\telse if(typeof dep === \"number\")\r\n/******/ \t\t\t\t\thot._declinedDependencies[dep] = true;\r\n/******/ \t\t\t\telse\r\n/******/ \t\t\t\t\tfor(var i = 0; i < dep.length; i++)\r\n/******/ \t\t\t\t\t\thot._declinedDependencies[dep[i]] = true;\r\n/******/ \t\t\t},\r\n/******/ \t\t\tdispose: function(callback) {\r\n/******/ \t\t\t\thot._disposeHandlers.push(callback);\r\n/******/ \t\t\t},\r\n/******/ \t\t\taddDisposeHandler: function(callback) {\r\n/******/ \t\t\t\thot._disposeHandlers.push(callback);\r\n/******/ \t\t\t},\r\n/******/ \t\t\tremoveDisposeHandler: function(callback) {\r\n/******/ \t\t\t\tvar idx = hot._disposeHandlers.indexOf(callback);\r\n/******/ \t\t\t\tif(idx >= 0) hot._disposeHandlers.splice(idx, 1);\r\n/******/ \t\t\t},\r\n/******/ \t\r\n/******/ \t\t\t// Management API\r\n/******/ \t\t\tcheck: hotCheck,\r\n/******/ \t\t\tapply: hotApply,\r\n/******/ \t\t\tstatus: function(l) {\r\n/******/ \t\t\t\tif(!l) return hotStatus;\r\n/******/ \t\t\t\thotStatusHandlers.push(l);\r\n/******/ \t\t\t},\r\n/******/ \t\t\taddStatusHandler: function(l) {\r\n/******/ \t\t\t\thotStatusHandlers.push(l);\r\n/******/ \t\t\t},\r\n/******/ \t\t\tremoveStatusHandler: function(l) {\r\n/******/ \t\t\t\tvar idx = hotStatusHandlers.indexOf(l);\r\n/******/ \t\t\t\tif(idx >= 0) hotStatusHandlers.splice(idx, 1);\r\n/******/ \t\t\t},\r\n/******/ \t\r\n/******/ \t\t\t//inherit from previous dispose call\r\n/******/ \t\t\tdata: hotCurrentModuleData[moduleId]\r\n/******/ \t\t};\r\n/******/ \t\treturn hot;\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tvar hotStatusHandlers = [];\r\n/******/ \tvar hotStatus = \"idle\";\r\n/******/ \t\r\n/******/ \tfunction hotSetStatus(newStatus) {\r\n/******/ \t\thotStatus = newStatus;\r\n/******/ \t\tfor(var i = 0; i < hotStatusHandlers.length; i++)\r\n/******/ \t\t\thotStatusHandlers[i].call(null, newStatus);\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \t// while downloading\r\n/******/ \tvar hotWaitingFiles = 0;\r\n/******/ \tvar hotChunksLoading = 0;\r\n/******/ \tvar hotWaitingFilesMap = {};\r\n/******/ \tvar hotRequestedFilesMap = {};\r\n/******/ \tvar hotAvailibleFilesMap = {};\r\n/******/ \tvar hotCallback;\r\n/******/ \t\r\n/******/ \t// The update info\r\n/******/ \tvar hotUpdate, hotUpdateNewHash;\r\n/******/ \t\r\n/******/ \tfunction toModuleId(id) {\r\n/******/ \t\tvar isNumber = (+id) + \"\" === id;\r\n/******/ \t\treturn isNumber ? +id : id;\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotCheck(apply, callback) {\r\n/******/ \t\tif(hotStatus !== \"idle\") throw new Error(\"check() is only allowed in idle status\");\r\n/******/ \t\tif(typeof apply === \"function\") {\r\n/******/ \t\t\thotApplyOnUpdate = false;\r\n/******/ \t\t\tcallback = apply;\r\n/******/ \t\t} else {\r\n/******/ \t\t\thotApplyOnUpdate = apply;\r\n/******/ \t\t\tcallback = callback || function(err) {\r\n/******/ \t\t\t\tif(err) throw err;\r\n/******/ \t\t\t};\r\n/******/ \t\t}\r\n/******/ \t\thotSetStatus(\"check\");\r\n/******/ \t\thotDownloadManifest(function(err, update) {\r\n/******/ \t\t\tif(err) return callback(err);\r\n/******/ \t\t\tif(!update) {\r\n/******/ \t\t\t\thotSetStatus(\"idle\");\r\n/******/ \t\t\t\tcallback(null, null);\r\n/******/ \t\t\t\treturn;\r\n/******/ \t\t\t}\r\n/******/ \t\r\n/******/ \t\t\thotRequestedFilesMap = {};\r\n/******/ \t\t\thotAvailibleFilesMap = {};\r\n/******/ \t\t\thotWaitingFilesMap = {};\r\n/******/ \t\t\tfor(var i = 0; i < update.c.length; i++)\r\n/******/ \t\t\t\thotAvailibleFilesMap[update.c[i]] = true;\r\n/******/ \t\t\thotUpdateNewHash = update.h;\r\n/******/ \t\r\n/******/ \t\t\thotSetStatus(\"prepare\");\r\n/******/ \t\t\thotCallback = callback;\r\n/******/ \t\t\thotUpdate = {};\r\n/******/ \t\t\tvar chunkId = 0;\r\n/******/ \t\t\t{ // eslint-disable-line no-lone-blocks\r\n/******/ \t\t\t\t/*globals chunkId */\r\n/******/ \t\t\t\thotEnsureUpdateChunk(chunkId);\r\n/******/ \t\t\t}\r\n/******/ \t\t\tif(hotStatus === \"prepare\" && hotChunksLoading === 0 && hotWaitingFiles === 0) {\r\n/******/ \t\t\t\thotUpdateDownloaded();\r\n/******/ \t\t\t}\r\n/******/ \t\t});\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars\r\n/******/ \t\tif(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])\r\n/******/ \t\t\treturn;\r\n/******/ \t\thotRequestedFilesMap[chunkId] = false;\r\n/******/ \t\tfor(var moduleId in moreModules) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\r\n/******/ \t\t\t\thotUpdate[moduleId] = moreModules[moduleId];\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\tif(--hotWaitingFiles === 0 && hotChunksLoading === 0) {\r\n/******/ \t\t\thotUpdateDownloaded();\r\n/******/ \t\t}\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotEnsureUpdateChunk(chunkId) {\r\n/******/ \t\tif(!hotAvailibleFilesMap[chunkId]) {\r\n/******/ \t\t\thotWaitingFilesMap[chunkId] = true;\r\n/******/ \t\t} else {\r\n/******/ \t\t\thotRequestedFilesMap[chunkId] = true;\r\n/******/ \t\t\thotWaitingFiles++;\r\n/******/ \t\t\thotDownloadUpdateChunk(chunkId);\r\n/******/ \t\t}\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotUpdateDownloaded() {\r\n/******/ \t\thotSetStatus(\"ready\");\r\n/******/ \t\tvar callback = hotCallback;\r\n/******/ \t\thotCallback = null;\r\n/******/ \t\tif(!callback) return;\r\n/******/ \t\tif(hotApplyOnUpdate) {\r\n/******/ \t\t\thotApply(hotApplyOnUpdate, callback);\r\n/******/ \t\t} else {\r\n/******/ \t\t\tvar outdatedModules = [];\r\n/******/ \t\t\tfor(var id in hotUpdate) {\r\n/******/ \t\t\t\tif(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\r\n/******/ \t\t\t\t\toutdatedModules.push(toModuleId(id));\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t\tcallback(null, outdatedModules);\r\n/******/ \t\t}\r\n/******/ \t}\r\n/******/ \t\r\n/******/ \tfunction hotApply(options, callback) {\r\n/******/ \t\tif(hotStatus !== \"ready\") throw new Error(\"apply() is only allowed in ready status\");\r\n/******/ \t\tif(typeof options === \"function\") {\r\n/******/ \t\t\tcallback = options;\r\n/******/ \t\t\toptions = {};\r\n/******/ \t\t} else if(options && typeof options === \"object\") {\r\n/******/ \t\t\tcallback = callback || function(err) {\r\n/******/ \t\t\t\tif(err) throw err;\r\n/******/ \t\t\t};\r\n/******/ \t\t} else {\r\n/******/ \t\t\toptions = {};\r\n/******/ \t\t\tcallback = callback || function(err) {\r\n/******/ \t\t\t\tif(err) throw err;\r\n/******/ \t\t\t};\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\tfunction getAffectedStuff(module) {\r\n/******/ \t\t\tvar outdatedModules = [module];\r\n/******/ \t\t\tvar outdatedDependencies = {};\r\n/******/ \t\r\n/******/ \t\t\tvar queue = outdatedModules.slice();\r\n/******/ \t\t\twhile(queue.length > 0) {\r\n/******/ \t\t\t\tvar moduleId = queue.pop();\r\n/******/ \t\t\t\tvar module = installedModules[moduleId];\r\n/******/ \t\t\t\tif(!module || module.hot._selfAccepted)\r\n/******/ \t\t\t\t\tcontinue;\r\n/******/ \t\t\t\tif(module.hot._selfDeclined) {\r\n/******/ \t\t\t\t\treturn new Error(\"Aborted because of self decline: \" + moduleId);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tif(moduleId === 0) {\r\n/******/ \t\t\t\t\treturn;\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tfor(var i = 0; i < module.parents.length; i++) {\r\n/******/ \t\t\t\t\tvar parentId = module.parents[i];\r\n/******/ \t\t\t\t\tvar parent = installedModules[parentId];\r\n/******/ \t\t\t\t\tif(parent.hot._declinedDependencies[moduleId]) {\r\n/******/ \t\t\t\t\t\treturn new Error(\"Aborted because of declined dependency: \" + moduleId + \" in \" + parentId);\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t\tif(outdatedModules.indexOf(parentId) >= 0) continue;\r\n/******/ \t\t\t\t\tif(parent.hot._acceptedDependencies[moduleId]) {\r\n/******/ \t\t\t\t\t\tif(!outdatedDependencies[parentId])\r\n/******/ \t\t\t\t\t\t\toutdatedDependencies[parentId] = [];\r\n/******/ \t\t\t\t\t\taddAllToSet(outdatedDependencies[parentId], [moduleId]);\r\n/******/ \t\t\t\t\t\tcontinue;\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t\tdelete outdatedDependencies[parentId];\r\n/******/ \t\t\t\t\toutdatedModules.push(parentId);\r\n/******/ \t\t\t\t\tqueue.push(parentId);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\r\n/******/ \t\t\treturn [outdatedModules, outdatedDependencies];\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\tfunction addAllToSet(a, b) {\r\n/******/ \t\t\tfor(var i = 0; i < b.length; i++) {\r\n/******/ \t\t\t\tvar item = b[i];\r\n/******/ \t\t\t\tif(a.indexOf(item) < 0)\r\n/******/ \t\t\t\t\ta.push(item);\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// at begin all updates modules are outdated\r\n/******/ \t\t// the \"outdated\" status can propagate to parents if they don't accept the children\r\n/******/ \t\tvar outdatedDependencies = {};\r\n/******/ \t\tvar outdatedModules = [];\r\n/******/ \t\tvar appliedUpdate = {};\r\n/******/ \t\tfor(var id in hotUpdate) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\r\n/******/ \t\t\t\tvar moduleId = toModuleId(id);\r\n/******/ \t\t\t\tvar result = getAffectedStuff(moduleId);\r\n/******/ \t\t\t\tif(!result) {\r\n/******/ \t\t\t\t\tif(options.ignoreUnaccepted)\r\n/******/ \t\t\t\t\t\tcontinue;\r\n/******/ \t\t\t\t\thotSetStatus(\"abort\");\r\n/******/ \t\t\t\t\treturn callback(new Error(\"Aborted because \" + moduleId + \" is not accepted\"));\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tif(result instanceof Error) {\r\n/******/ \t\t\t\t\thotSetStatus(\"abort\");\r\n/******/ \t\t\t\t\treturn callback(result);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tappliedUpdate[moduleId] = hotUpdate[moduleId];\r\n/******/ \t\t\t\taddAllToSet(outdatedModules, result[0]);\r\n/******/ \t\t\t\tfor(var moduleId in result[1]) {\r\n/******/ \t\t\t\t\tif(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {\r\n/******/ \t\t\t\t\t\tif(!outdatedDependencies[moduleId])\r\n/******/ \t\t\t\t\t\t\toutdatedDependencies[moduleId] = [];\r\n/******/ \t\t\t\t\t\taddAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// Store self accepted outdated modules to require them later by the module system\r\n/******/ \t\tvar outdatedSelfAcceptedModules = [];\r\n/******/ \t\tfor(var i = 0; i < outdatedModules.length; i++) {\r\n/******/ \t\t\tvar moduleId = outdatedModules[i];\r\n/******/ \t\t\tif(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)\r\n/******/ \t\t\t\toutdatedSelfAcceptedModules.push({\r\n/******/ \t\t\t\t\tmodule: moduleId,\r\n/******/ \t\t\t\t\terrorHandler: installedModules[moduleId].hot._selfAccepted\r\n/******/ \t\t\t\t});\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// Now in \"dispose\" phase\r\n/******/ \t\thotSetStatus(\"dispose\");\r\n/******/ \t\tvar queue = outdatedModules.slice();\r\n/******/ \t\twhile(queue.length > 0) {\r\n/******/ \t\t\tvar moduleId = queue.pop();\r\n/******/ \t\t\tvar module = installedModules[moduleId];\r\n/******/ \t\t\tif(!module) continue;\r\n/******/ \t\r\n/******/ \t\t\tvar data = {};\r\n/******/ \t\r\n/******/ \t\t\t// Call dispose handlers\r\n/******/ \t\t\tvar disposeHandlers = module.hot._disposeHandlers;\r\n/******/ \t\t\tfor(var j = 0; j < disposeHandlers.length; j++) {\r\n/******/ \t\t\t\tvar cb = disposeHandlers[j];\r\n/******/ \t\t\t\tcb(data);\r\n/******/ \t\t\t}\r\n/******/ \t\t\thotCurrentModuleData[moduleId] = data;\r\n/******/ \t\r\n/******/ \t\t\t// disable module (this disables requires from this module)\r\n/******/ \t\t\tmodule.hot.active = false;\r\n/******/ \t\r\n/******/ \t\t\t// remove module from cache\r\n/******/ \t\t\tdelete installedModules[moduleId];\r\n/******/ \t\r\n/******/ \t\t\t// remove \"parents\" references from all children\r\n/******/ \t\t\tfor(var j = 0; j < module.children.length; j++) {\r\n/******/ \t\t\t\tvar child = installedModules[module.children[j]];\r\n/******/ \t\t\t\tif(!child) continue;\r\n/******/ \t\t\t\tvar idx = child.parents.indexOf(moduleId);\r\n/******/ \t\t\t\tif(idx >= 0) {\r\n/******/ \t\t\t\t\tchild.parents.splice(idx, 1);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// remove outdated dependency from module children\r\n/******/ \t\tfor(var moduleId in outdatedDependencies) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {\r\n/******/ \t\t\t\tvar module = installedModules[moduleId];\r\n/******/ \t\t\t\tvar moduleOutdatedDependencies = outdatedDependencies[moduleId];\r\n/******/ \t\t\t\tfor(var j = 0; j < moduleOutdatedDependencies.length; j++) {\r\n/******/ \t\t\t\t\tvar dependency = moduleOutdatedDependencies[j];\r\n/******/ \t\t\t\t\tvar idx = module.children.indexOf(dependency);\r\n/******/ \t\t\t\t\tif(idx >= 0) module.children.splice(idx, 1);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// Not in \"apply\" phase\r\n/******/ \t\thotSetStatus(\"apply\");\r\n/******/ \t\r\n/******/ \t\thotCurrentHash = hotUpdateNewHash;\r\n/******/ \t\r\n/******/ \t\t// insert new code\r\n/******/ \t\tfor(var moduleId in appliedUpdate) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {\r\n/******/ \t\t\t\tmodules[moduleId] = appliedUpdate[moduleId];\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// call accept handlers\r\n/******/ \t\tvar error = null;\r\n/******/ \t\tfor(var moduleId in outdatedDependencies) {\r\n/******/ \t\t\tif(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {\r\n/******/ \t\t\t\tvar module = installedModules[moduleId];\r\n/******/ \t\t\t\tvar moduleOutdatedDependencies = outdatedDependencies[moduleId];\r\n/******/ \t\t\t\tvar callbacks = [];\r\n/******/ \t\t\t\tfor(var i = 0; i < moduleOutdatedDependencies.length; i++) {\r\n/******/ \t\t\t\t\tvar dependency = moduleOutdatedDependencies[i];\r\n/******/ \t\t\t\t\tvar cb = module.hot._acceptedDependencies[dependency];\r\n/******/ \t\t\t\t\tif(callbacks.indexOf(cb) >= 0) continue;\r\n/******/ \t\t\t\t\tcallbacks.push(cb);\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t\tfor(var i = 0; i < callbacks.length; i++) {\r\n/******/ \t\t\t\t\tvar cb = callbacks[i];\r\n/******/ \t\t\t\t\ttry {\r\n/******/ \t\t\t\t\t\tcb(outdatedDependencies);\r\n/******/ \t\t\t\t\t} catch(err) {\r\n/******/ \t\t\t\t\t\tif(!error)\r\n/******/ \t\t\t\t\t\t\terror = err;\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t}\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// Load self accepted modules\r\n/******/ \t\tfor(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {\r\n/******/ \t\t\tvar item = outdatedSelfAcceptedModules[i];\r\n/******/ \t\t\tvar moduleId = item.module;\r\n/******/ \t\t\thotCurrentParents = [moduleId];\r\n/******/ \t\t\ttry {\r\n/******/ \t\t\t\t__webpack_require__(moduleId);\r\n/******/ \t\t\t} catch(err) {\r\n/******/ \t\t\t\tif(typeof item.errorHandler === \"function\") {\r\n/******/ \t\t\t\t\ttry {\r\n/******/ \t\t\t\t\t\titem.errorHandler(err);\r\n/******/ \t\t\t\t\t} catch(err) {\r\n/******/ \t\t\t\t\t\tif(!error)\r\n/******/ \t\t\t\t\t\t\terror = err;\r\n/******/ \t\t\t\t\t}\r\n/******/ \t\t\t\t} else if(!error)\r\n/******/ \t\t\t\t\terror = err;\r\n/******/ \t\t\t}\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\t// handle errors in accept handlers and self accepted module load\r\n/******/ \t\tif(error) {\r\n/******/ \t\t\thotSetStatus(\"fail\");\r\n/******/ \t\t\treturn callback(error);\r\n/******/ \t\t}\r\n/******/ \t\r\n/******/ \t\thotSetStatus(\"idle\");\r\n/******/ \t\tcallback(null, outdatedModules);\r\n/******/ \t}\r\n/******/\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\thot: hotCreateModule(moduleId),\n/******/ \t\t\tparents: hotCurrentParents,\n/******/ \t\t\tchildren: []\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/static/\";\n/******/\n/******/ \t// __webpack_hash__\n/******/ \t__webpack_require__.h = function() { return hotCurrentHash; };\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn hotCreateRequire(0)(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n\t    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n\t    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n\t    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n\t    return c > 3 && r && Object.defineProperty(target, key, r), r;\n\t};\n\tvar __metadata = (this && this.__metadata) || function (k, v) {\n\t    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n\t};\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar core_1 = __webpack_require__(1);\n\tvar ComponentInjector = (function () {\n\t    function ComponentInjector(resolver) {\n\t        this.resolver = resolver;\n\t    }\n\t    /**\n\t     * Inject a component into a ViewContainerRef element\n\t     * @param container ViewContainerRef element where to inject the component\n\t     * @param componentSelector string Selector of the component which should be injected\n\t     * @returns {ComponentRef<any>} Returns ComponentRef of the injected component\n\t     */\n\t    ComponentInjector.prototype.inject = function (container, componentSelector) {\n\t        var injectedComponent;\n\t        var componentFactory = this.getComponentFactory(componentSelector);\n\t        if (componentFactory) {\n\t            injectedComponent = this.injectComponentFactory(container, componentFactory);\n\t        }\n\t        else {\n\t            console.warn('Component [' + componentSelector + '] cannot be found! ' +\n\t                'Make sure it is included in the `entryComponents` list.');\n\t        }\n\t        return injectedComponent ? injectedComponent : null;\n\t    };\n\t    /**\n\t     * Set public properties of the component specified by the componentRef\n\t     * @param componentRef ComponentRef object where should be attached the properties\n\t     * @param properties Object which contains the keys (name of the property) and values (value of the property).\n\t     */\n\t    ComponentInjector.prototype.setProperties = function (componentRef, properties) {\n\t        if (componentRef) {\n\t            for (var property in properties) {\n\t                if (properties.hasOwnProperty(property)) {\n\t                    componentRef.instance[property] = properties[property];\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t     * Remove a component by its ComponentRef\n\t     * @param componentRef ComponentRef which should be removed\n\t     */\n\t    ComponentInjector.prototype.remove = function (componentRef) {\n\t        componentRef.destroy();\n\t        componentRef = null;\n\t    };\n\t    /**\n\t     * Get the component factory class from the _factories list based on its selector string name\n\t     * The list of the _factories is created based on the list of components listed in the entryComponents: [...]\n\t     * section of the @NgModule(...)\n\t     * @param componentSelector string Selector of the component\n\t     * @returns {ComponentFactory<any>|null} Returns the factory of the component or NULL if there is no such component\n\t     */\n\t    ComponentInjector.prototype.getComponentFactory = function (componentSelector) {\n\t        var componentFactory;\n\t        var factories = Array.from(this.resolver['_factories']);\n\t        var factory = factories.find(function (component) {\n\t            return component[1].selector === componentSelector;\n\t        });\n\t        if (factory) {\n\t            var factoryClass = factory[0];\n\t            componentFactory = this.resolver.resolveComponentFactory(factoryClass);\n\t        }\n\t        return componentFactory ? componentFactory : null;\n\t    };\n\t    /**\n\t     * Inject a componentFactory into a container element\n\t     * @param container ViewContainerRef container element where to inject the component\n\t     * @param componentFactory ComponentFactory which should be injected in the  container element\n\t     * @returns {ComponentRef<any>} returns ComponentRef of the injected componentFactory\n\t     */\n\t    ComponentInjector.prototype.injectComponentFactory = function (container, componentFactory) {\n\t        return container.createComponent(componentFactory);\n\t    };\n\t    return ComponentInjector;\n\t}());\n\tComponentInjector = __decorate([\n\t    core_1.Injectable(),\n\t    __metadata(\"design:paramtypes\", [core_1.ComponentFactoryResolver])\n\t], ComponentInjector);\n\texports.ComponentInjector = ComponentInjector;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * @license Angular v2.4.10\n\t * (c) 2010-2017 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(2), __webpack_require__(4), __webpack_require__(5)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/symbol/observable', 'rxjs/Subject', 'rxjs/Observable'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.rxjs_symbol_observable,global.Rx,global.Rx));\n\t}(this, function (exports,rxjs_symbol_observable,rxjs_Subject,rxjs_Observable) { 'use strict';\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var /** @type {?} */ globalScope;\n\t    if (typeof window === 'undefined') {\n\t        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n\t            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n\t            globalScope = (self);\n\t        }\n\t        else {\n\t            globalScope = (global);\n\t        }\n\t    }\n\t    else {\n\t        globalScope = (window);\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function scheduleMicroTask(fn) {\n\t        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n\t    }\n\t    // Need to declare a new variable for global here since TypeScript\n\t    // exports the original value of the symbol.\n\t    var /** @type {?} */ global$1 = globalScope;\n\t    /**\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    function getTypeNameForDebugging(type) {\n\t        return type['name'] || typeof type;\n\t    }\n\t    // TODO: remove calls to assert in production environment\n\t    // Note: Can't just export this and import in in other files\n\t    // as `assert` is a reserved keyword in Dart\n\t    global$1.assert = function assert(condition) {\n\t        // TODO: to be fixed properly via #2830, noop for now\n\t    };\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPresent(obj) {\n\t        return obj != null;\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isBlank(obj) {\n\t        return obj == null;\n\t    }\n\t    /**\n\t     * @param {?} token\n\t     * @return {?}\n\t     */\n\t    function stringify(token) {\n\t        if (typeof token === 'string') {\n\t            return token;\n\t        }\n\t        if (token == null) {\n\t            return '' + token;\n\t        }\n\t        if (token.overriddenName) {\n\t            return \"\" + token.overriddenName;\n\t        }\n\t        if (token.name) {\n\t            return \"\" + token.name;\n\t        }\n\t        var /** @type {?} */ res = token.toString();\n\t        var /** @type {?} */ newLineIndex = res.indexOf('\\n');\n\t        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function looseIdentical(a, b) {\n\t        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n\t    }\n\t    /**\n\t     * @param {?} o\n\t     * @return {?}\n\t     */\n\t    function isJsObject(o) {\n\t        return o !== null && (typeof o === 'function' || typeof o === 'object');\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function print(obj) {\n\t        // tslint:disable-next-line:no-console\n\t        console.log(obj);\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function warn(obj) {\n\t        console.warn(obj);\n\t    }\n\t    var /** @type {?} */ _symbolIterator = null;\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function getSymbolIterator() {\n\t        if (!_symbolIterator) {\n\t            if (((globalScope)).Symbol && Symbol.iterator) {\n\t                _symbolIterator = Symbol.iterator;\n\t            }\n\t            else {\n\t                // es6-shim specific logic\n\t                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);\n\t                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n\t                    var /** @type {?} */ key = keys[i];\n\t                    if (key !== 'entries' && key !== 'size' &&\n\t                        ((Map)).prototype[key] === Map.prototype['entries']) {\n\t                        _symbolIterator = key;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return _symbolIterator;\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPrimitive(obj) {\n\t        return !isJsObject(obj);\n\t    }\n\t\n\t    var /** @type {?} */ _nextClassId = 0;\n\t    var /** @type {?} */ Reflect = global$1.Reflect;\n\t    /**\n\t     * @param {?} annotation\n\t     * @return {?}\n\t     */\n\t    function extractAnnotation(annotation) {\n\t        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {\n\t            // it is a decorator, extract annotation\n\t            annotation = annotation.annotation;\n\t        }\n\t        return annotation;\n\t    }\n\t    /**\n\t     * @param {?} fnOrArray\n\t     * @param {?} key\n\t     * @return {?}\n\t     */\n\t    function applyParams(fnOrArray, key) {\n\t        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||\n\t            fnOrArray === Number || fnOrArray === Array) {\n\t            throw new Error(\"Can not use native \" + stringify(fnOrArray) + \" as constructor\");\n\t        }\n\t        if (typeof fnOrArray === 'function') {\n\t            return fnOrArray;\n\t        }\n\t        if (Array.isArray(fnOrArray)) {\n\t            var /** @type {?} */ annotations = fnOrArray;\n\t            var /** @type {?} */ annoLength = annotations.length - 1;\n\t            var /** @type {?} */ fn = fnOrArray[annoLength];\n\t            if (typeof fn !== 'function') {\n\t                throw new Error(\"Last position of Class method array must be Function in key \" + key + \" was '\" + stringify(fn) + \"'\");\n\t            }\n\t            if (annoLength != fn.length) {\n\t                throw new Error(\"Number of annotations (\" + annoLength + \") does not match number of arguments (\" + fn.length + \") in the function: \" + stringify(fn));\n\t            }\n\t            var /** @type {?} */ paramsAnnotations = [];\n\t            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {\n\t                var /** @type {?} */ paramAnnotations = [];\n\t                paramsAnnotations.push(paramAnnotations);\n\t                var /** @type {?} */ annotation = annotations[i];\n\t                if (Array.isArray(annotation)) {\n\t                    for (var /** @type {?} */ j = 0; j < annotation.length; j++) {\n\t                        paramAnnotations.push(extractAnnotation(annotation[j]));\n\t                    }\n\t                }\n\t                else if (typeof annotation === 'function') {\n\t                    paramAnnotations.push(extractAnnotation(annotation));\n\t                }\n\t                else {\n\t                    paramAnnotations.push(annotation);\n\t                }\n\t            }\n\t            Reflect.defineMetadata('parameters', paramsAnnotations, fn);\n\t            return fn;\n\t        }\n\t        throw new Error(\"Only Function or Array is supported in Class definition for key '\" + key + \"' is '\" + stringify(fnOrArray) + \"'\");\n\t    }\n\t    /**\n\t     * Provides a way for expressing ES6 classes with parameter annotations in ES5.\n\t     *\n\t     * ## Basic Example\n\t     *\n\t     * ```\n\t     * var Greeter = ng.Class({\n\t     *   constructor: function(name) {\n\t     *     this.name = name;\n\t     *   },\n\t     *\n\t     *   greet: function() {\n\t     *     alert('Hello ' + this.name + '!');\n\t     *   }\n\t     * });\n\t     * ```\n\t     *\n\t     * is equivalent to ES6:\n\t     *\n\t     * ```\n\t     * class Greeter {\n\t     *   constructor(name) {\n\t     *     this.name = name;\n\t     *   }\n\t     *\n\t     *   greet() {\n\t     *     alert('Hello ' + this.name + '!');\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * or equivalent to ES5:\n\t     *\n\t     * ```\n\t     * var Greeter = function (name) {\n\t     *   this.name = name;\n\t     * }\n\t     *\n\t     * Greeter.prototype.greet = function () {\n\t     *   alert('Hello ' + this.name + '!');\n\t     * }\n\t     * ```\n\t     *\n\t     * ### Example with parameter annotations\n\t     *\n\t     * ```\n\t     * var MyService = ng.Class({\n\t     *   constructor: [String, [new Optional(), Service], function(name, myService) {\n\t     *     ...\n\t     *   }]\n\t     * });\n\t     * ```\n\t     *\n\t     * is equivalent to ES6:\n\t     *\n\t     * ```\n\t     * class MyService {\n\t     *   constructor(name: string, \\@Optional() myService: Service) {\n\t     *     ...\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * ### Example with inheritance\n\t     *\n\t     * ```\n\t     * var Shape = ng.Class({\n\t     *   constructor: (color) {\n\t     *     this.color = color;\n\t     *   }\n\t     * });\n\t     *\n\t     * var Square = ng.Class({\n\t     *   extends: Shape,\n\t     *   constructor: function(color, size) {\n\t     *     Shape.call(this, color);\n\t     *     this.size = size;\n\t     *   }\n\t     * });\n\t     * ```\n\t     * \\@stable\n\t     * @param {?} clsDef\n\t     * @return {?}\n\t     */\n\t    function Class(clsDef) {\n\t        var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');\n\t        var /** @type {?} */ proto = constructor.prototype;\n\t        if (clsDef.hasOwnProperty('extends')) {\n\t            if (typeof clsDef.extends === 'function') {\n\t                ((constructor)).prototype = proto =\n\t                    Object.create(((clsDef.extends)).prototype);\n\t            }\n\t            else {\n\t                throw new Error(\"Class definition 'extends' property must be a constructor function was: \" + stringify(clsDef.extends));\n\t            }\n\t        }\n\t        for (var key in clsDef) {\n\t            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {\n\t                proto[key] = applyParams(clsDef[key], key);\n\t            }\n\t        }\n\t        if (this && this.annotations instanceof Array) {\n\t            Reflect.defineMetadata('annotations', this.annotations, constructor);\n\t        }\n\t        var /** @type {?} */ constructorName = constructor['name'];\n\t        if (!constructorName || constructorName === 'constructor') {\n\t            ((constructor))['overriddenName'] = \"class\" + _nextClassId++;\n\t        }\n\t        return (constructor);\n\t    }\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} props\n\t     * @param {?=} parentClass\n\t     * @param {?=} chainFn\n\t     * @return {?}\n\t     */\n\t    function makeDecorator(name, props, parentClass, chainFn) {\n\t        if (chainFn === void 0) { chainFn = null; }\n\t        var /** @type {?} */ metaCtor = makeMetadataCtor([props]);\n\t        /**\n\t         * @param {?} objOrType\n\t         * @return {?}\n\t         */\n\t        function DecoratorFactory(objOrType) {\n\t            if (!(Reflect && Reflect.getOwnMetadata)) {\n\t                throw 'reflect-metadata shim is required when using class decorators';\n\t            }\n\t            if (this instanceof DecoratorFactory) {\n\t                metaCtor.call(this, objOrType);\n\t                return this;\n\t            }\n\t            var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);\n\t            var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];\n\t            chainAnnotation.push(annotationInstance);\n\t            var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {\n\t                var /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];\n\t                annotations.push(annotationInstance);\n\t                Reflect.defineMetadata('annotations', annotations, cls);\n\t                return cls;\n\t            });\n\t            TypeDecorator.annotations = chainAnnotation;\n\t            TypeDecorator.Class = Class;\n\t            if (chainFn)\n\t                chainFn(TypeDecorator);\n\t            return TypeDecorator;\n\t        }\n\t        if (parentClass) {\n\t            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n\t        }\n\t        DecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n\t        ((DecoratorFactory)).annotationCls = DecoratorFactory;\n\t        return DecoratorFactory;\n\t    }\n\t    /**\n\t     * @param {?} props\n\t     * @return {?}\n\t     */\n\t    function makeMetadataCtor(props) {\n\t        return function ctor() {\n\t            var _this = this;\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            props.forEach(function (prop, i) {\n\t                var /** @type {?} */ argVal = args[i];\n\t                if (Array.isArray(prop)) {\n\t                    // plain parameter\n\t                    _this[prop[0]] = argVal === undefined ? prop[1] : argVal;\n\t                }\n\t                else {\n\t                    for (var propName in prop) {\n\t                        _this[propName] =\n\t                            argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];\n\t                    }\n\t                }\n\t            });\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} props\n\t     * @param {?=} parentClass\n\t     * @return {?}\n\t     */\n\t    function makeParamDecorator(name, props, parentClass) {\n\t        var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n\t        /**\n\t         * @param {...?} args\n\t         * @return {?}\n\t         */\n\t        function ParamDecoratorFactory() {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            if (this instanceof ParamDecoratorFactory) {\n\t                metaCtor.apply(this, args);\n\t                return this;\n\t            }\n\t            var /** @type {?} */ annotationInstance = new ((_a = ((ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n\t            ((ParamDecorator)).annotation = annotationInstance;\n\t            return ParamDecorator;\n\t            /**\n\t             * @param {?} cls\n\t             * @param {?} unusedKey\n\t             * @param {?} index\n\t             * @return {?}\n\t             */\n\t            function ParamDecorator(cls, unusedKey, index) {\n\t                var /** @type {?} */ parameters = Reflect.getOwnMetadata('parameters', cls) || [];\n\t                // there might be gaps if some in between parameters do not have annotations.\n\t                // we pad with nulls.\n\t                while (parameters.length <= index) {\n\t                    parameters.push(null);\n\t                }\n\t                parameters[index] = parameters[index] || [];\n\t                parameters[index].push(annotationInstance);\n\t                Reflect.defineMetadata('parameters', parameters, cls);\n\t                return cls;\n\t            }\n\t            var _a;\n\t        }\n\t        if (parentClass) {\n\t            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n\t        }\n\t        ParamDecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n\t        ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n\t        return ParamDecoratorFactory;\n\t    }\n\t    /**\n\t     * @param {?} name\n\t     * @param {?} props\n\t     * @param {?=} parentClass\n\t     * @return {?}\n\t     */\n\t    function makePropDecorator(name, props, parentClass) {\n\t        var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n\t        /**\n\t         * @param {...?} args\n\t         * @return {?}\n\t         */\n\t        function PropDecoratorFactory() {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            if (this instanceof PropDecoratorFactory) {\n\t                metaCtor.apply(this, args);\n\t                return this;\n\t            }\n\t            var /** @type {?} */ decoratorInstance = new ((_a = ((PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n\t            return function PropDecorator(target, name) {\n\t                var /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};\n\t                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n\t                meta[name].unshift(decoratorInstance);\n\t                Reflect.defineMetadata('propMetadata', meta, target.constructor);\n\t            };\n\t            var _a;\n\t        }\n\t        if (parentClass) {\n\t            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n\t        }\n\t        PropDecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n\t        ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n\t        return PropDecoratorFactory;\n\t    }\n\t\n\t    /**\n\t     * Inject decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Inject = makeParamDecorator('Inject', [['token', undefined]]);\n\t    /**\n\t     * Optional decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Optional = makeParamDecorator('Optional', []);\n\t    /**\n\t     * Injectable decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Injectable = (makeDecorator('Injectable', []));\n\t    /**\n\t     * Self decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Self = makeParamDecorator('Self', []);\n\t    /**\n\t     * SkipSelf decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ SkipSelf = makeParamDecorator('SkipSelf', []);\n\t    /**\n\t     * Host decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Host = makeParamDecorator('Host', []);\n\t\n\t    var OpaqueToken = (function () {\n\t        /**\n\t         * @param {?} _desc\n\t         */\n\t        function OpaqueToken(_desc) {\n\t            this._desc = _desc;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        OpaqueToken.prototype.toString = function () { return \"Token \" + this._desc; };\n\t        OpaqueToken.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        OpaqueToken.ctorParameters = function () { return [\n\t            null,\n\t        ]; };\n\t        return OpaqueToken;\n\t    }());\n\t\n\t    /**\n\t     * This token can be used to create a virtual provider that will populate the\n\t     * `entryComponents` fields of components and ng modules based on its `useValue`.\n\t     * All components that are referenced in the `useValue` value (either directly\n\t     * or in a nested array or map) will be added to the `entryComponents` property.\n\t     *\n\t     * ### Example\n\t     * The following example shows how the router can populate the `entryComponents`\n\t     * field of an NgModule based on the router configuration which refers\n\t     * to components.\n\t     *\n\t     * ```typescript\n\t     * // helper function inside the router\n\t     * function provideRoutes(routes) {\n\t     *   return [\n\t     *     {provide: ROUTES, useValue: routes},\n\t     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n\t     *   ];\n\t     * }\n\t     *\n\t     * // user code\n\t     * let routes = [\n\t     *   {path: '/root', component: RootComp},\n\t     *   {path: '/teams', component: TeamsComp}\n\t     * ];\n\t     *\n\t     * @NgModule({\n\t     *   providers: [provideRoutes(routes)]\n\t     * })\n\t     * class ModuleWithRoutes {}\n\t     * ```\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');\n\t    /**\n\t     * Attribute decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);\n\t    /**\n\t     * Base class for query metadata.\n\t     *\n\t     * See {\\@link ContentChildren}, {\\@link ContentChild}, {\\@link ViewChildren}, {\\@link ViewChild} for\n\t     * more information.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var Query = (function () {\n\t        function Query() {\n\t        }\n\t        return Query;\n\t    }());\n\t    /**\n\t     * ContentChildren decorator and metadata.\n\t     *\n\t     *  @stable\n\t     *  @Annotation\n\t     */\n\t    var /** @type {?} */ ContentChildren = (makePropDecorator('ContentChildren', [\n\t        ['selector', undefined], {\n\t            first: false,\n\t            isViewQuery: false,\n\t            descendants: false,\n\t            read: undefined,\n\t        }\n\t    ], Query));\n\t    /**\n\t     * ContentChild decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ ContentChild = makePropDecorator('ContentChild', [\n\t        ['selector', undefined], {\n\t            first: true,\n\t            isViewQuery: false,\n\t            descendants: true,\n\t            read: undefined,\n\t        }\n\t    ], Query);\n\t    /**\n\t     * ViewChildren decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ ViewChildren = makePropDecorator('ViewChildren', [\n\t        ['selector', undefined], {\n\t            first: false,\n\t            isViewQuery: true,\n\t            descendants: true,\n\t            read: undefined,\n\t        }\n\t    ], Query);\n\t    /**\n\t     * ViewChild decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ ViewChild = makePropDecorator('ViewChild', [\n\t        ['selector', undefined], {\n\t            first: true,\n\t            isViewQuery: true,\n\t            descendants: true,\n\t            read: undefined,\n\t        }\n\t    ], Query);\n\t\n\t    var ChangeDetectionStrategy = {};\n\t    ChangeDetectionStrategy.OnPush = 0;\n\t    ChangeDetectionStrategy.Default = 1;\n\t    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\n\t    ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\n\t    var ChangeDetectorStatus = {};\n\t    ChangeDetectorStatus.CheckOnce = 0;\n\t    ChangeDetectorStatus.Checked = 1;\n\t    ChangeDetectorStatus.CheckAlways = 2;\n\t    ChangeDetectorStatus.Detached = 3;\n\t    ChangeDetectorStatus.Errored = 4;\n\t    ChangeDetectorStatus.Destroyed = 5;\n\t    ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\n\t    ChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\n\t    ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\n\t    ChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\n\t    ChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\n\t    ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\n\t    /**\n\t     * @param {?} changeDetectionStrategy\n\t     * @return {?}\n\t     */\n\t    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n\t        return isBlank(changeDetectionStrategy) ||\n\t            changeDetectionStrategy === ChangeDetectionStrategy.Default;\n\t    }\n\t\n\t    /**\n\t     * Directive decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Directive = (makeDecorator('Directive', {\n\t        selector: undefined,\n\t        inputs: undefined,\n\t        outputs: undefined,\n\t        host: undefined,\n\t        providers: undefined,\n\t        exportAs: undefined,\n\t        queries: undefined\n\t    }));\n\t    /**\n\t     * Component decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Component = (makeDecorator('Component', {\n\t        selector: undefined,\n\t        inputs: undefined,\n\t        outputs: undefined,\n\t        host: undefined,\n\t        exportAs: undefined,\n\t        moduleId: undefined,\n\t        providers: undefined,\n\t        viewProviders: undefined,\n\t        changeDetection: ChangeDetectionStrategy.Default,\n\t        queries: undefined,\n\t        templateUrl: undefined,\n\t        template: undefined,\n\t        styleUrls: undefined,\n\t        styles: undefined,\n\t        animations: undefined,\n\t        encapsulation: undefined,\n\t        interpolation: undefined,\n\t        entryComponents: undefined\n\t    }, Directive));\n\t    /**\n\t     * Pipe decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Pipe = (makeDecorator('Pipe', {\n\t        name: undefined,\n\t        pure: true,\n\t    }));\n\t    /**\n\t     * Input decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);\n\t    /**\n\t     * Output decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);\n\t    /**\n\t     * HostBinding decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);\n\t    /**\n\t     * HostListener decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var LifecycleHooks = {};\n\t    LifecycleHooks.OnInit = 0;\n\t    LifecycleHooks.OnDestroy = 1;\n\t    LifecycleHooks.DoCheck = 2;\n\t    LifecycleHooks.OnChanges = 3;\n\t    LifecycleHooks.AfterContentInit = 4;\n\t    LifecycleHooks.AfterContentChecked = 5;\n\t    LifecycleHooks.AfterViewInit = 6;\n\t    LifecycleHooks.AfterViewChecked = 7;\n\t    LifecycleHooks[LifecycleHooks.OnInit] = \"OnInit\";\n\t    LifecycleHooks[LifecycleHooks.OnDestroy] = \"OnDestroy\";\n\t    LifecycleHooks[LifecycleHooks.DoCheck] = \"DoCheck\";\n\t    LifecycleHooks[LifecycleHooks.OnChanges] = \"OnChanges\";\n\t    LifecycleHooks[LifecycleHooks.AfterContentInit] = \"AfterContentInit\";\n\t    LifecycleHooks[LifecycleHooks.AfterContentChecked] = \"AfterContentChecked\";\n\t    LifecycleHooks[LifecycleHooks.AfterViewInit] = \"AfterViewInit\";\n\t    LifecycleHooks[LifecycleHooks.AfterViewChecked] = \"AfterViewChecked\";\n\t    var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = [\n\t        LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,\n\t        LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,\n\t        LifecycleHooks.AfterViewChecked\n\t    ];\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called when any data-bound property of a directive changes.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n\t     *\n\t     * \\@description\n\t     * `ngOnChanges` is called right after the data-bound properties have been checked and before view\n\t     * and content children are checked if at least one of them has changed.\n\t     * The `changes` parameter contains the changed properties.\n\t     *\n\t     * See {\\@linkDocs guide/lifecycle-hooks#onchanges \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var OnChanges = (function () {\n\t        function OnChanges() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} changes\n\t         * @return {?}\n\t         */\n\t        OnChanges.prototype.ngOnChanges = function (changes) { };\n\t        return OnChanges;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called after data-bound properties of a directive are\n\t     * initialized.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n\t     *\n\t     * \\@description\n\t     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\n\t     * first time, and before any of its children have been checked. It is invoked only once when the\n\t     * directive is instantiated.\n\t     *\n\t     * See {\\@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var OnInit = (function () {\n\t        function OnInit() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        OnInit.prototype.ngOnInit = function () { };\n\t        return OnInit;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called when Angular dirty checks a directive.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n\t     *\n\t     * \\@description\n\t     * `ngDoCheck` gets called to check the changes in the directives in addition to the default\n\t     * algorithm. The default change detection algorithm looks for differences by comparing\n\t     * bound-property values by reference across change detection runs.\n\t     *\n\t     * Note that a directive typically should not use both `DoCheck` and {\\@link OnChanges} to respond to\n\t     * changes on the same input, as `ngOnChanges` will continue to be called when the default change\n\t     * detector detects changes.\n\t     *\n\t     * See {\\@link KeyValueDiffers} and {\\@link IterableDiffers} for implementing custom dirty checking\n\t     * for collections.\n\t     *\n\t     * See {\\@linkDocs guide/lifecycle-hooks#docheck \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var DoCheck = (function () {\n\t        function DoCheck() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        DoCheck.prototype.ngDoCheck = function () { };\n\t        return DoCheck;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called when a directive, pipe or service is destroyed.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n\t     *\n\t     * \\@description\n\t     * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the\n\t     * instance is destroyed.\n\t     *\n\t     * See {\\@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var OnDestroy = (function () {\n\t        function OnDestroy() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        OnDestroy.prototype.ngOnDestroy = function () { };\n\t        return OnDestroy;\n\t    }());\n\t    /**\n\t     *\n\t     * \\@whatItDoes Lifecycle hook that is called after a directive's content has been fully\n\t     * initialized.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n\t     *\n\t     * \\@description\n\t     * See {\\@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var AfterContentInit = (function () {\n\t        function AfterContentInit() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AfterContentInit.prototype.ngAfterContentInit = function () { };\n\t        return AfterContentInit;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called after every check of a directive's content.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n\t     *\n\t     * \\@description\n\t     * See {\\@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var AfterContentChecked = (function () {\n\t        function AfterContentChecked() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AfterContentChecked.prototype.ngAfterContentChecked = function () { };\n\t        return AfterContentChecked;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called after a component's view has been fully\n\t     * initialized.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n\t     *\n\t     * \\@description\n\t     * See {\\@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var AfterViewInit = (function () {\n\t        function AfterViewInit() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AfterViewInit.prototype.ngAfterViewInit = function () { };\n\t        return AfterViewInit;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Lifecycle hook that is called after every check of a component's view.\n\t     * \\@howToUse\n\t     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n\t     *\n\t     * \\@description\n\t     * See {\\@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var AfterViewChecked = (function () {\n\t        function AfterViewChecked() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AfterViewChecked.prototype.ngAfterViewChecked = function () { };\n\t        return AfterViewChecked;\n\t    }());\n\t\n\t    /**\n\t     * Defines a schema that will allow:\n\t     * - any non-Angular elements with a `-` in their name,\n\t     * - any properties on elements with a `-` in their name which is the common rule for custom\n\t     * elements.\n\t     *\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ CUSTOM_ELEMENTS_SCHEMA = {\n\t        name: 'custom-elements'\n\t    };\n\t    /**\n\t     * Defines a schema that will allow any property on any element.\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ NO_ERRORS_SCHEMA = {\n\t        name: 'no-errors-schema'\n\t    };\n\t    /**\n\t     * NgModule decorator and metadata.\n\t     *\n\t     * @stable\n\t     * @Annotation\n\t     */\n\t    var /** @type {?} */ NgModule = (makeDecorator('NgModule', {\n\t        providers: undefined,\n\t        declarations: undefined,\n\t        imports: undefined,\n\t        exports: undefined,\n\t        entryComponents: undefined,\n\t        bootstrap: undefined,\n\t        schemas: undefined,\n\t        id: undefined,\n\t    }));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var ViewEncapsulation = {};\n\t    ViewEncapsulation.Emulated = 0;\n\t    ViewEncapsulation.Native = 1;\n\t    ViewEncapsulation.None = 2;\n\t    ViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\n\t    ViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\n\t    ViewEncapsulation[ViewEncapsulation.None] = \"None\";\n\t    /**\n\t     * Metadata properties available for configuring Views.\n\t     *\n\t     * For details on the `\\@Component` annotation, see {\\@link Component}.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * \\@Component({\n\t     *   selector: 'greet',\n\t     *   template: 'Hello {{name}}!',\n\t     * })\n\t     * class Greet {\n\t     *   name: string;\n\t     *\n\t     *   constructor() {\n\t     *     this.name = 'World';\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * @deprecated Use Component instead.\n\t     *\n\t     * {\\@link Component}\n\t     */\n\t    var ViewMetadata = (function () {\n\t        /**\n\t         * @param {?=} __0\n\t         */\n\t        function ViewMetadata(_a) {\n\t            var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;\n\t            this.templateUrl = templateUrl;\n\t            this.template = template;\n\t            this.styleUrls = styleUrls;\n\t            this.styles = styles;\n\t            this.encapsulation = encapsulation;\n\t            this.animations = animations;\n\t            this.interpolation = interpolation;\n\t        }\n\t        return ViewMetadata;\n\t    }());\n\t\n\t    /**\n\t     * \\@whatItDoes Represents the version of Angular\n\t     *\n\t     * \\@stable\n\t     */\n\t    var Version = (function () {\n\t        /**\n\t         * @param {?} full\n\t         */\n\t        function Version(full) {\n\t            this.full = full;\n\t        }\n\t        Object.defineProperty(Version.prototype, \"major\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.full.split('.')[0]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(Version.prototype, \"minor\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.full.split('.')[1]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(Version.prototype, \"patch\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.full.split('.').slice(2).join('.'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return Version;\n\t    }());\n\t    /**\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ VERSION = new Version('2.4.10');\n\t\n\t    /**\n\t     * Allows to refer to references which are not yet defined.\n\t     *\n\t     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n\t     * DI is declared,\n\t     * but not yet defined. It is also used when the `token` which we use when creating a query is not\n\t     * yet defined.\n\t     *\n\t     * ### Example\n\t     * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n\t     * \\@experimental\n\t     * @param {?} forwardRefFn\n\t     * @return {?}\n\t     */\n\t    function forwardRef(forwardRefFn) {\n\t        ((forwardRefFn)).__forward_ref__ = forwardRef;\n\t        ((forwardRefFn)).toString = function () { return stringify(this()); };\n\t        return (((forwardRefFn)));\n\t    }\n\t    /**\n\t     * Lazily retrieves the reference value from a forwardRef.\n\t     *\n\t     * Acts as the identity function when given a non-forward-ref value.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n\t     *\n\t     * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n\t     *\n\t     * See: {\\@link forwardRef}\n\t     * \\@experimental\n\t     * @param {?} type\n\t     * @return {?}\n\t     */\n\t    function resolveForwardRef(type) {\n\t        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n\t            type.__forward_ref__ === forwardRef) {\n\t            return ((type))();\n\t        }\n\t        else {\n\t            return type;\n\t        }\n\t    }\n\t\n\t    var /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();\n\t    var /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\t    var _NullInjector = (function () {\n\t        function _NullInjector() {\n\t        }\n\t        /**\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        _NullInjector.prototype.get = function (token, notFoundValue) {\n\t            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n\t            if (notFoundValue === _THROW_IF_NOT_FOUND) {\n\t                throw new Error(\"No provider for \" + stringify(token) + \"!\");\n\t            }\n\t            return notFoundValue;\n\t        };\n\t        return _NullInjector;\n\t    }());\n\t    /**\n\t     * \\@whatItDoes Injector interface\n\t     * \\@howToUse\n\t     * ```\n\t     * const injector: Injector = ...;\n\t     * injector.get(...);\n\t     * ```\n\t     *\n\t     * \\@description\n\t     * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n\t     *\n\t     * ### Example\n\t     *\n\t     * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n\t     *\n\t     * `Injector` returns itself when given `Injector` as a token:\n\t     * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var Injector = (function () {\n\t        function Injector() {\n\t        }\n\t        /**\n\t         * Retrieves an instance from the injector based on the provided token.\n\t         * If not found:\n\t         * - Throws {\\@link NoProviderError} if no `notFoundValue` that is not equal to\n\t         * Injector.THROW_IF_NOT_FOUND is given\n\t         * - Returns the `notFoundValue` otherwise\n\t         * @abstract\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        Injector.prototype.get = function (token, notFoundValue) { };\n\t        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\t        Injector.NULL = new _NullInjector();\n\t        return Injector;\n\t    }());\n\t\n\t    var __extends$1 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var BaseError = (function (_super) {\n\t        __extends$1(BaseError, _super);\n\t        /**\n\t         * @param {?} message\n\t         */\n\t        function BaseError(message) {\n\t            _super.call(this, message);\n\t            // Errors don't use current this, instead they create a new instance.\n\t            // We have to do forward all of our api to the nativeInstance.\n\t            // TODO(bradfordcsmith): Remove this hack when\n\t            //     google/closure-compiler/issues/2102 is fixed.\n\t            var nativeError = new Error(message);\n\t            this._nativeError = nativeError;\n\t        }\n\t        Object.defineProperty(BaseError.prototype, \"message\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._nativeError.message; },\n\t            /**\n\t             * @param {?} message\n\t             * @return {?}\n\t             */\n\t            set: function (message) { this._nativeError.message = message; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(BaseError.prototype, \"name\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._nativeError.name; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(BaseError.prototype, \"stack\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return ((this._nativeError)).stack; },\n\t            /**\n\t             * @param {?} value\n\t             * @return {?}\n\t             */\n\t            set: function (value) { ((this._nativeError)).stack = value; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        BaseError.prototype.toString = function () { return this._nativeError.toString(); };\n\t        return BaseError;\n\t    }(Error));\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var WrappedError = (function (_super) {\n\t        __extends$1(WrappedError, _super);\n\t        /**\n\t         * @param {?} message\n\t         * @param {?} error\n\t         */\n\t        function WrappedError(message, error) {\n\t            _super.call(this, message + \" caused by: \" + (error instanceof Error ? error.message : error));\n\t            this.originalError = error;\n\t        }\n\t        Object.defineProperty(WrappedError.prototype, \"stack\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))\n\t                    .stack;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return WrappedError;\n\t    }(BaseError));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * @param {?} keys\n\t     * @return {?}\n\t     */\n\t    function findFirstClosedCycle(keys) {\n\t        var /** @type {?} */ res = [];\n\t        for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n\t            if (res.indexOf(keys[i]) > -1) {\n\t                res.push(keys[i]);\n\t                return res;\n\t            }\n\t            res.push(keys[i]);\n\t        }\n\t        return res;\n\t    }\n\t    /**\n\t     * @param {?} keys\n\t     * @return {?}\n\t     */\n\t    function constructResolvingPath(keys) {\n\t        if (keys.length > 1) {\n\t            var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n\t            var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n\t            return ' (' + tokenStrs.join(' -> ') + ')';\n\t        }\n\t        return '';\n\t    }\n\t    /**\n\t     * Base class for all errors arising from misconfigured providers.\n\t     * \\@stable\n\t     */\n\t    var AbstractProviderError = (function (_super) {\n\t        __extends(AbstractProviderError, _super);\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} key\n\t         * @param {?} constructResolvingMessage\n\t         */\n\t        function AbstractProviderError(injector, key, constructResolvingMessage) {\n\t            _super.call(this, 'DI Error');\n\t            this.keys = [key];\n\t            this.injectors = [injector];\n\t            this.constructResolvingMessage = constructResolvingMessage;\n\t            this.message = this.constructResolvingMessage(this.keys);\n\t        }\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} key\n\t         * @return {?}\n\t         */\n\t        AbstractProviderError.prototype.addKey = function (injector, key) {\n\t            this.injectors.push(injector);\n\t            this.keys.push(key);\n\t            this.message = this.constructResolvingMessage(this.keys);\n\t        };\n\t        return AbstractProviderError;\n\t    }(BaseError));\n\t    /**\n\t     * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n\t     * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n\t     *\n\t     * ```typescript\n\t     * class A {\n\t     *   constructor(b:B) {}\n\t     * }\n\t     *\n\t     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var NoProviderError = (function (_super) {\n\t        __extends(NoProviderError, _super);\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} key\n\t         */\n\t        function NoProviderError(injector, key) {\n\t            _super.call(this, injector, key, function (keys) {\n\t                var first = stringify(keys[0].token);\n\t                return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n\t            });\n\t        }\n\t        return NoProviderError;\n\t    }(AbstractProviderError));\n\t    /**\n\t     * Thrown when dependencies form a cycle.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n\t     *\n\t     * ```typescript\n\t     * var injector = Injector.resolveAndCreate([\n\t     *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n\t     *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n\t     * ]);\n\t     *\n\t     * expect(() => injector.get(\"one\")).toThrowError();\n\t     * ```\n\t     *\n\t     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n\t     * \\@stable\n\t     */\n\t    var CyclicDependencyError = (function (_super) {\n\t        __extends(CyclicDependencyError, _super);\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} key\n\t         */\n\t        function CyclicDependencyError(injector, key) {\n\t            _super.call(this, injector, key, function (keys) {\n\t                return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n\t            });\n\t        }\n\t        return CyclicDependencyError;\n\t    }(AbstractProviderError));\n\t    /**\n\t     * Thrown when a constructing type returns with an Error.\n\t     *\n\t     * The `InstantiationError` class contains the original error plus the dependency graph which caused\n\t     * this object to be instantiated.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n\t     *\n\t     * ```typescript\n\t     * class A {\n\t     *   constructor() {\n\t     *     throw new Error('message');\n\t     *   }\n\t     * }\n\t     *\n\t     * var injector = Injector.resolveAndCreate([A]);\n\t     * try {\n\t     *   injector.get(A);\n\t     * } catch (e) {\n\t     *   expect(e instanceof InstantiationError).toBe(true);\n\t     *   expect(e.originalException.message).toEqual(\"message\");\n\t     *   expect(e.originalStack).toBeDefined();\n\t     * }\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var InstantiationError = (function (_super) {\n\t        __extends(InstantiationError, _super);\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} originalException\n\t         * @param {?} originalStack\n\t         * @param {?} key\n\t         */\n\t        function InstantiationError(injector, originalException, originalStack, key) {\n\t            _super.call(this, 'DI Error', originalException);\n\t            this.keys = [key];\n\t            this.injectors = [injector];\n\t        }\n\t        /**\n\t         * @param {?} injector\n\t         * @param {?} key\n\t         * @return {?}\n\t         */\n\t        InstantiationError.prototype.addKey = function (injector, key) {\n\t            this.injectors.push(injector);\n\t            this.keys.push(key);\n\t        };\n\t        Object.defineProperty(InstantiationError.prototype, \"message\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ first = stringify(this.keys[0].token);\n\t                return this.originalError.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(this.keys) + \".\";\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(InstantiationError.prototype, \"causeKey\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.keys[0]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return InstantiationError;\n\t    }(WrappedError));\n\t    /**\n\t     * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n\t     * creation.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n\t     *\n\t     * ```typescript\n\t     * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var InvalidProviderError = (function (_super) {\n\t        __extends(InvalidProviderError, _super);\n\t        /**\n\t         * @param {?} provider\n\t         */\n\t        function InvalidProviderError(provider) {\n\t            _super.call(this, \"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n\t        }\n\t        return InvalidProviderError;\n\t    }(BaseError));\n\t    /**\n\t     * Thrown when the class has no annotation information.\n\t     *\n\t     * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n\t     * need to be injected into the constructor.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n\t     *\n\t     * ```typescript\n\t     * class A {\n\t     *   constructor(b) {}\n\t     * }\n\t     *\n\t     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n\t     * ```\n\t     *\n\t     * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n\t     *\n\t     * ```typescript\n\t     * class B {}\n\t     *\n\t     * class A {\n\t     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n\t     * }\n\t     *\n\t     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var NoAnnotationError = (function (_super) {\n\t        __extends(NoAnnotationError, _super);\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @param {?} params\n\t         */\n\t        function NoAnnotationError(typeOrFunc, params) {\n\t            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));\n\t        }\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @param {?} params\n\t         * @return {?}\n\t         */\n\t        NoAnnotationError._genMessage = function (typeOrFunc, params) {\n\t            var /** @type {?} */ signature = [];\n\t            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n\t                var /** @type {?} */ parameter = params[i];\n\t                if (!parameter || parameter.length == 0) {\n\t                    signature.push('?');\n\t                }\n\t                else {\n\t                    signature.push(parameter.map(stringify).join(' '));\n\t                }\n\t            }\n\t            return 'Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n\t                signature.join(', ') + '). ' +\n\t                'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n\t                stringify(typeOrFunc) + '\\' is decorated with Injectable.';\n\t        };\n\t        return NoAnnotationError;\n\t    }(BaseError));\n\t    /**\n\t     * Thrown when getting an object by index.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n\t     *\n\t     * ```typescript\n\t     * class A {}\n\t     *\n\t     * var injector = Injector.resolveAndCreate([A]);\n\t     *\n\t     * expect(() => injector.getAt(100)).toThrowError();\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var OutOfBoundsError = (function (_super) {\n\t        __extends(OutOfBoundsError, _super);\n\t        /**\n\t         * @param {?} index\n\t         */\n\t        function OutOfBoundsError(index) {\n\t            _super.call(this, \"Index \" + index + \" is out-of-bounds.\");\n\t        }\n\t        return OutOfBoundsError;\n\t    }(BaseError));\n\t    /**\n\t     * Thrown when a multi provider and a regular provider are bound to the same token.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * expect(() => Injector.resolveAndCreate([\n\t     *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n\t     *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n\t     * ])).toThrowError();\n\t     * ```\n\t     */\n\t    var MixingMultiProvidersWithRegularProvidersError = (function (_super) {\n\t        __extends(MixingMultiProvidersWithRegularProvidersError, _super);\n\t        /**\n\t         * @param {?} provider1\n\t         * @param {?} provider2\n\t         */\n\t        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n\t            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +\n\t                provider2.toString());\n\t        }\n\t        return MixingMultiProvidersWithRegularProvidersError;\n\t    }(BaseError));\n\t\n\t    /**\n\t     * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n\t     *\n\t     * Keys have:\n\t     * - a system-wide unique `id`.\n\t     * - a `token`.\n\t     *\n\t     * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n\t     * the\n\t     * injector to store created objects in a more efficient way.\n\t     *\n\t     * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n\t     * resolving\n\t     * providers.\n\t     * \\@experimental\n\t     */\n\t    var ReflectiveKey = (function () {\n\t        /**\n\t         * Private\n\t         * @param {?} token\n\t         * @param {?} id\n\t         */\n\t        function ReflectiveKey(token, id) {\n\t            this.token = token;\n\t            this.id = id;\n\t            if (!token) {\n\t                throw new Error('Token must be defined!');\n\t            }\n\t        }\n\t        Object.defineProperty(ReflectiveKey.prototype, \"displayName\", {\n\t            /**\n\t             * Returns a stringified token.\n\t             * @return {?}\n\t             */\n\t            get: function () { return stringify(this.token); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * Retrieves a `Key` for a token.\n\t         * @param {?} token\n\t         * @return {?}\n\t         */\n\t        ReflectiveKey.get = function (token) {\n\t            return _globalKeyRegistry.get(resolveForwardRef(token));\n\t        };\n\t        Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n\t            /**\n\t             * @return {?} the number of keys registered in the system.\n\t             */\n\t            get: function () { return _globalKeyRegistry.numberOfKeys; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return ReflectiveKey;\n\t    }());\n\t    /**\n\t     * \\@internal\n\t     */\n\t    var KeyRegistry = (function () {\n\t        function KeyRegistry() {\n\t            this._allKeys = new Map();\n\t        }\n\t        /**\n\t         * @param {?} token\n\t         * @return {?}\n\t         */\n\t        KeyRegistry.prototype.get = function (token) {\n\t            if (token instanceof ReflectiveKey)\n\t                return token;\n\t            if (this._allKeys.has(token)) {\n\t                return this._allKeys.get(token);\n\t            }\n\t            var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n\t            this._allKeys.set(token, newKey);\n\t            return newKey;\n\t        };\n\t        Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._allKeys.size; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return KeyRegistry;\n\t    }());\n\t    var /** @type {?} */ _globalKeyRegistry = new KeyRegistry();\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * @whatItDoes Represents a type that a Component or other object is instances of.\n\t     *\n\t     * @description\n\t     *\n\t     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n\t     * the `MyCustomComponent` constructor function.\n\t     *\n\t     * @stable\n\t     */\n\t    var /** @type {?} */ Type = Function;\n\t    /**\n\t     * @param {?} v\n\t     * @return {?}\n\t     */\n\t    function isType(v) {\n\t        return typeof v === 'function';\n\t    }\n\t\n\t    /**\n\t     * Attention: This regex has to hold even if the code is minified!\n\t     */\n\t    var /** @type {?} */ DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{\\s*(\"use strict\";)?\\s*(return\\s+)?\\S+\\.apply\\(this,\\s*arguments\\)/;\n\t    var ReflectionCapabilities = (function () {\n\t        /**\n\t         * @param {?=} reflect\n\t         */\n\t        function ReflectionCapabilities(reflect) {\n\t            this._reflect = reflect || global$1.Reflect;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n\t        /**\n\t         * @param {?} t\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.factory = function (t) { return function () {\n\t            var args = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                args[_i - 0] = arguments[_i];\n\t            }\n\t            return new (t.bind.apply(t, [void 0].concat(args)))();\n\t        }; };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} paramTypes\n\t         * @param {?} paramAnnotations\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {\n\t            var /** @type {?} */ result;\n\t            if (typeof paramTypes === 'undefined') {\n\t                result = new Array(paramAnnotations.length);\n\t            }\n\t            else {\n\t                result = new Array(paramTypes.length);\n\t            }\n\t            for (var /** @type {?} */ i = 0; i < result.length; i++) {\n\t                // TS outputs Object for parameters without types, while Traceur omits\n\t                // the annotations. For now we preserve the Traceur behavior to aid\n\t                // migration, but this can be revisited.\n\t                if (typeof paramTypes === 'undefined') {\n\t                    result[i] = [];\n\t                }\n\t                else if (paramTypes[i] != Object) {\n\t                    result[i] = [paramTypes[i]];\n\t                }\n\t                else {\n\t                    result[i] = [];\n\t                }\n\t                if (paramAnnotations && isPresent(paramAnnotations[i])) {\n\t                    result[i] = result[i].concat(paramAnnotations[i]);\n\t                }\n\t            }\n\t            return result;\n\t        };\n\t        /**\n\t         * @param {?} type\n\t         * @param {?} parentCtor\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {\n\t            // If we have no decorators, we only have function.length as metadata.\n\t            // In that case, to detect whether a child class declared an own constructor or not,\n\t            // we need to look inside of that constructor to check whether it is\n\t            // just calling the parent.\n\t            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n\t            // that sets 'design:paramtypes' to []\n\t            // if a class inherits from another class but has no ctor declared itself.\n\t            if (DELEGATE_CTOR.exec(type.toString())) {\n\t                return null;\n\t            }\n\t            // Prefer the direct API.\n\t            if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {\n\t                return ((type)).parameters;\n\t            }\n\t            // API of tsickle for lowering decorators to properties on the class.\n\t            var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;\n\t            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n\t                // Newer tsickle uses a function closure\n\t                // Retain the non-function case for compatibility with older tsickle\n\t                var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n\t                var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n\t                var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) {\n\t                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n\t                });\n\t                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n\t            }\n\t            // API for metadata created by invoking the decorators.\n\t            if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {\n\t                var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);\n\t                var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);\n\t                if (paramTypes || paramAnnotations) {\n\t                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n\t                }\n\t            }\n\t            // If a class has no decorators, at least create metadata\n\t            // based on function.length.\n\t            // Note: We know that this is a real constructor as we checked\n\t            // the content of the constructor above.\n\t            return new Array(((type.length))).fill(undefined);\n\t        };\n\t        /**\n\t         * @param {?} type\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.parameters = function (type) {\n\t            // Note: only report metadata if we have at least one class decorator\n\t            // to stay in sync with the static reflector.\n\t            if (!isType(type)) {\n\t                return [];\n\t            }\n\t            var /** @type {?} */ parentCtor = getParentCtor(type);\n\t            var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\n\t            if (!parameters && parentCtor !== Object) {\n\t                parameters = this.parameters(parentCtor);\n\t            }\n\t            return parameters || [];\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @param {?} parentCtor\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {\n\t            // Prefer the direct API.\n\t            if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {\n\t                var /** @type {?} */ annotations = ((typeOrFunc)).annotations;\n\t                if (typeof annotations === 'function' && annotations.annotations) {\n\t                    annotations = annotations.annotations;\n\t                }\n\t                return annotations;\n\t            }\n\t            // API of tsickle for lowering decorators to properties on the class.\n\t            if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {\n\t                return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);\n\t            }\n\t            // API for metadata created by invoking the decorators.\n\t            if (this._reflect && this._reflect.getOwnMetadata) {\n\t                return this._reflect.getOwnMetadata('annotations', typeOrFunc);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\n\t            if (!isType(typeOrFunc)) {\n\t                return [];\n\t            }\n\t            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n\t            var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n\t            var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n\t            return parentAnnotations.concat(ownAnnotations);\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @param {?} parentCtor\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {\n\t            // Prefer the direct API.\n\t            if (((typeOrFunc)).propMetadata &&\n\t                ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n\t                var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;\n\t                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n\t                    propMetadata = propMetadata.propMetadata;\n\t                }\n\t                return propMetadata;\n\t            }\n\t            // API of tsickle for lowering decorators to properties on the class.\n\t            if (((typeOrFunc)).propDecorators &&\n\t                ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n\t                var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;\n\t                var /** @type {?} */ propMetadata_1 = ({});\n\t                Object.keys(propDecorators_1).forEach(function (prop) {\n\t                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n\t                });\n\t                return propMetadata_1;\n\t            }\n\t            // API for metadata created by invoking the decorators.\n\t            if (this._reflect && this._reflect.getOwnMetadata) {\n\t                return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n\t            if (!isType(typeOrFunc)) {\n\t                return {};\n\t            }\n\t            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n\t            var /** @type {?} */ propMetadata = {};\n\t            if (parentCtor !== Object) {\n\t                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);\n\t                Object.keys(parentPropMetadata_1).forEach(function (propName) {\n\t                    propMetadata[propName] = parentPropMetadata_1[propName];\n\t                });\n\t            }\n\t            var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n\t            if (ownPropMetadata) {\n\t                Object.keys(ownPropMetadata).forEach(function (propName) {\n\t                    var /** @type {?} */ decorators = [];\n\t                    if (propMetadata.hasOwnProperty(propName)) {\n\t                        decorators.push.apply(decorators, propMetadata[propName]);\n\t                    }\n\t                    decorators.push.apply(decorators, ownPropMetadata[propName]);\n\t                    propMetadata[propName] = decorators;\n\t                });\n\t            }\n\t            return propMetadata;\n\t        };\n\t        /**\n\t         * @param {?} type\n\t         * @param {?} lcProperty\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\n\t            return type instanceof Type && lcProperty in type.prototype;\n\t        };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.getter = function (name) { return ((new Function('o', 'return o.' + name + ';'))); };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.setter = function (name) {\n\t            return ((new Function('o', 'v', 'return o.' + name + ' = v;')));\n\t        };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.method = function (name) {\n\t            var /** @type {?} */ functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n\t            return ((new Function('o', 'args', functionBody)));\n\t        };\n\t        /**\n\t         * @param {?} type\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.importUri = function (type) {\n\t            // StaticSymbol\n\t            if (typeof type === 'object' && type['filePath']) {\n\t                return type['filePath'];\n\t            }\n\t            // Runtime type\n\t            return \"./\" + stringify(type);\n\t        };\n\t        /**\n\t         * @param {?} name\n\t         * @param {?} moduleUrl\n\t         * @param {?} runtime\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };\n\t        /**\n\t         * @param {?} enumIdentifier\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\n\t        return ReflectionCapabilities;\n\t    }());\n\t    /**\n\t     * @param {?} decoratorInvocations\n\t     * @return {?}\n\t     */\n\t    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n\t        if (!decoratorInvocations) {\n\t            return [];\n\t        }\n\t        return decoratorInvocations.map(function (decoratorInvocation) {\n\t            var /** @type {?} */ decoratorType = decoratorInvocation.type;\n\t            var /** @type {?} */ annotationCls = decoratorType.annotationCls;\n\t            var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n\t            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} ctor\n\t     * @return {?}\n\t     */\n\t    function getParentCtor(ctor) {\n\t        var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);\n\t        var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\n\t        // Note: We always use `Object` as the null value\n\t        // to simplify checking later on.\n\t        return parentCtor || Object;\n\t    }\n\t\n\t    /**\n\t     * Provides read-only access to reflection data about symbols. Used internally by Angular\n\t     * to power dependency injection and compilation.\n\t     * @abstract\n\t     */\n\t    var ReflectorReader = (function () {\n\t        function ReflectorReader() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.parameters = function (typeOrFunc) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.annotations = function (typeOrFunc) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.importUri = function (typeOrFunc) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} name\n\t         * @param {?} moduleUrl\n\t         * @param {?} runtime\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} identifier\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        ReflectorReader.prototype.resolveEnum = function (identifier, name) { };\n\t        return ReflectorReader;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$2 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Provides access to reflection data about symbols. Used internally by Angular\n\t     * to power dependency injection and compilation.\n\t     */\n\t    var Reflector = (function (_super) {\n\t        __extends$2(Reflector, _super);\n\t        /**\n\t         * @param {?} reflectionCapabilities\n\t         */\n\t        function Reflector(reflectionCapabilities) {\n\t            _super.call(this);\n\t            this.reflectionCapabilities = reflectionCapabilities;\n\t        }\n\t        /**\n\t         * @param {?} caps\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\n\t        /**\n\t         * @param {?} type\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.parameters = function (typeOrFunc) {\n\t            return this.reflectionCapabilities.parameters(typeOrFunc);\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.annotations = function (typeOrFunc) {\n\t            return this.reflectionCapabilities.annotations(typeOrFunc);\n\t        };\n\t        /**\n\t         * @param {?} typeOrFunc\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.propMetadata = function (typeOrFunc) {\n\t            return this.reflectionCapabilities.propMetadata(typeOrFunc);\n\t        };\n\t        /**\n\t         * @param {?} type\n\t         * @param {?} lcProperty\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n\t            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n\t        };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };\n\t        /**\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };\n\t        /**\n\t         * @param {?} type\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\n\t        /**\n\t         * @param {?} name\n\t         * @param {?} moduleUrl\n\t         * @param {?} runtime\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {\n\t            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);\n\t        };\n\t        /**\n\t         * @param {?} identifier\n\t         * @param {?} name\n\t         * @return {?}\n\t         */\n\t        Reflector.prototype.resolveEnum = function (identifier, name) {\n\t            return this.reflectionCapabilities.resolveEnum(identifier, name);\n\t        };\n\t        return Reflector;\n\t    }(ReflectorReader));\n\t\n\t    /**\n\t     * The {@link Reflector} used internally in Angular to access metadata\n\t     * about symbols.\n\t     */\n\t    var /** @type {?} */ reflector = new Reflector(new ReflectionCapabilities());\n\t\n\t    /**\n\t     * `Dependency` is used by the framework to extend DI.\n\t     * This is internal to Angular and should not be used directly.\n\t     */\n\t    var ReflectiveDependency = (function () {\n\t        /**\n\t         * @param {?} key\n\t         * @param {?} optional\n\t         * @param {?} visibility\n\t         */\n\t        function ReflectiveDependency(key, optional, visibility) {\n\t            this.key = key;\n\t            this.optional = optional;\n\t            this.visibility = visibility;\n\t        }\n\t        /**\n\t         * @param {?} key\n\t         * @return {?}\n\t         */\n\t        ReflectiveDependency.fromKey = function (key) {\n\t            return new ReflectiveDependency(key, false, null);\n\t        };\n\t        return ReflectiveDependency;\n\t    }());\n\t    var /** @type {?} */ _EMPTY_LIST = [];\n\t    var ResolvedReflectiveProvider_ = (function () {\n\t        /**\n\t         * @param {?} key\n\t         * @param {?} resolvedFactories\n\t         * @param {?} multiProvider\n\t         */\n\t        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n\t            this.key = key;\n\t            this.resolvedFactories = resolvedFactories;\n\t            this.multiProvider = multiProvider;\n\t        }\n\t        Object.defineProperty(ResolvedReflectiveProvider_.prototype, \"resolvedFactory\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.resolvedFactories[0]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return ResolvedReflectiveProvider_;\n\t    }());\n\t    /**\n\t     * An internal resolved representation of a factory function created by resolving {\\@link\n\t     * Provider}.\n\t     * \\@experimental\n\t     */\n\t    var ResolvedReflectiveFactory = (function () {\n\t        /**\n\t         * @param {?} factory\n\t         * @param {?} dependencies\n\t         */\n\t        function ResolvedReflectiveFactory(factory, dependencies) {\n\t            this.factory = factory;\n\t            this.dependencies = dependencies;\n\t        }\n\t        return ResolvedReflectiveFactory;\n\t    }());\n\t    /**\n\t     * Resolve a single provider.\n\t     * @param {?} provider\n\t     * @return {?}\n\t     */\n\t    function resolveReflectiveFactory(provider) {\n\t        var /** @type {?} */ factoryFn;\n\t        var /** @type {?} */ resolvedDeps;\n\t        if (provider.useClass) {\n\t            var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n\t            factoryFn = reflector.factory(useClass);\n\t            resolvedDeps = _dependenciesFor(useClass);\n\t        }\n\t        else if (provider.useExisting) {\n\t            factoryFn = function (aliasInstance) { return aliasInstance; };\n\t            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n\t        }\n\t        else if (provider.useFactory) {\n\t            factoryFn = provider.useFactory;\n\t            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n\t        }\n\t        else {\n\t            factoryFn = function () { return provider.useValue; };\n\t            resolvedDeps = _EMPTY_LIST;\n\t        }\n\t        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n\t    }\n\t    /**\n\t     * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n\t     *\n\t     * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n\t     * convenience provider syntax.\n\t     * @param {?} provider\n\t     * @return {?}\n\t     */\n\t    function resolveReflectiveProvider(provider) {\n\t        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);\n\t    }\n\t    /**\n\t     * Resolve a list of Providers.\n\t     * @param {?} providers\n\t     * @return {?}\n\t     */\n\t    function resolveReflectiveProviders(providers) {\n\t        var /** @type {?} */ normalized = _normalizeProviders(providers, []);\n\t        var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n\t        var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n\t        return Array.from(resolvedProviderMap.values());\n\t    }\n\t    /**\n\t     * Merges a list of ResolvedProviders into a list where\n\t     * each key is contained exactly once and multi providers\n\t     * have been merged.\n\t     * @param {?} providers\n\t     * @param {?} normalizedProvidersMap\n\t     * @return {?}\n\t     */\n\t    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n\t        for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n\t            var /** @type {?} */ provider = providers[i];\n\t            var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n\t            if (existing) {\n\t                if (provider.multiProvider !== existing.multiProvider) {\n\t                    throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);\n\t                }\n\t                if (provider.multiProvider) {\n\t                    for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n\t                        existing.resolvedFactories.push(provider.resolvedFactories[j]);\n\t                    }\n\t                }\n\t                else {\n\t                    normalizedProvidersMap.set(provider.key.id, provider);\n\t                }\n\t            }\n\t            else {\n\t                var /** @type {?} */ resolvedProvider = void 0;\n\t                if (provider.multiProvider) {\n\t                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n\t                }\n\t                else {\n\t                    resolvedProvider = provider;\n\t                }\n\t                normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n\t            }\n\t        }\n\t        return normalizedProvidersMap;\n\t    }\n\t    /**\n\t     * @param {?} providers\n\t     * @param {?} res\n\t     * @return {?}\n\t     */\n\t    function _normalizeProviders(providers, res) {\n\t        providers.forEach(function (b) {\n\t            if (b instanceof Type) {\n\t                res.push({ provide: b, useClass: b });\n\t            }\n\t            else if (b && typeof b == 'object' && ((b)).provide !== undefined) {\n\t                res.push(/** @type {?} */ (b));\n\t            }\n\t            else if (b instanceof Array) {\n\t                _normalizeProviders(b, res);\n\t            }\n\t            else {\n\t                throw new InvalidProviderError(b);\n\t            }\n\t        });\n\t        return res;\n\t    }\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @param {?} dependencies\n\t     * @return {?}\n\t     */\n\t    function constructDependencies(typeOrFunc, dependencies) {\n\t        if (!dependencies) {\n\t            return _dependenciesFor(typeOrFunc);\n\t        }\n\t        else {\n\t            var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });\n\t            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @return {?}\n\t     */\n\t    function _dependenciesFor(typeOrFunc) {\n\t        var /** @type {?} */ params = reflector.parameters(typeOrFunc);\n\t        if (!params)\n\t            return [];\n\t        if (params.some(function (p) { return p == null; })) {\n\t            throw new NoAnnotationError(typeOrFunc, params);\n\t        }\n\t        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n\t    }\n\t    /**\n\t     * @param {?} typeOrFunc\n\t     * @param {?} metadata\n\t     * @param {?} params\n\t     * @return {?}\n\t     */\n\t    function _extractToken(typeOrFunc, metadata, params) {\n\t        var /** @type {?} */ token = null;\n\t        var /** @type {?} */ optional = false;\n\t        if (!Array.isArray(metadata)) {\n\t            if (metadata instanceof Inject) {\n\t                return _createDependency(metadata.token, optional, null);\n\t            }\n\t            else {\n\t                return _createDependency(metadata, optional, null);\n\t            }\n\t        }\n\t        var /** @type {?} */ visibility = null;\n\t        for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {\n\t            var /** @type {?} */ paramMetadata = metadata[i];\n\t            if (paramMetadata instanceof Type) {\n\t                token = paramMetadata;\n\t            }\n\t            else if (paramMetadata instanceof Inject) {\n\t                token = paramMetadata.token;\n\t            }\n\t            else if (paramMetadata instanceof Optional) {\n\t                optional = true;\n\t            }\n\t            else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n\t                visibility = paramMetadata;\n\t            }\n\t        }\n\t        token = resolveForwardRef(token);\n\t        if (token != null) {\n\t            return _createDependency(token, optional, visibility);\n\t        }\n\t        else {\n\t            throw new NoAnnotationError(typeOrFunc, params);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} token\n\t     * @param {?} optional\n\t     * @param {?} visibility\n\t     * @return {?}\n\t     */\n\t    function _createDependency(token, optional, visibility) {\n\t        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n\t    }\n\t\n\t    // Threshold for the dynamic version\n\t    var /** @type {?} */ UNDEFINED = new Object();\n\t    /**\n\t     * A ReflectiveDependency injection container used for instantiating objects and resolving\n\t     * dependencies.\n\t     *\n\t     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n\t     * constructor dependencies.\n\t     *\n\t     * In typical use, application code asks for the dependencies in the constructor and they are\n\t     * resolved by the `Injector`.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n\t     *\n\t     * The following example creates an `Injector` configured to create `Engine` and `Car`.\n\t     *\n\t     * ```typescript\n\t     * \\@Injectable()\n\t     * class Engine {\n\t     * }\n\t     *\n\t     * \\@Injectable()\n\t     * class Car {\n\t     *   constructor(public engine:Engine) {}\n\t     * }\n\t     *\n\t     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n\t     * var car = injector.get(Car);\n\t     * expect(car instanceof Car).toBe(true);\n\t     * expect(car.engine instanceof Engine).toBe(true);\n\t     * ```\n\t     *\n\t     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n\t     * resolve all of the object's dependencies automatically.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ReflectiveInjector = (function () {\n\t        function ReflectiveInjector() {\n\t        }\n\t        /**\n\t         * Turns an array of provider definitions into an array of resolved providers.\n\t         *\n\t         * A resolution is a process of flattening multiple nested arrays and converting individual\n\t         * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Injectable()\n\t         * class Engine {\n\t         * }\n\t         *\n\t         * \\@Injectable()\n\t         * class Car {\n\t         *   constructor(public engine:Engine) {}\n\t         * }\n\t         *\n\t         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n\t         *\n\t         * expect(providers.length).toEqual(2);\n\t         *\n\t         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n\t         * expect(providers[0].key.displayName).toBe(\"Car\");\n\t         * expect(providers[0].dependencies.length).toEqual(1);\n\t         * expect(providers[0].factory).toBeDefined();\n\t         *\n\t         * expect(providers[1].key.displayName).toBe(\"Engine\");\n\t         * });\n\t         * ```\n\t         *\n\t         * See {\\@link ReflectiveInjector#fromResolvedProviders} for more info.\n\t         * @param {?} providers\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.resolve = function (providers) {\n\t            return resolveReflectiveProviders(providers);\n\t        };\n\t        /**\n\t         * Resolves an array of providers and creates an injector from those providers.\n\t         *\n\t         * The passed-in providers can be an array of `Type`, {\\@link Provider},\n\t         * or a recursive array of more providers.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Injectable()\n\t         * class Engine {\n\t         * }\n\t         *\n\t         * \\@Injectable()\n\t         * class Car {\n\t         *   constructor(public engine:Engine) {}\n\t         * }\n\t         *\n\t         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n\t         * expect(injector.get(Car) instanceof Car).toBe(true);\n\t         * ```\n\t         *\n\t         * This function is slower than the corresponding `fromResolvedProviders`\n\t         * because it needs to resolve the passed-in providers first.\n\t         * See {\\@link Injector#resolve} and {\\@link Injector#fromResolvedProviders}.\n\t         * @param {?} providers\n\t         * @param {?=} parent\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.resolveAndCreate = function (providers, parent) {\n\t            if (parent === void 0) { parent = null; }\n\t            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n\t            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n\t        };\n\t        /**\n\t         * Creates an injector from previously resolved providers.\n\t         *\n\t         * This API is the recommended way to construct injectors in performance-sensitive parts.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Injectable()\n\t         * class Engine {\n\t         * }\n\t         *\n\t         * \\@Injectable()\n\t         * class Car {\n\t         *   constructor(public engine:Engine) {}\n\t         * }\n\t         *\n\t         * var providers = ReflectiveInjector.resolve([Car, Engine]);\n\t         * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n\t         * expect(injector.get(Car) instanceof Car).toBe(true);\n\t         * ```\n\t         * \\@experimental\n\t         * @param {?} providers\n\t         * @param {?=} parent\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {\n\t            if (parent === void 0) { parent = null; }\n\t            return new ReflectiveInjector_(providers, parent);\n\t        };\n\t        /**\n\t         * Parent of this injector.\n\t         *\n\t         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t         * -->\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))\n\t         *\n\t         * ```typescript\n\t         * var parent = ReflectiveInjector.resolveAndCreate([]);\n\t         * var child = parent.resolveAndCreateChild([]);\n\t         * expect(child.parent).toBe(parent);\n\t         * ```\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.parent = function () { };\n\t        /**\n\t         * Resolves an array of providers and creates a child injector from those providers.\n\t         *\n\t         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t         * -->\n\t         *\n\t         * The passed-in providers can be an array of `Type`, {\\@link Provider},\n\t         * or a recursive array of more providers.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))\n\t         *\n\t         * ```typescript\n\t         * class ParentProvider {}\n\t         * class ChildProvider {}\n\t         *\n\t         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n\t         * var child = parent.resolveAndCreateChild([ChildProvider]);\n\t         *\n\t         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n\t         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n\t         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n\t         * ```\n\t         *\n\t         * This function is slower than the corresponding `createChildFromResolved`\n\t         * because it needs to resolve the passed-in providers first.\n\t         * See {\\@link Injector#resolve} and {\\@link Injector#createChildFromResolved}.\n\t         * @abstract\n\t         * @param {?} providers\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n\t        /**\n\t         * Creates a child injector from previously resolved providers.\n\t         *\n\t         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t         * -->\n\t         *\n\t         * This API is the recommended way to construct injectors in performance-sensitive parts.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))\n\t         *\n\t         * ```typescript\n\t         * class ParentProvider {}\n\t         * class ChildProvider {}\n\t         *\n\t         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n\t         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n\t         *\n\t         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n\t         * var child = parent.createChildFromResolved(childProviders);\n\t         *\n\t         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n\t         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n\t         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n\t         * ```\n\t         * @abstract\n\t         * @param {?} providers\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n\t        /**\n\t         * Resolves a provider and instantiates an object in the context of the injector.\n\t         *\n\t         * The created object does not get cached by the injector.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Injectable()\n\t         * class Engine {\n\t         * }\n\t         *\n\t         * \\@Injectable()\n\t         * class Car {\n\t         *   constructor(public engine:Engine) {}\n\t         * }\n\t         *\n\t         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\t         *\n\t         * var car = injector.resolveAndInstantiate(Car);\n\t         * expect(car.engine).toBe(injector.get(Engine));\n\t         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n\t         * ```\n\t         * @abstract\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n\t        /**\n\t         * Instantiates an object using a resolved provider in the context of the injector.\n\t         *\n\t         * The created object does not get cached by the injector.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Injectable()\n\t         * class Engine {\n\t         * }\n\t         *\n\t         * \\@Injectable()\n\t         * class Car {\n\t         *   constructor(public engine:Engine) {}\n\t         * }\n\t         *\n\t         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\t         * var carProvider = ReflectiveInjector.resolve([Car])[0];\n\t         * var car = injector.instantiateResolved(carProvider);\n\t         * expect(car.engine).toBe(injector.get(Engine));\n\t         * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n\t         * ```\n\t         * @abstract\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n\t        return ReflectiveInjector;\n\t    }());\n\t    var ReflectiveInjector_ = (function () {\n\t        /**\n\t         * Private\n\t         * @param {?} _providers\n\t         * @param {?=} _parent\n\t         */\n\t        function ReflectiveInjector_(_providers, _parent) {\n\t            if (_parent === void 0) { _parent = null; }\n\t            /** @internal */\n\t            this._constructionCounter = 0;\n\t            this._providers = _providers;\n\t            this._parent = _parent;\n\t            var len = _providers.length;\n\t            this.keyIds = new Array(len);\n\t            this.objs = new Array(len);\n\t            for (var i = 0; i < len; i++) {\n\t                this.keyIds[i] = _providers[i].key.id;\n\t                this.objs[i] = UNDEFINED;\n\t            }\n\t        }\n\t        /**\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\n\t            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n\t            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n\t        };\n\t        Object.defineProperty(ReflectiveInjector_.prototype, \"parent\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parent; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} providers\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\n\t            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n\t            return this.createChildFromResolved(ResolvedReflectiveProviders);\n\t        };\n\t        /**\n\t         * @param {?} providers\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\n\t            var /** @type {?} */ inj = new ReflectiveInjector_(providers);\n\t            inj._parent = this;\n\t            return inj;\n\t        };\n\t        /**\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\n\t            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n\t        };\n\t        /**\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\n\t            return this._instantiateProvider(provider);\n\t        };\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {\n\t            if (index < 0 || index >= this._providers.length) {\n\t                throw new OutOfBoundsError(index);\n\t            }\n\t            return this._providers[index];\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._new = function (provider) {\n\t            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n\t                throw new CyclicDependencyError(this, provider.key);\n\t            }\n\t            return this._instantiateProvider(provider);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };\n\t        /**\n\t         * @param {?} provider\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\n\t            if (provider.multiProvider) {\n\t                var /** @type {?} */ res = new Array(provider.resolvedFactories.length);\n\t                for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\n\t                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n\t                }\n\t                return res;\n\t            }\n\t            else {\n\t                return this._instantiate(provider, provider.resolvedFactories[0]);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} provider\n\t         * @param {?} ResolvedReflectiveFactory\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {\n\t            var _this = this;\n\t            var /** @type {?} */ factory = ResolvedReflectiveFactory.factory;\n\t            var /** @type {?} */ deps;\n\t            try {\n\t                deps =\n\t                    ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n\t            }\n\t            catch (e) {\n\t                if (e instanceof AbstractProviderError || e instanceof InstantiationError) {\n\t                    e.addKey(this, provider.key);\n\t                }\n\t                throw e;\n\t            }\n\t            var /** @type {?} */ obj;\n\t            try {\n\t                obj = factory.apply(void 0, deps);\n\t            }\n\t            catch (e) {\n\t                throw new InstantiationError(this, e, e.stack, provider.key);\n\t            }\n\t            return obj;\n\t        };\n\t        /**\n\t         * @param {?} dep\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {\n\t            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n\t        };\n\t        /**\n\t         * @param {?} key\n\t         * @param {?} visibility\n\t         * @param {?} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {\n\t            if (key === INJECTOR_KEY) {\n\t                return this;\n\t            }\n\t            if (visibility instanceof Self) {\n\t                return this._getByKeySelf(key, notFoundValue);\n\t            }\n\t            else {\n\t                return this._getByKeyDefault(key, notFoundValue, visibility);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} keyId\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {\n\t            for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\n\t                if (this.keyIds[i] === keyId) {\n\t                    if (this.objs[i] === UNDEFINED) {\n\t                        this.objs[i] = this._new(this._providers[i]);\n\t                    }\n\t                    return this.objs[i];\n\t                }\n\t            }\n\t            return UNDEFINED;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} key\n\t         * @param {?} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {\n\t            if (notFoundValue !== THROW_IF_NOT_FOUND) {\n\t                return notFoundValue;\n\t            }\n\t            else {\n\t                throw new NoProviderError(this, key);\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} key\n\t         * @param {?} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {\n\t            var /** @type {?} */ obj = this._getObjByKeyId(key.id);\n\t            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} key\n\t         * @param {?} notFoundValue\n\t         * @param {?} visibility\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {\n\t            var /** @type {?} */ inj;\n\t            if (visibility instanceof SkipSelf) {\n\t                inj = this._parent;\n\t            }\n\t            else {\n\t                inj = this;\n\t            }\n\t            while (inj instanceof ReflectiveInjector_) {\n\t                var /** @type {?} */ inj_ = (inj);\n\t                var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\n\t                if (obj !== UNDEFINED)\n\t                    return obj;\n\t                inj = inj_._parent;\n\t            }\n\t            if (inj !== null) {\n\t                return inj.get(key.token, notFoundValue);\n\t            }\n\t            else {\n\t                return this._throwOrNull(key, notFoundValue);\n\t            }\n\t        };\n\t        Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n\t                    .join(', ');\n\t                return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\n\t        return ReflectiveInjector_;\n\t    }());\n\t    var /** @type {?} */ INJECTOR_KEY = ReflectiveKey.get(Injector);\n\t    /**\n\t     * @param {?} injector\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function _mapProviders(injector, fn) {\n\t        var /** @type {?} */ res = new Array(injector._providers.length);\n\t        for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\n\t            res[i] = fn(injector.getProviderAtIndex(i));\n\t        }\n\t        return res;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * \\@whatItDoes Provides a hook for centralized exception handling.\n\t     *\n\t     * \\@description\n\t     *\n\t     * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n\t     * intercept error handling, write a custom exception handler that replaces this default as\n\t     * appropriate for your app.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * class MyErrorHandler implements ErrorHandler {\n\t     *   handleError(error) {\n\t     *     // do something with the exception\n\t     *   }\n\t     * }\n\t     *\n\t     * \\@NgModule({\n\t     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n\t     * })\n\t     * class MyModule {}\n\t     * ```\n\t     *\n\t     * \\@stable\n\t     */\n\t    var ErrorHandler = (function () {\n\t        /**\n\t         * @param {?=} rethrowError\n\t         */\n\t        function ErrorHandler(rethrowError) {\n\t            if (rethrowError === void 0) { rethrowError = true; }\n\t            /**\n\t             * @internal\n\t             */\n\t            this._console = console;\n\t            this.rethrowError = rethrowError;\n\t        }\n\t        /**\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        ErrorHandler.prototype.handleError = function (error) {\n\t            var /** @type {?} */ originalError = this._findOriginalError(error);\n\t            var /** @type {?} */ originalStack = this._findOriginalStack(error);\n\t            var /** @type {?} */ context = this._findContext(error);\n\t            this._console.error(\"EXCEPTION: \" + this._extractMessage(error));\n\t            if (originalError) {\n\t                this._console.error(\"ORIGINAL EXCEPTION: \" + this._extractMessage(originalError));\n\t            }\n\t            if (originalStack) {\n\t                this._console.error('ORIGINAL STACKTRACE:');\n\t                this._console.error(originalStack);\n\t            }\n\t            if (context) {\n\t                this._console.error('ERROR CONTEXT:');\n\t                this._console.error(context);\n\t            }\n\t            // We rethrow exceptions, so operations like 'bootstrap' will result in an error\n\t            // when an error happens. If we do not rethrow, bootstrap will always succeed.\n\t            if (this.rethrowError)\n\t                throw error;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        ErrorHandler.prototype._extractMessage = function (error) {\n\t            return error instanceof Error ? error.message : error.toString();\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        ErrorHandler.prototype._findContext = function (error) {\n\t            if (error) {\n\t                return error.context ? error.context :\n\t                    this._findContext(((error)).originalError);\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        ErrorHandler.prototype._findOriginalError = function (error) {\n\t            var /** @type {?} */ e = ((error)).originalError;\n\t            while (e && ((e)).originalError) {\n\t                e = ((e)).originalError;\n\t            }\n\t            return e;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        ErrorHandler.prototype._findOriginalStack = function (error) {\n\t            if (!(error instanceof Error))\n\t                return null;\n\t            var /** @type {?} */ e = error;\n\t            var /** @type {?} */ stack = e.stack;\n\t            while (e instanceof Error && ((e)).originalError) {\n\t                e = ((e)).originalError;\n\t                if (e instanceof Error && e.stack) {\n\t                    stack = e.stack;\n\t                }\n\t            }\n\t            return stack;\n\t        };\n\t        return ErrorHandler;\n\t    }());\n\t\n\t    /**\n\t     * Wraps Javascript Objects\n\t     */\n\t    var StringMapWrapper = (function () {\n\t        function StringMapWrapper() {\n\t        }\n\t        /**\n\t         * @param {?} m1\n\t         * @param {?} m2\n\t         * @return {?}\n\t         */\n\t        StringMapWrapper.merge = function (m1, m2) {\n\t            var /** @type {?} */ m = {};\n\t            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n\t                var k = _a[_i];\n\t                m[k] = m1[k];\n\t            }\n\t            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n\t                var k = _c[_b];\n\t                m[k] = m2[k];\n\t            }\n\t            return m;\n\t        };\n\t        /**\n\t         * @param {?} m1\n\t         * @param {?} m2\n\t         * @return {?}\n\t         */\n\t        StringMapWrapper.equals = function (m1, m2) {\n\t            var /** @type {?} */ k1 = Object.keys(m1);\n\t            var /** @type {?} */ k2 = Object.keys(m2);\n\t            if (k1.length != k2.length) {\n\t                return false;\n\t            }\n\t            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n\t                var /** @type {?} */ key = k1[i];\n\t                if (m1[key] !== m2[key]) {\n\t                    return false;\n\t                }\n\t            }\n\t            return true;\n\t        };\n\t        return StringMapWrapper;\n\t    }());\n\t    var ListWrapper = (function () {\n\t        function ListWrapper() {\n\t        }\n\t        /**\n\t         * @param {?} arr\n\t         * @param {?} condition\n\t         * @return {?}\n\t         */\n\t        ListWrapper.findLast = function (arr, condition) {\n\t            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n\t                if (condition(arr[i])) {\n\t                    return arr[i];\n\t                }\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @param {?} items\n\t         * @return {?}\n\t         */\n\t        ListWrapper.removeAll = function (list, items) {\n\t            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n\t                var /** @type {?} */ index = list.indexOf(items[i]);\n\t                if (index > -1) {\n\t                    list.splice(index, 1);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @param {?} el\n\t         * @return {?}\n\t         */\n\t        ListWrapper.remove = function (list, el) {\n\t            var /** @type {?} */ index = list.indexOf(el);\n\t            if (index > -1) {\n\t                list.splice(index, 1);\n\t                return true;\n\t            }\n\t            return false;\n\t        };\n\t        /**\n\t         * @param {?} a\n\t         * @param {?} b\n\t         * @return {?}\n\t         */\n\t        ListWrapper.equals = function (a, b) {\n\t            if (a.length != b.length)\n\t                return false;\n\t            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n\t                if (a[i] !== b[i])\n\t                    return false;\n\t            }\n\t            return true;\n\t        };\n\t        /**\n\t         * @param {?} list\n\t         * @return {?}\n\t         */\n\t        ListWrapper.flatten = function (list) {\n\t            return list.reduce(function (flat, item) {\n\t                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n\t                return ((flat)).concat(flatItem);\n\t            }, []);\n\t        };\n\t        return ListWrapper;\n\t    }());\n\t    /**\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isListLikeIterable(obj) {\n\t        if (!isJsObject(obj))\n\t            return false;\n\t        return Array.isArray(obj) ||\n\t            (!(obj instanceof Map) &&\n\t                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n\t    }\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @param {?} comparator\n\t     * @return {?}\n\t     */\n\t    function areIterablesEqual(a, b, comparator) {\n\t        var /** @type {?} */ iterator1 = a[getSymbolIterator()]();\n\t        var /** @type {?} */ iterator2 = b[getSymbolIterator()]();\n\t        while (true) {\n\t            var /** @type {?} */ item1 = iterator1.next();\n\t            var /** @type {?} */ item2 = iterator2.next();\n\t            if (item1.done && item2.done)\n\t                return true;\n\t            if (item1.done || item2.done)\n\t                return false;\n\t            if (!comparator(item1.value, item2.value))\n\t                return false;\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} obj\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function iterateListLike(obj, fn) {\n\t        if (Array.isArray(obj)) {\n\t            for (var /** @type {?} */ i = 0; i < obj.length; i++) {\n\t                fn(obj[i]);\n\t            }\n\t        }\n\t        else {\n\t            var /** @type {?} */ iterator = obj[getSymbolIterator()]();\n\t            var /** @type {?} */ item = void 0;\n\t            while (!((item = iterator.next()).done)) {\n\t                fn(item.value);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Determine if the argument is shaped like a Promise\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isPromise(obj) {\n\t        // allow any Promise/A+ compliant thenable.\n\t        // It's up to the caller to ensure that obj.then conforms to the spec\n\t        return !!obj && typeof obj.then === 'function';\n\t    }\n\t    /**\n\t     * Determine if the argument is an Observable\n\t     * @param {?} obj\n\t     * @return {?}\n\t     */\n\t    function isObservable(obj) {\n\t        return !!(obj && obj[rxjs_symbol_observable.$$observable]);\n\t    }\n\t\n\t    /**\n\t     * A function that will be executed when an application is initialized.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ APP_INITIALIZER = new OpaqueToken('Application Initializer');\n\t    /**\n\t     * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var ApplicationInitStatus = (function () {\n\t        /**\n\t         * @param {?} appInits\n\t         */\n\t        function ApplicationInitStatus(appInits) {\n\t            var _this = this;\n\t            this._done = false;\n\t            var asyncInitPromises = [];\n\t            if (appInits) {\n\t                for (var i = 0; i < appInits.length; i++) {\n\t                    var initResult = appInits[i]();\n\t                    if (isPromise(initResult)) {\n\t                        asyncInitPromises.push(initResult);\n\t                    }\n\t                }\n\t            }\n\t            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });\n\t            if (asyncInitPromises.length === 0) {\n\t                this._done = true;\n\t            }\n\t        }\n\t        Object.defineProperty(ApplicationInitStatus.prototype, \"done\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._done; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ApplicationInitStatus.prototype, \"donePromise\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._donePromise; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ApplicationInitStatus.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        ApplicationInitStatus.ctorParameters = function () { return [\n\t            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\n\t        ]; };\n\t        return ApplicationInitStatus;\n\t    }());\n\t\n\t    /**\n\t     * A DI Token representing a unique string id assigned to the application by Angular and used\n\t     * primarily for prefixing application attributes and CSS styles when\n\t     * {@link ViewEncapsulation#Emulated} is being used.\n\t     *\n\t     * If you need to avoid randomly generated value to be used as an application id, you can provide\n\t     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n\t     * using this token.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ APP_ID = new OpaqueToken('AppId');\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _appIdRandomProviderFactory() {\n\t        return \"\" + _randomChar() + _randomChar() + _randomChar();\n\t    }\n\t    /**\n\t     * Providers that will generate a random APP_ID_TOKEN.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ APP_ID_RANDOM_PROVIDER = {\n\t        provide: APP_ID,\n\t        useFactory: _appIdRandomProviderFactory,\n\t        deps: /** @type {?} */ ([]),\n\t    };\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _randomChar() {\n\t        return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n\t    }\n\t    /**\n\t     * A function that will be executed when a platform is initialized.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');\n\t    /**\n\t     * All callbacks provided via this token will be called for every component that is bootstrapped.\n\t     * Signature of the callback:\n\t     *\n\t     * `(componentRef: ComponentRef) => void`.\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');\n\t    /**\n\t     * A token which indicates the root directory of the application\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');\n\t\n\t    var Console = (function () {\n\t        function Console() {\n\t        }\n\t        /**\n\t         * @param {?} message\n\t         * @return {?}\n\t         */\n\t        Console.prototype.log = function (message) { print(message); };\n\t        /**\n\t         * @param {?} message\n\t         * @return {?}\n\t         */\n\t        Console.prototype.warn = function (message) { warn(message); };\n\t        Console.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        Console.ctorParameters = function () { return []; };\n\t        return Console;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$4 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Indicates that a component is still being loaded in a synchronous compile.\n\t     *\n\t     * \\@stable\n\t     */\n\t    var ComponentStillLoadingError = (function (_super) {\n\t        __extends$4(ComponentStillLoadingError, _super);\n\t        /**\n\t         * @param {?} compType\n\t         */\n\t        function ComponentStillLoadingError(compType) {\n\t            _super.call(this, \"Can't compile synchronously as \" + stringify(compType) + \" is still being loaded!\");\n\t            this.compType = compType;\n\t        }\n\t        return ComponentStillLoadingError;\n\t    }(BaseError));\n\t    /**\n\t     * Combination of NgModuleFactory and ComponentFactorys.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var ModuleWithComponentFactories = (function () {\n\t        /**\n\t         * @param {?} ngModuleFactory\n\t         * @param {?} componentFactories\n\t         */\n\t        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n\t            this.ngModuleFactory = ngModuleFactory;\n\t            this.componentFactories = componentFactories;\n\t        }\n\t        return ModuleWithComponentFactories;\n\t    }());\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _throwError() {\n\t        throw new Error(\"Runtime compiler is not loaded\");\n\t    }\n\t    /**\n\t     * Low-level service for running the angular compiler during runtime\n\t     * to create {\\@link ComponentFactory}s, which\n\t     * can later be used to create and render a Component instance.\n\t     *\n\t     * Each `\\@NgModule` provides an own `Compiler` to its injector,\n\t     * that will use the directives/pipes of the ng module for compilation\n\t     * of components.\n\t     * \\@stable\n\t     */\n\t    var Compiler = (function () {\n\t        function Compiler() {\n\t        }\n\t        /**\n\t         * Compiles the given NgModule and all of its components. All templates of the components listed\n\t         * in `entryComponents`\n\t         * have to be inlined. Otherwise throws a {\\@link ComponentStillLoadingError}.\n\t         * @param {?} moduleType\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };\n\t        /**\n\t         * Compiles the given NgModule and all of its components\n\t         * @param {?} moduleType\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };\n\t        /**\n\t         * Same as {\\@link compileModuleSync} but also creates ComponentFactories for all components.\n\t         * @param {?} moduleType\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n\t            throw _throwError();\n\t        };\n\t        /**\n\t         * Same as {\\@link compileModuleAsync} but also creates ComponentFactories for all components.\n\t         * @param {?} moduleType\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n\t            throw _throwError();\n\t        };\n\t        /**\n\t         * Exposes the CSS-style selectors that have been used in `ngContent` directives within\n\t         * the template of the given component.\n\t         * This is used by the `upgrade` library to compile the appropriate transclude content\n\t         * in the Angular 1 wrapper component.\n\t         * @param {?} component\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };\n\t        /**\n\t         * Clears all caches.\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.clearCache = function () { };\n\t        /**\n\t         * Clears the cache for the given component/ngModule.\n\t         * @param {?} type\n\t         * @return {?}\n\t         */\n\t        Compiler.prototype.clearCacheFor = function (type) { };\n\t        Compiler.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        Compiler.ctorParameters = function () { return []; };\n\t        return Compiler;\n\t    }());\n\t    /**\n\t     * Token to provide CompilerOptions in the platform injector.\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ COMPILER_OPTIONS = new OpaqueToken('compilerOptions');\n\t    /**\n\t     * A factory for creating a Compiler\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var CompilerFactory = (function () {\n\t        function CompilerFactory() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?=} options\n\t         * @return {?}\n\t         */\n\t        CompilerFactory.prototype.createCompiler = function (options) { };\n\t        return CompilerFactory;\n\t    }());\n\t\n\t    var ElementRef = (function () {\n\t        /**\n\t         * @param {?} nativeElement\n\t         */\n\t        function ElementRef(nativeElement) {\n\t            this.nativeElement = nativeElement;\n\t        }\n\t        return ElementRef;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$6 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Use by directives and components to emit custom Events.\n\t     *\n\t     * ### Examples\n\t     *\n\t     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n\t     * title gets clicked:\n\t     *\n\t     * ```\n\t     * \\@Component({\n\t     *   selector: 'zippy',\n\t     *   template: `\n\t     *   <div class=\"zippy\">\n\t     *     <div (click)=\"toggle()\">Toggle</div>\n\t     *     <div [hidden]=\"!visible\">\n\t     *       <ng-content></ng-content>\n\t     *     </div>\n\t     *  </div>`})\n\t     * export class Zippy {\n\t     *   visible: boolean = true;\n\t     *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n\t     *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n\t     *\n\t     *   toggle() {\n\t     *     this.visible = !this.visible;\n\t     *     if (this.visible) {\n\t     *       this.open.emit(null);\n\t     *     } else {\n\t     *       this.close.emit(null);\n\t     *     }\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * The events payload can be accessed by the parameter `$event` on the components output event\n\t     * handler:\n\t     *\n\t     * ```\n\t     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n\t     * ```\n\t     *\n\t     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n\t     * https://github.com/jhusain/observable-spec\n\t     *\n\t     * Once a reference implementation of the spec is available, switch to it.\n\t     * \\@stable\n\t     */\n\t    var EventEmitter = (function (_super) {\n\t        __extends$6(EventEmitter, _super);\n\t        /**\n\t         * Creates an instance of [EventEmitter], which depending on [isAsync],\n\t         * delivers events synchronously or asynchronously.\n\t         * @param {?=} isAsync\n\t         */\n\t        function EventEmitter(isAsync) {\n\t            if (isAsync === void 0) { isAsync = false; }\n\t            _super.call(this);\n\t            this.__isAsync = isAsync;\n\t        }\n\t        /**\n\t         * @param {?=} value\n\t         * @return {?}\n\t         */\n\t        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n\t        /**\n\t         * @param {?=} generatorOrNext\n\t         * @param {?=} error\n\t         * @param {?=} complete\n\t         * @return {?}\n\t         */\n\t        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n\t            var /** @type {?} */ schedulerFn;\n\t            var /** @type {?} */ errorFn = function (err) { return null; };\n\t            var /** @type {?} */ completeFn = function () { return null; };\n\t            if (generatorOrNext && typeof generatorOrNext === 'object') {\n\t                schedulerFn = this.__isAsync ? function (value) {\n\t                    setTimeout(function () { return generatorOrNext.next(value); });\n\t                } : function (value) { generatorOrNext.next(value); };\n\t                if (generatorOrNext.error) {\n\t                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n\t                        function (err) { generatorOrNext.error(err); };\n\t                }\n\t                if (generatorOrNext.complete) {\n\t                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n\t                        function () { generatorOrNext.complete(); };\n\t                }\n\t            }\n\t            else {\n\t                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n\t                    function (value) { generatorOrNext(value); };\n\t                if (error) {\n\t                    errorFn =\n\t                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n\t                }\n\t                if (complete) {\n\t                    completeFn =\n\t                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n\t                }\n\t            }\n\t            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n\t        };\n\t        return EventEmitter;\n\t    }(rxjs_Subject.Subject));\n\t\n\t    /**\n\t     * An injectable service for executing work inside or outside of the Angular zone.\n\t     *\n\t     * The most common use of this service is to optimize performance when starting a work consisting of\n\t     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n\t     * Angular. Such tasks can be kicked off via {\\@link runOutsideAngular} and if needed, these tasks\n\t     * can reenter the Angular zone via {\\@link run}.\n\t     *\n\t     * <!-- TODO: add/fix links to:\n\t     *   - docs explaining zones and the use of zones in Angular and change-detection\n\t     *   - link to runOutsideAngular/run (throughout this file!)\n\t     *   -->\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * import {Component, NgZone} from '\\@angular/core';\n\t     * import {NgIf} from '\\@angular/common';\n\t     *\n\t     * \\@Component({\n\t     *   selector: 'ng-zone-demo'.\n\t     *   template: `\n\t     *     <h2>Demo: NgZone</h2>\n\t     *\n\t     *     <p>Progress: {{progress}}%</p>\n\t     *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n\t     *\n\t     *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n\t     *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n\t     *   `,\n\t     * })\n\t     * export class NgZoneDemo {\n\t     *   progress: number = 0;\n\t     *   label: string;\n\t     *\n\t     *   constructor(private _ngZone: NgZone) {}\n\t     *\n\t     *   // Loop inside the Angular zone\n\t     *   // so the UI DOES refresh after each setTimeout cycle\n\t     *   processWithinAngularZone() {\n\t     *     this.label = 'inside';\n\t     *     this.progress = 0;\n\t     *     this._increaseProgress(() => console.log('Inside Done!'));\n\t     *   }\n\t     *\n\t     *   // Loop outside of the Angular zone\n\t     *   // so the UI DOES NOT refresh after each setTimeout cycle\n\t     *   processOutsideOfAngularZone() {\n\t     *     this.label = 'outside';\n\t     *     this.progress = 0;\n\t     *     this._ngZone.runOutsideAngular(() => {\n\t     *       this._increaseProgress(() => {\n\t     *       // reenter the Angular zone and display done\n\t     *       this._ngZone.run(() => {console.log('Outside Done!') });\n\t     *     }}));\n\t     *   }\n\t     *\n\t     *   _increaseProgress(doneCallback: () => void) {\n\t     *     this.progress += 1;\n\t     *     console.log(`Current progress: ${this.progress}%`);\n\t     *\n\t     *     if (this.progress < 100) {\n\t     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n\t     *     } else {\n\t     *       doneCallback();\n\t     *     }\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var NgZone = (function () {\n\t        /**\n\t         * @param {?} __0\n\t         */\n\t        function NgZone(_a) {\n\t            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n\t            this._hasPendingMicrotasks = false;\n\t            this._hasPendingMacrotasks = false;\n\t            this._isStable = true;\n\t            this._nesting = 0;\n\t            this._onUnstable = new EventEmitter(false);\n\t            this._onMicrotaskEmpty = new EventEmitter(false);\n\t            this._onStable = new EventEmitter(false);\n\t            this._onErrorEvents = new EventEmitter(false);\n\t            if (typeof Zone == 'undefined') {\n\t                throw new Error('Angular requires Zone.js prolyfill.');\n\t            }\n\t            Zone.assertZonePatched();\n\t            this.outer = this.inner = Zone.current;\n\t            if (Zone['wtfZoneSpec']) {\n\t                this.inner = this.inner.fork(Zone['wtfZoneSpec']);\n\t            }\n\t            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n\t                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);\n\t            }\n\t            this.forkInnerZoneWithAngularBehavior();\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.assertInAngularZone = function () {\n\t            if (!NgZone.isInAngularZone()) {\n\t                throw new Error('Expected to be in Angular Zone, but it is not!');\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.assertNotInAngularZone = function () {\n\t            if (NgZone.isInAngularZone()) {\n\t                throw new Error('Expected to not be in Angular Zone, but it is!');\n\t            }\n\t        };\n\t        /**\n\t         * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n\t         * the function.\n\t         *\n\t         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n\t         * outside of the Angular zone (typically started via {\\@link runOutsideAngular}).\n\t         *\n\t         * Any future tasks or microtasks scheduled from within this function will continue executing from\n\t         * within the Angular zone.\n\t         *\n\t         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.run = function (fn) { return this.inner.run(fn); };\n\t        /**\n\t         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n\t         * rethrown.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };\n\t        /**\n\t         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n\t         * the function.\n\t         *\n\t         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that\n\t         * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n\t         *\n\t         * Any future tasks or microtasks scheduled from within this function will continue executing from\n\t         * outside of the Angular zone.\n\t         *\n\t         * Use {\\@link run} to reenter the Angular zone and do work that updates the application model.\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };\n\t        Object.defineProperty(NgZone.prototype, \"onUnstable\", {\n\t            /**\n\t             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._onUnstable; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"onMicrotaskEmpty\", {\n\t            /**\n\t             * Notifies when there is no more microtasks enqueue in the current VM Turn.\n\t             * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n\t             * For this reason this event can fire multiple times per VM Turn.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._onMicrotaskEmpty; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"onStable\", {\n\t            /**\n\t             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n\t             * implies we are about to relinquish VM turn.\n\t             * This event gets called just once.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._onStable; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"onError\", {\n\t            /**\n\t             * Notify that an error has been delivered.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._onErrorEvents; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"isStable\", {\n\t            /**\n\t             * Whether there are no outstanding microtasks or macrotasks.\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._isStable; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"hasPendingMicrotasks\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._hasPendingMicrotasks; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgZone.prototype, \"hasPendingMacrotasks\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._hasPendingMacrotasks; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.checkStable = function () {\n\t            var _this = this;\n\t            if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {\n\t                try {\n\t                    this._nesting++;\n\t                    this._onMicrotaskEmpty.emit(null);\n\t                }\n\t                finally {\n\t                    this._nesting--;\n\t                    if (!this._hasPendingMicrotasks) {\n\t                        try {\n\t                            this.runOutsideAngular(function () { return _this._onStable.emit(null); });\n\t                        }\n\t                        finally {\n\t                            this._isStable = true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {\n\t            var _this = this;\n\t            this.inner = this.inner.fork({\n\t                name: 'angular',\n\t                properties: /** @type {?} */ ({ 'isAngularZone': true }),\n\t                onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n\t                    try {\n\t                        _this.onEnter();\n\t                        return delegate.invokeTask(target, task, applyThis, applyArgs);\n\t                    }\n\t                    finally {\n\t                        _this.onLeave();\n\t                    }\n\t                },\n\t                onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n\t                    try {\n\t                        _this.onEnter();\n\t                        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n\t                    }\n\t                    finally {\n\t                        _this.onLeave();\n\t                    }\n\t                },\n\t                onHasTask: function (delegate, current, target, hasTaskState) {\n\t                    delegate.hasTask(target, hasTaskState);\n\t                    if (current === target) {\n\t                        // We are only interested in hasTask events which originate from our zone\n\t                        // (A child hasTask event is not interesting to us)\n\t                        if (hasTaskState.change == 'microTask') {\n\t                            _this.setHasMicrotask(hasTaskState.microTask);\n\t                        }\n\t                        else if (hasTaskState.change == 'macroTask') {\n\t                            _this.setHasMacrotask(hasTaskState.macroTask);\n\t                        }\n\t                    }\n\t                },\n\t                onHandleError: function (delegate, current, target, error) {\n\t                    delegate.handleError(target, error);\n\t                    _this.triggerError(error);\n\t                    return false;\n\t                }\n\t            });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.onEnter = function () {\n\t            this._nesting++;\n\t            if (this._isStable) {\n\t                this._isStable = false;\n\t                this._onUnstable.emit(null);\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.onLeave = function () {\n\t            this._nesting--;\n\t            this.checkStable();\n\t        };\n\t        /**\n\t         * @param {?} hasMicrotasks\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {\n\t            this._hasPendingMicrotasks = hasMicrotasks;\n\t            this.checkStable();\n\t        };\n\t        /**\n\t         * @param {?} hasMacrotasks\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };\n\t        /**\n\t         * @param {?} error\n\t         * @return {?}\n\t         */\n\t        NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };\n\t        return NgZone;\n\t    }());\n\t\n\t    var AnimationQueue = (function () {\n\t        /**\n\t         * @param {?} _zone\n\t         */\n\t        function AnimationQueue(_zone) {\n\t            this._zone = _zone;\n\t            this.entries = [];\n\t        }\n\t        /**\n\t         * @param {?} player\n\t         * @return {?}\n\t         */\n\t        AnimationQueue.prototype.enqueue = function (player) { this.entries.push(player); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationQueue.prototype.flush = function () {\n\t            var _this = this;\n\t            // given that each animation player may set aside\n\t            // microtasks and rely on DOM-based events, this\n\t            // will cause Angular to run change detection after\n\t            // each request. This sidesteps the issue. If a user\n\t            // hooks into an animation via (@anim.start) or (@anim.done)\n\t            // then those methods will automatically trigger change\n\t            // detection by wrapping themselves inside of a zone\n\t            if (this.entries.length) {\n\t                this._zone.runOutsideAngular(function () {\n\t                    // this code is wrapped into a single promise such that the\n\t                    // onStart and onDone player callbacks are triggered outside\n\t                    // of the digest cycle of animations\n\t                    Promise.resolve(null).then(function () { return _this._triggerAnimations(); });\n\t                });\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationQueue.prototype._triggerAnimations = function () {\n\t            NgZone.assertNotInAngularZone();\n\t            while (this.entries.length) {\n\t                var /** @type {?} */ player = this.entries.shift();\n\t                // in the event that an animation throws an error then we do\n\t                // not want to re-run animations on any previous animations\n\t                // if they have already been kicked off beforehand\n\t                if (!player.hasStarted()) {\n\t                    player.play();\n\t                }\n\t            }\n\t        };\n\t        AnimationQueue.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        AnimationQueue.ctorParameters = function () { return [\n\t            { type: NgZone, },\n\t        ]; };\n\t        return AnimationQueue;\n\t    }());\n\t\n\t    var DefaultIterableDifferFactory = (function () {\n\t        function DefaultIterableDifferFactory() {\n\t        }\n\t        /**\n\t         * @param {?} obj\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n\t        /**\n\t         * @param {?} cdRef\n\t         * @param {?=} trackByFn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {\n\t            return new DefaultIterableDiffer(trackByFn);\n\t        };\n\t        return DefaultIterableDifferFactory;\n\t    }());\n\t    var /** @type {?} */ trackByIdentity = function (index, item) { return item; };\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var DefaultIterableDiffer = (function () {\n\t        /**\n\t         * @param {?=} _trackByFn\n\t         */\n\t        function DefaultIterableDiffer(_trackByFn) {\n\t            this._trackByFn = _trackByFn;\n\t            this._length = null;\n\t            this._collection = null;\n\t            this._linkedRecords = null;\n\t            this._unlinkedRecords = null;\n\t            this._previousItHead = null;\n\t            this._itHead = null;\n\t            this._itTail = null;\n\t            this._additionsHead = null;\n\t            this._additionsTail = null;\n\t            this._movesHead = null;\n\t            this._movesTail = null;\n\t            this._removalsHead = null;\n\t            this._removalsTail = null;\n\t            this._identityChangesHead = null;\n\t            this._identityChangesTail = null;\n\t            this._trackByFn = this._trackByFn || trackByIdentity;\n\t        }\n\t        Object.defineProperty(DefaultIterableDiffer.prototype, \"collection\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._collection; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DefaultIterableDiffer.prototype, \"length\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._itHead; record !== null; record = record._next) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n\t            var /** @type {?} */ nextIt = this._itHead;\n\t            var /** @type {?} */ nextRemove = this._removalsHead;\n\t            var /** @type {?} */ addRemoveOffset = 0;\n\t            var /** @type {?} */ moveOffsets = null;\n\t            while (nextIt || nextRemove) {\n\t                // Figure out which is the next record to process\n\t                // Order: remove, add, move\n\t                var /** @type {?} */ record = !nextRemove ||\n\t                    nextIt &&\n\t                        nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n\t                    nextIt :\n\t                    nextRemove;\n\t                var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n\t                var /** @type {?} */ currentIndex = record.currentIndex;\n\t                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n\t                if (record === nextRemove) {\n\t                    addRemoveOffset--;\n\t                    nextRemove = nextRemove._nextRemoved;\n\t                }\n\t                else {\n\t                    nextIt = nextIt._next;\n\t                    if (record.previousIndex == null) {\n\t                        addRemoveOffset++;\n\t                    }\n\t                    else {\n\t                        // INVARIANT:  currentIndex < previousIndex\n\t                        if (!moveOffsets)\n\t                            moveOffsets = [];\n\t                        var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n\t                        var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;\n\t                        if (localMovePreviousIndex != localCurrentIndex) {\n\t                            for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n\t                                var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n\t                                var /** @type {?} */ index = offset + i;\n\t                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n\t                                    moveOffsets[i] = offset + 1;\n\t                                }\n\t                            }\n\t                            var /** @type {?} */ previousIndex = record.previousIndex;\n\t                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n\t                        }\n\t                    }\n\t                }\n\t                if (adjPreviousIndex !== currentIndex) {\n\t                    fn(record, adjPreviousIndex, currentIndex);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._movesHead; record !== null; record = record._nextMoved) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} collection\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.diff = function (collection) {\n\t            if (isBlank(collection))\n\t                collection = [];\n\t            if (!isListLikeIterable(collection)) {\n\t                throw new Error(\"Error trying to diff '\" + collection + \"'\");\n\t            }\n\t            if (this.check(collection)) {\n\t                return this;\n\t            }\n\t            else {\n\t                return null;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.onDestroy = function () { };\n\t        /**\n\t         * @param {?} collection\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.check = function (collection) {\n\t            var _this = this;\n\t            this._reset();\n\t            var /** @type {?} */ record = this._itHead;\n\t            var /** @type {?} */ mayBeDirty = false;\n\t            var /** @type {?} */ index;\n\t            var /** @type {?} */ item;\n\t            var /** @type {?} */ itemTrackBy;\n\t            if (Array.isArray(collection)) {\n\t                var /** @type {?} */ list = collection;\n\t                this._length = collection.length;\n\t                for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {\n\t                    item = list[index_1];\n\t                    itemTrackBy = this._trackByFn(index_1, item);\n\t                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n\t                        record = this._mismatch(record, item, itemTrackBy, index_1);\n\t                        mayBeDirty = true;\n\t                    }\n\t                    else {\n\t                        if (mayBeDirty) {\n\t                            // TODO(misko): can we limit this to duplicates only?\n\t                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n\t                        }\n\t                        if (!looseIdentical(record.item, item))\n\t                            this._addIdentityChange(record, item);\n\t                    }\n\t                    record = record._next;\n\t                }\n\t            }\n\t            else {\n\t                index = 0;\n\t                iterateListLike(collection, function (item /** TODO #9100 */) {\n\t                    itemTrackBy = _this._trackByFn(index, item);\n\t                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n\t                        record = _this._mismatch(record, item, itemTrackBy, index);\n\t                        mayBeDirty = true;\n\t                    }\n\t                    else {\n\t                        if (mayBeDirty) {\n\t                            // TODO(misko): can we limit this to duplicates only?\n\t                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n\t                        }\n\t                        if (!looseIdentical(record.item, item))\n\t                            _this._addIdentityChange(record, item);\n\t                    }\n\t                    record = record._next;\n\t                    index++;\n\t                });\n\t                this._length = index;\n\t            }\n\t            this._truncate(record);\n\t            this._collection = collection;\n\t            return this.isDirty;\n\t        };\n\t        Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._additionsHead !== null || this._movesHead !== null ||\n\t                    this._removalsHead !== null || this._identityChangesHead !== null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * Reset the state of the change objects to show no changes. This means set previousKey to\n\t         * currentKey, and clear all of the queues (additions, moves, removals).\n\t         * Set the previousIndexes of moved and added items to their currentIndexes\n\t         * Reset the list of additions, moves and removals\n\t         *\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._reset = function () {\n\t            if (this.isDirty) {\n\t                var /** @type {?} */ record = void 0;\n\t                var /** @type {?} */ nextRecord = void 0;\n\t                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n\t                    record._nextPrevious = record._next;\n\t                }\n\t                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t                    record.previousIndex = record.currentIndex;\n\t                }\n\t                this._additionsHead = this._additionsTail = null;\n\t                for (record = this._movesHead; record !== null; record = nextRecord) {\n\t                    record.previousIndex = record.currentIndex;\n\t                    nextRecord = record._nextMoved;\n\t                }\n\t                this._movesHead = this._movesTail = null;\n\t                this._removalsHead = this._removalsTail = null;\n\t                this._identityChangesHead = this._identityChangesTail = null;\n\t            }\n\t        };\n\t        /**\n\t         * This is the core function which handles differences between collections.\n\t         *\n\t         * - `record` is the record which we saw at this position last time. If null then it is a new\n\t         *   item.\n\t         * - `item` is the current item in the collection\n\t         * - `index` is the position of the item in the collection\n\t         *\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} item\n\t         * @param {?} itemTrackBy\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n\t            // The previous record after which we will append the current one.\n\t            var /** @type {?} */ previousRecord;\n\t            if (record === null) {\n\t                previousRecord = this._itTail;\n\t            }\n\t            else {\n\t                previousRecord = record._prev;\n\t                // Remove the record from the collection since we know it does not match the item.\n\t                this._remove(record);\n\t            }\n\t            // Attempt to see if we have seen the item before.\n\t            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n\t            if (record !== null) {\n\t                // We have seen this before, we need to move it forward in the collection.\n\t                // But first we need to check if identity changed, so we can update in view if necessary\n\t                if (!looseIdentical(record.item, item))\n\t                    this._addIdentityChange(record, item);\n\t                this._moveAfter(record, previousRecord, index);\n\t            }\n\t            else {\n\t                // Never seen it, check evicted list.\n\t                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n\t                if (record !== null) {\n\t                    // It is an item which we have evicted earlier: reinsert it back into the list.\n\t                    // But first we need to check if identity changed, so we can update in view if necessary\n\t                    if (!looseIdentical(record.item, item))\n\t                        this._addIdentityChange(record, item);\n\t                    this._reinsertAfter(record, previousRecord, index);\n\t                }\n\t                else {\n\t                    // It is a new item: add it.\n\t                    record =\n\t                        this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);\n\t                }\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n\t         *\n\t         * Use case: `[a, a]` => `[b, a, a]`\n\t         *\n\t         * If we did not have this check then the insertion of `b` would:\n\t         *   1) evict first `a`\n\t         *   2) insert `b` at `0` index.\n\t         *   3) leave `a` at index `1` as is. <-- this is wrong!\n\t         *   3) reinsert `a` at index 2. <-- this is wrong!\n\t         *\n\t         * The correct behavior is:\n\t         *   1) evict first `a`\n\t         *   2) insert `b` at `0` index.\n\t         *   3) reinsert `a` at index 1.\n\t         *   3) move `a` at from `1` to `2`.\n\t         *\n\t         *\n\t         * Double check that we have not evicted a duplicate item. We need to check if the item type may\n\t         * have already been removed:\n\t         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n\t         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n\t         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n\t         * at the end.\n\t         *\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} item\n\t         * @param {?} itemTrackBy\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n\t            var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n\t            if (reinsertRecord !== null) {\n\t                record = this._reinsertAfter(reinsertRecord, record._prev, index);\n\t            }\n\t            else if (record.currentIndex != index) {\n\t                record.currentIndex = index;\n\t                this._addToMoves(record, index);\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * Get rid of any excess {\\@link CollectionChangeRecord}s from the previous collection\n\t         *\n\t         * - `record` The first excess {\\@link CollectionChangeRecord}.\n\t         *\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._truncate = function (record) {\n\t            // Anything after that needs to be removed;\n\t            while (record !== null) {\n\t                var /** @type {?} */ nextRecord = record._next;\n\t                this._addToRemovals(this._unlink(record));\n\t                record = nextRecord;\n\t            }\n\t            if (this._unlinkedRecords !== null) {\n\t                this._unlinkedRecords.clear();\n\t            }\n\t            if (this._additionsTail !== null) {\n\t                this._additionsTail._nextAdded = null;\n\t            }\n\t            if (this._movesTail !== null) {\n\t                this._movesTail._nextMoved = null;\n\t            }\n\t            if (this._itTail !== null) {\n\t                this._itTail._next = null;\n\t            }\n\t            if (this._removalsTail !== null) {\n\t                this._removalsTail._nextRemoved = null;\n\t            }\n\t            if (this._identityChangesTail !== null) {\n\t                this._identityChangesTail._nextIdentityChange = null;\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} prevRecord\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n\t            if (this._unlinkedRecords !== null) {\n\t                this._unlinkedRecords.remove(record);\n\t            }\n\t            var /** @type {?} */ prev = record._prevRemoved;\n\t            var /** @type {?} */ next = record._nextRemoved;\n\t            if (prev === null) {\n\t                this._removalsHead = next;\n\t            }\n\t            else {\n\t                prev._nextRemoved = next;\n\t            }\n\t            if (next === null) {\n\t                this._removalsTail = prev;\n\t            }\n\t            else {\n\t                next._prevRemoved = prev;\n\t            }\n\t            this._insertAfter(record, prevRecord, index);\n\t            this._addToMoves(record, index);\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} prevRecord\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n\t            this._unlink(record);\n\t            this._insertAfter(record, prevRecord, index);\n\t            this._addToMoves(record, index);\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} prevRecord\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n\t            this._insertAfter(record, prevRecord, index);\n\t            if (this._additionsTail === null) {\n\t                // todo(vicb)\n\t                // assert(this._additionsHead === null);\n\t                this._additionsTail = this._additionsHead = record;\n\t            }\n\t            else {\n\t                // todo(vicb)\n\t                // assert(_additionsTail._nextAdded === null);\n\t                // assert(record._nextAdded === null);\n\t                this._additionsTail = this._additionsTail._nextAdded = record;\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} prevRecord\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n\t            // todo(vicb)\n\t            // assert(record != prevRecord);\n\t            // assert(record._next === null);\n\t            // assert(record._prev === null);\n\t            var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;\n\t            // todo(vicb)\n\t            // assert(next != record);\n\t            // assert(prevRecord != record);\n\t            record._next = next;\n\t            record._prev = prevRecord;\n\t            if (next === null) {\n\t                this._itTail = record;\n\t            }\n\t            else {\n\t                next._prev = record;\n\t            }\n\t            if (prevRecord === null) {\n\t                this._itHead = record;\n\t            }\n\t            else {\n\t                prevRecord._next = record;\n\t            }\n\t            if (this._linkedRecords === null) {\n\t                this._linkedRecords = new _DuplicateMap();\n\t            }\n\t            this._linkedRecords.put(record);\n\t            record.currentIndex = index;\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._remove = function (record) {\n\t            return this._addToRemovals(this._unlink(record));\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._unlink = function (record) {\n\t            if (this._linkedRecords !== null) {\n\t                this._linkedRecords.remove(record);\n\t            }\n\t            var /** @type {?} */ prev = record._prev;\n\t            var /** @type {?} */ next = record._next;\n\t            // todo(vicb)\n\t            // assert((record._prev = null) === null);\n\t            // assert((record._next = null) === null);\n\t            if (prev === null) {\n\t                this._itHead = next;\n\t            }\n\t            else {\n\t                prev._next = next;\n\t            }\n\t            if (next === null) {\n\t                this._itTail = prev;\n\t            }\n\t            else {\n\t                next._prev = prev;\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} toIndex\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n\t            // todo(vicb)\n\t            // assert(record._nextMoved === null);\n\t            if (record.previousIndex === toIndex) {\n\t                return record;\n\t            }\n\t            if (this._movesTail === null) {\n\t                // todo(vicb)\n\t                // assert(_movesHead === null);\n\t                this._movesTail = this._movesHead = record;\n\t            }\n\t            else {\n\t                // todo(vicb)\n\t                // assert(_movesTail._nextMoved === null);\n\t                this._movesTail = this._movesTail._nextMoved = record;\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n\t            if (this._unlinkedRecords === null) {\n\t                this._unlinkedRecords = new _DuplicateMap();\n\t            }\n\t            this._unlinkedRecords.put(record);\n\t            record.currentIndex = null;\n\t            record._nextRemoved = null;\n\t            if (this._removalsTail === null) {\n\t                // todo(vicb)\n\t                // assert(_removalsHead === null);\n\t                this._removalsTail = this._removalsHead = record;\n\t                record._prevRemoved = null;\n\t            }\n\t            else {\n\t                // todo(vicb)\n\t                // assert(_removalsTail._nextRemoved === null);\n\t                // assert(record._nextRemoved === null);\n\t                record._prevRemoved = this._removalsTail;\n\t                this._removalsTail = this._removalsTail._nextRemoved = record;\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @param {?} item\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n\t            record.item = item;\n\t            if (this._identityChangesTail === null) {\n\t                this._identityChangesTail = this._identityChangesHead = record;\n\t            }\n\t            else {\n\t                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n\t            }\n\t            return record;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DefaultIterableDiffer.prototype.toString = function () {\n\t            var /** @type {?} */ list = [];\n\t            this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });\n\t            var /** @type {?} */ previous = [];\n\t            this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });\n\t            var /** @type {?} */ additions = [];\n\t            this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });\n\t            var /** @type {?} */ moves = [];\n\t            this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });\n\t            var /** @type {?} */ removals = [];\n\t            this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });\n\t            var /** @type {?} */ identityChanges = [];\n\t            this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });\n\t            return 'collection: ' + list.join(', ') + '\\n' +\n\t                'previous: ' + previous.join(', ') + '\\n' +\n\t                'additions: ' + additions.join(', ') + '\\n' +\n\t                'moves: ' + moves.join(', ') + '\\n' +\n\t                'removals: ' + removals.join(', ') + '\\n' +\n\t                'identityChanges: ' + identityChanges.join(', ') + '\\n';\n\t        };\n\t        return DefaultIterableDiffer;\n\t    }());\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var CollectionChangeRecord = (function () {\n\t        /**\n\t         * @param {?} item\n\t         * @param {?} trackById\n\t         */\n\t        function CollectionChangeRecord(item, trackById) {\n\t            this.item = item;\n\t            this.trackById = trackById;\n\t            this.currentIndex = null;\n\t            this.previousIndex = null;\n\t            /** @internal */\n\t            this._nextPrevious = null;\n\t            /** @internal */\n\t            this._prev = null;\n\t            /** @internal */\n\t            this._next = null;\n\t            /** @internal */\n\t            this._prevDup = null;\n\t            /** @internal */\n\t            this._nextDup = null;\n\t            /** @internal */\n\t            this._prevRemoved = null;\n\t            /** @internal */\n\t            this._nextRemoved = null;\n\t            /** @internal */\n\t            this._nextAdded = null;\n\t            /** @internal */\n\t            this._nextMoved = null;\n\t            /** @internal */\n\t            this._nextIdentityChange = null;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        CollectionChangeRecord.prototype.toString = function () {\n\t            return this.previousIndex === this.currentIndex ? stringify(this.item) :\n\t                stringify(this.item) + '[' +\n\t                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n\t        };\n\t        return CollectionChangeRecord;\n\t    }());\n\t    var _DuplicateItemRecordList = (function () {\n\t        function _DuplicateItemRecordList() {\n\t            /** @internal */\n\t            this._head = null;\n\t            /** @internal */\n\t            this._tail = null;\n\t        }\n\t        /**\n\t         * Append the record to the list of duplicates.\n\t         *\n\t         * Note: by design all records in the list of duplicates hold the same value in record.item.\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        _DuplicateItemRecordList.prototype.add = function (record) {\n\t            if (this._head === null) {\n\t                this._head = this._tail = record;\n\t                record._nextDup = null;\n\t                record._prevDup = null;\n\t            }\n\t            else {\n\t                // todo(vicb)\n\t                // assert(record.item ==  _head.item ||\n\t                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n\t                this._tail._nextDup = record;\n\t                record._prevDup = this._tail;\n\t                record._nextDup = null;\n\t                this._tail = record;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} trackById\n\t         * @param {?} afterIndex\n\t         * @return {?}\n\t         */\n\t        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._head; record !== null; record = record._nextDup) {\n\t                if ((afterIndex === null || afterIndex < record.currentIndex) &&\n\t                    looseIdentical(record.trackById, trackById)) {\n\t                    return record;\n\t                }\n\t            }\n\t            return null;\n\t        };\n\t        /**\n\t         * Remove one {\\@link CollectionChangeRecord} from the list of duplicates.\n\t         *\n\t         * Returns whether the list of duplicates is empty.\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        _DuplicateItemRecordList.prototype.remove = function (record) {\n\t            // todo(vicb)\n\t            // assert(() {\n\t            //  // verify that the record being removed is in the list.\n\t            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {\n\t            //    if (identical(cursor, record)) return true;\n\t            //  }\n\t            //  return false;\n\t            //});\n\t            var /** @type {?} */ prev = record._prevDup;\n\t            var /** @type {?} */ next = record._nextDup;\n\t            if (prev === null) {\n\t                this._head = next;\n\t            }\n\t            else {\n\t                prev._nextDup = next;\n\t            }\n\t            if (next === null) {\n\t                this._tail = prev;\n\t            }\n\t            else {\n\t                next._prevDup = prev;\n\t            }\n\t            return this._head === null;\n\t        };\n\t        return _DuplicateItemRecordList;\n\t    }());\n\t    var _DuplicateMap = (function () {\n\t        function _DuplicateMap() {\n\t            this.map = new Map();\n\t        }\n\t        /**\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        _DuplicateMap.prototype.put = function (record) {\n\t            var /** @type {?} */ key = record.trackById;\n\t            var /** @type {?} */ duplicates = this.map.get(key);\n\t            if (!duplicates) {\n\t                duplicates = new _DuplicateItemRecordList();\n\t                this.map.set(key, duplicates);\n\t            }\n\t            duplicates.add(record);\n\t        };\n\t        /**\n\t         * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we\n\t         * have already iterated over, we use the afterIndex to pretend it is not there.\n\t         *\n\t         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n\t         * have any more `a`s needs to return the last `a` not the first or second.\n\t         * @param {?} trackById\n\t         * @param {?=} afterIndex\n\t         * @return {?}\n\t         */\n\t        _DuplicateMap.prototype.get = function (trackById, afterIndex) {\n\t            if (afterIndex === void 0) { afterIndex = null; }\n\t            var /** @type {?} */ key = trackById;\n\t            var /** @type {?} */ recordList = this.map.get(key);\n\t            return recordList ? recordList.get(trackById, afterIndex) : null;\n\t        };\n\t        /**\n\t         * Removes a {\\@link CollectionChangeRecord} from the list of duplicates.\n\t         *\n\t         * The list of duplicates also is removed from the map if it gets empty.\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        _DuplicateMap.prototype.remove = function (record) {\n\t            var /** @type {?} */ key = record.trackById;\n\t            var /** @type {?} */ recordList = this.map.get(key);\n\t            // Remove the list of duplicates when it gets empty\n\t            if (recordList.remove(record)) {\n\t                this.map.delete(key);\n\t            }\n\t            return record;\n\t        };\n\t        Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.map.size === 0; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };\n\t        return _DuplicateMap;\n\t    }());\n\t    /**\n\t     * @param {?} item\n\t     * @param {?} addRemoveOffset\n\t     * @param {?} moveOffsets\n\t     * @return {?}\n\t     */\n\t    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n\t        var /** @type {?} */ previousIndex = item.previousIndex;\n\t        if (previousIndex === null)\n\t            return previousIndex;\n\t        var /** @type {?} */ moveOffset = 0;\n\t        if (moveOffsets && previousIndex < moveOffsets.length) {\n\t            moveOffset = moveOffsets[previousIndex];\n\t        }\n\t        return previousIndex + addRemoveOffset + moveOffset;\n\t    }\n\t\n\t    var DefaultKeyValueDifferFactory = (function () {\n\t        function DefaultKeyValueDifferFactory() {\n\t        }\n\t        /**\n\t         * @param {?} obj\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n\t        /**\n\t         * @param {?} cdRef\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };\n\t        return DefaultKeyValueDifferFactory;\n\t    }());\n\t    var DefaultKeyValueDiffer = (function () {\n\t        function DefaultKeyValueDiffer() {\n\t            this._records = new Map();\n\t            this._mapHead = null;\n\t            this._previousMapHead = null;\n\t            this._changesHead = null;\n\t            this._changesTail = null;\n\t            this._additionsHead = null;\n\t            this._additionsTail = null;\n\t            this._removalsHead = null;\n\t            this._removalsTail = null;\n\t        }\n\t        Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._additionsHead !== null || this._changesHead !== null ||\n\t                    this._removalsHead !== null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._mapHead; record !== null; record = record._next) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n\t            var /** @type {?} */ record;\n\t            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n\t                fn(record);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} map\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.diff = function (map) {\n\t            if (!map) {\n\t                map = new Map();\n\t            }\n\t            else if (!(map instanceof Map || isJsObject(map))) {\n\t                throw new Error(\"Error trying to diff '\" + map + \"'\");\n\t            }\n\t            return this.check(map) ? this : null;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n\t        /**\n\t         * @param {?} map\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.check = function (map) {\n\t            var _this = this;\n\t            this._reset();\n\t            var /** @type {?} */ records = this._records;\n\t            var /** @type {?} */ oldSeqRecord = this._mapHead;\n\t            var /** @type {?} */ lastOldSeqRecord = null;\n\t            var /** @type {?} */ lastNewSeqRecord = null;\n\t            var /** @type {?} */ seqChanged = false;\n\t            this._forEach(map, function (value, key) {\n\t                var /** @type {?} */ newSeqRecord;\n\t                if (oldSeqRecord && key === oldSeqRecord.key) {\n\t                    newSeqRecord = oldSeqRecord;\n\t                    _this._maybeAddToChanges(newSeqRecord, value);\n\t                }\n\t                else {\n\t                    seqChanged = true;\n\t                    if (oldSeqRecord !== null) {\n\t                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);\n\t                        _this._addToRemovals(oldSeqRecord);\n\t                    }\n\t                    if (records.has(key)) {\n\t                        newSeqRecord = records.get(key);\n\t                        _this._maybeAddToChanges(newSeqRecord, value);\n\t                    }\n\t                    else {\n\t                        newSeqRecord = new KeyValueChangeRecord(key);\n\t                        records.set(key, newSeqRecord);\n\t                        newSeqRecord.currentValue = value;\n\t                        _this._addToAdditions(newSeqRecord);\n\t                    }\n\t                }\n\t                if (seqChanged) {\n\t                    if (_this._isInRemovals(newSeqRecord)) {\n\t                        _this._removeFromRemovals(newSeqRecord);\n\t                    }\n\t                    if (lastNewSeqRecord == null) {\n\t                        _this._mapHead = newSeqRecord;\n\t                    }\n\t                    else {\n\t                        lastNewSeqRecord._next = newSeqRecord;\n\t                    }\n\t                }\n\t                lastOldSeqRecord = oldSeqRecord;\n\t                lastNewSeqRecord = newSeqRecord;\n\t                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;\n\t            });\n\t            this._truncate(lastOldSeqRecord, oldSeqRecord);\n\t            return this.isDirty;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._reset = function () {\n\t            if (this.isDirty) {\n\t                var /** @type {?} */ record = void 0;\n\t                // Record the state of the mapping\n\t                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {\n\t                    record._nextPrevious = record._next;\n\t                }\n\t                for (record = this._changesHead; record !== null; record = record._nextChanged) {\n\t                    record.previousValue = record.currentValue;\n\t                }\n\t                for (record = this._additionsHead; record != null; record = record._nextAdded) {\n\t                    record.previousValue = record.currentValue;\n\t                }\n\t                this._changesHead = this._changesTail = null;\n\t                this._additionsHead = this._additionsTail = null;\n\t                this._removalsHead = this._removalsTail = null;\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} lastRecord\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {\n\t            while (record !== null) {\n\t                if (lastRecord === null) {\n\t                    this._mapHead = null;\n\t                }\n\t                else {\n\t                    lastRecord._next = null;\n\t                }\n\t                var /** @type {?} */ nextRecord = record._next;\n\t                this._addToRemovals(record);\n\t                lastRecord = record;\n\t                record = nextRecord;\n\t            }\n\t            for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {\n\t                rec.previousValue = rec.currentValue;\n\t                rec.currentValue = null;\n\t                this._records.delete(rec.key);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} record\n\t         * @param {?} newValue\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n\t            if (!looseIdentical(newValue, record.currentValue)) {\n\t                record.previousValue = record.currentValue;\n\t                record.currentValue = newValue;\n\t                this._addToChanges(record);\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {\n\t            return record === this._removalsHead || record._nextRemoved !== null ||\n\t                record._prevRemoved !== null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {\n\t            if (this._removalsHead === null) {\n\t                this._removalsHead = this._removalsTail = record;\n\t            }\n\t            else {\n\t                this._removalsTail._nextRemoved = record;\n\t                record._prevRemoved = this._removalsTail;\n\t                this._removalsTail = record;\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} prev\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {\n\t            var /** @type {?} */ next = record._next;\n\t            if (prev === null) {\n\t                this._mapHead = next;\n\t            }\n\t            else {\n\t                prev._next = next;\n\t            }\n\t            record._next = null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {\n\t            var /** @type {?} */ prev = record._prevRemoved;\n\t            var /** @type {?} */ next = record._nextRemoved;\n\t            if (prev === null) {\n\t                this._removalsHead = next;\n\t            }\n\t            else {\n\t                prev._nextRemoved = next;\n\t            }\n\t            if (next === null) {\n\t                this._removalsTail = prev;\n\t            }\n\t            else {\n\t                next._prevRemoved = prev;\n\t            }\n\t            record._prevRemoved = record._nextRemoved = null;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n\t            if (this._additionsHead === null) {\n\t                this._additionsHead = this._additionsTail = record;\n\t            }\n\t            else {\n\t                this._additionsTail._nextAdded = record;\n\t                this._additionsTail = record;\n\t            }\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} record\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n\t            if (this._changesHead === null) {\n\t                this._changesHead = this._changesTail = record;\n\t            }\n\t            else {\n\t                this._changesTail._nextChanged = record;\n\t                this._changesTail = record;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype.toString = function () {\n\t            var /** @type {?} */ items = [];\n\t            var /** @type {?} */ previous = [];\n\t            var /** @type {?} */ changes = [];\n\t            var /** @type {?} */ additions = [];\n\t            var /** @type {?} */ removals = [];\n\t            var /** @type {?} */ record;\n\t            for (record = this._mapHead; record !== null; record = record._next) {\n\t                items.push(stringify(record));\n\t            }\n\t            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n\t                previous.push(stringify(record));\n\t            }\n\t            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n\t                changes.push(stringify(record));\n\t            }\n\t            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n\t                additions.push(stringify(record));\n\t            }\n\t            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n\t                removals.push(stringify(record));\n\t            }\n\t            return 'map: ' + items.join(', ') + '\\n' +\n\t                'previous: ' + previous.join(', ') + '\\n' +\n\t                'additions: ' + additions.join(', ') + '\\n' +\n\t                'changes: ' + changes.join(', ') + '\\n' +\n\t                'removals: ' + removals.join(', ') + '\\n';\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @param {?} obj\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n\t            if (obj instanceof Map) {\n\t                obj.forEach(fn);\n\t            }\n\t            else {\n\t                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n\t            }\n\t        };\n\t        return DefaultKeyValueDiffer;\n\t    }());\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var KeyValueChangeRecord = (function () {\n\t        /**\n\t         * @param {?} key\n\t         */\n\t        function KeyValueChangeRecord(key) {\n\t            this.key = key;\n\t            this.previousValue = null;\n\t            this.currentValue = null;\n\t            /** @internal */\n\t            this._nextPrevious = null;\n\t            /** @internal */\n\t            this._next = null;\n\t            /** @internal */\n\t            this._nextAdded = null;\n\t            /** @internal */\n\t            this._nextRemoved = null;\n\t            /** @internal */\n\t            this._prevRemoved = null;\n\t            /** @internal */\n\t            this._nextChanged = null;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        KeyValueChangeRecord.prototype.toString = function () {\n\t            return looseIdentical(this.previousValue, this.currentValue) ?\n\t                stringify(this.key) :\n\t                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +\n\t                    stringify(this.currentValue) + ']');\n\t        };\n\t        return KeyValueChangeRecord;\n\t    }());\n\t\n\t    /**\n\t     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n\t     * \\@stable\n\t     */\n\t    var IterableDiffers = (function () {\n\t        /**\n\t         * @param {?} factories\n\t         */\n\t        function IterableDiffers(factories) {\n\t            this.factories = factories;\n\t        }\n\t        /**\n\t         * @param {?} factories\n\t         * @param {?=} parent\n\t         * @return {?}\n\t         */\n\t        IterableDiffers.create = function (factories, parent) {\n\t            if (isPresent(parent)) {\n\t                var /** @type {?} */ copied = parent.factories.slice();\n\t                factories = factories.concat(copied);\n\t                return new IterableDiffers(factories);\n\t            }\n\t            else {\n\t                return new IterableDiffers(factories);\n\t            }\n\t        };\n\t        /**\n\t         * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n\t         * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n\t         * {\\@link IterableDiffers} instance.\n\t         *\n\t         * The following example shows how to extend an existing list of factories,\n\t         * which will only be applied to the injector for this component and its children.\n\t         * This step is all that's required to make a new {\\@link IterableDiffer} available.\n\t         *\n\t         * ### Example\n\t         *\n\t         * ```\n\t         * \\@Component({\n\t         *   viewProviders: [\n\t         *     IterableDiffers.extend([new ImmutableListDiffer()])\n\t         *   ]\n\t         * })\n\t         * ```\n\t         * @param {?} factories\n\t         * @return {?}\n\t         */\n\t        IterableDiffers.extend = function (factories) {\n\t            return {\n\t                provide: IterableDiffers,\n\t                useFactory: function (parent) {\n\t                    if (!parent) {\n\t                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n\t                        // to\n\t                        // bootstrap(), which would override default pipes instead of extending them.\n\t                        throw new Error('Cannot extend IterableDiffers without a parent injector');\n\t                    }\n\t                    return IterableDiffers.create(factories, parent);\n\t                },\n\t                // Dependency technically isn't optional, but we can provide a better error message this way.\n\t                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} iterable\n\t         * @return {?}\n\t         */\n\t        IterableDiffers.prototype.find = function (iterable) {\n\t            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });\n\t            if (isPresent(factory)) {\n\t                return factory;\n\t            }\n\t            else {\n\t                throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n\t            }\n\t        };\n\t        return IterableDiffers;\n\t    }());\n\t\n\t    /**\n\t     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n\t     * \\@stable\n\t     */\n\t    var KeyValueDiffers = (function () {\n\t        /**\n\t         * @param {?} factories\n\t         */\n\t        function KeyValueDiffers(factories) {\n\t            this.factories = factories;\n\t        }\n\t        /**\n\t         * @param {?} factories\n\t         * @param {?=} parent\n\t         * @return {?}\n\t         */\n\t        KeyValueDiffers.create = function (factories, parent) {\n\t            if (isPresent(parent)) {\n\t                var /** @type {?} */ copied = parent.factories.slice();\n\t                factories = factories.concat(copied);\n\t                return new KeyValueDiffers(factories);\n\t            }\n\t            else {\n\t                return new KeyValueDiffers(factories);\n\t            }\n\t        };\n\t        /**\n\t         * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n\t         * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n\t         * {\\@link KeyValueDiffers} instance.\n\t         *\n\t         * The following example shows how to extend an existing list of factories,\n\t         * which will only be applied to the injector for this component and its children.\n\t         * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n\t         *\n\t         * ### Example\n\t         *\n\t         * ```\n\t         * \\@Component({\n\t         *   viewProviders: [\n\t         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n\t         *   ]\n\t         * })\n\t         * ```\n\t         * @param {?} factories\n\t         * @return {?}\n\t         */\n\t        KeyValueDiffers.extend = function (factories) {\n\t            return {\n\t                provide: KeyValueDiffers,\n\t                useFactory: function (parent) {\n\t                    if (!parent) {\n\t                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n\t                        // to\n\t                        // bootstrap(), which would override default pipes instead of extending them.\n\t                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n\t                    }\n\t                    return KeyValueDiffers.create(factories, parent);\n\t                },\n\t                // Dependency technically isn't optional, but we can provide a better error message this way.\n\t                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n\t            };\n\t        };\n\t        /**\n\t         * @param {?} kv\n\t         * @return {?}\n\t         */\n\t        KeyValueDiffers.prototype.find = function (kv) {\n\t            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });\n\t            if (isPresent(factory)) {\n\t                return factory;\n\t            }\n\t            else {\n\t                throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n\t            }\n\t        };\n\t        return KeyValueDiffers;\n\t    }());\n\t\n\t    var /** @type {?} */ UNINITIALIZED = {\n\t        toString: function () { return 'CD_INIT_VALUE'; }\n\t    };\n\t    /**\n\t     * @param {?} a\n\t     * @param {?} b\n\t     * @return {?}\n\t     */\n\t    function devModeEqual(a, b) {\n\t        if (isListLikeIterable(a) && isListLikeIterable(b)) {\n\t            return areIterablesEqual(a, b, devModeEqual);\n\t        }\n\t        else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {\n\t            return true;\n\t        }\n\t        else {\n\t            return looseIdentical(a, b);\n\t        }\n\t    }\n\t    /**\n\t     * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n\t     * reference\n\t     * has not changed.\n\t     *\n\t     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n\t     *\n\t     * Example:\n\t     *\n\t     * ```\n\t     * if (this._latestValue === this._latestReturnedValue) {\n\t     *    return this._latestReturnedValue;\n\t     *  } else {\n\t     *    this._latestReturnedValue = this._latestValue;\n\t     *    return WrappedValue.wrap(this._latestValue); // this will force update\n\t     *  }\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var WrappedValue = (function () {\n\t        /**\n\t         * @param {?} wrapped\n\t         */\n\t        function WrappedValue(wrapped) {\n\t            this.wrapped = wrapped;\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n\t        return WrappedValue;\n\t    }());\n\t    /**\n\t     * Helper class for unwrapping WrappedValue s\n\t     */\n\t    var ValueUnwrapper = (function () {\n\t        function ValueUnwrapper() {\n\t            this.hasWrappedValue = false;\n\t        }\n\t        /**\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        ValueUnwrapper.prototype.unwrap = function (value) {\n\t            if (value instanceof WrappedValue) {\n\t                this.hasWrappedValue = true;\n\t                return value.wrapped;\n\t            }\n\t            return value;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };\n\t        return ValueUnwrapper;\n\t    }());\n\t    /**\n\t     * Represents a basic change from a previous to a new value.\n\t     * \\@stable\n\t     */\n\t    var SimpleChange = (function () {\n\t        /**\n\t         * @param {?} previousValue\n\t         * @param {?} currentValue\n\t         */\n\t        function SimpleChange(previousValue, currentValue) {\n\t            this.previousValue = previousValue;\n\t            this.currentValue = currentValue;\n\t        }\n\t        /**\n\t         * Check whether the new value is the first value assigned.\n\t         * @return {?}\n\t         */\n\t        SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };\n\t        return SimpleChange;\n\t    }());\n\t\n\t    /**\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ChangeDetectorRef = (function () {\n\t        function ChangeDetectorRef() {\n\t        }\n\t        /**\n\t         * Marks all {\\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.\n\t         *\n\t         * <!-- TODO: Add a link to a chapter on OnPush components -->\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))\n\t         *\n\t         * ```typescript\n\t         * \\@Component({\n\t         *   selector: 'cmp',\n\t         *   changeDetection: ChangeDetectionStrategy.OnPush,\n\t         *   template: `Number of ticks: {{numberOfTicks}}`\n\t         * })\n\t         * class Cmp {\n\t         *   numberOfTicks = 0;\n\t         *\n\t         *   constructor(ref: ChangeDetectorRef) {\n\t         *     setInterval(() => {\n\t         *       this.numberOfTicks ++\n\t         *       // the following is required, otherwise the view will not be updated\n\t         *       this.ref.markForCheck();\n\t         *     }, 1000);\n\t         *   }\n\t         * }\n\t         *\n\t         * \\@Component({\n\t         *   selector: 'app',\n\t         *   changeDetection: ChangeDetectionStrategy.OnPush,\n\t         *   template: `\n\t         *     <cmp><cmp>\n\t         *   `,\n\t         * })\n\t         * class App {\n\t         * }\n\t         * ```\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ChangeDetectorRef.prototype.markForCheck = function () { };\n\t        /**\n\t         * Detaches the change detector from the change detector tree.\n\t         *\n\t         * The detached change detector will not be checked until it is reattached.\n\t         *\n\t         * This can also be used in combination with {\\@link ChangeDetectorRef#detectChanges} to implement\n\t         * local change\n\t         * detection checks.\n\t         *\n\t         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\t         *\n\t         * ### Example\n\t         *\n\t         * The following example defines a component with a large list of readonly data.\n\t         * Imagine the data changes constantly, many times per second. For performance reasons,\n\t         * we want to check and update the list every five seconds. We can do that by detaching\n\t         * the component's change detector and doing a local check every five seconds.\n\t         *\n\t         * ```typescript\n\t         * class DataProvider {\n\t         *   // in a real application the returned data will be different every time\n\t         *   get data() {\n\t         *     return [1,2,3,4,5];\n\t         *   }\n\t         * }\n\t         *\n\t         * \\@Component({\n\t         *   selector: 'giant-list',\n\t         *   template: `\n\t         *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</lig>\n\t         *   `,\n\t         * })\n\t         * class GiantList {\n\t         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {\n\t         *     ref.detach();\n\t         *     setInterval(() => {\n\t         *       this.ref.detectChanges();\n\t         *     }, 5000);\n\t         *   }\n\t         * }\n\t         *\n\t         * \\@Component({\n\t         *   selector: 'app',\n\t         *   providers: [DataProvider],\n\t         *   template: `\n\t         *     <giant-list><giant-list>\n\t         *   `,\n\t         * })\n\t         * class App {\n\t         * }\n\t         * ```\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ChangeDetectorRef.prototype.detach = function () { };\n\t        /**\n\t         * Checks the change detector and its children.\n\t         *\n\t         * This can also be used in combination with {\\@link ChangeDetectorRef#detach} to implement local\n\t         * change detection\n\t         * checks.\n\t         *\n\t         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\t         *\n\t         * ### Example\n\t         *\n\t         * The following example defines a component with a large list of readonly data.\n\t         * Imagine, the data changes constantly, many times per second. For performance reasons,\n\t         * we want to check and update the list every five seconds.\n\t         *\n\t         * We can do that by detaching the component's change detector and doing a local change detection\n\t         * check\n\t         * every five seconds.\n\t         *\n\t         * See {\\@link ChangeDetectorRef#detach} for more information.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ChangeDetectorRef.prototype.detectChanges = function () { };\n\t        /**\n\t         * Checks the change detector and its children, and throws if any changes are detected.\n\t         *\n\t         * This is used in development mode to verify that running change detection doesn't introduce\n\t         * other changes.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ChangeDetectorRef.prototype.checkNoChanges = function () { };\n\t        /**\n\t         * Reattach the change detector to the change detector tree.\n\t         *\n\t         * This also marks OnPush ancestors as to be checked. This reattached change detector will be\n\t         * checked during the next change detection run.\n\t         *\n\t         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))\n\t         *\n\t         * The following example creates a component displaying `live` data. The component will detach\n\t         * its change detector from the main change detector tree when the component's live property\n\t         * is set to false.\n\t         *\n\t         * ```typescript\n\t         * class DataProvider {\n\t         *   data = 1;\n\t         *\n\t         *   constructor() {\n\t         *     setInterval(() => {\n\t         *       this.data = this.data * 2;\n\t         *     }, 500);\n\t         *   }\n\t         * }\n\t         *\n\t         * \\@Component({\n\t         *   selector: 'live-data',\n\t         *   inputs: ['live'],\n\t         *   template: 'Data: {{dataProvider.data}}'\n\t         * })\n\t         * class LiveData {\n\t         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}\n\t         *\n\t         *   set live(value) {\n\t         *     if (value)\n\t         *       this.ref.reattach();\n\t         *     else\n\t         *       this.ref.detach();\n\t         *   }\n\t         * }\n\t         *\n\t         * \\@Component({\n\t         *   selector: 'app',\n\t         *   providers: [DataProvider],\n\t         *   template: `\n\t         *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n\t         *     <live-data [live]=\"live\"><live-data>\n\t         *   `,\n\t         * })\n\t         * class App {\n\t         *   live = true;\n\t         * }\n\t         * ```\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ChangeDetectorRef.prototype.reattach = function () { };\n\t        return ChangeDetectorRef;\n\t    }());\n\t\n\t    /**\n\t     * Structural diffing for `Object`s and `Map`s.\n\t     */\n\t    var /** @type {?} */ keyValDiff = [new DefaultKeyValueDifferFactory()];\n\t    /**\n\t     * Structural diffing for `Iterable` types such as `Array`s.\n\t     */\n\t    var /** @type {?} */ iterableDiff = [new DefaultIterableDifferFactory()];\n\t    var /** @type {?} */ defaultIterableDiffers = new IterableDiffers(iterableDiff);\n\t    var /** @type {?} */ defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var RenderComponentType = (function () {\n\t        /**\n\t         * @param {?} id\n\t         * @param {?} templateUrl\n\t         * @param {?} slotCount\n\t         * @param {?} encapsulation\n\t         * @param {?} styles\n\t         * @param {?} animations\n\t         */\n\t        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n\t            this.id = id;\n\t            this.templateUrl = templateUrl;\n\t            this.slotCount = slotCount;\n\t            this.encapsulation = encapsulation;\n\t            this.styles = styles;\n\t            this.animations = animations;\n\t        }\n\t        return RenderComponentType;\n\t    }());\n\t    /**\n\t     * @abstract\n\t     */\n\t    var RenderDebugInfo = (function () {\n\t        function RenderDebugInfo() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.injector = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.component = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.providerTokens = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.references = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.context = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        RenderDebugInfo.prototype.source = function () { };\n\t        return RenderDebugInfo;\n\t    }());\n\t    /**\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var Renderer = (function () {\n\t        function Renderer() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} selectorOrNode\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} parentElement\n\t         * @param {?} name\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} hostElement\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.createViewRoot = function (hostElement) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} parentElement\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} parentElement\n\t         * @param {?} value\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} parentElement\n\t         * @param {?} nodes\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} node\n\t         * @param {?} viewRootNodes\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} viewRootNodes\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.detachView = function (viewRootNodes) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} hostElement\n\t         * @param {?} viewAllNodes\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} name\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.listen = function (renderElement, name, callback) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} target\n\t         * @param {?} name\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.listenGlobal = function (target, name, callback) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} propertyName\n\t         * @param {?} propertyValue\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} attributeName\n\t         * @param {?} attributeValue\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n\t        /**\n\t         * Used only in debug mode to serialize property changes to dom nodes as attributes.\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} propertyName\n\t         * @param {?} propertyValue\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} className\n\t         * @param {?} isAdd\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} styleName\n\t         * @param {?} styleValue\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderElement\n\t         * @param {?} methodName\n\t         * @param {?=} args\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} renderNode\n\t         * @param {?} text\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.setText = function (renderNode, text) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} element\n\t         * @param {?} startingStyles\n\t         * @param {?} keyframes\n\t         * @param {?} duration\n\t         * @param {?} delay\n\t         * @param {?} easing\n\t         * @param {?=} previousPlayers\n\t         * @return {?}\n\t         */\n\t        Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n\t        return Renderer;\n\t    }());\n\t    /**\n\t     * Injectable service that provides a low-level interface for modifying the UI.\n\t     *\n\t     * Use this service to bypass Angular's templating and make custom UI changes that can't be\n\t     * expressed declaratively. For example if you need to set a property or an attribute whose name is\n\t     * not statically known, use {\\@link #setElementProperty} or {\\@link #setElementAttribute}\n\t     * respectively.\n\t     *\n\t     * If you are implementing a custom renderer, you must implement this interface.\n\t     *\n\t     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var RootRenderer = (function () {\n\t        function RootRenderer() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} componentType\n\t         * @return {?}\n\t         */\n\t        RootRenderer.prototype.renderComponent = function (componentType) { };\n\t        return RootRenderer;\n\t    }());\n\t\n\t    var SecurityContext = {};\n\t    SecurityContext.NONE = 0;\n\t    SecurityContext.HTML = 1;\n\t    SecurityContext.STYLE = 2;\n\t    SecurityContext.SCRIPT = 3;\n\t    SecurityContext.URL = 4;\n\t    SecurityContext.RESOURCE_URL = 5;\n\t    SecurityContext[SecurityContext.NONE] = \"NONE\";\n\t    SecurityContext[SecurityContext.HTML] = \"HTML\";\n\t    SecurityContext[SecurityContext.STYLE] = \"STYLE\";\n\t    SecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\n\t    SecurityContext[SecurityContext.URL] = \"URL\";\n\t    SecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n\t    /**\n\t     * Sanitizer is used by the views to sanitize potentially dangerous values.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var Sanitizer = (function () {\n\t        function Sanitizer() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} context\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        Sanitizer.prototype.sanitize = function (context, value) { };\n\t        return Sanitizer;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$7 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * An error thrown if application changes model breaking the top-down data flow.\n\t     *\n\t     * This exception is only thrown in dev mode.\n\t     *\n\t     * <!-- TODO: Add a link once the dev mode option is configurable -->\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * \\@Component({\n\t     *   selector: 'parent',\n\t     *   template: '<child [prop]=\"parentProp\"></child>',\n\t     * })\n\t     * class Parent {\n\t     *   parentProp = 'init';\n\t     * }\n\t     *\n\t     * \\@Directive({selector: 'child', inputs: ['prop']})\n\t     * class Child {\n\t     *   constructor(public parent: Parent) {}\n\t     *\n\t     *   set prop(v) {\n\t     *     // this updates the parent property, which is disallowed during change detection\n\t     *     // this will result in ExpressionChangedAfterItHasBeenCheckedError\n\t     *     this.parent.parentProp = 'updated';\n\t     *   }\n\t     * }\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {\n\t        __extends$7(ExpressionChangedAfterItHasBeenCheckedError, _super);\n\t        /**\n\t         * @param {?} oldValue\n\t         * @param {?} currValue\n\t         */\n\t        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {\n\t            var msg = \"Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n\t            if (oldValue === UNINITIALIZED) {\n\t                msg +=\n\t                    \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n\t                        \" Has it been created in a change detection hook ?\";\n\t            }\n\t            _super.call(this, msg);\n\t        }\n\t        return ExpressionChangedAfterItHasBeenCheckedError;\n\t    }(BaseError));\n\t    /**\n\t     * Thrown when an exception was raised during view creation, change detection or destruction.\n\t     *\n\t     * This error wraps the original exception to attach additional contextual information that can\n\t     * be useful for debugging.\n\t     * \\@stable\n\t     */\n\t    var ViewWrappedError = (function (_super) {\n\t        __extends$7(ViewWrappedError, _super);\n\t        /**\n\t         * @param {?} originalError\n\t         * @param {?} context\n\t         */\n\t        function ViewWrappedError(originalError, context) {\n\t            _super.call(this, \"Error in \" + context.source, originalError);\n\t            this.context = context;\n\t        }\n\t        return ViewWrappedError;\n\t    }(WrappedError));\n\t    /**\n\t     * Thrown when a destroyed view is used.\n\t     *\n\t     * This error indicates a bug in the framework.\n\t     *\n\t     * This is an internal Angular error.\n\t     * \\@stable\n\t     */\n\t    var ViewDestroyedError = (function (_super) {\n\t        __extends$7(ViewDestroyedError, _super);\n\t        /**\n\t         * @param {?} details\n\t         */\n\t        function ViewDestroyedError(details) {\n\t            _super.call(this, \"Attempt to use a destroyed view: \" + details);\n\t        }\n\t        return ViewDestroyedError;\n\t    }(BaseError));\n\t\n\t    var ViewUtils = (function () {\n\t        /**\n\t         * @param {?} _renderer\n\t         * @param {?} sanitizer\n\t         * @param {?} animationQueue\n\t         */\n\t        function ViewUtils(_renderer, sanitizer, animationQueue) {\n\t            this._renderer = _renderer;\n\t            this.animationQueue = animationQueue;\n\t            this.sanitizer = sanitizer;\n\t        }\n\t        /**\n\t         * \\@internal\n\t         * @param {?} renderComponentType\n\t         * @return {?}\n\t         */\n\t        ViewUtils.prototype.renderComponent = function (renderComponentType) {\n\t            return this._renderer.renderComponent(renderComponentType);\n\t        };\n\t        ViewUtils.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        ViewUtils.ctorParameters = function () { return [\n\t            { type: RootRenderer, },\n\t            { type: Sanitizer, },\n\t            { type: AnimationQueue, },\n\t        ]; };\n\t        return ViewUtils;\n\t    }());\n\t    var /** @type {?} */ nextRenderComponentTypeId = 0;\n\t    /**\n\t     * @param {?} templateUrl\n\t     * @param {?} slotCount\n\t     * @param {?} encapsulation\n\t     * @param {?} styles\n\t     * @param {?} animations\n\t     * @return {?}\n\t     */\n\t    function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {\n\t        return new RenderComponentType(\"\" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);\n\t    }\n\t    /**\n\t     * @param {?} e\n\t     * @param {?} array\n\t     * @return {?}\n\t     */\n\t    function addToArray(e, array) {\n\t        array.push(e);\n\t    }\n\t    /**\n\t     * @param {?} valueCount\n\t     * @param {?} constAndInterp\n\t     * @return {?}\n\t     */\n\t    function interpolate(valueCount, constAndInterp) {\n\t        var /** @type {?} */ result = '';\n\t        for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {\n\t            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n\t        }\n\t        return result + constAndInterp[valueCount * 2];\n\t    }\n\t    /**\n\t     * @param {?} valueCount\n\t     * @param {?} c0\n\t     * @param {?} a1\n\t     * @param {?} c1\n\t     * @param {?=} a2\n\t     * @param {?=} c2\n\t     * @param {?=} a3\n\t     * @param {?=} c3\n\t     * @param {?=} a4\n\t     * @param {?=} c4\n\t     * @param {?=} a5\n\t     * @param {?=} c5\n\t     * @param {?=} a6\n\t     * @param {?=} c6\n\t     * @param {?=} a7\n\t     * @param {?=} c7\n\t     * @param {?=} a8\n\t     * @param {?=} c8\n\t     * @param {?=} a9\n\t     * @param {?=} c9\n\t     * @return {?}\n\t     */\n\t    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n\t        switch (valueCount) {\n\t            case 1:\n\t                return c0 + _toStringWithNull(a1) + c1;\n\t            case 2:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n\t            case 3:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3;\n\t            case 4:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4;\n\t            case 5:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n\t            case 6:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n\t            case 7:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n\t                    c6 + _toStringWithNull(a7) + c7;\n\t            case 8:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n\t                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n\t            case 9:\n\t                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n\t                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n\t                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n\t            default:\n\t                throw new Error(\"Does not support more than 9 expressions\");\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} v\n\t     * @return {?}\n\t     */\n\t    function _toStringWithNull(v) {\n\t        return v != null ? v.toString() : '';\n\t    }\n\t    /**\n\t     * @param {?} throwOnChange\n\t     * @param {?} oldValue\n\t     * @param {?} newValue\n\t     * @return {?}\n\t     */\n\t    function checkBinding(throwOnChange, oldValue, newValue) {\n\t        if (throwOnChange) {\n\t            if (!devModeEqual(oldValue, newValue)) {\n\t                throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);\n\t            }\n\t            return false;\n\t        }\n\t        else {\n\t            return !looseIdentical(oldValue, newValue);\n\t        }\n\t    }\n\t    /**\n\t     * @param {?} input\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function castByValue(input, value) {\n\t        return (input);\n\t    }\n\t    var /** @type {?} */ EMPTY_ARRAY = [];\n\t    var /** @type {?} */ EMPTY_MAP = {};\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy1(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0 = UNINITIALIZED;\n\t        return function (p0) {\n\t            if (!looseIdentical(v0, p0)) {\n\t                v0 = p0;\n\t                result = fn(p0);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy2(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0 = UNINITIALIZED;\n\t        var /** @type {?} */ v1 = UNINITIALIZED;\n\t        return function (p0, p1) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                result = fn(p0, p1);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy3(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0 = UNINITIALIZED;\n\t        var /** @type {?} */ v1 = UNINITIALIZED;\n\t        var /** @type {?} */ v2 = UNINITIALIZED;\n\t        return function (p0, p1, p2) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                result = fn(p0, p1, p2);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy4(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3;\n\t        v0 = v1 = v2 = v3 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                result = fn(p0, p1, p2, p3);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy5(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4;\n\t        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                result = fn(p0, p1, p2, p3, p4);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy6(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5;\n\t        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4, p5) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                v5 = p5;\n\t                result = fn(p0, p1, p2, p3, p4, p5);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy7(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6;\n\t        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4, p5, p6) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n\t                !looseIdentical(v6, p6)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                v5 = p5;\n\t                v6 = p6;\n\t                result = fn(p0, p1, p2, p3, p4, p5, p6);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy8(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7;\n\t        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4, p5, p6, p7) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n\t                !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                v5 = p5;\n\t                v6 = p6;\n\t                v7 = p7;\n\t                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy9(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8;\n\t        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n\t                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                v5 = p5;\n\t                v6 = p6;\n\t                v7 = p7;\n\t                v8 = p8;\n\t                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} fn\n\t     * @return {?}\n\t     */\n\t    function pureProxy10(fn) {\n\t        var /** @type {?} */ result;\n\t        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8, /** @type {?} */ v9;\n\t        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;\n\t        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {\n\t            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n\t                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n\t                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||\n\t                !looseIdentical(v9, p9)) {\n\t                v0 = p0;\n\t                v1 = p1;\n\t                v2 = p2;\n\t                v3 = p3;\n\t                v4 = p4;\n\t                v5 = p5;\n\t                v6 = p6;\n\t                v7 = p7;\n\t                v8 = p8;\n\t                v9 = p9;\n\t                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);\n\t            }\n\t            return result;\n\t        };\n\t    }\n\t    /**\n\t     * @param {?} renderer\n\t     * @param {?} el\n\t     * @param {?} changes\n\t     * @return {?}\n\t     */\n\t    function setBindingDebugInfoForChanges(renderer, el, changes) {\n\t        Object.keys(changes).forEach(function (propName) {\n\t            setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} renderer\n\t     * @param {?} el\n\t     * @param {?} propName\n\t     * @param {?} value\n\t     * @return {?}\n\t     */\n\t    function setBindingDebugInfo(renderer, el, propName, value) {\n\t        try {\n\t            renderer.setBindingDebugInfo(el, \"ng-reflect-\" + camelCaseToDashCase(propName), value ? value.toString() : null);\n\t        }\n\t        catch (e) {\n\t            renderer.setBindingDebugInfo(el, \"ng-reflect-\" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');\n\t        }\n\t    }\n\t    var /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;\n\t    /**\n\t     * @param {?} input\n\t     * @return {?}\n\t     */\n\t    function camelCaseToDashCase(input) {\n\t        return input.replace(CAMEL_CASE_REGEXP, function () {\n\t            var m = [];\n\t            for (var _i = 0; _i < arguments.length; _i++) {\n\t                m[_i - 0] = arguments[_i];\n\t            }\n\t            return '-' + m[1].toLowerCase();\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} renderer\n\t     * @param {?} parentElement\n\t     * @param {?} name\n\t     * @param {?} attrs\n\t     * @param {?=} debugInfo\n\t     * @return {?}\n\t     */\n\t    function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {\n\t        var /** @type {?} */ el = renderer.createElement(parentElement, name, debugInfo);\n\t        for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n\t            renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));\n\t        }\n\t        return el;\n\t    }\n\t    /**\n\t     * @param {?} renderer\n\t     * @param {?} elementName\n\t     * @param {?} attrs\n\t     * @param {?} rootSelectorOrNode\n\t     * @param {?=} debugInfo\n\t     * @return {?}\n\t     */\n\t    function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {\n\t        var /** @type {?} */ hostElement;\n\t        if (isPresent(rootSelectorOrNode)) {\n\t            hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);\n\t            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n\t                renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));\n\t            }\n\t            renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);\n\t        }\n\t        else {\n\t            hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);\n\t        }\n\t        return hostElement;\n\t    }\n\t    /**\n\t     * @param {?} view\n\t     * @param {?} element\n\t     * @param {?} eventNamesAndTargets\n\t     * @param {?} listener\n\t     * @return {?}\n\t     */\n\t    function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {\n\t        var /** @type {?} */ disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);\n\t        for (var /** @type {?} */ i = 0; i < eventNamesAndTargets.length; i += 2) {\n\t            var /** @type {?} */ eventName = eventNamesAndTargets.get(i);\n\t            var /** @type {?} */ eventTarget = eventNamesAndTargets.get(i + 1);\n\t            var /** @type {?} */ disposable = void 0;\n\t            if (eventTarget) {\n\t                disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + \":\" + eventName));\n\t            }\n\t            else {\n\t                disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));\n\t            }\n\t            disposables.set(i / 2, disposable);\n\t        }\n\t        return disposeInlineArray.bind(null, disposables);\n\t    }\n\t    /**\n\t     * @param {?} disposables\n\t     * @return {?}\n\t     */\n\t    function disposeInlineArray(disposables) {\n\t        for (var /** @type {?} */ i = 0; i < disposables.length; i++) {\n\t            disposables.get(i)();\n\t        }\n\t    }\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function noop() { }\n\t    /**\n\t     * @param {?} length\n\t     * @return {?}\n\t     */\n\t    function createEmptyInlineArray(length) {\n\t        var /** @type {?} */ ctor;\n\t        if (length <= 2) {\n\t            ctor = InlineArray2;\n\t        }\n\t        else if (length <= 4) {\n\t            ctor = InlineArray4;\n\t        }\n\t        else if (length <= 8) {\n\t            ctor = InlineArray8;\n\t        }\n\t        else if (length <= 16) {\n\t            ctor = InlineArray16;\n\t        }\n\t        else {\n\t            ctor = InlineArrayDynamic;\n\t        }\n\t        return new ctor(length);\n\t    }\n\t    var InlineArray0 = (function () {\n\t        function InlineArray0() {\n\t            this.length = 0;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArray0.prototype.get = function (index) { return undefined; };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArray0.prototype.set = function (index, value) { };\n\t        return InlineArray0;\n\t    }());\n\t    var InlineArray2 = (function () {\n\t        /**\n\t         * @param {?} length\n\t         * @param {?=} _v0\n\t         * @param {?=} _v1\n\t         */\n\t        function InlineArray2(length, _v0, _v1) {\n\t            this.length = length;\n\t            this._v0 = _v0;\n\t            this._v1 = _v1;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArray2.prototype.get = function (index) {\n\t            switch (index) {\n\t                case 0:\n\t                    return this._v0;\n\t                case 1:\n\t                    return this._v1;\n\t                default:\n\t                    return undefined;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArray2.prototype.set = function (index, value) {\n\t            switch (index) {\n\t                case 0:\n\t                    this._v0 = value;\n\t                    break;\n\t                case 1:\n\t                    this._v1 = value;\n\t                    break;\n\t            }\n\t        };\n\t        return InlineArray2;\n\t    }());\n\t    var InlineArray4 = (function () {\n\t        /**\n\t         * @param {?} length\n\t         * @param {?=} _v0\n\t         * @param {?=} _v1\n\t         * @param {?=} _v2\n\t         * @param {?=} _v3\n\t         */\n\t        function InlineArray4(length, _v0, _v1, _v2, _v3) {\n\t            this.length = length;\n\t            this._v0 = _v0;\n\t            this._v1 = _v1;\n\t            this._v2 = _v2;\n\t            this._v3 = _v3;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArray4.prototype.get = function (index) {\n\t            switch (index) {\n\t                case 0:\n\t                    return this._v0;\n\t                case 1:\n\t                    return this._v1;\n\t                case 2:\n\t                    return this._v2;\n\t                case 3:\n\t                    return this._v3;\n\t                default:\n\t                    return undefined;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArray4.prototype.set = function (index, value) {\n\t            switch (index) {\n\t                case 0:\n\t                    this._v0 = value;\n\t                    break;\n\t                case 1:\n\t                    this._v1 = value;\n\t                    break;\n\t                case 2:\n\t                    this._v2 = value;\n\t                    break;\n\t                case 3:\n\t                    this._v3 = value;\n\t                    break;\n\t            }\n\t        };\n\t        return InlineArray4;\n\t    }());\n\t    var InlineArray8 = (function () {\n\t        /**\n\t         * @param {?} length\n\t         * @param {?=} _v0\n\t         * @param {?=} _v1\n\t         * @param {?=} _v2\n\t         * @param {?=} _v3\n\t         * @param {?=} _v4\n\t         * @param {?=} _v5\n\t         * @param {?=} _v6\n\t         * @param {?=} _v7\n\t         */\n\t        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {\n\t            this.length = length;\n\t            this._v0 = _v0;\n\t            this._v1 = _v1;\n\t            this._v2 = _v2;\n\t            this._v3 = _v3;\n\t            this._v4 = _v4;\n\t            this._v5 = _v5;\n\t            this._v6 = _v6;\n\t            this._v7 = _v7;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArray8.prototype.get = function (index) {\n\t            switch (index) {\n\t                case 0:\n\t                    return this._v0;\n\t                case 1:\n\t                    return this._v1;\n\t                case 2:\n\t                    return this._v2;\n\t                case 3:\n\t                    return this._v3;\n\t                case 4:\n\t                    return this._v4;\n\t                case 5:\n\t                    return this._v5;\n\t                case 6:\n\t                    return this._v6;\n\t                case 7:\n\t                    return this._v7;\n\t                default:\n\t                    return undefined;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArray8.prototype.set = function (index, value) {\n\t            switch (index) {\n\t                case 0:\n\t                    this._v0 = value;\n\t                    break;\n\t                case 1:\n\t                    this._v1 = value;\n\t                    break;\n\t                case 2:\n\t                    this._v2 = value;\n\t                    break;\n\t                case 3:\n\t                    this._v3 = value;\n\t                    break;\n\t                case 4:\n\t                    this._v4 = value;\n\t                    break;\n\t                case 5:\n\t                    this._v5 = value;\n\t                    break;\n\t                case 6:\n\t                    this._v6 = value;\n\t                    break;\n\t                case 7:\n\t                    this._v7 = value;\n\t                    break;\n\t            }\n\t        };\n\t        return InlineArray8;\n\t    }());\n\t    var InlineArray16 = (function () {\n\t        /**\n\t         * @param {?} length\n\t         * @param {?=} _v0\n\t         * @param {?=} _v1\n\t         * @param {?=} _v2\n\t         * @param {?=} _v3\n\t         * @param {?=} _v4\n\t         * @param {?=} _v5\n\t         * @param {?=} _v6\n\t         * @param {?=} _v7\n\t         * @param {?=} _v8\n\t         * @param {?=} _v9\n\t         * @param {?=} _v10\n\t         * @param {?=} _v11\n\t         * @param {?=} _v12\n\t         * @param {?=} _v13\n\t         * @param {?=} _v14\n\t         * @param {?=} _v15\n\t         */\n\t        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {\n\t            this.length = length;\n\t            this._v0 = _v0;\n\t            this._v1 = _v1;\n\t            this._v2 = _v2;\n\t            this._v3 = _v3;\n\t            this._v4 = _v4;\n\t            this._v5 = _v5;\n\t            this._v6 = _v6;\n\t            this._v7 = _v7;\n\t            this._v8 = _v8;\n\t            this._v9 = _v9;\n\t            this._v10 = _v10;\n\t            this._v11 = _v11;\n\t            this._v12 = _v12;\n\t            this._v13 = _v13;\n\t            this._v14 = _v14;\n\t            this._v15 = _v15;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArray16.prototype.get = function (index) {\n\t            switch (index) {\n\t                case 0:\n\t                    return this._v0;\n\t                case 1:\n\t                    return this._v1;\n\t                case 2:\n\t                    return this._v2;\n\t                case 3:\n\t                    return this._v3;\n\t                case 4:\n\t                    return this._v4;\n\t                case 5:\n\t                    return this._v5;\n\t                case 6:\n\t                    return this._v6;\n\t                case 7:\n\t                    return this._v7;\n\t                case 8:\n\t                    return this._v8;\n\t                case 9:\n\t                    return this._v9;\n\t                case 10:\n\t                    return this._v10;\n\t                case 11:\n\t                    return this._v11;\n\t                case 12:\n\t                    return this._v12;\n\t                case 13:\n\t                    return this._v13;\n\t                case 14:\n\t                    return this._v14;\n\t                case 15:\n\t                    return this._v15;\n\t                default:\n\t                    return undefined;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArray16.prototype.set = function (index, value) {\n\t            switch (index) {\n\t                case 0:\n\t                    this._v0 = value;\n\t                    break;\n\t                case 1:\n\t                    this._v1 = value;\n\t                    break;\n\t                case 2:\n\t                    this._v2 = value;\n\t                    break;\n\t                case 3:\n\t                    this._v3 = value;\n\t                    break;\n\t                case 4:\n\t                    this._v4 = value;\n\t                    break;\n\t                case 5:\n\t                    this._v5 = value;\n\t                    break;\n\t                case 6:\n\t                    this._v6 = value;\n\t                    break;\n\t                case 7:\n\t                    this._v7 = value;\n\t                    break;\n\t                case 8:\n\t                    this._v8 = value;\n\t                    break;\n\t                case 9:\n\t                    this._v9 = value;\n\t                    break;\n\t                case 10:\n\t                    this._v10 = value;\n\t                    break;\n\t                case 11:\n\t                    this._v11 = value;\n\t                    break;\n\t                case 12:\n\t                    this._v12 = value;\n\t                    break;\n\t                case 13:\n\t                    this._v13 = value;\n\t                    break;\n\t                case 14:\n\t                    this._v14 = value;\n\t                    break;\n\t                case 15:\n\t                    this._v15 = value;\n\t                    break;\n\t            }\n\t        };\n\t        return InlineArray16;\n\t    }());\n\t    var InlineArrayDynamic = (function () {\n\t        /**\n\t         * @param {?} length\n\t         * @param {...?} values\n\t         */\n\t        function InlineArrayDynamic(length) {\n\t            var values = [];\n\t            for (var _i = 1; _i < arguments.length; _i++) {\n\t                values[_i - 1] = arguments[_i];\n\t            }\n\t            this.length = length;\n\t            this._values = values;\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} value\n\t         * @return {?}\n\t         */\n\t        InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };\n\t        return InlineArrayDynamic;\n\t    }());\n\t    var /** @type {?} */ EMPTY_INLINE_ARRAY = new InlineArray0();\n\t\n\t\n\t    var view_utils = Object.freeze({\n\t        ViewUtils: ViewUtils,\n\t        createRenderComponentType: createRenderComponentType,\n\t        addToArray: addToArray,\n\t        interpolate: interpolate,\n\t        inlineInterpolate: inlineInterpolate,\n\t        checkBinding: checkBinding,\n\t        castByValue: castByValue,\n\t        EMPTY_ARRAY: EMPTY_ARRAY,\n\t        EMPTY_MAP: EMPTY_MAP,\n\t        pureProxy1: pureProxy1,\n\t        pureProxy2: pureProxy2,\n\t        pureProxy3: pureProxy3,\n\t        pureProxy4: pureProxy4,\n\t        pureProxy5: pureProxy5,\n\t        pureProxy6: pureProxy6,\n\t        pureProxy7: pureProxy7,\n\t        pureProxy8: pureProxy8,\n\t        pureProxy9: pureProxy9,\n\t        pureProxy10: pureProxy10,\n\t        setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,\n\t        setBindingDebugInfo: setBindingDebugInfo,\n\t        createRenderElement: createRenderElement,\n\t        selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,\n\t        subscribeToRenderElement: subscribeToRenderElement,\n\t        noop: noop,\n\t        InlineArray2: InlineArray2,\n\t        InlineArray4: InlineArray4,\n\t        InlineArray8: InlineArray8,\n\t        InlineArray16: InlineArray16,\n\t        InlineArrayDynamic: InlineArrayDynamic,\n\t        EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY\n\t    });\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$5 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n\t     *\n\t     * `ComponentRef` provides access to the Component Instance as well other objects related to this\n\t     * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n\t     * method.\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ComponentRef = (function () {\n\t        function ComponentRef() {\n\t        }\n\t        /**\n\t         * Location of the Host Element of this Component Instance.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.location = function () { };\n\t        /**\n\t         * The injector on which the component instance exists.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.injector = function () { };\n\t        /**\n\t         * The instance of the Component.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.instance = function () { };\n\t        /**\n\t         * The {\\@link ViewRef} of the Host View of this Component instance.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.hostView = function () { };\n\t        /**\n\t         * The {\\@link ChangeDetectorRef} of the Component instance.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.changeDetectorRef = function () { };\n\t        /**\n\t         * The component type.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.componentType = function () { };\n\t        /**\n\t         * Destroys the component instance and all of the data structures associated with it.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.destroy = function () { };\n\t        /**\n\t         * Allows to register a callback that will be called when the component is destroyed.\n\t         * @abstract\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        ComponentRef.prototype.onDestroy = function (callback) { };\n\t        return ComponentRef;\n\t    }());\n\t    var ComponentRef_ = (function (_super) {\n\t        __extends$5(ComponentRef_, _super);\n\t        /**\n\t         * @param {?} _index\n\t         * @param {?} _parentView\n\t         * @param {?} _nativeElement\n\t         * @param {?} _component\n\t         */\n\t        function ComponentRef_(_index, _parentView, _nativeElement, _component) {\n\t            _super.call(this);\n\t            this._index = _index;\n\t            this._parentView = _parentView;\n\t            this._nativeElement = _nativeElement;\n\t            this._component = _component;\n\t        }\n\t        Object.defineProperty(ComponentRef_.prototype, \"location\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return new ElementRef(this._nativeElement); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parentView.injector(this._index); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ComponentRef_.prototype, \"instance\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._component; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ;\n\t        Object.defineProperty(ComponentRef_.prototype, \"hostView\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parentView.ref; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ;\n\t        Object.defineProperty(ComponentRef_.prototype, \"changeDetectorRef\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._parentView.ref; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        ;\n\t        Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return (this._component.constructor); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };\n\t        return ComponentRef_;\n\t    }(ComponentRef));\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var ComponentFactory = (function () {\n\t        /**\n\t         * @param {?} selector\n\t         * @param {?} _viewClass\n\t         * @param {?} _componentType\n\t         */\n\t        function ComponentFactory(selector, _viewClass, _componentType) {\n\t            this.selector = selector;\n\t            this._viewClass = _viewClass;\n\t            this._componentType = _componentType;\n\t        }\n\t        Object.defineProperty(ComponentFactory.prototype, \"componentType\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._componentType; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * Creates a new component.\n\t         * @param {?} injector\n\t         * @param {?=} projectableNodes\n\t         * @param {?=} rootSelectorOrNode\n\t         * @return {?}\n\t         */\n\t        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {\n\t            if (projectableNodes === void 0) { projectableNodes = null; }\n\t            if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }\n\t            var /** @type {?} */ vu = injector.get(ViewUtils);\n\t            if (!projectableNodes) {\n\t                projectableNodes = [];\n\t            }\n\t            var /** @type {?} */ hostView = new this._viewClass(vu, null, null, null);\n\t            return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);\n\t        };\n\t        return ComponentFactory;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$8 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * \\@stable\n\t     */\n\t    var NoComponentFactoryError = (function (_super) {\n\t        __extends$8(NoComponentFactoryError, _super);\n\t        /**\n\t         * @param {?} component\n\t         */\n\t        function NoComponentFactoryError(component) {\n\t            _super.call(this, \"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n\t            this.component = component;\n\t        }\n\t        return NoComponentFactoryError;\n\t    }(BaseError));\n\t    var _NullComponentFactoryResolver = (function () {\n\t        function _NullComponentFactoryResolver() {\n\t        }\n\t        /**\n\t         * @param {?} component\n\t         * @return {?}\n\t         */\n\t        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n\t            throw new NoComponentFactoryError(component);\n\t        };\n\t        return _NullComponentFactoryResolver;\n\t    }());\n\t    /**\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ComponentFactoryResolver = (function () {\n\t        function ComponentFactoryResolver() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} component\n\t         * @return {?}\n\t         */\n\t        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n\t        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n\t        return ComponentFactoryResolver;\n\t    }());\n\t    var CodegenComponentFactoryResolver = (function () {\n\t        /**\n\t         * @param {?} factories\n\t         * @param {?} _parent\n\t         */\n\t        function CodegenComponentFactoryResolver(factories, _parent) {\n\t            this._parent = _parent;\n\t            this._factories = new Map();\n\t            for (var i = 0; i < factories.length; i++) {\n\t                var factory = factories[i];\n\t                this._factories.set(factory.componentType, factory);\n\t            }\n\t        }\n\t        /**\n\t         * @param {?} component\n\t         * @return {?}\n\t         */\n\t        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n\t            var /** @type {?} */ result = this._factories.get(component);\n\t            if (!result) {\n\t                result = this._parent.resolveComponentFactory(component);\n\t            }\n\t            return result;\n\t        };\n\t        return CodegenComponentFactoryResolver;\n\t    }());\n\t\n\t    var /** @type {?} */ trace;\n\t    var /** @type {?} */ events;\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function detectWTF() {\n\t        var /** @type {?} */ wtf = ((global$1) /** TODO #9100 */)['wtf'];\n\t        if (wtf) {\n\t            trace = wtf['trace'];\n\t            if (trace) {\n\t                events = trace['events'];\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    }\n\t    /**\n\t     * @param {?} signature\n\t     * @param {?=} flags\n\t     * @return {?}\n\t     */\n\t    function createScope(signature, flags) {\n\t        if (flags === void 0) { flags = null; }\n\t        return events.createScope(signature, flags);\n\t    }\n\t    /**\n\t     * @param {?} scope\n\t     * @param {?=} returnValue\n\t     * @return {?}\n\t     */\n\t    function leave(scope, returnValue) {\n\t        trace.leaveScope(scope, returnValue);\n\t        return returnValue;\n\t    }\n\t    /**\n\t     * @param {?} rangeType\n\t     * @param {?} action\n\t     * @return {?}\n\t     */\n\t    function startTimeRange(rangeType, action) {\n\t        return trace.beginTimeRange(rangeType, action);\n\t    }\n\t    /**\n\t     * @param {?} range\n\t     * @return {?}\n\t     */\n\t    function endTimeRange(range) {\n\t        trace.endTimeRange(range);\n\t    }\n\t\n\t    /**\n\t     * True if WTF is enabled.\n\t     */\n\t    var /** @type {?} */ wtfEnabled = detectWTF();\n\t    /**\n\t     * @param {?=} arg0\n\t     * @param {?=} arg1\n\t     * @return {?}\n\t     */\n\t    function noopScope(arg0, arg1) {\n\t        return null;\n\t    }\n\t    /**\n\t     * Create trace scope.\n\t     *\n\t     * Scopes must be strictly nested and are analogous to stack frames, but\n\t     * do not have to follow the stack frames. Instead it is recommended that they follow logical\n\t     * nesting. You may want to use\n\t     * [Event\n\t     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n\t     * as they are defined in WTF.\n\t     *\n\t     * Used to mark scope entry. The return value is used to leave the scope.\n\t     *\n\t     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n\t     *\n\t     *     someMethod() {\n\t     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n\t     *        // DO SOME WORK HERE\n\t     *        return wtfLeave(s, 123); // Return value 123\n\t     *     }\n\t     *\n\t     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n\t     * negatively impact the performance of your application. For this reason we recommend that\n\t     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n\t     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n\t     * exception, will produce incorrect trace, but presence of exception signifies logic error which\n\t     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n\t     * an exception is expected during normal execution while profiling.\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\n\t    /**\n\t     * Used to mark end of Scope.\n\t     *\n\t     * - `scope` to end.\n\t     * - `returnValue` (optional) to be passed to the WTF.\n\t     *\n\t     * Returns the `returnValue for easy chaining.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n\t    /**\n\t     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n\t     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n\t     * enabled.\n\t     *\n\t     *     someMethod() {\n\t     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n\t     *        var future = new Future.delay(5).then((_) {\n\t     *          wtfEndTimeRange(s);\n\t     *        });\n\t     *     }\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n\t    /**\n\t     * Ends a async time range operation.\n\t     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n\t     * enabled.\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n\t\n\t    /**\n\t     * The Testability service provides testing hooks that can be accessed from\n\t     * the browser and by services such as Protractor. Each bootstrapped Angular\n\t     * application on the page will have an instance of Testability.\n\t     * \\@experimental\n\t     */\n\t    var Testability = (function () {\n\t        /**\n\t         * @param {?} _ngZone\n\t         */\n\t        function Testability(_ngZone) {\n\t            this._ngZone = _ngZone;\n\t            /** @internal */\n\t            this._pendingCount = 0;\n\t            /** @internal */\n\t            this._isZoneStable = true;\n\t            /**\n\t             * Whether any work was done since the last 'whenStable' callback. This is\n\t             * useful to detect if this could have potentially destabilized another\n\t             * component while it is stabilizing.\n\t             * @internal\n\t             */\n\t            this._didWork = false;\n\t            /** @internal */\n\t            this._callbacks = [];\n\t            this._watchAngularEvents();\n\t        }\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        Testability.prototype._watchAngularEvents = function () {\n\t            var _this = this;\n\t            this._ngZone.onUnstable.subscribe({\n\t                next: function () {\n\t                    _this._didWork = true;\n\t                    _this._isZoneStable = false;\n\t                }\n\t            });\n\t            this._ngZone.runOutsideAngular(function () {\n\t                _this._ngZone.onStable.subscribe({\n\t                    next: function () {\n\t                        NgZone.assertNotInAngularZone();\n\t                        scheduleMicroTask(function () {\n\t                            _this._isZoneStable = true;\n\t                            _this._runCallbacksIfReady();\n\t                        });\n\t                    }\n\t                });\n\t            });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.increasePendingRequestCount = function () {\n\t            this._pendingCount += 1;\n\t            this._didWork = true;\n\t            return this._pendingCount;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.decreasePendingRequestCount = function () {\n\t            this._pendingCount -= 1;\n\t            if (this._pendingCount < 0) {\n\t                throw new Error('pending async requests below zero');\n\t            }\n\t            this._runCallbacksIfReady();\n\t            return this._pendingCount;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.isStable = function () {\n\t            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n\t        };\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        Testability.prototype._runCallbacksIfReady = function () {\n\t            var _this = this;\n\t            if (this.isStable()) {\n\t                // Schedules the call backs in a new frame so that it is always async.\n\t                scheduleMicroTask(function () {\n\t                    while (_this._callbacks.length !== 0) {\n\t                        (_this._callbacks.pop())(_this._didWork);\n\t                    }\n\t                    _this._didWork = false;\n\t                });\n\t            }\n\t            else {\n\t                // Not Ready\n\t                this._didWork = true;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.whenStable = function (callback) {\n\t            this._callbacks.push(callback);\n\t            this._runCallbacksIfReady();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n\t        /**\n\t         * @deprecated use findProviders\n\t         * @param {?} using\n\t         * @param {?} provider\n\t         * @param {?} exactMatch\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.findBindings = function (using, provider, exactMatch) {\n\t            // TODO(juliemr): implement.\n\t            return [];\n\t        };\n\t        /**\n\t         * @param {?} using\n\t         * @param {?} provider\n\t         * @param {?} exactMatch\n\t         * @return {?}\n\t         */\n\t        Testability.prototype.findProviders = function (using, provider, exactMatch) {\n\t            // TODO(juliemr): implement.\n\t            return [];\n\t        };\n\t        Testability.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        Testability.ctorParameters = function () { return [\n\t            { type: NgZone, },\n\t        ]; };\n\t        return Testability;\n\t    }());\n\t    /**\n\t     * A global registry of {\\@link Testability} instances for specific elements.\n\t     * \\@experimental\n\t     */\n\t    var TestabilityRegistry = (function () {\n\t        function TestabilityRegistry() {\n\t            /** @internal */\n\t            this._applications = new Map();\n\t            _testabilityGetter.addToWindow(this);\n\t        }\n\t        /**\n\t         * @param {?} token\n\t         * @param {?} testability\n\t         * @return {?}\n\t         */\n\t        TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n\t            this._applications.set(token, testability);\n\t        };\n\t        /**\n\t         * @param {?} elem\n\t         * @return {?}\n\t         */\n\t        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n\t        /**\n\t         * @param {?} elem\n\t         * @param {?=} findInAncestors\n\t         * @return {?}\n\t         */\n\t        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n\t            if (findInAncestors === void 0) { findInAncestors = true; }\n\t            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n\t        };\n\t        TestabilityRegistry.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        TestabilityRegistry.ctorParameters = function () { return []; };\n\t        return TestabilityRegistry;\n\t    }());\n\t    var _NoopGetTestability = (function () {\n\t        function _NoopGetTestability() {\n\t        }\n\t        /**\n\t         * @param {?} registry\n\t         * @return {?}\n\t         */\n\t        _NoopGetTestability.prototype.addToWindow = function (registry) { };\n\t        /**\n\t         * @param {?} registry\n\t         * @param {?} elem\n\t         * @param {?} findInAncestors\n\t         * @return {?}\n\t         */\n\t        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n\t            return null;\n\t        };\n\t        return _NoopGetTestability;\n\t    }());\n\t    /**\n\t     * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n\t     * \\@experimental\n\t     * @param {?} getter\n\t     * @return {?}\n\t     */\n\t    function setTestabilityGetter(getter) {\n\t        _testabilityGetter = getter;\n\t    }\n\t    var /** @type {?} */ _testabilityGetter = new _NoopGetTestability();\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$3 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ _devMode = true;\n\t    var /** @type {?} */ _runModeLocked = false;\n\t    var /** @type {?} */ _platform;\n\t    /**\n\t     * Disable Angular's development mode, which turns off assertions and other\n\t     * checks within the framework.\n\t     *\n\t     * One important assertion this disables verifies that a change detection pass\n\t     * does not result in additional changes to any bindings (also known as\n\t     * unidirectional data flow).\n\t     *\n\t     * \\@stable\n\t     * @return {?}\n\t     */\n\t    function enableProdMode() {\n\t        if (_runModeLocked) {\n\t            throw new Error('Cannot enable prod mode after platform setup.');\n\t        }\n\t        _devMode = false;\n\t    }\n\t    /**\n\t     * Returns whether Angular is in development mode. After called once,\n\t     * the value is locked and won't change any more.\n\t     *\n\t     * By default, this is true, unless a user calls `enableProdMode` before calling this.\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @return {?}\n\t     */\n\t    function isDevMode() {\n\t        _runModeLocked = true;\n\t        return _devMode;\n\t    }\n\t    /**\n\t     * A token for third-party components that can register themselves with NgProbe.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var NgProbeToken = (function () {\n\t        /**\n\t         * @param {?} name\n\t         * @param {?} token\n\t         */\n\t        function NgProbeToken(name, token) {\n\t            this.name = name;\n\t            this.token = token;\n\t        }\n\t        return NgProbeToken;\n\t    }());\n\t    /**\n\t     * Creates a platform.\n\t     * Platforms have to be eagerly created via this function.\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @param {?} injector\n\t     * @return {?}\n\t     */\n\t    function createPlatform(injector) {\n\t        if (_platform && !_platform.destroyed) {\n\t            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n\t        }\n\t        _platform = injector.get(PlatformRef);\n\t        var /** @type {?} */ inits = (injector.get(PLATFORM_INITIALIZER, null));\n\t        if (inits)\n\t            inits.forEach(function (init) { return init(); });\n\t        return _platform;\n\t    }\n\t    /**\n\t     * Creates a factory for a platform\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @param {?} parentPlatformFactory\n\t     * @param {?} name\n\t     * @param {?=} providers\n\t     * @return {?}\n\t     */\n\t    function createPlatformFactory(parentPlatformFactory, name, providers) {\n\t        if (providers === void 0) { providers = []; }\n\t        var /** @type {?} */ marker = new OpaqueToken(\"Platform: \" + name);\n\t        return function (extraProviders) {\n\t            if (extraProviders === void 0) { extraProviders = []; }\n\t            if (!getPlatform()) {\n\t                if (parentPlatformFactory) {\n\t                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n\t                }\n\t                else {\n\t                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));\n\t                }\n\t            }\n\t            return assertPlatform(marker);\n\t        };\n\t    }\n\t    /**\n\t     * Checks that there currently is a platform\n\t     * which contains the given token as a provider.\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @param {?} requiredToken\n\t     * @return {?}\n\t     */\n\t    function assertPlatform(requiredToken) {\n\t        var /** @type {?} */ platform = getPlatform();\n\t        if (!platform) {\n\t            throw new Error('No platform exists!');\n\t        }\n\t        if (!platform.injector.get(requiredToken, null)) {\n\t            throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n\t        }\n\t        return platform;\n\t    }\n\t    /**\n\t     * Destroy the existing platform.\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @return {?}\n\t     */\n\t    function destroyPlatform() {\n\t        if (_platform && !_platform.destroyed) {\n\t            _platform.destroy();\n\t        }\n\t    }\n\t    /**\n\t     * Returns the current platform.\n\t     *\n\t     * \\@experimental APIs related to application bootstrap are currently under review.\n\t     * @return {?}\n\t     */\n\t    function getPlatform() {\n\t        return _platform && !_platform.destroyed ? _platform : null;\n\t    }\n\t    /**\n\t     * The Angular platform is the entry point for Angular on a web page. Each page\n\t     * has exactly one platform, and services (such as reflection) which are common\n\t     * to every Angular application running on the page are bound in its scope.\n\t     *\n\t     * A page's platform is initialized implicitly when {\\@link bootstrap}() is called, or\n\t     * explicitly by calling {\\@link createPlatform}().\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var PlatformRef = (function () {\n\t        function PlatformRef() {\n\t        }\n\t        /**\n\t         * Creates an instance of an `\\@NgModule` for the given platform\n\t         * for offline compilation.\n\t         *\n\t         * ## Simple Example\n\t         *\n\t         * ```typescript\n\t         * my_module.ts:\n\t         *\n\t         * \\@NgModule({\n\t         *   imports: [BrowserModule]\n\t         * })\n\t         * class MyModule {}\n\t         *\n\t         * main.ts:\n\t         * import {MyModuleNgFactory} from './my_module.ngfactory';\n\t         * import {platformBrowser} from '\\@angular/platform-browser';\n\t         *\n\t         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n\t         * ```\n\t         *\n\t         * \\@experimental APIs related to application bootstrap are currently under review.\n\t         * @abstract\n\t         * @param {?} moduleFactory\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };\n\t        /**\n\t         * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n\t         *\n\t         * ## Simple Example\n\t         *\n\t         * ```typescript\n\t         * \\@NgModule({\n\t         *   imports: [BrowserModule]\n\t         * })\n\t         * class MyModule {}\n\t         *\n\t         * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n\t         * ```\n\t         * \\@stable\n\t         * @abstract\n\t         * @param {?} moduleType\n\t         * @param {?=} compilerOptions\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };\n\t        /**\n\t         * Register a listener to be called when the platform is disposed.\n\t         * @abstract\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.onDestroy = function (callback) { };\n\t        /**\n\t         * Retrieve the platform {\\@link Injector}, which is the parent injector for\n\t         * every Angular application on the page and provides singleton providers.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.injector = function () { };\n\t        /**\n\t         * Destroy the Angular platform and all Angular applications on the page.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.destroy = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        PlatformRef.prototype.destroyed = function () { };\n\t        return PlatformRef;\n\t    }());\n\t    /**\n\t     * @param {?} errorHandler\n\t     * @param {?} callback\n\t     * @return {?}\n\t     */\n\t    function _callAndReportToErrorHandler(errorHandler, callback) {\n\t        try {\n\t            var /** @type {?} */ result = callback();\n\t            if (isPromise(result)) {\n\t                return result.catch(function (e) {\n\t                    errorHandler.handleError(e);\n\t                    // rethrow as the exception handler might not do it\n\t                    throw e;\n\t                });\n\t            }\n\t            return result;\n\t        }\n\t        catch (e) {\n\t            errorHandler.handleError(e);\n\t            // rethrow as the exception handler might not do it\n\t            throw e;\n\t        }\n\t    }\n\t    var PlatformRef_ = (function (_super) {\n\t        __extends$3(PlatformRef_, _super);\n\t        /**\n\t         * @param {?} _injector\n\t         */\n\t        function PlatformRef_(_injector) {\n\t            _super.call(this);\n\t            this._injector = _injector;\n\t            this._modules = [];\n\t            this._destroyListeners = [];\n\t            this._destroyed = false;\n\t        }\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n\t        Object.defineProperty(PlatformRef_.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._injector; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(PlatformRef_.prototype, \"destroyed\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._destroyed; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype.destroy = function () {\n\t            if (this._destroyed) {\n\t                throw new Error('The platform has already been destroyed!');\n\t            }\n\t            this._modules.slice().forEach(function (module) { return module.destroy(); });\n\t            this._destroyListeners.forEach(function (listener) { return listener(); });\n\t            this._destroyed = true;\n\t        };\n\t        /**\n\t         * @param {?} moduleFactory\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {\n\t            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);\n\t        };\n\t        /**\n\t         * @param {?} moduleFactory\n\t         * @param {?} ngZone\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {\n\t            var _this = this;\n\t            // Note: We need to create the NgZone _before_ we instantiate the module,\n\t            // as instantiating the module creates some providers eagerly.\n\t            // So we create a mini parent injector that just contains the new NgZone and\n\t            // pass that as parent to the NgModuleFactory.\n\t            if (!ngZone)\n\t                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });\n\t            // Attention: Don't use ApplicationRef.run here,\n\t            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n\t            return ngZone.run(function () {\n\t                var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);\n\t                var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));\n\t                var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n\t                if (!exceptionHandler) {\n\t                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n\t                }\n\t                moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });\n\t                ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });\n\t                return _callAndReportToErrorHandler(exceptionHandler, function () {\n\t                    var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);\n\t                    return initStatus.donePromise.then(function () {\n\t                        _this._moduleDoBootstrap(moduleRef);\n\t                        return moduleRef;\n\t                    });\n\t                });\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} moduleType\n\t         * @param {?=} compilerOptions\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n\t            if (compilerOptions === void 0) { compilerOptions = []; }\n\t            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);\n\t        };\n\t        /**\n\t         * @param {?} moduleType\n\t         * @param {?=} compilerOptions\n\t         * @param {?} ngZone\n\t         * @param {?=} componentFactoryCallback\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {\n\t            var _this = this;\n\t            if (compilerOptions === void 0) { compilerOptions = []; }\n\t            var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);\n\t            var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);\n\t            // ugly internal api hack: generate host component factories for all declared components and\n\t            // pass the factories into the callback - this is used by UpdateAdapter to get hold of all\n\t            // factories.\n\t            if (componentFactoryCallback) {\n\t                return compiler.compileModuleAndAllComponentsAsync(moduleType)\n\t                    .then(function (_a) {\n\t                    var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;\n\t                    componentFactoryCallback(componentFactories);\n\t                    return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);\n\t                });\n\t            }\n\t            return compiler.compileModuleAsync(moduleType)\n\t                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });\n\t        };\n\t        /**\n\t         * @param {?} moduleRef\n\t         * @return {?}\n\t         */\n\t        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {\n\t            var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);\n\t            if (moduleRef.bootstrapFactories.length > 0) {\n\t                moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });\n\t            }\n\t            else if (moduleRef.instance.ngDoBootstrap) {\n\t                moduleRef.instance.ngDoBootstrap(appRef);\n\t            }\n\t            else {\n\t                throw new Error((\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \") +\n\t                    \"Please define one of these.\");\n\t            }\n\t            this._modules.push(moduleRef);\n\t        };\n\t        PlatformRef_.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        PlatformRef_.ctorParameters = function () { return [\n\t            { type: Injector, },\n\t        ]; };\n\t        return PlatformRef_;\n\t    }(PlatformRef));\n\t    /**\n\t     * A reference to an Angular application running on a page.\n\t     *\n\t     * For more about Angular applications, see the documentation for {\\@link bootstrap}.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ApplicationRef = (function () {\n\t        function ApplicationRef() {\n\t        }\n\t        /**\n\t         * Bootstrap a new component at the root level of the application.\n\t         *\n\t         * ### Bootstrap process\n\t         *\n\t         * When bootstrapping a new root component into an application, Angular mounts the\n\t         * specified application component onto DOM elements identified by the [componentType]'s\n\t         * selector and kicks off automatic change detection to finish initializing the component.\n\t         *\n\t         * ### Example\n\t         * {\\@example core/ts/platform/platform.ts region='longform'}\n\t         * @abstract\n\t         * @param {?} componentFactory\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.bootstrap = function (componentFactory) { };\n\t        /**\n\t         * Invoke this method to explicitly process change detection and its side-effects.\n\t         *\n\t         * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n\t         * further changes are detected. If additional changes are picked up during this second cycle,\n\t         * bindings in the app have side-effects that cannot be resolved in a single change detection\n\t         * pass.\n\t         * In this case, Angular throws an error, since an Angular application can only have one change\n\t         * detection pass during which all change detection must complete.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.tick = function () { };\n\t        /**\n\t         * Get a list of component types registered to this application.\n\t         * This list is populated even before the component is created.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.componentTypes = function () { };\n\t        /**\n\t         * Get a list of components registered to this application.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.components = function () { };\n\t        /**\n\t         * Attaches a view so that it will be dirty checked.\n\t         * The view will be automatically detached when it is destroyed.\n\t         * This will throw if the view is already attached to a ViewContainer.\n\t         * @abstract\n\t         * @param {?} view\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.attachView = function (view) { };\n\t        /**\n\t         * Detaches a view from dirty checking again.\n\t         * @abstract\n\t         * @param {?} view\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.detachView = function (view) { };\n\t        /**\n\t         * Returns the number of attached views.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ApplicationRef.prototype.viewCount = function () { };\n\t        return ApplicationRef;\n\t    }());\n\t    var ApplicationRef_ = (function (_super) {\n\t        __extends$3(ApplicationRef_, _super);\n\t        /**\n\t         * @param {?} _zone\n\t         * @param {?} _console\n\t         * @param {?} _injector\n\t         * @param {?} _exceptionHandler\n\t         * @param {?} _componentFactoryResolver\n\t         * @param {?} _initStatus\n\t         * @param {?} _testabilityRegistry\n\t         * @param {?} _testability\n\t         */\n\t        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {\n\t            var _this = this;\n\t            _super.call(this);\n\t            this._zone = _zone;\n\t            this._console = _console;\n\t            this._injector = _injector;\n\t            this._exceptionHandler = _exceptionHandler;\n\t            this._componentFactoryResolver = _componentFactoryResolver;\n\t            this._initStatus = _initStatus;\n\t            this._testabilityRegistry = _testabilityRegistry;\n\t            this._testability = _testability;\n\t            this._bootstrapListeners = [];\n\t            this._rootComponents = [];\n\t            this._rootComponentTypes = [];\n\t            this._views = [];\n\t            this._runningTick = false;\n\t            this._enforceNoNewChanges = false;\n\t            this._enforceNoNewChanges = isDevMode();\n\t            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n\t        }\n\t        /**\n\t         * @param {?} viewRef\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype.attachView = function (viewRef) {\n\t            var /** @type {?} */ view = ((viewRef)).internalView;\n\t            this._views.push(view);\n\t            view.attachToAppRef(this);\n\t        };\n\t        /**\n\t         * @param {?} viewRef\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype.detachView = function (viewRef) {\n\t            var /** @type {?} */ view = ((viewRef)).internalView;\n\t            ListWrapper.remove(this._views, view);\n\t            view.detach();\n\t        };\n\t        /**\n\t         * @param {?} componentOrFactory\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {\n\t            var _this = this;\n\t            if (!this._initStatus.done) {\n\t                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n\t            }\n\t            var /** @type {?} */ componentFactory;\n\t            if (componentOrFactory instanceof ComponentFactory) {\n\t                componentFactory = componentOrFactory;\n\t            }\n\t            else {\n\t                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n\t            }\n\t            this._rootComponentTypes.push(componentFactory.componentType);\n\t            var /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);\n\t            compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n\t            var /** @type {?} */ testability = compRef.injector.get(Testability, null);\n\t            if (testability) {\n\t                compRef.injector.get(TestabilityRegistry)\n\t                    .registerApplication(compRef.location.nativeElement, testability);\n\t            }\n\t            this._loadComponent(compRef);\n\t            if (isDevMode()) {\n\t                this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n\t            }\n\t            return compRef;\n\t        };\n\t        /**\n\t         * @param {?} componentRef\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype._loadComponent = function (componentRef) {\n\t            this.attachView(componentRef.hostView);\n\t            this.tick();\n\t            this._rootComponents.push(componentRef);\n\t            // Get the listeners lazily to prevent DI cycles.\n\t            var /** @type {?} */ listeners = (this._injector.get(APP_BOOTSTRAP_LISTENER, [])\n\t                .concat(this._bootstrapListeners));\n\t            listeners.forEach(function (listener) { return listener(componentRef); });\n\t        };\n\t        /**\n\t         * @param {?} componentRef\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype._unloadComponent = function (componentRef) {\n\t            this.detachView(componentRef.hostView);\n\t            ListWrapper.remove(this._rootComponents, componentRef);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype.tick = function () {\n\t            if (this._runningTick) {\n\t                throw new Error('ApplicationRef.tick is called recursively');\n\t            }\n\t            var /** @type {?} */ scope = ApplicationRef_._tickScope();\n\t            try {\n\t                this._runningTick = true;\n\t                this._views.forEach(function (view) { return view.ref.detectChanges(); });\n\t                if (this._enforceNoNewChanges) {\n\t                    this._views.forEach(function (view) { return view.ref.checkNoChanges(); });\n\t                }\n\t            }\n\t            finally {\n\t                this._runningTick = false;\n\t                wtfLeave(scope);\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ApplicationRef_.prototype.ngOnDestroy = function () {\n\t            // TODO(alxhub): Dispose of the NgZone.\n\t            this._views.slice().forEach(function (view) { return view.destroy(); });\n\t        };\n\t        Object.defineProperty(ApplicationRef_.prototype, \"viewCount\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._views.length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ApplicationRef_.prototype, \"componentTypes\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._rootComponentTypes; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ApplicationRef_.prototype, \"components\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._rootComponents; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /** @internal */\n\t        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');\n\t        ApplicationRef_.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        ApplicationRef_.ctorParameters = function () { return [\n\t            { type: NgZone, },\n\t            { type: Console, },\n\t            { type: Injector, },\n\t            { type: ErrorHandler, },\n\t            { type: ComponentFactoryResolver, },\n\t            { type: ApplicationInitStatus, },\n\t            { type: TestabilityRegistry, decorators: [{ type: Optional },] },\n\t            { type: Testability, decorators: [{ type: Optional },] },\n\t        ]; };\n\t        return ApplicationRef_;\n\t    }(ApplicationRef));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$9 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n\t     *\n\t     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n\t     * NgModule Instance.\n\t     *\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var NgModuleRef = (function () {\n\t        function NgModuleRef() {\n\t        }\n\t        /**\n\t         * The injector that contains all of the providers of the NgModule.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleRef.prototype.injector = function () { };\n\t        /**\n\t         * The ComponentFactoryResolver to get hold of the ComponentFactories\n\t         * declared in the `entryComponents` property of the module.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleRef.prototype.componentFactoryResolver = function () { };\n\t        /**\n\t         * The NgModule instance.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleRef.prototype.instance = function () { };\n\t        /**\n\t         * Destroys the module instance and all of the data structures associated with it.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleRef.prototype.destroy = function () { };\n\t        /**\n\t         * Allows to register a callback that will be called when the module is destroyed.\n\t         * @abstract\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        NgModuleRef.prototype.onDestroy = function (callback) { };\n\t        return NgModuleRef;\n\t    }());\n\t    /**\n\t     * \\@experimental\n\t     */\n\t    var NgModuleFactory = (function () {\n\t        /**\n\t         * @param {?} _injectorClass\n\t         * @param {?} _moduleType\n\t         */\n\t        function NgModuleFactory(_injectorClass, _moduleType) {\n\t            this._injectorClass = _injectorClass;\n\t            this._moduleType = _moduleType;\n\t        }\n\t        Object.defineProperty(NgModuleFactory.prototype, \"moduleType\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._moduleType; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} parentInjector\n\t         * @return {?}\n\t         */\n\t        NgModuleFactory.prototype.create = function (parentInjector) {\n\t            if (!parentInjector) {\n\t                parentInjector = Injector.NULL;\n\t            }\n\t            var /** @type {?} */ instance = new this._injectorClass(parentInjector);\n\t            instance.create();\n\t            return instance;\n\t        };\n\t        return NgModuleFactory;\n\t    }());\n\t    var /** @type {?} */ _UNDEFINED = new Object();\n\t    /**\n\t     * @abstract\n\t     */\n\t    var NgModuleInjector = (function (_super) {\n\t        __extends$9(NgModuleInjector, _super);\n\t        /**\n\t         * @param {?} parent\n\t         * @param {?} factories\n\t         * @param {?} bootstrapFactories\n\t         */\n\t        function NgModuleInjector(parent, factories, bootstrapFactories) {\n\t            _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));\n\t            this.parent = parent;\n\t            this.bootstrapFactories = bootstrapFactories;\n\t            this._destroyListeners = [];\n\t            this._destroyed = false;\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.createInternal = function () { };\n\t        /**\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.get = function (token, notFoundValue) {\n\t            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n\t            if (token === Injector || token === ComponentFactoryResolver) {\n\t                return this;\n\t            }\n\t            var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);\n\t            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;\n\t        };\n\t        /**\n\t         * @abstract\n\t         * @param {?} token\n\t         * @param {?} notFoundValue\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };\n\t        Object.defineProperty(NgModuleInjector.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(NgModuleInjector.prototype, \"componentFactoryResolver\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.destroy = function () {\n\t            if (this._destroyed) {\n\t                throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n\t            }\n\t            this._destroyed = true;\n\t            this.destroyInternal();\n\t            this._destroyListeners.forEach(function (listener) { return listener(); });\n\t        };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        NgModuleInjector.prototype.destroyInternal = function () { };\n\t        return NgModuleInjector;\n\t    }(CodegenComponentFactoryResolver));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * Used to load ng module factories.\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var NgModuleFactoryLoader = (function () {\n\t        function NgModuleFactoryLoader() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        NgModuleFactoryLoader.prototype.load = function (path) { };\n\t        return NgModuleFactoryLoader;\n\t    }());\n\t    var /** @type {?} */ moduleFactories = new Map();\n\t    /**\n\t     * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n\t     * \\@experimental\n\t     * @param {?} id\n\t     * @param {?} factory\n\t     * @return {?}\n\t     */\n\t    function registerModuleFactory(id, factory) {\n\t        var /** @type {?} */ existing = moduleFactories.get(id);\n\t        if (existing) {\n\t            throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n\t        }\n\t        moduleFactories.set(id, factory);\n\t    }\n\t    /**\n\t     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n\t     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n\t     * cannot be found.\n\t     * \\@experimental\n\t     * @param {?} id\n\t     * @return {?}\n\t     */\n\t    function getModuleFactory(id) {\n\t        var /** @type {?} */ factory = moduleFactories.get(id);\n\t        if (!factory)\n\t            throw new Error(\"No module with ID \" + id + \" loaded\");\n\t        return factory;\n\t    }\n\t\n\t    /**\n\t     * An unmodifiable list of items that Angular keeps up to date when the state\n\t     * of the application changes.\n\t     *\n\t     * The type of object that {\\@link Query} and {\\@link ViewQueryMetadata} provide.\n\t     *\n\t     * Implements an iterable interface, therefore it can be used in both ES6\n\t     * javascript `for (var i of items)` loops as well as in Angular templates with\n\t     * `*ngFor=\"let i of myList\"`.\n\t     *\n\t     * Changes can be observed by subscribing to the changes `Observable`.\n\t     *\n\t     * NOTE: In the future this class will implement an `Observable` interface.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n\t     * ```typescript\n\t     * \\@Component({...})\n\t     * class Container {\n\t     *   \\@ViewChildren(Item) items:QueryList<Item>;\n\t     * }\n\t     * ```\n\t     * \\@stable\n\t     */\n\t    var QueryList = (function () {\n\t        function QueryList() {\n\t            this._dirty = true;\n\t            this._results = [];\n\t            this._emitter = new EventEmitter();\n\t        }\n\t        Object.defineProperty(QueryList.prototype, \"changes\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._emitter; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(QueryList.prototype, \"length\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._results.length; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(QueryList.prototype, \"first\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._results[0]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(QueryList.prototype, \"last\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._results[this.length - 1]; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * See\n\t         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n\t        /**\n\t         * See\n\t         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.filter = function (fn) {\n\t            return this._results.filter(fn);\n\t        };\n\t        /**\n\t         * See\n\t         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.find = function (fn) { return this._results.find(fn); };\n\t        /**\n\t         * See\n\t         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n\t         * @param {?} fn\n\t         * @param {?} init\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.reduce = function (fn, init) {\n\t            return this._results.reduce(fn, init);\n\t        };\n\t        /**\n\t         * See\n\t         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n\t        /**\n\t         * See\n\t         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.some = function (fn) {\n\t            return this._results.some(fn);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.toArray = function () { return this._results.slice(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.toString = function () { return this._results.toString(); };\n\t        /**\n\t         * @param {?} res\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.reset = function (res) {\n\t            this._results = ListWrapper.flatten(res);\n\t            this._dirty = false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };\n\t        /**\n\t         * internal\n\t         * @return {?}\n\t         */\n\t        QueryList.prototype.setDirty = function () { this._dirty = true; };\n\t        Object.defineProperty(QueryList.prototype, \"dirty\", {\n\t            /**\n\t             * internal\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._dirty; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return QueryList;\n\t    }());\n\t\n\t    var /** @type {?} */ _SEPARATOR = '#';\n\t    var /** @type {?} */ FACTORY_CLASS_SUFFIX = 'NgFactory';\n\t    /**\n\t     * Configuration for SystemJsNgModuleLoader.\n\t     * token.\n\t     *\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var SystemJsNgModuleLoaderConfig = (function () {\n\t        function SystemJsNgModuleLoaderConfig() {\n\t        }\n\t        return SystemJsNgModuleLoaderConfig;\n\t    }());\n\t    var /** @type {?} */ DEFAULT_CONFIG = {\n\t        factoryPathPrefix: '',\n\t        factoryPathSuffix: '.ngfactory',\n\t    };\n\t    /**\n\t     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n\t     * \\@experimental\n\t     */\n\t    var SystemJsNgModuleLoader = (function () {\n\t        /**\n\t         * @param {?} _compiler\n\t         * @param {?=} config\n\t         */\n\t        function SystemJsNgModuleLoader(_compiler, config) {\n\t            this._compiler = _compiler;\n\t            this._config = config || DEFAULT_CONFIG;\n\t        }\n\t        /**\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        SystemJsNgModuleLoader.prototype.load = function (path) {\n\t            var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\n\t            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n\t        };\n\t        /**\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\n\t            var _this = this;\n\t            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n\t            if (exportName === undefined) {\n\t                exportName = 'default';\n\t            }\n\t            return System.import(module)\n\t                .then(function (module) { return module[exportName]; })\n\t                .then(function (type) { return checkNotEmpty(type, module, exportName); })\n\t                .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n\t        };\n\t        /**\n\t         * @param {?} path\n\t         * @return {?}\n\t         */\n\t        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\n\t            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n\t            var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n\t            if (exportName === undefined) {\n\t                exportName = 'default';\n\t                factoryClassSuffix = '';\n\t            }\n\t            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n\t                .then(function (module) { return module[exportName + factoryClassSuffix]; })\n\t                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n\t        };\n\t        SystemJsNgModuleLoader.decorators = [\n\t            { type: Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        SystemJsNgModuleLoader.ctorParameters = function () { return [\n\t            { type: Compiler, },\n\t            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\n\t        ]; };\n\t        return SystemJsNgModuleLoader;\n\t    }());\n\t    /**\n\t     * @param {?} value\n\t     * @param {?} modulePath\n\t     * @param {?} exportName\n\t     * @return {?}\n\t     */\n\t    function checkNotEmpty(value, modulePath, exportName) {\n\t        if (!value) {\n\t            throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n\t        }\n\t        return value;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$10 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Represents an Embedded Template that can be used to instantiate Embedded Views.\n\t     *\n\t     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or\n\t     * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the\n\t     * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the\n\t     * `TemplateRef` from a Component or a Directive via {\\@link Query}.\n\t     *\n\t     * To instantiate Embedded Views based on a Template, use\n\t     * {\\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n\t     * View Container.\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var TemplateRef = (function () {\n\t        function TemplateRef() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        TemplateRef.prototype.elementRef = function () { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} context\n\t         * @return {?}\n\t         */\n\t        TemplateRef.prototype.createEmbeddedView = function (context) { };\n\t        return TemplateRef;\n\t    }());\n\t    var TemplateRef_ = (function (_super) {\n\t        __extends$10(TemplateRef_, _super);\n\t        /**\n\t         * @param {?} _parentView\n\t         * @param {?} _nodeIndex\n\t         * @param {?} _nativeElement\n\t         */\n\t        function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {\n\t            _super.call(this);\n\t            this._parentView = _parentView;\n\t            this._nodeIndex = _nodeIndex;\n\t            this._nativeElement = _nativeElement;\n\t        }\n\t        /**\n\t         * @param {?} context\n\t         * @return {?}\n\t         */\n\t        TemplateRef_.prototype.createEmbeddedView = function (context) {\n\t            var /** @type {?} */ view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);\n\t            view.create(context || ({}));\n\t            return view.ref;\n\t        };\n\t        Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return new ElementRef(this._nativeElement); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return TemplateRef_;\n\t    }(TemplateRef));\n\t\n\t    /**\n\t     * Represents a container where one or more Views can be attached.\n\t     *\n\t     * The container can contain two kinds of Views. Host Views, created by instantiating a\n\t     * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\n\t     * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\n\t     *\n\t     * The location of the View Container within the containing View is specified by the Anchor\n\t     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n\t     * have a single View Container.\n\t     *\n\t     * Root elements of Views attached to this container become siblings of the Anchor Element in\n\t     * the Rendered View.\n\t     *\n\t     * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\n\t     * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ViewContainerRef = (function () {\n\t        function ViewContainerRef() {\n\t        }\n\t        /**\n\t         * Anchor element that specifies the location of this container in the containing View.\n\t         * <!-- TODO: rename to anchorElement -->\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.element = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.injector = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.parentInjector = function () { };\n\t        /**\n\t         * Destroys all Views in this container.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.clear = function () { };\n\t        /**\n\t         * Returns the {\\@link ViewRef} for the View located in this container at the specified index.\n\t         * @abstract\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.get = function (index) { };\n\t        /**\n\t         * Returns the number of Views currently attached to this container.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.length = function () { };\n\t        /**\n\t         * Instantiates an Embedded View based on the {\\@link TemplateRef `templateRef`} and inserts it\n\t         * into this container at the specified `index`.\n\t         *\n\t         * If `index` is not specified, the new View will be inserted as the last View in the container.\n\t         *\n\t         * Returns the {\\@link ViewRef} for the newly created View.\n\t         * @abstract\n\t         * @param {?} templateRef\n\t         * @param {?=} context\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };\n\t        /**\n\t         * Instantiates a single {\\@link Component} and inserts its Host View into this container at the\n\t         * specified `index`.\n\t         *\n\t         * The component is instantiated using its {\\@link ComponentFactory} which can be\n\t         * obtained via {\\@link ComponentFactoryResolver#resolveComponentFactory}.\n\t         *\n\t         * If `index` is not specified, the new View will be inserted as the last View in the container.\n\t         *\n\t         * You can optionally specify the {\\@link Injector} that will be used as parent for the Component.\n\t         *\n\t         * Returns the {\\@link ComponentRef} of the Host View created for the newly instantiated Component.\n\t         * @abstract\n\t         * @param {?} componentFactory\n\t         * @param {?=} index\n\t         * @param {?=} injector\n\t         * @param {?=} projectableNodes\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { };\n\t        /**\n\t         * Inserts a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n\t         *\n\t         * If `index` is not specified, the new View will be inserted as the last View in the container.\n\t         *\n\t         * Returns the inserted {\\@link ViewRef}.\n\t         * @abstract\n\t         * @param {?} viewRef\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.insert = function (viewRef, index) { };\n\t        /**\n\t         * Moves a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n\t         *\n\t         * Returns the inserted {\\@link ViewRef}.\n\t         * @abstract\n\t         * @param {?} viewRef\n\t         * @param {?} currentIndex\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };\n\t        /**\n\t         * Returns the index of the View, specified via {\\@link ViewRef}, within the current container or\n\t         * `-1` if this container doesn't contain the View.\n\t         * @abstract\n\t         * @param {?} viewRef\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.indexOf = function (viewRef) { };\n\t        /**\n\t         * Destroys a View attached to this container at the specified `index`.\n\t         *\n\t         * If `index` is not specified, the last View in the container will be removed.\n\t         * @abstract\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.remove = function (index) { };\n\t        /**\n\t         * Use along with {\\@link #insert} to move a View within the current container.\n\t         *\n\t         * If the `index` param is omitted, the last {\\@link ViewRef} is detached.\n\t         * @abstract\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef.prototype.detach = function (index) { };\n\t        return ViewContainerRef;\n\t    }());\n\t    var ViewContainerRef_ = (function () {\n\t        /**\n\t         * @param {?} _element\n\t         */\n\t        function ViewContainerRef_(_element) {\n\t            this._element = _element;\n\t            /** @internal */\n\t            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');\n\t            /** @internal */\n\t            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');\n\t            /** @internal */\n\t            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');\n\t            /** @internal */\n\t            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');\n\t        }\n\t        /**\n\t         * @param {?} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };\n\t        Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ views = this._element.nestedViews;\n\t                return isPresent(views) ? views.length : 0;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._element.elementRef; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._element.injector; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._element.parentInjector; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} templateRef\n\t         * @param {?=} context\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n\t            if (context === void 0) { context = null; }\n\t            if (index === void 0) { index = -1; }\n\t            var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context);\n\t            this.insert(viewRef, index);\n\t            return viewRef;\n\t        };\n\t        /**\n\t         * @param {?} componentFactory\n\t         * @param {?=} index\n\t         * @param {?=} injector\n\t         * @param {?=} projectableNodes\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {\n\t            if (index === void 0) { index = -1; }\n\t            if (injector === void 0) { injector = null; }\n\t            if (projectableNodes === void 0) { projectableNodes = null; }\n\t            var /** @type {?} */ s = this._createComponentInContainerScope();\n\t            var /** @type {?} */ contextInjector = injector || this._element.parentInjector;\n\t            var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);\n\t            this.insert(componentRef.hostView, index);\n\t            return wtfLeave(s, componentRef);\n\t        };\n\t        /**\n\t         * @param {?} viewRef\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.insert = function (viewRef, index) {\n\t            if (index === void 0) { index = -1; }\n\t            var /** @type {?} */ s = this._insertScope();\n\t            if (index == -1)\n\t                index = this.length;\n\t            var /** @type {?} */ viewRef_ = (viewRef);\n\t            this._element.attachView(viewRef_.internalView, index);\n\t            return wtfLeave(s, viewRef_);\n\t        };\n\t        /**\n\t         * @param {?} viewRef\n\t         * @param {?} currentIndex\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n\t            var /** @type {?} */ s = this._insertScope();\n\t            if (currentIndex == -1)\n\t                return;\n\t            var /** @type {?} */ viewRef_ = (viewRef);\n\t            this._element.moveView(viewRef_.internalView, currentIndex);\n\t            return wtfLeave(s, viewRef_);\n\t        };\n\t        /**\n\t         * @param {?} viewRef\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.indexOf = function (viewRef) {\n\t            return this.length ? this._element.nestedViews.indexOf(((viewRef)).internalView) :\n\t                -1;\n\t        };\n\t        /**\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.remove = function (index) {\n\t            if (index === void 0) { index = -1; }\n\t            var /** @type {?} */ s = this._removeScope();\n\t            if (index == -1)\n\t                index = this.length - 1;\n\t            var /** @type {?} */ view = this._element.detachView(index);\n\t            view.destroy();\n\t            // view is intentionally not returned to the client.\n\t            wtfLeave(s);\n\t        };\n\t        /**\n\t         * @param {?=} index\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.detach = function (index) {\n\t            if (index === void 0) { index = -1; }\n\t            var /** @type {?} */ s = this._detachScope();\n\t            if (index == -1)\n\t                index = this.length - 1;\n\t            var /** @type {?} */ view = this._element.detachView(index);\n\t            return wtfLeave(s, view.ref);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewContainerRef_.prototype.clear = function () {\n\t            for (var /** @type {?} */ i = this.length - 1; i >= 0; i--) {\n\t                this.remove(i);\n\t            }\n\t        };\n\t        return ViewContainerRef_;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$11 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * \\@stable\n\t     * @abstract\n\t     */\n\t    var ViewRef = (function (_super) {\n\t        __extends$11(ViewRef, _super);\n\t        function ViewRef() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        /**\n\t         * Destroys the view and all of the data structures associated with it.\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewRef.prototype.destroy = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        ViewRef.prototype.destroyed = function () { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        ViewRef.prototype.onDestroy = function (callback) { };\n\t        return ViewRef;\n\t    }(ChangeDetectorRef));\n\t    /**\n\t     * Represents an Angular View.\n\t     *\n\t     * <!-- TODO: move the next two paragraphs to the dev guide -->\n\t     * A View is a fundamental building block of the application UI. It is the smallest grouping of\n\t     * Elements which are created and destroyed together.\n\t     *\n\t     * Properties of elements in a View can change, but the structure (number and order) of elements in\n\t     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n\t     * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n\t     * <!-- /TODO -->\n\t     *\n\t     * ### Example\n\t     *\n\t     * Given this template...\n\t     *\n\t     * ```\n\t     * Count: {{items.length}}\n\t     * <ul>\n\t     *   <li *ngFor=\"let  item of items\">{{item}}</li>\n\t     * </ul>\n\t     * ```\n\t     *\n\t     * We have two {\\@link TemplateRef}s:\n\t     *\n\t     * Outer {\\@link TemplateRef}:\n\t     * ```\n\t     * Count: {{items.length}}\n\t     * <ul>\n\t     *   <template ngFor let-item [ngForOf]=\"items\"></template>\n\t     * </ul>\n\t     * ```\n\t     *\n\t     * Inner {\\@link TemplateRef}:\n\t     * ```\n\t     *   <li>{{item}}</li>\n\t     * ```\n\t     *\n\t     * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n\t     *\n\t     * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n\t     *\n\t     * ```\n\t     * <!-- ViewRef: outer-0 -->\n\t     * Count: 2\n\t     * <ul>\n\t     *   <template view-container-ref></template>\n\t     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n\t     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n\t     * </ul>\n\t     * <!-- /ViewRef: outer-0 -->\n\t     * ```\n\t     * \\@experimental\n\t     * @abstract\n\t     */\n\t    var EmbeddedViewRef = (function (_super) {\n\t        __extends$11(EmbeddedViewRef, _super);\n\t        function EmbeddedViewRef() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        EmbeddedViewRef.prototype.context = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        EmbeddedViewRef.prototype.rootNodes = function () { };\n\t        return EmbeddedViewRef;\n\t    }(ViewRef));\n\t    var ViewRef_ = (function () {\n\t        /**\n\t         * @param {?} _view\n\t         * @param {?} animationQueue\n\t         */\n\t        function ViewRef_(_view, animationQueue) {\n\t            this._view = _view;\n\t            this.animationQueue = animationQueue;\n\t            this._view = _view;\n\t            this._originalMode = this._view.cdMode;\n\t        }\n\t        Object.defineProperty(ViewRef_.prototype, \"internalView\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view.flatRootNodes; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewRef_.prototype, \"context\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view.context; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view.destroyed; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.detectChanges = function () {\n\t            this._view.detectChanges(false);\n\t            this.animationQueue.flush();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.reattach = function () {\n\t            this._view.cdMode = this._originalMode;\n\t            this.markForCheck();\n\t        };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.onDestroy = function (callback) {\n\t            if (!this._view.disposables) {\n\t                this._view.disposables = [];\n\t            }\n\t            this._view.disposables.push(callback);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy(); };\n\t        return ViewRef_;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$12 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var EventListener = (function () {\n\t        /**\n\t         * @param {?} name\n\t         * @param {?} callback\n\t         */\n\t        function EventListener(name, callback) {\n\t            this.name = name;\n\t            this.callback = callback;\n\t        }\n\t        ;\n\t        return EventListener;\n\t    }());\n\t    /**\n\t     * \\@experimental All debugging apis are currently experimental.\n\t     */\n\t    var DebugNode = (function () {\n\t        /**\n\t         * @param {?} nativeNode\n\t         * @param {?} parent\n\t         * @param {?} _debugInfo\n\t         */\n\t        function DebugNode(nativeNode, parent, _debugInfo) {\n\t            this._debugInfo = _debugInfo;\n\t            this.nativeNode = nativeNode;\n\t            if (parent && parent instanceof DebugElement) {\n\t                parent.addChild(this);\n\t            }\n\t            else {\n\t                this.parent = null;\n\t            }\n\t            this.listeners = [];\n\t        }\n\t        Object.defineProperty(DebugNode.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._debugInfo ? this._debugInfo.injector : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._debugInfo ? this._debugInfo.component : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugNode.prototype, \"context\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._debugInfo ? this._debugInfo.context : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugNode.prototype, \"references\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._debugInfo ? this._debugInfo.references : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugNode.prototype, \"source\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._debugInfo ? this._debugInfo.source : null; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return DebugNode;\n\t    }());\n\t    /**\n\t     * \\@experimental All debugging apis are currently experimental.\n\t     */\n\t    var DebugElement = (function (_super) {\n\t        __extends$12(DebugElement, _super);\n\t        /**\n\t         * @param {?} nativeNode\n\t         * @param {?} parent\n\t         * @param {?} _debugInfo\n\t         */\n\t        function DebugElement(nativeNode, parent, _debugInfo) {\n\t            _super.call(this, nativeNode, parent, _debugInfo);\n\t            this.properties = {};\n\t            this.attributes = {};\n\t            this.classes = {};\n\t            this.styles = {};\n\t            this.childNodes = [];\n\t            this.nativeElement = nativeNode;\n\t        }\n\t        /**\n\t         * @param {?} child\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.addChild = function (child) {\n\t            if (child) {\n\t                this.childNodes.push(child);\n\t                child.parent = this;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} child\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.removeChild = function (child) {\n\t            var /** @type {?} */ childIndex = this.childNodes.indexOf(child);\n\t            if (childIndex !== -1) {\n\t                child.parent = null;\n\t                this.childNodes.splice(childIndex, 1);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} child\n\t         * @param {?} newChildren\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {\n\t            var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\n\t            if (siblingIndex !== -1) {\n\t                var /** @type {?} */ previousChildren = this.childNodes.slice(0, siblingIndex + 1);\n\t                var /** @type {?} */ nextChildren = this.childNodes.slice(siblingIndex + 1);\n\t                this.childNodes = previousChildren.concat(newChildren, nextChildren);\n\t                for (var /** @type {?} */ i = 0; i < newChildren.length; ++i) {\n\t                    var /** @type {?} */ newChild = newChildren[i];\n\t                    if (newChild.parent) {\n\t                        newChild.parent.removeChild(newChild);\n\t                    }\n\t                    newChild.parent = this;\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} predicate\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.query = function (predicate) {\n\t            var /** @type {?} */ results = this.queryAll(predicate);\n\t            return results[0] || null;\n\t        };\n\t        /**\n\t         * @param {?} predicate\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.queryAll = function (predicate) {\n\t            var /** @type {?} */ matches = [];\n\t            _queryElementChildren(this, predicate, matches);\n\t            return matches;\n\t        };\n\t        /**\n\t         * @param {?} predicate\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.queryAllNodes = function (predicate) {\n\t            var /** @type {?} */ matches = [];\n\t            _queryNodeChildren(this, predicate, matches);\n\t            return matches;\n\t        };\n\t        Object.defineProperty(DebugElement.prototype, \"children\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} eventName\n\t         * @param {?} eventObj\n\t         * @return {?}\n\t         */\n\t        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {\n\t            this.listeners.forEach(function (listener) {\n\t                if (listener.name == eventName) {\n\t                    listener.callback(eventObj);\n\t                }\n\t            });\n\t        };\n\t        return DebugElement;\n\t    }(DebugNode));\n\t    /**\n\t     * \\@experimental\n\t     * @param {?} debugEls\n\t     * @return {?}\n\t     */\n\t    function asNativeElements(debugEls) {\n\t        return debugEls.map(function (el) { return el.nativeElement; });\n\t    }\n\t    /**\n\t     * @param {?} element\n\t     * @param {?} predicate\n\t     * @param {?} matches\n\t     * @return {?}\n\t     */\n\t    function _queryElementChildren(element, predicate, matches) {\n\t        element.childNodes.forEach(function (node) {\n\t            if (node instanceof DebugElement) {\n\t                if (predicate(node)) {\n\t                    matches.push(node);\n\t                }\n\t                _queryElementChildren(node, predicate, matches);\n\t            }\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} parentNode\n\t     * @param {?} predicate\n\t     * @param {?} matches\n\t     * @return {?}\n\t     */\n\t    function _queryNodeChildren(parentNode, predicate, matches) {\n\t        if (parentNode instanceof DebugElement) {\n\t            parentNode.childNodes.forEach(function (node) {\n\t                if (predicate(node)) {\n\t                    matches.push(node);\n\t                }\n\t                if (node instanceof DebugElement) {\n\t                    _queryNodeChildren(node, predicate, matches);\n\t                }\n\t            });\n\t        }\n\t    }\n\t    // Need to keep the nodes in a global Map so that multiple angular apps are supported.\n\t    var /** @type {?} */ _nativeNodeToDebugNode = new Map();\n\t    /**\n\t     * \\@experimental\n\t     * @param {?} nativeNode\n\t     * @return {?}\n\t     */\n\t    function getDebugNode(nativeNode) {\n\t        return _nativeNodeToDebugNode.get(nativeNode);\n\t    }\n\t    /**\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    function indexDebugNode(node) {\n\t        _nativeNodeToDebugNode.set(node.nativeNode, node);\n\t    }\n\t    /**\n\t     * @param {?} node\n\t     * @return {?}\n\t     */\n\t    function removeDebugNodeFromIndex(node) {\n\t        _nativeNodeToDebugNode.delete(node.nativeNode);\n\t    }\n\t\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _reflector() {\n\t        return reflector;\n\t    }\n\t    var /** @type {?} */ _CORE_PLATFORM_PROVIDERS = [\n\t        PlatformRef_,\n\t        { provide: PlatformRef, useExisting: PlatformRef_ },\n\t        { provide: Reflector, useFactory: _reflector, deps: [] },\n\t        { provide: ReflectorReader, useExisting: Reflector },\n\t        TestabilityRegistry,\n\t        Console,\n\t    ];\n\t    /**\n\t     * This platform has to be included in any other platform\n\t     *\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\t\n\t    /**\n\t     * @experimental i18n support is experimental.\n\t     */\n\t    var /** @type {?} */ LOCALE_ID = new OpaqueToken('LocaleId');\n\t    /**\n\t     * @experimental i18n support is experimental.\n\t     */\n\t    var /** @type {?} */ TRANSLATIONS = new OpaqueToken('Translations');\n\t    /**\n\t     * @experimental i18n support is experimental.\n\t     */\n\t    var /** @type {?} */ TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');\n\t\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _iterableDiffersFactory() {\n\t        return defaultIterableDiffers;\n\t    }\n\t    /**\n\t     * @return {?}\n\t     */\n\t    function _keyValueDiffersFactory() {\n\t        return defaultKeyValueDiffers;\n\t    }\n\t    /**\n\t     * @param {?=} locale\n\t     * @return {?}\n\t     */\n\t    function _localeFactory(locale) {\n\t        return locale || 'en-US';\n\t    }\n\t    /**\n\t     * This module includes the providers of \\@angular/core that are needed\n\t     * to bootstrap components via `ApplicationRef`.\n\t     *\n\t     * \\@experimental\n\t     */\n\t    var ApplicationModule = (function () {\n\t        function ApplicationModule() {\n\t        }\n\t        ApplicationModule.decorators = [\n\t            { type: NgModule, args: [{\n\t                        providers: [\n\t                            ApplicationRef_,\n\t                            { provide: ApplicationRef, useExisting: ApplicationRef_ },\n\t                            ApplicationInitStatus,\n\t                            Compiler,\n\t                            APP_ID_RANDOM_PROVIDER,\n\t                            ViewUtils,\n\t                            AnimationQueue,\n\t                            { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\n\t                            { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\n\t                            {\n\t                                provide: LOCALE_ID,\n\t                                useFactory: _localeFactory,\n\t                                deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n\t                            },\n\t                        ]\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        ApplicationModule.ctorParameters = function () { return []; };\n\t        return ApplicationModule;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var /** @type {?} */ FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean\n\t    var /** @type {?} */ ANY_STATE = '*';\n\t    var /** @type {?} */ DEFAULT_STATE = '*';\n\t    var /** @type {?} */ EMPTY_STATE = 'void';\n\t\n\t    var AnimationGroupPlayer = (function () {\n\t        /**\n\t         * @param {?} _players\n\t         */\n\t        function AnimationGroupPlayer(_players) {\n\t            var _this = this;\n\t            this._players = _players;\n\t            this._onDoneFns = [];\n\t            this._onStartFns = [];\n\t            this._finished = false;\n\t            this._started = false;\n\t            this._destroyed = false;\n\t            this.parentPlayer = null;\n\t            var count = 0;\n\t            var total = this._players.length;\n\t            if (total == 0) {\n\t                scheduleMicroTask(function () { return _this._onFinish(); });\n\t            }\n\t            else {\n\t                this._players.forEach(function (player) {\n\t                    player.parentPlayer = _this;\n\t                    player.onDone(function () {\n\t                        if (++count >= total) {\n\t                            _this._onFinish();\n\t                        }\n\t                    });\n\t                });\n\t            }\n\t        }\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype._onFinish = function () {\n\t            if (!this._finished) {\n\t                this._finished = true;\n\t                this._onDoneFns.forEach(function (fn) { return fn(); });\n\t                this._onDoneFns = [];\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.play = function () {\n\t            if (!isPresent(this.parentPlayer)) {\n\t                this.init();\n\t            }\n\t            if (!this.hasStarted()) {\n\t                this._onStartFns.forEach(function (fn) { return fn(); });\n\t                this._onStartFns = [];\n\t                this._started = true;\n\t            }\n\t            this._players.forEach(function (player) { return player.play(); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.finish = function () {\n\t            this._onFinish();\n\t            this._players.forEach(function (player) { return player.finish(); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.destroy = function () {\n\t            if (!this._destroyed) {\n\t                this._onFinish();\n\t                this._players.forEach(function (player) { return player.destroy(); });\n\t                this._destroyed = true;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.reset = function () {\n\t            this._players.forEach(function (player) { return player.reset(); });\n\t            this._destroyed = false;\n\t            this._finished = false;\n\t            this._started = false;\n\t        };\n\t        /**\n\t         * @param {?} p\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.setPosition = function (p) {\n\t            this._players.forEach(function (player) { player.setPosition(p); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationGroupPlayer.prototype.getPosition = function () {\n\t            var /** @type {?} */ min = 0;\n\t            this._players.forEach(function (player) {\n\t                var /** @type {?} */ p = player.getPosition();\n\t                min = Math.min(p, min);\n\t            });\n\t            return min;\n\t        };\n\t        Object.defineProperty(AnimationGroupPlayer.prototype, \"players\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._players; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationGroupPlayer;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * `AnimationKeyframe` consists of a series of styles (contained within {\\@link AnimationStyles\n\t     * `AnimationStyles`})\n\t     * and an offset value indicating when those styles are applied within the `duration/delay/easing`\n\t     * timings.\n\t     * `AnimationKeyframe` is mostly an internal class which is designed to be used alongside {\\@link\n\t     * Renderer#animate-anchor `Renderer.animate`}.\n\t     *\n\t     * \\@experimental Animation support is experimental\n\t     */\n\t    var AnimationKeyframe = (function () {\n\t        /**\n\t         * @param {?} offset\n\t         * @param {?} styles\n\t         */\n\t        function AnimationKeyframe(offset, styles) {\n\t            this.offset = offset;\n\t            this.styles = styles;\n\t        }\n\t        return AnimationKeyframe;\n\t    }());\n\t\n\t    /**\n\t     * \\@experimental Animation support is experimental.\n\t     * @abstract\n\t     */\n\t    var AnimationPlayer = (function () {\n\t        function AnimationPlayer() {\n\t        }\n\t        /**\n\t         * @abstract\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.onDone = function (fn) { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.onStart = function (fn) { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.init = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.hasStarted = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.play = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.pause = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.restart = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.finish = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.destroy = function () { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.reset = function () { };\n\t        /**\n\t         * @abstract\n\t         * @param {?} p\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.setPosition = function (p) { };\n\t        /**\n\t         * @abstract\n\t         * @return {?}\n\t         */\n\t        AnimationPlayer.prototype.getPosition = function () { };\n\t        Object.defineProperty(AnimationPlayer.prototype, \"parentPlayer\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n\t            /**\n\t             * @param {?} player\n\t             * @return {?}\n\t             */\n\t            set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationPlayer;\n\t    }());\n\t    var NoOpAnimationPlayer = (function () {\n\t        function NoOpAnimationPlayer() {\n\t            var _this = this;\n\t            this._onDoneFns = [];\n\t            this._onStartFns = [];\n\t            this._started = false;\n\t            this.parentPlayer = null;\n\t            scheduleMicroTask(function () { return _this._onFinish(); });\n\t        }\n\t        /**\n\t         * \\@internal\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype._onFinish = function () {\n\t            this._onDoneFns.forEach(function (fn) { return fn(); });\n\t            this._onDoneFns = [];\n\t        };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.init = function () { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.play = function () {\n\t            if (!this.hasStarted()) {\n\t                this._onStartFns.forEach(function (fn) { return fn(); });\n\t                this._onStartFns = [];\n\t            }\n\t            this._started = true;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.pause = function () { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.restart = function () { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.destroy = function () { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.reset = function () { };\n\t        /**\n\t         * @param {?} p\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.setPosition = function (p) { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };\n\t        return NoOpAnimationPlayer;\n\t    }());\n\t\n\t    var AnimationSequencePlayer = (function () {\n\t        /**\n\t         * @param {?} _players\n\t         */\n\t        function AnimationSequencePlayer(_players) {\n\t            var _this = this;\n\t            this._players = _players;\n\t            this._currentIndex = 0;\n\t            this._onDoneFns = [];\n\t            this._onStartFns = [];\n\t            this._finished = false;\n\t            this._started = false;\n\t            this._destroyed = false;\n\t            this.parentPlayer = null;\n\t            this._players.forEach(function (player) { player.parentPlayer = _this; });\n\t            this._onNext(false);\n\t        }\n\t        /**\n\t         * @param {?} start\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype._onNext = function (start) {\n\t            var _this = this;\n\t            if (this._finished)\n\t                return;\n\t            if (this._players.length == 0) {\n\t                this._activePlayer = new NoOpAnimationPlayer();\n\t                scheduleMicroTask(function () { return _this._onFinish(); });\n\t            }\n\t            else if (this._currentIndex >= this._players.length) {\n\t                this._activePlayer = new NoOpAnimationPlayer();\n\t                this._onFinish();\n\t            }\n\t            else {\n\t                var /** @type {?} */ player = this._players[this._currentIndex++];\n\t                player.onDone(function () { return _this._onNext(true); });\n\t                this._activePlayer = player;\n\t                if (start) {\n\t                    player.play();\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype._onFinish = function () {\n\t            if (!this._finished) {\n\t                this._finished = true;\n\t                this._onDoneFns.forEach(function (fn) { return fn(); });\n\t                this._onDoneFns = [];\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n\t        /**\n\t         * @param {?} fn\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.play = function () {\n\t            if (!isPresent(this.parentPlayer)) {\n\t                this.init();\n\t            }\n\t            if (!this.hasStarted()) {\n\t                this._onStartFns.forEach(function (fn) { return fn(); });\n\t                this._onStartFns = [];\n\t                this._started = true;\n\t            }\n\t            this._activePlayer.play();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.restart = function () {\n\t            this.reset();\n\t            if (this._players.length > 0) {\n\t                this._players[0].restart();\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.reset = function () {\n\t            this._players.forEach(function (player) { return player.reset(); });\n\t            this._destroyed = false;\n\t            this._finished = false;\n\t            this._started = false;\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.finish = function () {\n\t            this._onFinish();\n\t            this._players.forEach(function (player) { return player.finish(); });\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.destroy = function () {\n\t            if (!this._destroyed) {\n\t                this._onFinish();\n\t                this._players.forEach(function (player) { return player.destroy(); });\n\t                this._destroyed = true;\n\t                this._activePlayer = new NoOpAnimationPlayer();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} p\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };\n\t        Object.defineProperty(AnimationSequencePlayer.prototype, \"players\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._players; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationSequencePlayer;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$13 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * @experimental Animation support is experimental.\n\t     */\n\t    var /** @type {?} */ AUTO_STYLE = '*';\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link trigger trigger\n\t     * animation function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationEntryMetadata = (function () {\n\t        /**\n\t         * @param {?} name\n\t         * @param {?} definitions\n\t         */\n\t        function AnimationEntryMetadata(name, definitions) {\n\t            this.name = name;\n\t            this.definitions = definitions;\n\t        }\n\t        return AnimationEntryMetadata;\n\t    }());\n\t    /**\n\t     * \\@experimental Animation support is experimental.\n\t     * @abstract\n\t     */\n\t    var AnimationStateMetadata = (function () {\n\t        function AnimationStateMetadata() {\n\t        }\n\t        return AnimationStateMetadata;\n\t    }());\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link state state animation\n\t     * function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationStateDeclarationMetadata = (function (_super) {\n\t        __extends$13(AnimationStateDeclarationMetadata, _super);\n\t        /**\n\t         * @param {?} stateNameExpr\n\t         * @param {?} styles\n\t         */\n\t        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {\n\t            _super.call(this);\n\t            this.stateNameExpr = stateNameExpr;\n\t            this.styles = styles;\n\t        }\n\t        return AnimationStateDeclarationMetadata;\n\t    }(AnimationStateMetadata));\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the\n\t     * {\\@link transition transition animation function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationStateTransitionMetadata = (function (_super) {\n\t        __extends$13(AnimationStateTransitionMetadata, _super);\n\t        /**\n\t         * @param {?} stateChangeExpr\n\t         * @param {?} steps\n\t         */\n\t        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {\n\t            _super.call(this);\n\t            this.stateChangeExpr = stateChangeExpr;\n\t            this.steps = steps;\n\t        }\n\t        return AnimationStateTransitionMetadata;\n\t    }(AnimationStateMetadata));\n\t    /**\n\t     * \\@experimental Animation support is experimental.\n\t     * @abstract\n\t     */\n\t    var AnimationMetadata = (function () {\n\t        function AnimationMetadata() {\n\t        }\n\t        return AnimationMetadata;\n\t    }());\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link keyframes keyframes\n\t     * animation function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationKeyframesSequenceMetadata = (function (_super) {\n\t        __extends$13(AnimationKeyframesSequenceMetadata, _super);\n\t        /**\n\t         * @param {?} steps\n\t         */\n\t        function AnimationKeyframesSequenceMetadata(steps) {\n\t            _super.call(this);\n\t            this.steps = steps;\n\t        }\n\t        return AnimationKeyframesSequenceMetadata;\n\t    }(AnimationMetadata));\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link style style animation\n\t     * function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationStyleMetadata = (function (_super) {\n\t        __extends$13(AnimationStyleMetadata, _super);\n\t        /**\n\t         * @param {?} styles\n\t         * @param {?=} offset\n\t         */\n\t        function AnimationStyleMetadata(styles, offset) {\n\t            if (offset === void 0) { offset = null; }\n\t            _super.call(this);\n\t            this.styles = styles;\n\t            this.offset = offset;\n\t        }\n\t        return AnimationStyleMetadata;\n\t    }(AnimationMetadata));\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link animate animate\n\t     * animation function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationAnimateMetadata = (function (_super) {\n\t        __extends$13(AnimationAnimateMetadata, _super);\n\t        /**\n\t         * @param {?} timings\n\t         * @param {?} styles\n\t         */\n\t        function AnimationAnimateMetadata(timings, styles) {\n\t            _super.call(this);\n\t            this.timings = timings;\n\t            this.styles = styles;\n\t        }\n\t        return AnimationAnimateMetadata;\n\t    }(AnimationMetadata));\n\t    /**\n\t     * \\@experimental Animation support is experimental.\n\t     * @abstract\n\t     */\n\t    var AnimationWithStepsMetadata = (function (_super) {\n\t        __extends$13(AnimationWithStepsMetadata, _super);\n\t        function AnimationWithStepsMetadata() {\n\t            _super.call(this);\n\t        }\n\t        Object.defineProperty(AnimationWithStepsMetadata.prototype, \"steps\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationWithStepsMetadata;\n\t    }(AnimationMetadata));\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link sequence sequence\n\t     * animation function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationSequenceMetadata = (function (_super) {\n\t        __extends$13(AnimationSequenceMetadata, _super);\n\t        /**\n\t         * @param {?} _steps\n\t         */\n\t        function AnimationSequenceMetadata(_steps) {\n\t            _super.call(this);\n\t            this._steps = _steps;\n\t        }\n\t        Object.defineProperty(AnimationSequenceMetadata.prototype, \"steps\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._steps; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationSequenceMetadata;\n\t    }(AnimationWithStepsMetadata));\n\t    /**\n\t     * Metadata representing the entry of animations.\n\t     * Instances of this class are provided via the animation DSL when the {\\@link group group animation\n\t     * function} is called.\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationGroupMetadata = (function (_super) {\n\t        __extends$13(AnimationGroupMetadata, _super);\n\t        /**\n\t         * @param {?} _steps\n\t         */\n\t        function AnimationGroupMetadata(_steps) {\n\t            _super.call(this);\n\t            this._steps = _steps;\n\t        }\n\t        Object.defineProperty(AnimationGroupMetadata.prototype, \"steps\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._steps; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return AnimationGroupMetadata;\n\t    }(AnimationWithStepsMetadata));\n\t    /**\n\t     * `animate` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `animate` specifies an animation step that will apply the provided `styles` data for a given\n\t     * amount of\n\t     * time based on the provided `timing` expression value. Calls to `animate` are expected to be\n\t     * used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link transition\n\t     * transition}.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * The `animate` function accepts two input parameters: `timing` and `styles`:\n\t     *\n\t     * - `timing` is a string based value that can be a combination of a duration with optional\n\t     * delay and easing values. The format for the expression breaks down to `duration delay easing`\n\t     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n\t     * delay=100, easing=ease-out`.\n\t     * If a numeric value is provided then that will be used as the `duration` value in millisecond\n\t     * form.\n\t     * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n\t     * keyframes keyframes}.\n\t     * If left empty then the styles from the destination state will be collected and used (this is\n\t     * useful when\n\t     * describing an animation step that will complete an animation by {\\@link\n\t     * transition#the-final-animate-call animating to the final state}).\n\t     *\n\t     * ```typescript\n\t     * // various functions for specifying timing data\n\t     * animate(500, style(...))\n\t     * animate(\"1s\", style(...))\n\t     * animate(\"100ms 0.5s\", style(...))\n\t     * animate(\"5s ease\", style(...))\n\t     * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n\t     *\n\t     * // either style() of keyframes() can be used\n\t     * animate(500, style({ background: \"red\" }))\n\t     * animate(500, keyframes([\n\t     *   style({ background: \"blue\" })),\n\t     *   style({ background: \"red\" }))\n\t     * ])\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} timing\n\t     * @param {?=} styles\n\t     * @return {?}\n\t     */\n\t    function animate(timing, styles) {\n\t        if (styles === void 0) { styles = null; }\n\t        var /** @type {?} */ stylesEntry = styles;\n\t        if (!isPresent(stylesEntry)) {\n\t            var /** @type {?} */ EMPTY_STYLE = {};\n\t            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);\n\t        }\n\t        return new AnimationAnimateMetadata(timing, stylesEntry);\n\t    }\n\t    /**\n\t     * `group` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations\n\t     * are useful when a series of styles must be animated/closed off\n\t     * at different statrting/ending times.\n\t     *\n\t     * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n\t     * transition}\n\t     * and it will only continue to the next instruction once all of the inner animation steps\n\t     * have completed.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * The `steps` data that is passed into the `group` animation function can either consist\n\t     * of {\\@link style style} or {\\@link animate animate} function calls. Each call to `style()` or\n\t     * `animate()`\n\t     * within a group will be executed instantly (use {\\@link keyframes keyframes} or a\n\t     * {\\@link animate#usage animate() with a delay value} to offset styles to be applied at a later\n\t     * time).\n\t     *\n\t     * ```typescript\n\t     * group([\n\t     *   animate(\"1s\", { background: \"black\" }))\n\t     *   animate(\"2s\", { color: \"white\" }))\n\t     * ])\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} steps\n\t     * @return {?}\n\t     */\n\t    function group(steps) {\n\t        return new AnimationGroupMetadata(steps);\n\t    }\n\t    /**\n\t     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used\n\t     * by default when an array is passed as animation data into {\\@link transition transition}.)\n\t     *\n\t     * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n\t     * transition}\n\t     * and it will only continue to the next instruction once each of the inner animation steps\n\t     * have completed.\n\t     *\n\t     * To perform animation styling in parallel with other animation steps then\n\t     * have a look at the {\\@link group group} animation function.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * The `steps` data that is passed into the `sequence` animation function can either consist\n\t     * of {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply\n\t     * the\n\t     * provided styling data immediately while a call to `animate()` will apply its styling\n\t     * data over a given time depending on its timing data.\n\t     *\n\t     * ```typescript\n\t     * sequence([\n\t     *   style({ opacity: 0 })),\n\t     *   animate(\"1s\", { opacity: 1 }))\n\t     * ])\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} steps\n\t     * @return {?}\n\t     */\n\t    function sequence(steps) {\n\t        return new AnimationSequenceMetadata(steps);\n\t    }\n\t    /**\n\t     * `style` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `style` declares a key/value object containing CSS properties/styles that can then\n\t     * be used for {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as\n\t     * styling data for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * `style` takes in a key/value string map as data and expects one or more CSS property/value\n\t     * pairs to be defined.\n\t     *\n\t     * ```typescript\n\t     * // string values are used for css properties\n\t     * style({ background: \"red\", color: \"blue\" })\n\t     *\n\t     * // numerical (pixel) values are also supported\n\t     * style({ width: 100, height: 0 })\n\t     * ```\n\t     *\n\t     * #### Auto-styles (using `*`)\n\t     *\n\t     * When an asterix (`*`) character is used as a value then it will be detected from the element\n\t     * being animated\n\t     * and applied as animation data when the animation starts.\n\t     *\n\t     * This feature proves useful for a state depending on layout and/or environment factors; in such\n\t     * cases\n\t     * the styles are calculated just before the animation starts.\n\t     *\n\t     * ```typescript\n\t     * // the steps below will animate from 0 to the\n\t     * // actual height of the element\n\t     * style({ height: 0 }),\n\t     * animate(\"1s\", style({ height: \"*\" }))\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} tokens\n\t     * @return {?}\n\t     */\n\t    function style(tokens) {\n\t        var /** @type {?} */ input;\n\t        var /** @type {?} */ offset = null;\n\t        if (typeof tokens === 'string') {\n\t            input = [(tokens)];\n\t        }\n\t        else {\n\t            if (Array.isArray(tokens)) {\n\t                input = (tokens);\n\t            }\n\t            else {\n\t                input = [(tokens)];\n\t            }\n\t            input.forEach(function (entry) {\n\t                var /** @type {?} */ entryOffset = ((entry) /** TODO #9100 */)['offset'];\n\t                if (isPresent(entryOffset)) {\n\t                    offset = offset == null ? parseFloat(entryOffset) : offset;\n\t                }\n\t            });\n\t        }\n\t        return new AnimationStyleMetadata(input, offset);\n\t    }\n\t    /**\n\t     * `state` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `state` declares an animation state within the given trigger. When a state is\n\t     * active within a component then its associated styles will persist on\n\t     * the element that the trigger is attached to (even when the animation ends).\n\t     *\n\t     * To animate between states, have a look at the animation {\\@link transition transition}\n\t     * DSL function. To register states to an animation trigger please have a look\n\t     * at the {\\@link trigger trigger} function.\n\t     *\n\t     * #### The `void` state\n\t     *\n\t     * The `void` state value is a reserved word that angular uses to determine when the element is not\n\t     * apart\n\t     * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n\t     * associated element\n\t     * is void).\n\t     *\n\t     * #### The `*` (default) state\n\t     *\n\t     * The `*` state (when styled) is a fallback state that will be used if\n\t     * the state that is being animated is not declared within the trigger.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * `state` will declare an animation state with its associated styles\n\t     * within the given trigger.\n\t     *\n\t     * - `stateNameExpr` can be one or more state names separated by commas.\n\t     * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n\t     * the state\n\t     * has been reached.\n\t     *\n\t     * ```typescript\n\t     * // \"void\" is a reserved name for a state and is used to represent\n\t     * // the state in which an element is detached from from the application.\n\t     * state(\"void\", style({ height: 0 }))\n\t     *\n\t     * // user-defined states\n\t     * state(\"closed\", style({ height: 0 }))\n\t     * state(\"open, visible\", style({ height: \"*\" }))\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} stateNameExpr\n\t     * @param {?} styles\n\t     * @return {?}\n\t     */\n\t    function state(stateNameExpr, styles) {\n\t        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);\n\t    }\n\t    /**\n\t     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n\t     * by an `offset` value.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n\t     * animation function. Instead of applying animations from where they are\n\t     * currently to their destination, keyframes can describe how each style entry is applied\n\t     * and at what point within the animation arc (much like CSS Keyframe Animations do).\n\t     *\n\t     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at\n\t     * what percentage of the animate time the styles will be applied.\n\t     *\n\t     * ```typescript\n\t     * // the provided offset values describe when each backgroundColor value is applied.\n\t     * animate(\"5s\", keyframes([\n\t     *   style({ backgroundColor: \"red\", offset: 0 }),\n\t     *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n\t     *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n\t     *   style({ backgroundColor: \"black\", offset: 1 })\n\t     * ]))\n\t     * ```\n\t     *\n\t     * Alternatively, if there are no `offset` values used within the style entries then the offsets\n\t     * will\n\t     * be calculated automatically.\n\t     *\n\t     * ```typescript\n\t     * animate(\"5s\", keyframes([\n\t     *   style({ backgroundColor: \"red\" }) // offset = 0\n\t     *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n\t     *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n\t     *   style({ backgroundColor: \"black\" }) // offset = 1\n\t     * ]))\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} steps\n\t     * @return {?}\n\t     */\n\t    function keyframes(steps) {\n\t        return new AnimationKeyframesSequenceMetadata(steps);\n\t    }\n\t    /**\n\t     * `transition` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n\t     * provided\n\t     * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`\n\t     * which consists\n\t     * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).\n\t     *\n\t     * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n\t     * to animate to\n\t     * a state value and persist its styles then one or more {\\@link state animation states} is expected\n\t     * to be defined.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n\t     * what the\n\t     * previous state is and what the current state has become. In other words, if a transition is\n\t     * defined that\n\t     * matches the old/current state criteria then the associated animation will be triggered.\n\t     *\n\t     * ```typescript\n\t     * // all transition/state changes are defined within an animation trigger\n\t     * trigger(\"myAnimationTrigger\", [\n\t     *   // if a state is defined then its styles will be persisted when the\n\t     *   // animation has fully completed itself\n\t     *   state(\"on\", style({ background: \"green\" })),\n\t     *   state(\"off\", style({ background: \"grey\" })),\n\t     *\n\t     *   // a transition animation that will be kicked off when the state value\n\t     *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n\t     *   transition(\"on => off\", animate(500)),\n\t     *\n\t     *   // it is also possible to do run the same animation for both directions\n\t     *   transition(\"on <=> off\", animate(500)),\n\t     *\n\t     *   // or to define multiple states pairs separated by commas\n\t     *   transition(\"on => off, off => void\", animate(500)),\n\t     *\n\t     *   // this is a catch-all state change for when an element is inserted into\n\t     *   // the page and the destination state is unknown\n\t     *   transition(\"void => *\", [\n\t     *     style({ opacity: 0 }),\n\t     *     animate(500)\n\t     *   ]),\n\t     *\n\t     *   // this will capture a state change between any states\n\t     *   transition(\"* => *\", animate(\"1s 0s\")),\n\t     * ])\n\t     * ```\n\t     *\n\t     * The template associated with this component will make use of the `myAnimationTrigger`\n\t     * animation trigger by binding to an element within its template code.\n\t     *\n\t     * ```html\n\t     * <!-- somewhere inside of my-component-tpl.html -->\n\t     * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n\t     * ```\n\t     *\n\t     * #### The final `animate` call\n\t     *\n\t     * If the final step within the transition steps is a call to `animate()` that **only**\n\t     * uses a timing value with **no style data** then it will be automatically used as the final\n\t     * animation\n\t     * arc for the element to animate itself to the final state. This involves an automatic mix of\n\t     * adding/removing CSS styles so that the element will be in the exact state it should be for the\n\t     * applied state to be presented correctly.\n\t     *\n\t     * ```\n\t     * // start off by hiding the element, but make sure that it animates properly to whatever state\n\t     * // is currently active for \"myAnimationTrigger\"\n\t     * transition(\"void => *\", [\n\t     *   style({ opacity: 0 }),\n\t     *   animate(500)\n\t     * ])\n\t     * ```\n\t     *\n\t     * ### Transition Aliases (`:enter` and `:leave`)\n\t     *\n\t     * Given that enter (insertion) and leave (removal) animations are so common,\n\t     * the `transition` function accepts both `:enter` and `:leave` values which\n\t     * are aliases for the `void => *` and `* => void` state changes.\n\t     *\n\t     * ```\n\t     * transition(\":enter\", [\n\t     *   style({ opacity: 0 }),\n\t     *   animate(500, style({ opacity: 1 }))\n\t     * ])\n\t     * transition(\":leave\", [\n\t     *   animate(500, style({ opacity: 0 }))\n\t     * ])\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} stateChangeExpr\n\t     * @param {?} steps\n\t     * @return {?}\n\t     */\n\t    function transition(stateChangeExpr, steps) {\n\t        var /** @type {?} */ animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;\n\t        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);\n\t    }\n\t    /**\n\t     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's\n\t     * animation\n\t     * DSL language. If this information is new, please navigate to the\n\t     * {\\@link Component#animations-anchor component animations metadata\n\t     * page} to gain a better understanding of how animations in Angular2 are used.\n\t     *\n\t     * `trigger` Creates an animation trigger which will a list of {\\@link state state} and {\\@link\n\t     * transition transition}\n\t     * entries that will be evaluated when the expression bound to the trigger changes.\n\t     *\n\t     * Triggers are registered within the component annotation data under the\n\t     * {\\@link Component#animations-anchor animations section}. An animation trigger can\n\t     * be placed on an element within a template by referencing the name of the\n\t     * trigger followed by the expression value that the trigger is bound to\n\t     * (in the form of `[\\@triggerName]=\"expression\"`.\n\t     *\n\t     * ### Usage\n\t     *\n\t     * `trigger` will create an animation trigger reference based on the provided `name` value.\n\t     * The provided `animation` value is expected to be an array consisting of {\\@link state state} and\n\t     * {\\@link transition transition}\n\t     * declarations.\n\t     *\n\t     * ```typescript\n\t     * \\@Component({\n\t     *   selector: 'my-component',\n\t     *   templateUrl: 'my-component-tpl.html',\n\t     *   animations: [\n\t     *     trigger(\"myAnimationTrigger\", [\n\t     *       state(...),\n\t     *       state(...),\n\t     *       transition(...),\n\t     *       transition(...)\n\t     *     ])\n\t     *   ]\n\t     * })\n\t     * class MyComponent {\n\t     *   myStatusExp = \"something\";\n\t     * }\n\t     * ```\n\t     *\n\t     * The template associated with this component will make use of the `myAnimationTrigger`\n\t     * animation trigger by binding to an element within its template code.\n\t     *\n\t     * ```html\n\t     * <!-- somewhere inside of my-component-tpl.html -->\n\t     * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n\t     * ```\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n\t     *\n\t     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     * @param {?} name\n\t     * @param {?} animation\n\t     * @return {?}\n\t     */\n\t    function trigger(name, animation) {\n\t        return new AnimationEntryMetadata(name, animation);\n\t    }\n\t\n\t    /**\n\t     * @param {?} previousStyles\n\t     * @param {?} newStyles\n\t     * @param {?=} nullValue\n\t     * @return {?}\n\t     */\n\t    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {\n\t        if (nullValue === void 0) { nullValue = null; }\n\t        var /** @type {?} */ finalStyles = {};\n\t        Object.keys(newStyles).forEach(function (prop) {\n\t            var /** @type {?} */ value = newStyles[prop];\n\t            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();\n\t        });\n\t        Object.keys(previousStyles).forEach(function (prop) {\n\t            if (!isPresent(finalStyles[prop])) {\n\t                finalStyles[prop] = nullValue;\n\t            }\n\t        });\n\t        return finalStyles;\n\t    }\n\t    /**\n\t     * @param {?} collectedStyles\n\t     * @param {?} finalStateStyles\n\t     * @param {?} keyframes\n\t     * @return {?}\n\t     */\n\t    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {\n\t        var /** @type {?} */ limit = keyframes.length - 1;\n\t        var /** @type {?} */ firstKeyframe = keyframes[0];\n\t        // phase 1: copy all the styles from the first keyframe into the lookup map\n\t        var /** @type {?} */ flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);\n\t        var /** @type {?} */ extraFirstKeyframeStyles = {};\n\t        var /** @type {?} */ hasExtraFirstStyles = false;\n\t        Object.keys(collectedStyles).forEach(function (prop) {\n\t            var /** @type {?} */ value = (collectedStyles[prop]);\n\t            // if the style is already defined in the first keyframe then\n\t            // we do not replace it.\n\t            if (!flatenedFirstKeyframeStyles[prop]) {\n\t                flatenedFirstKeyframeStyles[prop] = value;\n\t                extraFirstKeyframeStyles[prop] = value;\n\t                hasExtraFirstStyles = true;\n\t            }\n\t        });\n\t        var /** @type {?} */ keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);\n\t        // phase 2: normalize the final keyframe\n\t        var /** @type {?} */ finalKeyframe = keyframes[limit];\n\t        finalKeyframe.styles.styles.unshift(finalStateStyles);\n\t        var /** @type {?} */ flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);\n\t        var /** @type {?} */ extraFinalKeyframeStyles = {};\n\t        var /** @type {?} */ hasExtraFinalStyles = false;\n\t        Object.keys(keyframeCollectedStyles).forEach(function (prop) {\n\t            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {\n\t                extraFinalKeyframeStyles[prop] = AUTO_STYLE;\n\t                hasExtraFinalStyles = true;\n\t            }\n\t        });\n\t        if (hasExtraFinalStyles) {\n\t            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);\n\t        }\n\t        Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {\n\t            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {\n\t                extraFirstKeyframeStyles[prop] = AUTO_STYLE;\n\t                hasExtraFirstStyles = true;\n\t            }\n\t        });\n\t        if (hasExtraFirstStyles) {\n\t            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);\n\t        }\n\t        collectAndResolveStyles(collectedStyles, [finalStateStyles]);\n\t        return keyframes;\n\t    }\n\t    /**\n\t     * @param {?} styles\n\t     * @return {?}\n\t     */\n\t    function clearStyles(styles) {\n\t        var /** @type {?} */ finalStyles = {};\n\t        Object.keys(styles).forEach(function (key) { finalStyles[key] = null; });\n\t        return finalStyles;\n\t    }\n\t    /**\n\t     * @param {?} collection\n\t     * @param {?} styles\n\t     * @return {?}\n\t     */\n\t    function collectAndResolveStyles(collection, styles) {\n\t        return styles.map(function (entry) {\n\t            var /** @type {?} */ stylesObj = {};\n\t            Object.keys(entry).forEach(function (prop) {\n\t                var /** @type {?} */ value = entry[prop];\n\t                if (value == FILL_STYLE_FLAG) {\n\t                    value = collection[prop];\n\t                    if (!isPresent(value)) {\n\t                        value = AUTO_STYLE;\n\t                    }\n\t                }\n\t                collection[prop] = value;\n\t                stylesObj[prop] = value;\n\t            });\n\t            return stylesObj;\n\t        });\n\t    }\n\t    /**\n\t     * @param {?} element\n\t     * @param {?} renderer\n\t     * @param {?} styles\n\t     * @return {?}\n\t     */\n\t    function renderStyles(element, renderer, styles) {\n\t        Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]); });\n\t    }\n\t    /**\n\t     * @param {?} styles\n\t     * @return {?}\n\t     */\n\t    function flattenStyles(styles) {\n\t        var /** @type {?} */ finalStyles = {};\n\t        styles.forEach(function (entry) {\n\t            Object.keys(entry).forEach(function (prop) { finalStyles[prop] = (entry[prop]); });\n\t        });\n\t        return finalStyles;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * `AnimationStyles` consists of a collection of key/value maps containing CSS-based style data\n\t     * that can either be used as initial styling data or apart of a series of keyframes within an\n\t     * animation.\n\t     * This class is mostly internal, and it is designed to be used alongside\n\t     * {\\@link AnimationKeyframe `AnimationKeyframe`} and {\\@link Renderer#animate-anchor\n\t     * `Renderer.animate`}.\n\t     *\n\t     * \\@experimental Animation support is experimental\n\t     */\n\t    var AnimationStyles = (function () {\n\t        /**\n\t         * @param {?} styles\n\t         */\n\t        function AnimationStyles(styles) {\n\t            this.styles = styles;\n\t        }\n\t        return AnimationStyles;\n\t    }());\n\t\n\t    /**\n\t     * An instance of this class is returned as an event parameter when an animation\n\t     * callback is captured for an animation either during the start or done phase.\n\t     *\n\t     * ```typescript\n\t     * \\@Component({\n\t     *   host: {\n\t     *     '[\\@myAnimationTrigger]': 'someExpression',\n\t     *     '(\\@myAnimationTrigger.start)': 'captureStartEvent($event)',\n\t     *     '(\\@myAnimationTrigger.done)': 'captureDoneEvent($event)',\n\t     *   },\n\t     *   animations: [\n\t     *     trigger(\"myAnimationTrigger\", [\n\t     *        // ...\n\t     *     ])\n\t     *   ]\n\t     * })\n\t     * class MyComponent {\n\t     *   someExpression: any = false;\n\t     *   captureStartEvent(event: AnimationTransitionEvent) {\n\t     *     // the toState, fromState and totalTime data is accessible from the event variable\n\t     *   }\n\t     *\n\t     *   captureDoneEvent(event: AnimationTransitionEvent) {\n\t     *     // the toState, fromState and totalTime data is accessible from the event variable\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     * \\@experimental Animation support is experimental.\n\t     */\n\t    var AnimationTransitionEvent = (function () {\n\t        /**\n\t         * @param {?} __0\n\t         */\n\t        function AnimationTransitionEvent(_a) {\n\t            var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;\n\t            this.fromState = fromState;\n\t            this.toState = toState;\n\t            this.totalTime = totalTime;\n\t            this.phaseName = phaseName;\n\t        }\n\t        return AnimationTransitionEvent;\n\t    }());\n\t\n\t    var AnimationTransition = (function () {\n\t        /**\n\t         * @param {?} _player\n\t         * @param {?} _fromState\n\t         * @param {?} _toState\n\t         * @param {?} _totalTime\n\t         */\n\t        function AnimationTransition(_player, _fromState, _toState, _totalTime) {\n\t            this._player = _player;\n\t            this._fromState = _fromState;\n\t            this._toState = _toState;\n\t            this._totalTime = _totalTime;\n\t        }\n\t        /**\n\t         * @param {?} phaseName\n\t         * @return {?}\n\t         */\n\t        AnimationTransition.prototype._createEvent = function (phaseName) {\n\t            return new AnimationTransitionEvent({\n\t                fromState: this._fromState,\n\t                toState: this._toState,\n\t                totalTime: this._totalTime,\n\t                phaseName: phaseName\n\t            });\n\t        };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        AnimationTransition.prototype.onStart = function (callback) {\n\t            var _this = this;\n\t            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('start')); }, 'player.onStart'));\n\t            this._player.onStart(fn);\n\t        };\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        AnimationTransition.prototype.onDone = function (callback) {\n\t            var _this = this;\n\t            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('done')); }, 'player.onDone'));\n\t            this._player.onDone(fn);\n\t        };\n\t        return AnimationTransition;\n\t    }());\n\t\n\t    var DebugDomRootRenderer = (function () {\n\t        /**\n\t         * @param {?} _delegate\n\t         */\n\t        function DebugDomRootRenderer(_delegate) {\n\t            this._delegate = _delegate;\n\t        }\n\t        /**\n\t         * @param {?} componentProto\n\t         * @return {?}\n\t         */\n\t        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {\n\t            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));\n\t        };\n\t        return DebugDomRootRenderer;\n\t    }());\n\t    var DebugDomRenderer = (function () {\n\t        /**\n\t         * @param {?} _delegate\n\t         */\n\t        function DebugDomRenderer(_delegate) {\n\t            this._delegate = _delegate;\n\t        }\n\t        /**\n\t         * @param {?} selectorOrNode\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {\n\t            var /** @type {?} */ nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);\n\t            var /** @type {?} */ debugEl = new DebugElement(nativeEl, null, debugInfo);\n\t            indexDebugNode(debugEl);\n\t            return nativeEl;\n\t        };\n\t        /**\n\t         * @param {?} parentElement\n\t         * @param {?} name\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {\n\t            var /** @type {?} */ nativeEl = this._delegate.createElement(parentElement, name, debugInfo);\n\t            var /** @type {?} */ debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);\n\t            debugEl.name = name;\n\t            indexDebugNode(debugEl);\n\t            return nativeEl;\n\t        };\n\t        /**\n\t         * @param {?} hostElement\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };\n\t        /**\n\t         * @param {?} parentElement\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {\n\t            var /** @type {?} */ comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);\n\t            var /** @type {?} */ debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);\n\t            indexDebugNode(debugEl);\n\t            return comment;\n\t        };\n\t        /**\n\t         * @param {?} parentElement\n\t         * @param {?} value\n\t         * @param {?=} debugInfo\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {\n\t            var /** @type {?} */ text = this._delegate.createText(parentElement, value, debugInfo);\n\t            var /** @type {?} */ debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);\n\t            indexDebugNode(debugEl);\n\t            return text;\n\t        };\n\t        /**\n\t         * @param {?} parentElement\n\t         * @param {?} nodes\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {\n\t            var /** @type {?} */ debugParent = getDebugNode(parentElement);\n\t            if (isPresent(debugParent) && debugParent instanceof DebugElement) {\n\t                var /** @type {?} */ debugElement_1 = debugParent;\n\t                nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });\n\t            }\n\t            this._delegate.projectNodes(parentElement, nodes);\n\t        };\n\t        /**\n\t         * @param {?} node\n\t         * @param {?} viewRootNodes\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {\n\t            var /** @type {?} */ debugNode = getDebugNode(node);\n\t            if (isPresent(debugNode)) {\n\t                var /** @type {?} */ debugParent = debugNode.parent;\n\t                if (viewRootNodes.length > 0 && isPresent(debugParent)) {\n\t                    var /** @type {?} */ debugViewRootNodes_1 = [];\n\t                    viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode(rootNode)); });\n\t                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);\n\t                }\n\t            }\n\t            this._delegate.attachViewAfter(node, viewRootNodes);\n\t        };\n\t        /**\n\t         * @param {?} viewRootNodes\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {\n\t            viewRootNodes.forEach(function (node) {\n\t                var /** @type {?} */ debugNode = getDebugNode(node);\n\t                if (isPresent(debugNode) && isPresent(debugNode.parent)) {\n\t                    debugNode.parent.removeChild(debugNode);\n\t                }\n\t            });\n\t            this._delegate.detachView(viewRootNodes);\n\t        };\n\t        /**\n\t         * @param {?} hostElement\n\t         * @param {?} viewAllNodes\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {\n\t            viewAllNodes = viewAllNodes || [];\n\t            viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });\n\t            this._delegate.destroyView(hostElement, viewAllNodes);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} name\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {\n\t            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n\t            if (isPresent(debugEl)) {\n\t                debugEl.listeners.push(new EventListener(name, callback));\n\t            }\n\t            return this._delegate.listen(renderElement, name, callback);\n\t        };\n\t        /**\n\t         * @param {?} target\n\t         * @param {?} name\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {\n\t            return this._delegate.listenGlobal(target, name, callback);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} propertyName\n\t         * @param {?} propertyValue\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n\t            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n\t            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n\t                debugEl.properties[propertyName] = propertyValue;\n\t            }\n\t            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} attributeName\n\t         * @param {?} attributeValue\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {\n\t            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n\t            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n\t                debugEl.attributes[attributeName] = attributeValue;\n\t            }\n\t            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} propertyName\n\t         * @param {?} propertyValue\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {\n\t            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} className\n\t         * @param {?} isAdd\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {\n\t            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n\t            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n\t                debugEl.classes[className] = isAdd;\n\t            }\n\t            this._delegate.setElementClass(renderElement, className, isAdd);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} styleName\n\t         * @param {?} styleValue\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n\t            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n\t            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n\t                debugEl.styles[styleName] = styleValue;\n\t            }\n\t            this._delegate.setElementStyle(renderElement, styleName, styleValue);\n\t        };\n\t        /**\n\t         * @param {?} renderElement\n\t         * @param {?} methodName\n\t         * @param {?=} args\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n\t            this._delegate.invokeElementMethod(renderElement, methodName, args);\n\t        };\n\t        /**\n\t         * @param {?} renderNode\n\t         * @param {?} text\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };\n\t        /**\n\t         * @param {?} element\n\t         * @param {?} startingStyles\n\t         * @param {?} keyframes\n\t         * @param {?} duration\n\t         * @param {?} delay\n\t         * @param {?} easing\n\t         * @param {?=} previousPlayers\n\t         * @return {?}\n\t         */\n\t        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {\n\t            if (previousPlayers === void 0) { previousPlayers = []; }\n\t            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);\n\t        };\n\t        return DebugDomRenderer;\n\t    }());\n\t\n\t    var ViewType = {};\n\t    ViewType.HOST = 0;\n\t    ViewType.COMPONENT = 1;\n\t    ViewType.EMBEDDED = 2;\n\t    ViewType[ViewType.HOST] = \"HOST\";\n\t    ViewType[ViewType.COMPONENT] = \"COMPONENT\";\n\t    ViewType[ViewType.EMBEDDED] = \"EMBEDDED\";\n\t\n\t    var StaticNodeDebugInfo = (function () {\n\t        /**\n\t         * @param {?} providerTokens\n\t         * @param {?} componentToken\n\t         * @param {?} refTokens\n\t         */\n\t        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {\n\t            this.providerTokens = providerTokens;\n\t            this.componentToken = componentToken;\n\t            this.refTokens = refTokens;\n\t        }\n\t        return StaticNodeDebugInfo;\n\t    }());\n\t    var DebugContext = (function () {\n\t        /**\n\t         * @param {?} _view\n\t         * @param {?} _nodeIndex\n\t         * @param {?} _tplRow\n\t         * @param {?} _tplCol\n\t         */\n\t        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {\n\t            this._view = _view;\n\t            this._nodeIndex = _nodeIndex;\n\t            this._tplRow = _tplRow;\n\t            this._tplCol = _tplCol;\n\t        }\n\t        Object.defineProperty(DebugContext.prototype, \"_staticNodeInfo\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"context\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view.context; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"component\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n\t                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {\n\t                    return this.injector.get(staticNodeInfo.componentToken);\n\t                }\n\t                return null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"componentRenderElement\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ componentView = this._view;\n\t                while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {\n\t                    componentView = (componentView.parentView);\n\t                }\n\t                return componentView.parentElement;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this._view.injector(this._nodeIndex); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"renderNode\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                if (isPresent(this._nodeIndex) && this._view.allNodes) {\n\t                    return this._view.allNodes[this._nodeIndex];\n\t                }\n\t                else {\n\t                    return null;\n\t                }\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"providerTokens\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n\t                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"source\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                return this._view.componentType.templateUrl + \":\" + this._tplRow + \":\" + this._tplCol;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(DebugContext.prototype, \"references\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var _this = this;\n\t                var /** @type {?} */ varValues = {};\n\t                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n\t                if (isPresent(staticNodeInfo)) {\n\t                    var /** @type {?} */ refs_1 = staticNodeInfo.refTokens;\n\t                    Object.keys(refs_1).forEach(function (refName) {\n\t                        var /** @type {?} */ refToken = refs_1[refName];\n\t                        var /** @type {?} */ varValue;\n\t                        if (isBlank(refToken)) {\n\t                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;\n\t                        }\n\t                        else {\n\t                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);\n\t                        }\n\t                        varValues[refName] = varValue;\n\t                    });\n\t                }\n\t                return varValues;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        return DebugContext;\n\t    }());\n\t\n\t    var ViewAnimationMap = (function () {\n\t        function ViewAnimationMap() {\n\t            this._map = new Map();\n\t            this._allPlayers = [];\n\t        }\n\t        /**\n\t         * @param {?} element\n\t         * @param {?} animationName\n\t         * @return {?}\n\t         */\n\t        ViewAnimationMap.prototype.find = function (element, animationName) {\n\t            var /** @type {?} */ playersByAnimation = this._map.get(element);\n\t            if (isPresent(playersByAnimation)) {\n\t                return playersByAnimation[animationName];\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} element\n\t         * @return {?}\n\t         */\n\t        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {\n\t            var /** @type {?} */ el = this._map.get(element);\n\t            return el ? Object.keys(el).map(function (k) { return el[k]; }) : [];\n\t        };\n\t        /**\n\t         * @param {?} element\n\t         * @param {?} animationName\n\t         * @param {?} player\n\t         * @return {?}\n\t         */\n\t        ViewAnimationMap.prototype.set = function (element, animationName, player) {\n\t            var /** @type {?} */ playersByAnimation = this._map.get(element);\n\t            if (!isPresent(playersByAnimation)) {\n\t                playersByAnimation = {};\n\t            }\n\t            var /** @type {?} */ existingEntry = playersByAnimation[animationName];\n\t            if (isPresent(existingEntry)) {\n\t                this.remove(element, animationName);\n\t            }\n\t            playersByAnimation[animationName] = player;\n\t            this._allPlayers.push(player);\n\t            this._map.set(element, playersByAnimation);\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };\n\t        /**\n\t         * @param {?} element\n\t         * @param {?} animationName\n\t         * @param {?=} targetPlayer\n\t         * @return {?}\n\t         */\n\t        ViewAnimationMap.prototype.remove = function (element, animationName, targetPlayer) {\n\t            if (targetPlayer === void 0) { targetPlayer = null; }\n\t            var /** @type {?} */ playersByAnimation = this._map.get(element);\n\t            if (playersByAnimation) {\n\t                var /** @type {?} */ player = playersByAnimation[animationName];\n\t                if (!targetPlayer || player === targetPlayer) {\n\t                    delete playersByAnimation[animationName];\n\t                    var /** @type {?} */ index = this._allPlayers.indexOf(player);\n\t                    this._allPlayers.splice(index, 1);\n\t                    if (Object.keys(playersByAnimation).length === 0) {\n\t                        this._map.delete(element);\n\t                    }\n\t                }\n\t            }\n\t        };\n\t        return ViewAnimationMap;\n\t    }());\n\t\n\t    var AnimationViewContext = (function () {\n\t        /**\n\t         * @param {?} _animationQueue\n\t         */\n\t        function AnimationViewContext(_animationQueue) {\n\t            this._animationQueue = _animationQueue;\n\t            this._players = new ViewAnimationMap();\n\t        }\n\t        /**\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {\n\t            var /** @type {?} */ activeAnimationPlayers = this._players.getAllPlayers();\n\t            // we check for the length to avoid having GroupAnimationPlayer\n\t            // issue an unnecessary microtask when zero players are passed in\n\t            if (activeAnimationPlayers.length) {\n\t                new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback(); });\n\t            }\n\t            else {\n\t                callback();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} element\n\t         * @param {?} animationName\n\t         * @param {?} player\n\t         * @return {?}\n\t         */\n\t        AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {\n\t            var _this = this;\n\t            this._animationQueue.enqueue(player);\n\t            this._players.set(element, animationName, player);\n\t            player.onDone(function () { return _this._players.remove(element, animationName, player); });\n\t        };\n\t        /**\n\t         * @param {?} element\n\t         * @param {?=} animationName\n\t         * @return {?}\n\t         */\n\t        AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName) {\n\t            if (animationName === void 0) { animationName = null; }\n\t            var /** @type {?} */ players = [];\n\t            if (animationName) {\n\t                var /** @type {?} */ currentPlayer = this._players.find(element, animationName);\n\t                if (currentPlayer) {\n\t                    _recursePlayers(currentPlayer, players);\n\t                }\n\t            }\n\t            else {\n\t                this._players.findAllPlayersByElement(element).forEach(function (player) { return _recursePlayers(player, players); });\n\t            }\n\t            return players;\n\t        };\n\t        return AnimationViewContext;\n\t    }());\n\t    /**\n\t     * @param {?} player\n\t     * @param {?} collectedPlayers\n\t     * @return {?}\n\t     */\n\t    function _recursePlayers(player, collectedPlayers) {\n\t        if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {\n\t            player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers); });\n\t        }\n\t        else {\n\t            collectedPlayers.push(player);\n\t        }\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$15 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var ElementInjector = (function (_super) {\n\t        __extends$15(ElementInjector, _super);\n\t        /**\n\t         * @param {?} _view\n\t         * @param {?} _nodeIndex\n\t         */\n\t        function ElementInjector(_view, _nodeIndex) {\n\t            _super.call(this);\n\t            this._view = _view;\n\t            this._nodeIndex = _nodeIndex;\n\t        }\n\t        /**\n\t         * @param {?} token\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        ElementInjector.prototype.get = function (token, notFoundValue) {\n\t            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n\t            return this._view.injectorGet(token, this._nodeIndex, notFoundValue);\n\t        };\n\t        return ElementInjector;\n\t    }(Injector));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$14 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var /** @type {?} */ _scope_check = wtfCreateScope(\"AppView#check(ascii id)\");\n\t    /**\n\t     * @experimental\n\t     */\n\t    var /** @type {?} */ EMPTY_CONTEXT = new Object();\n\t    var /** @type {?} */ UNDEFINED$1 = new Object();\n\t    /**\n\t     * Cost of making objects: http://jsperf.com/instantiate-size-of-object\n\t     *\n\t     * @abstract\n\t     */\n\t    var AppView = (function () {\n\t        /**\n\t         * @param {?} clazz\n\t         * @param {?} componentType\n\t         * @param {?} type\n\t         * @param {?} viewUtils\n\t         * @param {?} parentView\n\t         * @param {?} parentIndex\n\t         * @param {?} parentElement\n\t         * @param {?} cdMode\n\t         * @param {?=} declaredViewContainer\n\t         */\n\t        function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {\n\t            if (declaredViewContainer === void 0) { declaredViewContainer = null; }\n\t            this.clazz = clazz;\n\t            this.componentType = componentType;\n\t            this.type = type;\n\t            this.viewUtils = viewUtils;\n\t            this.parentView = parentView;\n\t            this.parentIndex = parentIndex;\n\t            this.parentElement = parentElement;\n\t            this.cdMode = cdMode;\n\t            this.declaredViewContainer = declaredViewContainer;\n\t            this.numberOfChecks = 0;\n\t            this.ref = new ViewRef_(this, viewUtils.animationQueue);\n\t            if (type === ViewType.COMPONENT || type === ViewType.HOST) {\n\t                this.renderer = viewUtils.renderComponent(componentType);\n\t            }\n\t            else {\n\t                this.renderer = parentView.renderer;\n\t            }\n\t            this._directRenderer = this.renderer.directRenderer;\n\t        }\n\t        Object.defineProperty(AppView.prototype, \"animationContext\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                if (!this._animationContext) {\n\t                    this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);\n\t                }\n\t                return this._animationContext;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AppView.prototype, \"destroyed\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} context\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.create = function (context) {\n\t            this.context = context;\n\t            return this.createInternal(null);\n\t        };\n\t        /**\n\t         * @param {?} rootSelectorOrNode\n\t         * @param {?} hostInjector\n\t         * @param {?} projectableNodes\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {\n\t            this.context = (EMPTY_CONTEXT);\n\t            this._hasExternalHostElement = isPresent(rootSelectorOrNode);\n\t            this._hostInjector = hostInjector;\n\t            this._hostProjectableNodes = projectableNodes;\n\t            return this.createInternal(rootSelectorOrNode);\n\t        };\n\t        /**\n\t         * Overwritten by implementations.\n\t         * Returns the ComponentRef for the host element for ViewType.HOST.\n\t         * @param {?} rootSelectorOrNode\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };\n\t        /**\n\t         * Overwritten by implementations.\n\t         * @param {?} templateNodeIndex\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };\n\t        /**\n\t         * @param {?} lastRootNode\n\t         * @param {?} allNodes\n\t         * @param {?} disposables\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.init = function (lastRootNode, allNodes, disposables) {\n\t            this.lastRootNode = lastRootNode;\n\t            this.allNodes = allNodes;\n\t            this.disposables = disposables;\n\t            if (this.type === ViewType.COMPONENT) {\n\t                this.dirtyParentQueriesInternal();\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} token\n\t         * @param {?} nodeIndex\n\t         * @param {?=} notFoundValue\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {\n\t            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n\t            var /** @type {?} */ result = UNDEFINED$1;\n\t            var /** @type {?} */ view = this;\n\t            while (result === UNDEFINED$1) {\n\t                if (isPresent(nodeIndex)) {\n\t                    result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);\n\t                }\n\t                if (result === UNDEFINED$1 && view.type === ViewType.HOST) {\n\t                    result = view._hostInjector.get(token, notFoundValue);\n\t                }\n\t                nodeIndex = view.parentIndex;\n\t                view = view.parentView;\n\t            }\n\t            return result;\n\t        };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @param {?} token\n\t         * @param {?} nodeIndex\n\t         * @param {?} notFoundResult\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {\n\t            return notFoundResult;\n\t        };\n\t        /**\n\t         * @param {?} nodeIndex\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.detachAndDestroy = function () {\n\t            if (this.viewContainer) {\n\t                this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));\n\t            }\n\t            else if (this.appRef) {\n\t                this.appRef.detachView(this.ref);\n\t            }\n\t            else if (this._hasExternalHostElement) {\n\t                this.detach();\n\t            }\n\t            this.destroy();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.destroy = function () {\n\t            var _this = this;\n\t            if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n\t                return;\n\t            }\n\t            var /** @type {?} */ hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;\n\t            if (this.disposables) {\n\t                for (var /** @type {?} */ i = 0; i < this.disposables.length; i++) {\n\t                    this.disposables[i]();\n\t                }\n\t            }\n\t            this.destroyInternal();\n\t            this.dirtyParentQueriesInternal();\n\t            if (this._animationContext) {\n\t                this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });\n\t            }\n\t            else {\n\t                this.renderer.destroyView(hostElement, this.allNodes);\n\t            }\n\t            this.cdMode = ChangeDetectorStatus.Destroyed;\n\t        };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.destroyInternal = function () { };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.detachInternal = function () { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.detach = function () {\n\t            var _this = this;\n\t            this.detachInternal();\n\t            if (this._animationContext) {\n\t                this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });\n\t            }\n\t            else {\n\t                this._renderDetach();\n\t            }\n\t            if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer &&\n\t                this.declaredViewContainer.projectedViews) {\n\t                var /** @type {?} */ projectedViews = this.declaredViewContainer.projectedViews;\n\t                var /** @type {?} */ index = projectedViews.indexOf(this);\n\t                // perf: pop is faster than splice!\n\t                if (index >= projectedViews.length - 1) {\n\t                    projectedViews.pop();\n\t                }\n\t                else {\n\t                    projectedViews.splice(index, 1);\n\t                }\n\t            }\n\t            this.appRef = null;\n\t            this.viewContainer = null;\n\t            this.dirtyParentQueriesInternal();\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype._renderDetach = function () {\n\t            if (this._directRenderer) {\n\t                this.visitRootNodesInternal(this._directRenderer.remove, null);\n\t            }\n\t            else {\n\t                this.renderer.detachView(this.flatRootNodes);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} appRef\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.attachToAppRef = function (appRef) {\n\t            if (this.viewContainer) {\n\t                throw new Error('This view is already attached to a ViewContainer!');\n\t            }\n\t            this.appRef = appRef;\n\t            this.dirtyParentQueriesInternal();\n\t        };\n\t        /**\n\t         * @param {?} viewContainer\n\t         * @param {?} prevView\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.attachAfter = function (viewContainer, prevView) {\n\t            if (this.appRef) {\n\t                throw new Error('This view is already attached directly to the ApplicationRef!');\n\t            }\n\t            this._renderAttach(viewContainer, prevView);\n\t            this.viewContainer = viewContainer;\n\t            if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {\n\t                if (!this.declaredViewContainer.projectedViews) {\n\t                    this.declaredViewContainer.projectedViews = [];\n\t                }\n\t                this.declaredViewContainer.projectedViews.push(this);\n\t            }\n\t            this.dirtyParentQueriesInternal();\n\t        };\n\t        /**\n\t         * @param {?} viewContainer\n\t         * @param {?} prevView\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.moveAfter = function (viewContainer, prevView) {\n\t            this._renderAttach(viewContainer, prevView);\n\t            this.dirtyParentQueriesInternal();\n\t        };\n\t        /**\n\t         * @param {?} viewContainer\n\t         * @param {?} prevView\n\t         * @return {?}\n\t         */\n\t        AppView.prototype._renderAttach = function (viewContainer, prevView) {\n\t            var /** @type {?} */ prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;\n\t            if (this._directRenderer) {\n\t                var /** @type {?} */ nextSibling = this._directRenderer.nextSibling(prevNode);\n\t                if (nextSibling) {\n\t                    this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);\n\t                }\n\t                else {\n\t                    var /** @type {?} */ parentElement = this._directRenderer.parentElement(prevNode);\n\t                    if (parentElement) {\n\t                        this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);\n\t                    }\n\t                }\n\t            }\n\t            else {\n\t                this.renderer.attachViewAfter(prevNode, this.flatRootNodes);\n\t            }\n\t        };\n\t        Object.defineProperty(AppView.prototype, \"changeDetectorRef\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.ref; },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(AppView.prototype, \"flatRootNodes\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () {\n\t                var /** @type {?} */ nodes = [];\n\t                this.visitRootNodesInternal(addToArray, nodes);\n\t                return nodes;\n\t            },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} parentElement\n\t         * @param {?} ngContentIndex\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {\n\t            if (this._directRenderer) {\n\t                this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);\n\t            }\n\t            else {\n\t                var /** @type {?} */ nodes = [];\n\t                this.visitProjectedNodes(ngContentIndex, addToArray, nodes);\n\t                this.renderer.projectNodes(parentElement, nodes);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} ngContentIndex\n\t         * @param {?} cb\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {\n\t            switch (this.type) {\n\t                case ViewType.EMBEDDED:\n\t                    this.parentView.visitProjectedNodes(ngContentIndex, cb, c);\n\t                    break;\n\t                case ViewType.COMPONENT:\n\t                    if (this.parentView.type === ViewType.HOST) {\n\t                        var /** @type {?} */ nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];\n\t                        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n\t                            cb(nodes[i], c);\n\t                        }\n\t                    }\n\t                    else {\n\t                        this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);\n\t                    }\n\t                    break;\n\t            }\n\t        };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @param {?} cb\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.visitRootNodesInternal = function (cb, c) { };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @param {?} nodeIndex\n\t         * @param {?} ngContentIndex\n\t         * @param {?} cb\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.dirtyParentQueriesInternal = function () { };\n\t        /**\n\t         * @param {?} throwOnChange\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.internalDetectChanges = function (throwOnChange) {\n\t            if (this.cdMode !== ChangeDetectorStatus.Detached) {\n\t                this.detectChanges(throwOnChange);\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} throwOnChange\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.detectChanges = function (throwOnChange) {\n\t            var /** @type {?} */ s = _scope_check(this.clazz);\n\t            if (this.cdMode === ChangeDetectorStatus.Checked ||\n\t                this.cdMode === ChangeDetectorStatus.Errored)\n\t                return;\n\t            if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n\t                this.throwDestroyedError('detectChanges');\n\t            }\n\t            this.detectChangesInternal(throwOnChange);\n\t            if (this.cdMode === ChangeDetectorStatus.CheckOnce)\n\t                this.cdMode = ChangeDetectorStatus.Checked;\n\t            this.numberOfChecks++;\n\t            wtfLeave(s);\n\t        };\n\t        /**\n\t         * Overwritten by implementations\n\t         * @param {?} throwOnChange\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.detectChangesInternal = function (throwOnChange) { };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.markPathToRootAsCheckOnce = function () {\n\t            var /** @type {?} */ c = this;\n\t            while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {\n\t                if (c.cdMode === ChangeDetectorStatus.Checked) {\n\t                    c.cdMode = ChangeDetectorStatus.CheckOnce;\n\t                }\n\t                if (c.type === ViewType.COMPONENT) {\n\t                    c = c.parentView;\n\t                }\n\t                else {\n\t                    c = c.viewContainer ? c.viewContainer.parentView : null;\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.eventHandler = function (cb) {\n\t            return cb;\n\t        };\n\t        /**\n\t         * @param {?} details\n\t         * @return {?}\n\t         */\n\t        AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };\n\t        return AppView;\n\t    }());\n\t    var DebugAppView = (function (_super) {\n\t        __extends$14(DebugAppView, _super);\n\t        /**\n\t         * @param {?} clazz\n\t         * @param {?} componentType\n\t         * @param {?} type\n\t         * @param {?} viewUtils\n\t         * @param {?} parentView\n\t         * @param {?} parentIndex\n\t         * @param {?} parentNode\n\t         * @param {?} cdMode\n\t         * @param {?} staticNodeDebugInfos\n\t         * @param {?=} declaredViewContainer\n\t         */\n\t        function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {\n\t            if (declaredViewContainer === void 0) { declaredViewContainer = null; }\n\t            _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);\n\t            this.staticNodeDebugInfos = staticNodeDebugInfos;\n\t            this._currentDebugContext = null;\n\t        }\n\t        /**\n\t         * @param {?} context\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.create = function (context) {\n\t            this._resetDebug();\n\t            try {\n\t                return _super.prototype.create.call(this, context);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} rootSelectorOrNode\n\t         * @param {?} injector\n\t         * @param {?=} projectableNodes\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {\n\t            if (projectableNodes === void 0) { projectableNodes = null; }\n\t            this._resetDebug();\n\t            try {\n\t                return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} token\n\t         * @param {?} nodeIndex\n\t         * @param {?=} notFoundResult\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {\n\t            this._resetDebug();\n\t            try {\n\t                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.detach = function () {\n\t            this._resetDebug();\n\t            try {\n\t                _super.prototype.detach.call(this);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.destroy = function () {\n\t            this._resetDebug();\n\t            try {\n\t                _super.prototype.destroy.call(this);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} throwOnChange\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.detectChanges = function (throwOnChange) {\n\t            this._resetDebug();\n\t            try {\n\t                _super.prototype.detectChanges.call(this, throwOnChange);\n\t            }\n\t            catch (e) {\n\t                this._rethrowWithContext(e);\n\t                throw e;\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };\n\t        /**\n\t         * @param {?} nodeIndex\n\t         * @param {?} rowNum\n\t         * @param {?} colNum\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {\n\t            return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);\n\t        };\n\t        /**\n\t         * @param {?} e\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype._rethrowWithContext = function (e) {\n\t            if (!(e instanceof ViewWrappedError)) {\n\t                if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {\n\t                    this.cdMode = ChangeDetectorStatus.Errored;\n\t                }\n\t                if (isPresent(this._currentDebugContext)) {\n\t                    throw new ViewWrappedError(e, this._currentDebugContext);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @return {?}\n\t         */\n\t        DebugAppView.prototype.eventHandler = function (cb) {\n\t            var _this = this;\n\t            var /** @type {?} */ superHandler = _super.prototype.eventHandler.call(this, cb);\n\t            return function (eventName, event) {\n\t                _this._resetDebug();\n\t                try {\n\t                    return superHandler.call(_this, eventName, event);\n\t                }\n\t                catch (e) {\n\t                    _this._rethrowWithContext(e);\n\t                    throw e;\n\t                }\n\t            };\n\t        };\n\t        return DebugAppView;\n\t    }(AppView));\n\t\n\t    /**\n\t     * A ViewContainer is created for elements that have a ViewContainerRef\n\t     * to keep track of the nested views.\n\t     */\n\t    var ViewContainer = (function () {\n\t        /**\n\t         * @param {?} index\n\t         * @param {?} parentIndex\n\t         * @param {?} parentView\n\t         * @param {?} nativeElement\n\t         */\n\t        function ViewContainer(index, parentIndex, parentView, nativeElement) {\n\t            this.index = index;\n\t            this.parentIndex = parentIndex;\n\t            this.parentView = parentView;\n\t            this.nativeElement = nativeElement;\n\t        }\n\t        Object.defineProperty(ViewContainer.prototype, \"elementRef\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return new ElementRef(this.nativeElement); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainer.prototype, \"vcRef\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return new ViewContainerRef_(this); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainer.prototype, \"parentInjector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.parentView.injector(this.parentIndex); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        Object.defineProperty(ViewContainer.prototype, \"injector\", {\n\t            /**\n\t             * @return {?}\n\t             */\n\t            get: function () { return this.parentView.injector(this.index); },\n\t            enumerable: true,\n\t            configurable: true\n\t        });\n\t        /**\n\t         * @param {?} throwOnChange\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {\n\t            if (this.nestedViews) {\n\t                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n\t                    this.nestedViews[i].detectChanges(throwOnChange);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.destroyNestedViews = function () {\n\t            if (this.nestedViews) {\n\t                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n\t                    this.nestedViews[i].destroy();\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} cb\n\t         * @param {?} c\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {\n\t            if (this.nestedViews) {\n\t                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n\t                    this.nestedViews[i].visitRootNodesInternal(cb, c);\n\t                }\n\t            }\n\t        };\n\t        /**\n\t         * @param {?} nestedViewClass\n\t         * @param {?} callback\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {\n\t            var /** @type {?} */ result = [];\n\t            if (this.nestedViews) {\n\t                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n\t                    var /** @type {?} */ nestedView = this.nestedViews[i];\n\t                    if (nestedView.clazz === nestedViewClass) {\n\t                        result.push(callback(nestedView));\n\t                    }\n\t                }\n\t            }\n\t            if (this.projectedViews) {\n\t                for (var /** @type {?} */ i = 0; i < this.projectedViews.length; i++) {\n\t                    var /** @type {?} */ projectedView = this.projectedViews[i];\n\t                    if (projectedView.clazz === nestedViewClass) {\n\t                        result.push(callback(projectedView));\n\t                    }\n\t                }\n\t            }\n\t            return result;\n\t        };\n\t        /**\n\t         * @param {?} view\n\t         * @param {?} currentIndex\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.moveView = function (view, currentIndex) {\n\t            var /** @type {?} */ previousIndex = this.nestedViews.indexOf(view);\n\t            if (view.type === ViewType.COMPONENT) {\n\t                throw new Error(\"Component views can't be moved!\");\n\t            }\n\t            var /** @type {?} */ nestedViews = this.nestedViews;\n\t            if (nestedViews == null) {\n\t                nestedViews = [];\n\t                this.nestedViews = nestedViews;\n\t            }\n\t            nestedViews.splice(previousIndex, 1);\n\t            nestedViews.splice(currentIndex, 0, view);\n\t            var /** @type {?} */ prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;\n\t            view.moveAfter(this, prevView);\n\t        };\n\t        /**\n\t         * @param {?} view\n\t         * @param {?} viewIndex\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.attachView = function (view, viewIndex) {\n\t            if (view.type === ViewType.COMPONENT) {\n\t                throw new Error(\"Component views can't be moved!\");\n\t            }\n\t            var /** @type {?} */ nestedViews = this.nestedViews;\n\t            if (nestedViews == null) {\n\t                nestedViews = [];\n\t                this.nestedViews = nestedViews;\n\t            }\n\t            // perf: array.push is faster than array.splice!\n\t            if (viewIndex >= nestedViews.length) {\n\t                nestedViews.push(view);\n\t            }\n\t            else {\n\t                nestedViews.splice(viewIndex, 0, view);\n\t            }\n\t            var /** @type {?} */ prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;\n\t            view.attachAfter(this, prevView);\n\t        };\n\t        /**\n\t         * @param {?} viewIndex\n\t         * @return {?}\n\t         */\n\t        ViewContainer.prototype.detachView = function (viewIndex) {\n\t            var /** @type {?} */ view = this.nestedViews[viewIndex];\n\t            // perf: array.pop is faster than array.splice!\n\t            if (viewIndex >= this.nestedViews.length - 1) {\n\t                this.nestedViews.pop();\n\t            }\n\t            else {\n\t                this.nestedViews.splice(viewIndex, 1);\n\t            }\n\t            if (view.type === ViewType.COMPONENT) {\n\t                throw new Error(\"Component views can't be moved!\");\n\t            }\n\t            view.detach();\n\t            return view;\n\t        };\n\t        return ViewContainer;\n\t    }());\n\t\n\t    var /** @type {?} */ __core_private__ = {\n\t        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,\n\t        ChangeDetectorStatus: ChangeDetectorStatus,\n\t        constructDependencies: constructDependencies,\n\t        LifecycleHooks: LifecycleHooks,\n\t        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,\n\t        ReflectorReader: ReflectorReader,\n\t        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,\n\t        ComponentRef_: ComponentRef_,\n\t        ViewContainer: ViewContainer,\n\t        AppView: AppView,\n\t        DebugAppView: DebugAppView,\n\t        NgModuleInjector: NgModuleInjector,\n\t        registerModuleFactory: registerModuleFactory,\n\t        ViewType: ViewType,\n\t        view_utils: view_utils,\n\t        ViewMetadata: ViewMetadata,\n\t        DebugContext: DebugContext,\n\t        StaticNodeDebugInfo: StaticNodeDebugInfo,\n\t        devModeEqual: devModeEqual,\n\t        UNINITIALIZED: UNINITIALIZED,\n\t        ValueUnwrapper: ValueUnwrapper,\n\t        RenderDebugInfo: RenderDebugInfo,\n\t        TemplateRef_: TemplateRef_,\n\t        ReflectionCapabilities: ReflectionCapabilities,\n\t        makeDecorator: makeDecorator,\n\t        DebugDomRootRenderer: DebugDomRootRenderer,\n\t        Console: Console,\n\t        reflector: reflector,\n\t        Reflector: Reflector,\n\t        NoOpAnimationPlayer: NoOpAnimationPlayer,\n\t        AnimationPlayer: AnimationPlayer,\n\t        AnimationSequencePlayer: AnimationSequencePlayer,\n\t        AnimationGroupPlayer: AnimationGroupPlayer,\n\t        AnimationKeyframe: AnimationKeyframe,\n\t        prepareFinalAnimationStyles: prepareFinalAnimationStyles,\n\t        balanceAnimationKeyframes: balanceAnimationKeyframes,\n\t        flattenStyles: flattenStyles,\n\t        clearStyles: clearStyles,\n\t        renderStyles: renderStyles,\n\t        collectAndResolveStyles: collectAndResolveStyles,\n\t        APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,\n\t        AnimationStyles: AnimationStyles,\n\t        ANY_STATE: ANY_STATE,\n\t        DEFAULT_STATE: DEFAULT_STATE,\n\t        EMPTY_STATE: EMPTY_STATE,\n\t        FILL_STYLE_FLAG: FILL_STYLE_FLAG,\n\t        ComponentStillLoadingError: ComponentStillLoadingError,\n\t        isPromise: isPromise,\n\t        isObservable: isObservable,\n\t        AnimationTransition: AnimationTransition\n\t    };\n\t\n\t    exports.createPlatform = createPlatform;\n\t    exports.assertPlatform = assertPlatform;\n\t    exports.destroyPlatform = destroyPlatform;\n\t    exports.getPlatform = getPlatform;\n\t    exports.PlatformRef = PlatformRef;\n\t    exports.ApplicationRef = ApplicationRef;\n\t    exports.enableProdMode = enableProdMode;\n\t    exports.isDevMode = isDevMode;\n\t    exports.createPlatformFactory = createPlatformFactory;\n\t    exports.NgProbeToken = NgProbeToken;\n\t    exports.APP_ID = APP_ID;\n\t    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;\n\t    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;\n\t    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;\n\t    exports.APP_INITIALIZER = APP_INITIALIZER;\n\t    exports.ApplicationInitStatus = ApplicationInitStatus;\n\t    exports.DebugElement = DebugElement;\n\t    exports.DebugNode = DebugNode;\n\t    exports.asNativeElements = asNativeElements;\n\t    exports.getDebugNode = getDebugNode;\n\t    exports.Testability = Testability;\n\t    exports.TestabilityRegistry = TestabilityRegistry;\n\t    exports.setTestabilityGetter = setTestabilityGetter;\n\t    exports.TRANSLATIONS = TRANSLATIONS;\n\t    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;\n\t    exports.LOCALE_ID = LOCALE_ID;\n\t    exports.ApplicationModule = ApplicationModule;\n\t    exports.wtfCreateScope = wtfCreateScope;\n\t    exports.wtfLeave = wtfLeave;\n\t    exports.wtfStartTimeRange = wtfStartTimeRange;\n\t    exports.wtfEndTimeRange = wtfEndTimeRange;\n\t    exports.Type = Type;\n\t    exports.EventEmitter = EventEmitter;\n\t    exports.ErrorHandler = ErrorHandler;\n\t    exports.AnimationTransitionEvent = AnimationTransitionEvent;\n\t    exports.AnimationPlayer = AnimationPlayer;\n\t    exports.AnimationStyles = AnimationStyles;\n\t    exports.AnimationKeyframe = AnimationKeyframe;\n\t    exports.Sanitizer = Sanitizer;\n\t    exports.SecurityContext = SecurityContext;\n\t    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;\n\t    exports.Attribute = Attribute;\n\t    exports.ContentChild = ContentChild;\n\t    exports.ContentChildren = ContentChildren;\n\t    exports.Query = Query;\n\t    exports.ViewChild = ViewChild;\n\t    exports.ViewChildren = ViewChildren;\n\t    exports.Component = Component;\n\t    exports.Directive = Directive;\n\t    exports.HostBinding = HostBinding;\n\t    exports.HostListener = HostListener;\n\t    exports.Input = Input;\n\t    exports.Output = Output;\n\t    exports.Pipe = Pipe;\n\t    exports.AfterContentChecked = AfterContentChecked;\n\t    exports.AfterContentInit = AfterContentInit;\n\t    exports.AfterViewChecked = AfterViewChecked;\n\t    exports.AfterViewInit = AfterViewInit;\n\t    exports.DoCheck = DoCheck;\n\t    exports.OnChanges = OnChanges;\n\t    exports.OnDestroy = OnDestroy;\n\t    exports.OnInit = OnInit;\n\t    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;\n\t    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;\n\t    exports.NgModule = NgModule;\n\t    exports.ViewEncapsulation = ViewEncapsulation;\n\t    exports.Version = Version;\n\t    exports.VERSION = VERSION;\n\t    exports.Class = Class;\n\t    exports.forwardRef = forwardRef;\n\t    exports.resolveForwardRef = resolveForwardRef;\n\t    exports.Injector = Injector;\n\t    exports.ReflectiveInjector = ReflectiveInjector;\n\t    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;\n\t    exports.ReflectiveKey = ReflectiveKey;\n\t    exports.OpaqueToken = OpaqueToken;\n\t    exports.Inject = Inject;\n\t    exports.Optional = Optional;\n\t    exports.Injectable = Injectable;\n\t    exports.Self = Self;\n\t    exports.SkipSelf = SkipSelf;\n\t    exports.Host = Host;\n\t    exports.NgZone = NgZone;\n\t    exports.RenderComponentType = RenderComponentType;\n\t    exports.Renderer = Renderer;\n\t    exports.RootRenderer = RootRenderer;\n\t    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;\n\t    exports.Compiler = Compiler;\n\t    exports.CompilerFactory = CompilerFactory;\n\t    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;\n\t    exports.ComponentFactory = ComponentFactory;\n\t    exports.ComponentRef = ComponentRef;\n\t    exports.ComponentFactoryResolver = ComponentFactoryResolver;\n\t    exports.ElementRef = ElementRef;\n\t    exports.NgModuleFactory = NgModuleFactory;\n\t    exports.NgModuleRef = NgModuleRef;\n\t    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;\n\t    exports.getModuleFactory = getModuleFactory;\n\t    exports.QueryList = QueryList;\n\t    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;\n\t    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;\n\t    exports.TemplateRef = TemplateRef;\n\t    exports.ViewContainerRef = ViewContainerRef;\n\t    exports.EmbeddedViewRef = EmbeddedViewRef;\n\t    exports.ViewRef = ViewRef;\n\t    exports.ChangeDetectionStrategy = ChangeDetectionStrategy;\n\t    exports.ChangeDetectorRef = ChangeDetectorRef;\n\t    exports.CollectionChangeRecord = CollectionChangeRecord;\n\t    exports.DefaultIterableDiffer = DefaultIterableDiffer;\n\t    exports.IterableDiffers = IterableDiffers;\n\t    exports.KeyValueChangeRecord = KeyValueChangeRecord;\n\t    exports.KeyValueDiffers = KeyValueDiffers;\n\t    exports.SimpleChange = SimpleChange;\n\t    exports.WrappedValue = WrappedValue;\n\t    exports.platformCore = platformCore;\n\t    exports.__core_private__ = __core_private__;\n\t    exports.AUTO_STYLE = AUTO_STYLE;\n\t    exports.AnimationEntryMetadata = AnimationEntryMetadata;\n\t    exports.AnimationStateMetadata = AnimationStateMetadata;\n\t    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;\n\t    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;\n\t    exports.AnimationMetadata = AnimationMetadata;\n\t    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;\n\t    exports.AnimationStyleMetadata = AnimationStyleMetadata;\n\t    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;\n\t    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;\n\t    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;\n\t    exports.AnimationGroupMetadata = AnimationGroupMetadata;\n\t    exports.animate = animate;\n\t    exports.group = group;\n\t    exports.sequence = sequence;\n\t    exports.style = style;\n\t    exports.state = state;\n\t    exports.keyframes = keyframes;\n\t    exports.transition = transition;\n\t    exports.trigger = trigger;\n\t\n\t}));\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(3);\n\tfunction getSymbolObservable(context) {\n\t    var $$observable;\n\t    var Symbol = context.Symbol;\n\t    if (typeof Symbol === 'function') {\n\t        if (Symbol.observable) {\n\t            $$observable = Symbol.observable;\n\t        }\n\t        else {\n\t            $$observable = Symbol('observable');\n\t            Symbol.observable = $$observable;\n\t        }\n\t    }\n\t    else {\n\t        $$observable = '@@observable';\n\t    }\n\t    return $$observable;\n\t}\n\texports.getSymbolObservable = getSymbolObservable;\n\texports.observable = getSymbolObservable(root_1.root);\n\t/**\n\t * @deprecated use observable instead\n\t */\n\texports.$$observable = exports.observable;\n\t//# sourceMappingURL=observable.js.map\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t// CommonJS / Node have global context exposed as \"global\" variable.\n\t// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n\t// the global \"global\" var for now.\n\tvar __window = typeof window !== 'undefined' && window;\n\tvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n\t    self instanceof WorkerGlobalScope && self;\n\tvar __global = typeof global !== 'undefined' && global;\n\tvar _root = __window || __global || __self;\n\texports.root = _root;\n\t// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n\t// This is needed when used with angular/tsickle which inserts a goog.module statement.\n\t// Wrap in IIFE\n\t(function () {\n\t    if (!_root) {\n\t        throw new Error('RxJS could not find any global context (window, self, global)');\n\t    }\n\t})();\n\t//# sourceMappingURL=root.js.map\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Observable_1 = __webpack_require__(5);\n\tvar Subscriber_1 = __webpack_require__(7);\n\tvar Subscription_1 = __webpack_require__(9);\n\tvar ObjectUnsubscribedError_1 = __webpack_require__(17);\n\tvar SubjectSubscription_1 = __webpack_require__(18);\n\tvar rxSubscriber_1 = __webpack_require__(16);\n\t/**\n\t * @class SubjectSubscriber<T>\n\t */\n\tvar SubjectSubscriber = (function (_super) {\n\t    __extends(SubjectSubscriber, _super);\n\t    function SubjectSubscriber(destination) {\n\t        _super.call(this, destination);\n\t        this.destination = destination;\n\t    }\n\t    return SubjectSubscriber;\n\t}(Subscriber_1.Subscriber));\n\texports.SubjectSubscriber = SubjectSubscriber;\n\t/**\n\t * @class Subject<T>\n\t */\n\tvar Subject = (function (_super) {\n\t    __extends(Subject, _super);\n\t    function Subject() {\n\t        _super.call(this);\n\t        this.observers = [];\n\t        this.closed = false;\n\t        this.isStopped = false;\n\t        this.hasError = false;\n\t        this.thrownError = null;\n\t    }\n\t    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n\t        return new SubjectSubscriber(this);\n\t    };\n\t    Subject.prototype.lift = function (operator) {\n\t        var subject = new AnonymousSubject(this, this);\n\t        subject.operator = operator;\n\t        return subject;\n\t    };\n\t    Subject.prototype.next = function (value) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        if (!this.isStopped) {\n\t            var observers = this.observers;\n\t            var len = observers.length;\n\t            var copy = observers.slice();\n\t            for (var i = 0; i < len; i++) {\n\t                copy[i].next(value);\n\t            }\n\t        }\n\t    };\n\t    Subject.prototype.error = function (err) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.hasError = true;\n\t        this.thrownError = err;\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].error(err);\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.complete = function () {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        this.isStopped = true;\n\t        var observers = this.observers;\n\t        var len = observers.length;\n\t        var copy = observers.slice();\n\t        for (var i = 0; i < len; i++) {\n\t            copy[i].complete();\n\t        }\n\t        this.observers.length = 0;\n\t    };\n\t    Subject.prototype.unsubscribe = function () {\n\t        this.isStopped = true;\n\t        this.closed = true;\n\t        this.observers = null;\n\t    };\n\t    Subject.prototype._trySubscribe = function (subscriber) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else {\n\t            return _super.prototype._trySubscribe.call(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype._subscribe = function (subscriber) {\n\t        if (this.closed) {\n\t            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n\t        }\n\t        else if (this.hasError) {\n\t            subscriber.error(this.thrownError);\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else if (this.isStopped) {\n\t            subscriber.complete();\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t        else {\n\t            this.observers.push(subscriber);\n\t            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n\t        }\n\t    };\n\t    Subject.prototype.asObservable = function () {\n\t        var observable = new Observable_1.Observable();\n\t        observable.source = this;\n\t        return observable;\n\t    };\n\t    Subject.create = function (destination, source) {\n\t        return new AnonymousSubject(destination, source);\n\t    };\n\t    return Subject;\n\t}(Observable_1.Observable));\n\texports.Subject = Subject;\n\t/**\n\t * @class AnonymousSubject<T>\n\t */\n\tvar AnonymousSubject = (function (_super) {\n\t    __extends(AnonymousSubject, _super);\n\t    function AnonymousSubject(destination, source) {\n\t        _super.call(this);\n\t        this.destination = destination;\n\t        this.source = source;\n\t    }\n\t    AnonymousSubject.prototype.next = function (value) {\n\t        var destination = this.destination;\n\t        if (destination && destination.next) {\n\t            destination.next(value);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.error = function (err) {\n\t        var destination = this.destination;\n\t        if (destination && destination.error) {\n\t            this.destination.error(err);\n\t        }\n\t    };\n\t    AnonymousSubject.prototype.complete = function () {\n\t        var destination = this.destination;\n\t        if (destination && destination.complete) {\n\t            this.destination.complete();\n\t        }\n\t    };\n\t    AnonymousSubject.prototype._subscribe = function (subscriber) {\n\t        var source = this.source;\n\t        if (source) {\n\t            return this.source.subscribe(subscriber);\n\t        }\n\t        else {\n\t            return Subscription_1.Subscription.EMPTY;\n\t        }\n\t    };\n\t    return AnonymousSubject;\n\t}(Subject));\n\texports.AnonymousSubject = AnonymousSubject;\n\t//# sourceMappingURL=Subject.js.map\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(3);\n\tvar toSubscriber_1 = __webpack_require__(6);\n\tvar observable_1 = __webpack_require__(2);\n\t/**\n\t * A representation of any set of values over any amount of time. This the most basic building block\n\t * of RxJS.\n\t *\n\t * @class Observable<T>\n\t */\n\tvar Observable = (function () {\n\t    /**\n\t     * @constructor\n\t     * @param {Function} subscribe the function that is  called when the Observable is\n\t     * initially subscribed to. This function is given a Subscriber, to which new values\n\t     * can be `next`ed, or an `error` method can be called to raise an error, or\n\t     * `complete` can be called to notify of a successful completion.\n\t     */\n\t    function Observable(subscribe) {\n\t        this._isScalar = false;\n\t        if (subscribe) {\n\t            this._subscribe = subscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Creates a new Observable, with this Observable as the source, and the passed\n\t     * operator defined as the new observable's operator.\n\t     * @method lift\n\t     * @param {Operator} operator the operator defining the operation to take on the observable\n\t     * @return {Observable} a new observable with the Operator applied\n\t     */\n\t    Observable.prototype.lift = function (operator) {\n\t        var observable = new Observable();\n\t        observable.source = this;\n\t        observable.operator = operator;\n\t        return observable;\n\t    };\n\t    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n\t        var operator = this.operator;\n\t        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n\t        if (operator) {\n\t            operator.call(sink, this.source);\n\t        }\n\t        else {\n\t            sink.add(this._trySubscribe(sink));\n\t        }\n\t        if (sink.syncErrorThrowable) {\n\t            sink.syncErrorThrowable = false;\n\t            if (sink.syncErrorThrown) {\n\t                throw sink.syncErrorValue;\n\t            }\n\t        }\n\t        return sink;\n\t    };\n\t    Observable.prototype._trySubscribe = function (sink) {\n\t        try {\n\t            return this._subscribe(sink);\n\t        }\n\t        catch (err) {\n\t            sink.syncErrorThrown = true;\n\t            sink.syncErrorValue = err;\n\t            sink.error(err);\n\t        }\n\t    };\n\t    /**\n\t     * @method forEach\n\t     * @param {Function} next a handler for each value emitted by the observable\n\t     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n\t     * @return {Promise} a promise that either resolves on observable completion or\n\t     *  rejects with the handled error\n\t     */\n\t    Observable.prototype.forEach = function (next, PromiseCtor) {\n\t        var _this = this;\n\t        if (!PromiseCtor) {\n\t            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n\t                PromiseCtor = root_1.root.Rx.config.Promise;\n\t            }\n\t            else if (root_1.root.Promise) {\n\t                PromiseCtor = root_1.root.Promise;\n\t            }\n\t        }\n\t        if (!PromiseCtor) {\n\t            throw new Error('no Promise impl found');\n\t        }\n\t        return new PromiseCtor(function (resolve, reject) {\n\t            // Must be declared in a separate statement to avoid a RefernceError when\n\t            // accessing subscription below in the closure due to Temporal Dead Zone.\n\t            var subscription;\n\t            subscription = _this.subscribe(function (value) {\n\t                if (subscription) {\n\t                    // if there is a subscription, then we can surmise\n\t                    // the next handling is asynchronous. Any errors thrown\n\t                    // need to be rejected explicitly and unsubscribe must be\n\t                    // called manually\n\t                    try {\n\t                        next(value);\n\t                    }\n\t                    catch (err) {\n\t                        reject(err);\n\t                        subscription.unsubscribe();\n\t                    }\n\t                }\n\t                else {\n\t                    // if there is NO subscription, then we're getting a nexted\n\t                    // value synchronously during subscription. We can just call it.\n\t                    // If it errors, Observable's `subscribe` will ensure the\n\t                    // unsubscription logic is called, then synchronously rethrow the error.\n\t                    // After that, Promise will trap the error and send it\n\t                    // down the rejection path.\n\t                    next(value);\n\t                }\n\t            }, reject, resolve);\n\t        });\n\t    };\n\t    Observable.prototype._subscribe = function (subscriber) {\n\t        return this.source.subscribe(subscriber);\n\t    };\n\t    /**\n\t     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n\t     * @method Symbol.observable\n\t     * @return {Observable} this instance of the observable\n\t     */\n\t    Observable.prototype[observable_1.observable] = function () {\n\t        return this;\n\t    };\n\t    // HACK: Since TypeScript inherits static properties too, we have to\n\t    // fight against TypeScript here so Subject can have a different static create signature\n\t    /**\n\t     * Creates a new cold Observable by calling the Observable constructor\n\t     * @static true\n\t     * @owner Observable\n\t     * @method create\n\t     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n\t     * @return {Observable} a new cold observable\n\t     */\n\t    Observable.create = function (subscribe) {\n\t        return new Observable(subscribe);\n\t    };\n\t    return Observable;\n\t}());\n\texports.Observable = Observable;\n\t//# sourceMappingURL=Observable.js.map\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar Subscriber_1 = __webpack_require__(7);\n\tvar rxSubscriber_1 = __webpack_require__(16);\n\tvar Observer_1 = __webpack_require__(15);\n\tfunction toSubscriber(nextOrObserver, error, complete) {\n\t    if (nextOrObserver) {\n\t        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n\t            return nextOrObserver;\n\t        }\n\t        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n\t            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n\t        }\n\t    }\n\t    if (!nextOrObserver && !error && !complete) {\n\t        return new Subscriber_1.Subscriber(Observer_1.empty);\n\t    }\n\t    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n\t}\n\texports.toSubscriber = toSubscriber;\n\t//# sourceMappingURL=toSubscriber.js.map\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar isFunction_1 = __webpack_require__(8);\n\tvar Subscription_1 = __webpack_require__(9);\n\tvar Observer_1 = __webpack_require__(15);\n\tvar rxSubscriber_1 = __webpack_require__(16);\n\t/**\n\t * Implements the {@link Observer} interface and extends the\n\t * {@link Subscription} class. While the {@link Observer} is the public API for\n\t * consuming the values of an {@link Observable}, all Observers get converted to\n\t * a Subscriber, in order to provide Subscription-like capabilities such as\n\t * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n\t * implementing operators, but it is rarely used as a public API.\n\t *\n\t * @class Subscriber<T>\n\t */\n\tvar Subscriber = (function (_super) {\n\t    __extends(Subscriber, _super);\n\t    /**\n\t     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n\t     * defined Observer or a `next` callback function.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     */\n\t    function Subscriber(destinationOrNext, error, complete) {\n\t        _super.call(this);\n\t        this.syncErrorValue = null;\n\t        this.syncErrorThrown = false;\n\t        this.syncErrorThrowable = false;\n\t        this.isStopped = false;\n\t        switch (arguments.length) {\n\t            case 0:\n\t                this.destination = Observer_1.empty;\n\t                break;\n\t            case 1:\n\t                if (!destinationOrNext) {\n\t                    this.destination = Observer_1.empty;\n\t                    break;\n\t                }\n\t                if (typeof destinationOrNext === 'object') {\n\t                    if (destinationOrNext instanceof Subscriber) {\n\t                        this.destination = destinationOrNext;\n\t                        this.destination.add(this);\n\t                    }\n\t                    else {\n\t                        this.syncErrorThrowable = true;\n\t                        this.destination = new SafeSubscriber(this, destinationOrNext);\n\t                    }\n\t                    break;\n\t                }\n\t            default:\n\t                this.syncErrorThrowable = true;\n\t                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n\t                break;\n\t        }\n\t    }\n\t    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n\t    /**\n\t     * A static factory for a Subscriber, given a (potentially partial) definition\n\t     * of an Observer.\n\t     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n\t     * @param {function(e: ?any): void} [error] The `error` callback of an\n\t     * Observer.\n\t     * @param {function(): void} [complete] The `complete` callback of an\n\t     * Observer.\n\t     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n\t     * Observer represented by the given arguments.\n\t     */\n\t    Subscriber.create = function (next, error, complete) {\n\t        var subscriber = new Subscriber(next, error, complete);\n\t        subscriber.syncErrorThrowable = false;\n\t        return subscriber;\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `next` from\n\t     * the Observable, with a value. The Observable may call this method 0 or more\n\t     * times.\n\t     * @param {T} [value] The `next` value.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.next = function (value) {\n\t        if (!this.isStopped) {\n\t            this._next(value);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive notifications of type `error` from\n\t     * the Observable, with an attached {@link Error}. Notifies the Observer that\n\t     * the Observable has experienced an error condition.\n\t     * @param {any} [err] The `error` exception.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._error(err);\n\t        }\n\t    };\n\t    /**\n\t     * The {@link Observer} callback to receive a valueless notification of type\n\t     * `complete` from the Observable. Notifies the Observer that the Observable\n\t     * has finished sending push-based notifications.\n\t     * @return {void}\n\t     */\n\t    Subscriber.prototype.complete = function () {\n\t        if (!this.isStopped) {\n\t            this.isStopped = true;\n\t            this._complete();\n\t        }\n\t    };\n\t    Subscriber.prototype.unsubscribe = function () {\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.isStopped = true;\n\t        _super.prototype.unsubscribe.call(this);\n\t    };\n\t    Subscriber.prototype._next = function (value) {\n\t        this.destination.next(value);\n\t    };\n\t    Subscriber.prototype._error = function (err) {\n\t        this.destination.error(err);\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._complete = function () {\n\t        this.destination.complete();\n\t        this.unsubscribe();\n\t    };\n\t    Subscriber.prototype._unsubscribeAndRecycle = function () {\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        this.unsubscribe();\n\t        this.closed = false;\n\t        this.isStopped = false;\n\t        this._parent = _parent;\n\t        this._parents = _parents;\n\t        return this;\n\t    };\n\t    return Subscriber;\n\t}(Subscription_1.Subscription));\n\texports.Subscriber = Subscriber;\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SafeSubscriber = (function (_super) {\n\t    __extends(SafeSubscriber, _super);\n\t    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n\t        _super.call(this);\n\t        this._parentSubscriber = _parentSubscriber;\n\t        var next;\n\t        var context = this;\n\t        if (isFunction_1.isFunction(observerOrNext)) {\n\t            next = observerOrNext;\n\t        }\n\t        else if (observerOrNext) {\n\t            next = observerOrNext.next;\n\t            error = observerOrNext.error;\n\t            complete = observerOrNext.complete;\n\t            if (observerOrNext !== Observer_1.empty) {\n\t                context = Object.create(observerOrNext);\n\t                if (isFunction_1.isFunction(context.unsubscribe)) {\n\t                    this.add(context.unsubscribe.bind(context));\n\t                }\n\t                context.unsubscribe = this.unsubscribe.bind(this);\n\t            }\n\t        }\n\t        this._context = context;\n\t        this._next = next;\n\t        this._error = error;\n\t        this._complete = complete;\n\t    }\n\t    SafeSubscriber.prototype.next = function (value) {\n\t        if (!this.isStopped && this._next) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (!_parentSubscriber.syncErrorThrowable) {\n\t                this.__tryOrUnsub(this._next, value);\n\t            }\n\t            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.error = function (err) {\n\t        if (!this.isStopped) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (this._error) {\n\t                if (!_parentSubscriber.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else if (!_parentSubscriber.syncErrorThrowable) {\n\t                this.unsubscribe();\n\t                throw err;\n\t            }\n\t            else {\n\t                _parentSubscriber.syncErrorValue = err;\n\t                _parentSubscriber.syncErrorThrown = true;\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.complete = function () {\n\t        var _this = this;\n\t        if (!this.isStopped) {\n\t            var _parentSubscriber = this._parentSubscriber;\n\t            if (this._complete) {\n\t                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n\t                if (!_parentSubscriber.syncErrorThrowable) {\n\t                    this.__tryOrUnsub(wrappedComplete);\n\t                    this.unsubscribe();\n\t                }\n\t                else {\n\t                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\t                    this.unsubscribe();\n\t                }\n\t            }\n\t            else {\n\t                this.unsubscribe();\n\t            }\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            this.unsubscribe();\n\t            throw err;\n\t        }\n\t    };\n\t    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n\t        try {\n\t            fn.call(this._context, value);\n\t        }\n\t        catch (err) {\n\t            parent.syncErrorValue = err;\n\t            parent.syncErrorThrown = true;\n\t            return true;\n\t        }\n\t        return false;\n\t    };\n\t    SafeSubscriber.prototype._unsubscribe = function () {\n\t        var _parentSubscriber = this._parentSubscriber;\n\t        this._context = null;\n\t        this._parentSubscriber = null;\n\t        _parentSubscriber.unsubscribe();\n\t    };\n\t    return SafeSubscriber;\n\t}(Subscriber));\n\t//# sourceMappingURL=Subscriber.js.map\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction isFunction(x) {\n\t    return typeof x === 'function';\n\t}\n\texports.isFunction = isFunction;\n\t//# sourceMappingURL=isFunction.js.map\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar isArray_1 = __webpack_require__(10);\n\tvar isObject_1 = __webpack_require__(11);\n\tvar isFunction_1 = __webpack_require__(8);\n\tvar tryCatch_1 = __webpack_require__(12);\n\tvar errorObject_1 = __webpack_require__(13);\n\tvar UnsubscriptionError_1 = __webpack_require__(14);\n\t/**\n\t * Represents a disposable resource, such as the execution of an Observable. A\n\t * Subscription has one important method, `unsubscribe`, that takes no argument\n\t * and just disposes the resource held by the subscription.\n\t *\n\t * Additionally, subscriptions may be grouped together through the `add()`\n\t * method, which will attach a child Subscription to the current Subscription.\n\t * When a Subscription is unsubscribed, all its children (and its grandchildren)\n\t * will be unsubscribed as well.\n\t *\n\t * @class Subscription\n\t */\n\tvar Subscription = (function () {\n\t    /**\n\t     * @param {function(): void} [unsubscribe] A function describing how to\n\t     * perform the disposal of resources when the `unsubscribe` method is called.\n\t     */\n\t    function Subscription(unsubscribe) {\n\t        /**\n\t         * A flag to indicate whether this Subscription has already been unsubscribed.\n\t         * @type {boolean}\n\t         */\n\t        this.closed = false;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        this._subscriptions = null;\n\t        if (unsubscribe) {\n\t            this._unsubscribe = unsubscribe;\n\t        }\n\t    }\n\t    /**\n\t     * Disposes the resources held by the subscription. May, for instance, cancel\n\t     * an ongoing Observable execution or cancel any other type of work that\n\t     * started when the Subscription was created.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.unsubscribe = function () {\n\t        var hasErrors = false;\n\t        var errors;\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n\t        this.closed = true;\n\t        this._parent = null;\n\t        this._parents = null;\n\t        // null out _subscriptions first so any child subscriptions that attempt\n\t        // to remove themselves from this subscription will noop\n\t        this._subscriptions = null;\n\t        var index = -1;\n\t        var len = _parents ? _parents.length : 0;\n\t        // if this._parent is null, then so is this._parents, and we\n\t        // don't have to remove ourselves from any parent subscriptions.\n\t        while (_parent) {\n\t            _parent.remove(this);\n\t            // if this._parents is null or index >= len,\n\t            // then _parent is set to null, and the loop exits\n\t            _parent = ++index < len && _parents[index] || null;\n\t        }\n\t        if (isFunction_1.isFunction(_unsubscribe)) {\n\t            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n\t            if (trial === errorObject_1.errorObject) {\n\t                hasErrors = true;\n\t                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n\t                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n\t            }\n\t        }\n\t        if (isArray_1.isArray(_subscriptions)) {\n\t            index = -1;\n\t            len = _subscriptions.length;\n\t            while (++index < len) {\n\t                var sub = _subscriptions[index];\n\t                if (isObject_1.isObject(sub)) {\n\t                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n\t                    if (trial === errorObject_1.errorObject) {\n\t                        hasErrors = true;\n\t                        errors = errors || [];\n\t                        var err = errorObject_1.errorObject.e;\n\t                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n\t                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n\t                        }\n\t                        else {\n\t                            errors.push(err);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (hasErrors) {\n\t            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n\t        }\n\t    };\n\t    /**\n\t     * Adds a tear down to be called during the unsubscribe() of this\n\t     * Subscription.\n\t     *\n\t     * If the tear down being added is a subscription that is already\n\t     * unsubscribed, is the same reference `add` is being called on, or is\n\t     * `Subscription.EMPTY`, it will not be added.\n\t     *\n\t     * If this subscription is already in an `closed` state, the passed\n\t     * tear down logic will be executed immediately.\n\t     *\n\t     * @param {TeardownLogic} teardown The additional logic to execute on\n\t     * teardown.\n\t     * @return {Subscription} Returns the Subscription used or created to be\n\t     * added to the inner subscriptions list. This Subscription can be used with\n\t     * `remove()` to remove the passed teardown logic from the inner subscriptions\n\t     * list.\n\t     */\n\t    Subscription.prototype.add = function (teardown) {\n\t        if (!teardown || (teardown === Subscription.EMPTY)) {\n\t            return Subscription.EMPTY;\n\t        }\n\t        if (teardown === this) {\n\t            return this;\n\t        }\n\t        var subscription = teardown;\n\t        switch (typeof teardown) {\n\t            case 'function':\n\t                subscription = new Subscription(teardown);\n\t            case 'object':\n\t                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n\t                    return subscription;\n\t                }\n\t                else if (this.closed) {\n\t                    subscription.unsubscribe();\n\t                    return subscription;\n\t                }\n\t                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n\t                    var tmp = subscription;\n\t                    subscription = new Subscription();\n\t                    subscription._subscriptions = [tmp];\n\t                }\n\t                break;\n\t            default:\n\t                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n\t        }\n\t        var subscriptions = this._subscriptions || (this._subscriptions = []);\n\t        subscriptions.push(subscription);\n\t        subscription._addParent(this);\n\t        return subscription;\n\t    };\n\t    /**\n\t     * Removes a Subscription from the internal list of subscriptions that will\n\t     * unsubscribe during the unsubscribe process of this Subscription.\n\t     * @param {Subscription} subscription The subscription to remove.\n\t     * @return {void}\n\t     */\n\t    Subscription.prototype.remove = function (subscription) {\n\t        var subscriptions = this._subscriptions;\n\t        if (subscriptions) {\n\t            var subscriptionIndex = subscriptions.indexOf(subscription);\n\t            if (subscriptionIndex !== -1) {\n\t                subscriptions.splice(subscriptionIndex, 1);\n\t            }\n\t        }\n\t    };\n\t    Subscription.prototype._addParent = function (parent) {\n\t        var _a = this, _parent = _a._parent, _parents = _a._parents;\n\t        if (!_parent || _parent === parent) {\n\t            // If we don't have a parent, or the new parent is the same as the\n\t            // current parent, then set this._parent to the new parent.\n\t            this._parent = parent;\n\t        }\n\t        else if (!_parents) {\n\t            // If there's already one parent, but not multiple, allocate an Array to\n\t            // store the rest of the parent Subscriptions.\n\t            this._parents = [parent];\n\t        }\n\t        else if (_parents.indexOf(parent) === -1) {\n\t            // Only add the new parent to the _parents list if it's not already there.\n\t            _parents.push(parent);\n\t        }\n\t    };\n\t    Subscription.EMPTY = (function (empty) {\n\t        empty.closed = true;\n\t        return empty;\n\t    }(new Subscription()));\n\t    return Subscription;\n\t}());\n\texports.Subscription = Subscription;\n\tfunction flattenUnsubscriptionErrors(errors) {\n\t    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n\t}\n\t//# sourceMappingURL=Subscription.js.map\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\texports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n\t//# sourceMappingURL=isArray.js.map\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tfunction isObject(x) {\n\t    return x != null && typeof x === 'object';\n\t}\n\texports.isObject = isObject;\n\t//# sourceMappingURL=isObject.js.map\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar errorObject_1 = __webpack_require__(13);\n\tvar tryCatchTarget;\n\tfunction tryCatcher() {\n\t    try {\n\t        return tryCatchTarget.apply(this, arguments);\n\t    }\n\t    catch (e) {\n\t        errorObject_1.errorObject.e = e;\n\t        return errorObject_1.errorObject;\n\t    }\n\t}\n\tfunction tryCatch(fn) {\n\t    tryCatchTarget = fn;\n\t    return tryCatcher;\n\t}\n\texports.tryCatch = tryCatch;\n\t;\n\t//# sourceMappingURL=tryCatch.js.map\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\t// typeof any so that it we don't have to cast when comparing a result to the error object\n\texports.errorObject = { e: {} };\n\t//# sourceMappingURL=errorObject.js.map\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when one or more errors have occurred during the\n\t * `unsubscribe` of a {@link Subscription}.\n\t */\n\tvar UnsubscriptionError = (function (_super) {\n\t    __extends(UnsubscriptionError, _super);\n\t    function UnsubscriptionError(errors) {\n\t        _super.call(this);\n\t        this.errors = errors;\n\t        var err = Error.call(this, errors ?\n\t            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n\t        this.name = err.name = 'UnsubscriptionError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return UnsubscriptionError;\n\t}(Error));\n\texports.UnsubscriptionError = UnsubscriptionError;\n\t//# sourceMappingURL=UnsubscriptionError.js.map\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\texports.empty = {\n\t    closed: true,\n\t    next: function (value) { },\n\t    error: function (err) { throw err; },\n\t    complete: function () { }\n\t};\n\t//# sourceMappingURL=Observer.js.map\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar root_1 = __webpack_require__(3);\n\tvar Symbol = root_1.root.Symbol;\n\texports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n\t    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\t/**\n\t * @deprecated use rxSubscriber instead\n\t */\n\texports.$$rxSubscriber = exports.rxSubscriber;\n\t//# sourceMappingURL=rxSubscriber.js.map\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\t/**\n\t * An error thrown when an action is invalid because the object has been\n\t * unsubscribed.\n\t *\n\t * @see {@link Subject}\n\t * @see {@link BehaviorSubject}\n\t *\n\t * @class ObjectUnsubscribedError\n\t */\n\tvar ObjectUnsubscribedError = (function (_super) {\n\t    __extends(ObjectUnsubscribedError, _super);\n\t    function ObjectUnsubscribedError() {\n\t        var err = _super.call(this, 'object unsubscribed');\n\t        this.name = err.name = 'ObjectUnsubscribedError';\n\t        this.stack = err.stack;\n\t        this.message = err.message;\n\t    }\n\t    return ObjectUnsubscribedError;\n\t}(Error));\n\texports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n\t//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || function (d, b) {\n\t    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t    function __() { this.constructor = d; }\n\t    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t};\n\tvar Subscription_1 = __webpack_require__(9);\n\t/**\n\t * We need this JSDoc comment for affecting ESDoc.\n\t * @ignore\n\t * @extends {Ignored}\n\t */\n\tvar SubjectSubscription = (function (_super) {\n\t    __extends(SubjectSubscription, _super);\n\t    function SubjectSubscription(subject, subscriber) {\n\t        _super.call(this);\n\t        this.subject = subject;\n\t        this.subscriber = subscriber;\n\t        this.closed = false;\n\t    }\n\t    SubjectSubscription.prototype.unsubscribe = function () {\n\t        if (this.closed) {\n\t            return;\n\t        }\n\t        this.closed = true;\n\t        var subject = this.subject;\n\t        var observers = subject.observers;\n\t        this.subject = null;\n\t        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n\t            return;\n\t        }\n\t        var subscriberIndex = observers.indexOf(this.subscriber);\n\t        if (subscriberIndex !== -1) {\n\t            observers.splice(subscriberIndex, 1);\n\t        }\n\t    };\n\t    return SubjectSubscription;\n\t}(Subscription_1.Subscription));\n\texports.SubjectSubscription = SubjectSubscription;\n\t//# sourceMappingURL=SubjectSubscription.js.map\n\n/***/ })\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// component-injector.js"," \tvar parentHotUpdateCallback = this[\"webpackHotUpdate\"];\n \tthis[\"webpackHotUpdate\"] = \r\n \tfunction webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars\r\n \t\thotAddUpdateChunk(chunkId, moreModules);\r\n \t\tif(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);\r\n \t}\r\n \t\r\n \tfunction hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars\r\n \t\tvar head = document.getElementsByTagName(\"head\")[0];\r\n \t\tvar script = document.createElement(\"script\");\r\n \t\tscript.type = \"text/javascript\";\r\n \t\tscript.charset = \"utf-8\";\r\n \t\tscript.src = __webpack_require__.p + \"\" + chunkId + \".\" + hotCurrentHash + \".hot-update.js\";\r\n \t\thead.appendChild(script);\r\n \t}\r\n \t\r\n \tfunction hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars\r\n \t\tif(typeof XMLHttpRequest === \"undefined\")\r\n \t\t\treturn callback(new Error(\"No browser support\"));\r\n \t\ttry {\r\n \t\t\tvar request = new XMLHttpRequest();\r\n \t\t\tvar requestPath = __webpack_require__.p + \"\" + hotCurrentHash + \".hot-update.json\";\r\n \t\t\trequest.open(\"GET\", requestPath, true);\r\n \t\t\trequest.timeout = 10000;\r\n \t\t\trequest.send(null);\r\n \t\t} catch(err) {\r\n \t\t\treturn callback(err);\r\n \t\t}\r\n \t\trequest.onreadystatechange = function() {\r\n \t\t\tif(request.readyState !== 4) return;\r\n \t\t\tif(request.status === 0) {\r\n \t\t\t\t// timeout\r\n \t\t\t\tcallback(new Error(\"Manifest request to \" + requestPath + \" timed out.\"));\r\n \t\t\t} else if(request.status === 404) {\r\n \t\t\t\t// no update available\r\n \t\t\t\tcallback();\r\n \t\t\t} else if(request.status !== 200 && request.status !== 304) {\r\n \t\t\t\t// other failure\r\n \t\t\t\tcallback(new Error(\"Manifest request to \" + requestPath + \" failed.\"));\r\n \t\t\t} else {\r\n \t\t\t\t// success\r\n \t\t\t\ttry {\r\n \t\t\t\t\tvar update = JSON.parse(request.responseText);\r\n \t\t\t\t} catch(e) {\r\n \t\t\t\t\tcallback(e);\r\n \t\t\t\t\treturn;\r\n \t\t\t\t}\r\n \t\t\t\tcallback(null, update);\r\n \t\t\t}\r\n \t\t};\r\n \t}\r\n\n \t\r\n \t\r\n \t// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js\r\n \tvar canDefineProperty = false;\r\n \ttry {\r\n \t\tObject.defineProperty({}, \"x\", {\r\n \t\t\tget: function() {}\r\n \t\t});\r\n \t\tcanDefineProperty = true;\r\n \t} catch(x) {\r\n \t\t// IE will fail on defineProperty\r\n \t}\r\n \t\r\n \tvar hotApplyOnUpdate = true;\r\n \tvar hotCurrentHash = \"719ceb4a230d9234fb2a\"; // eslint-disable-line no-unused-vars\r\n \tvar hotCurrentModuleData = {};\r\n \tvar hotCurrentParents = []; // eslint-disable-line no-unused-vars\r\n \t\r\n \tfunction hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars\r\n \t\tvar me = installedModules[moduleId];\r\n \t\tif(!me) return __webpack_require__;\r\n \t\tvar fn = function(request) {\r\n \t\t\tif(me.hot.active) {\r\n \t\t\t\tif(installedModules[request]) {\r\n \t\t\t\t\tif(installedModules[request].parents.indexOf(moduleId) < 0)\r\n \t\t\t\t\t\tinstalledModules[request].parents.push(moduleId);\r\n \t\t\t\t\tif(me.children.indexOf(request) < 0)\r\n \t\t\t\t\t\tme.children.push(request);\r\n \t\t\t\t} else hotCurrentParents = [moduleId];\r\n \t\t\t} else {\r\n \t\t\t\tconsole.warn(\"[HMR] unexpected require(\" + request + \") from disposed module \" + moduleId);\r\n \t\t\t\thotCurrentParents = [];\r\n \t\t\t}\r\n \t\t\treturn __webpack_require__(request);\r\n \t\t};\r\n \t\tfor(var name in __webpack_require__) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {\r\n \t\t\t\tif(canDefineProperty) {\r\n \t\t\t\t\tObject.defineProperty(fn, name, (function(name) {\r\n \t\t\t\t\t\treturn {\r\n \t\t\t\t\t\t\tconfigurable: true,\r\n \t\t\t\t\t\t\tenumerable: true,\r\n \t\t\t\t\t\t\tget: function() {\r\n \t\t\t\t\t\t\t\treturn __webpack_require__[name];\r\n \t\t\t\t\t\t\t},\r\n \t\t\t\t\t\t\tset: function(value) {\r\n \t\t\t\t\t\t\t\t__webpack_require__[name] = value;\r\n \t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t};\r\n \t\t\t\t\t}(name)));\r\n \t\t\t\t} else {\r\n \t\t\t\t\tfn[name] = __webpack_require__[name];\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\tfunction ensure(chunkId, callback) {\r\n \t\t\tif(hotStatus === \"ready\")\r\n \t\t\t\thotSetStatus(\"prepare\");\r\n \t\t\thotChunksLoading++;\r\n \t\t\t__webpack_require__.e(chunkId, function() {\r\n \t\t\t\ttry {\r\n \t\t\t\t\tcallback.call(null, fn);\r\n \t\t\t\t} finally {\r\n \t\t\t\t\tfinishChunkLoading();\r\n \t\t\t\t}\r\n \t\r\n \t\t\t\tfunction finishChunkLoading() {\r\n \t\t\t\t\thotChunksLoading--;\r\n \t\t\t\t\tif(hotStatus === \"prepare\") {\r\n \t\t\t\t\t\tif(!hotWaitingFilesMap[chunkId]) {\r\n \t\t\t\t\t\t\thotEnsureUpdateChunk(chunkId);\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t\tif(hotChunksLoading === 0 && hotWaitingFiles === 0) {\r\n \t\t\t\t\t\t\thotUpdateDownloaded();\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t});\r\n \t\t}\r\n \t\tif(canDefineProperty) {\r\n \t\t\tObject.defineProperty(fn, \"e\", {\r\n \t\t\t\tenumerable: true,\r\n \t\t\t\tvalue: ensure\r\n \t\t\t});\r\n \t\t} else {\r\n \t\t\tfn.e = ensure;\r\n \t\t}\r\n \t\treturn fn;\r\n \t}\r\n \t\r\n \tfunction hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars\r\n \t\tvar hot = {\r\n \t\t\t// private stuff\r\n \t\t\t_acceptedDependencies: {},\r\n \t\t\t_declinedDependencies: {},\r\n \t\t\t_selfAccepted: false,\r\n \t\t\t_selfDeclined: false,\r\n \t\t\t_disposeHandlers: [],\r\n \t\r\n \t\t\t// Module API\r\n \t\t\tactive: true,\r\n \t\t\taccept: function(dep, callback) {\r\n \t\t\t\tif(typeof dep === \"undefined\")\r\n \t\t\t\t\thot._selfAccepted = true;\r\n \t\t\t\telse if(typeof dep === \"function\")\r\n \t\t\t\t\thot._selfAccepted = dep;\r\n \t\t\t\telse if(typeof dep === \"object\")\r\n \t\t\t\t\tfor(var i = 0; i < dep.length; i++)\r\n \t\t\t\t\t\thot._acceptedDependencies[dep[i]] = callback;\r\n \t\t\t\telse\r\n \t\t\t\t\thot._acceptedDependencies[dep] = callback;\r\n \t\t\t},\r\n \t\t\tdecline: function(dep) {\r\n \t\t\t\tif(typeof dep === \"undefined\")\r\n \t\t\t\t\thot._selfDeclined = true;\r\n \t\t\t\telse if(typeof dep === \"number\")\r\n \t\t\t\t\thot._declinedDependencies[dep] = true;\r\n \t\t\t\telse\r\n \t\t\t\t\tfor(var i = 0; i < dep.length; i++)\r\n \t\t\t\t\t\thot._declinedDependencies[dep[i]] = true;\r\n \t\t\t},\r\n \t\t\tdispose: function(callback) {\r\n \t\t\t\thot._disposeHandlers.push(callback);\r\n \t\t\t},\r\n \t\t\taddDisposeHandler: function(callback) {\r\n \t\t\t\thot._disposeHandlers.push(callback);\r\n \t\t\t},\r\n \t\t\tremoveDisposeHandler: function(callback) {\r\n \t\t\t\tvar idx = hot._disposeHandlers.indexOf(callback);\r\n \t\t\t\tif(idx >= 0) hot._disposeHandlers.splice(idx, 1);\r\n \t\t\t},\r\n \t\r\n \t\t\t// Management API\r\n \t\t\tcheck: hotCheck,\r\n \t\t\tapply: hotApply,\r\n \t\t\tstatus: function(l) {\r\n \t\t\t\tif(!l) return hotStatus;\r\n \t\t\t\thotStatusHandlers.push(l);\r\n \t\t\t},\r\n \t\t\taddStatusHandler: function(l) {\r\n \t\t\t\thotStatusHandlers.push(l);\r\n \t\t\t},\r\n \t\t\tremoveStatusHandler: function(l) {\r\n \t\t\t\tvar idx = hotStatusHandlers.indexOf(l);\r\n \t\t\t\tif(idx >= 0) hotStatusHandlers.splice(idx, 1);\r\n \t\t\t},\r\n \t\r\n \t\t\t//inherit from previous dispose call\r\n \t\t\tdata: hotCurrentModuleData[moduleId]\r\n \t\t};\r\n \t\treturn hot;\r\n \t}\r\n \t\r\n \tvar hotStatusHandlers = [];\r\n \tvar hotStatus = \"idle\";\r\n \t\r\n \tfunction hotSetStatus(newStatus) {\r\n \t\thotStatus = newStatus;\r\n \t\tfor(var i = 0; i < hotStatusHandlers.length; i++)\r\n \t\t\thotStatusHandlers[i].call(null, newStatus);\r\n \t}\r\n \t\r\n \t// while downloading\r\n \tvar hotWaitingFiles = 0;\r\n \tvar hotChunksLoading = 0;\r\n \tvar hotWaitingFilesMap = {};\r\n \tvar hotRequestedFilesMap = {};\r\n \tvar hotAvailibleFilesMap = {};\r\n \tvar hotCallback;\r\n \t\r\n \t// The update info\r\n \tvar hotUpdate, hotUpdateNewHash;\r\n \t\r\n \tfunction toModuleId(id) {\r\n \t\tvar isNumber = (+id) + \"\" === id;\r\n \t\treturn isNumber ? +id : id;\r\n \t}\r\n \t\r\n \tfunction hotCheck(apply, callback) {\r\n \t\tif(hotStatus !== \"idle\") throw new Error(\"check() is only allowed in idle status\");\r\n \t\tif(typeof apply === \"function\") {\r\n \t\t\thotApplyOnUpdate = false;\r\n \t\t\tcallback = apply;\r\n \t\t} else {\r\n \t\t\thotApplyOnUpdate = apply;\r\n \t\t\tcallback = callback || function(err) {\r\n \t\t\t\tif(err) throw err;\r\n \t\t\t};\r\n \t\t}\r\n \t\thotSetStatus(\"check\");\r\n \t\thotDownloadManifest(function(err, update) {\r\n \t\t\tif(err) return callback(err);\r\n \t\t\tif(!update) {\r\n \t\t\t\thotSetStatus(\"idle\");\r\n \t\t\t\tcallback(null, null);\r\n \t\t\t\treturn;\r\n \t\t\t}\r\n \t\r\n \t\t\thotRequestedFilesMap = {};\r\n \t\t\thotAvailibleFilesMap = {};\r\n \t\t\thotWaitingFilesMap = {};\r\n \t\t\tfor(var i = 0; i < update.c.length; i++)\r\n \t\t\t\thotAvailibleFilesMap[update.c[i]] = true;\r\n \t\t\thotUpdateNewHash = update.h;\r\n \t\r\n \t\t\thotSetStatus(\"prepare\");\r\n \t\t\thotCallback = callback;\r\n \t\t\thotUpdate = {};\r\n \t\t\tvar chunkId = 0;\r\n \t\t\t{ // eslint-disable-line no-lone-blocks\r\n \t\t\t\t/*globals chunkId */\r\n \t\t\t\thotEnsureUpdateChunk(chunkId);\r\n \t\t\t}\r\n \t\t\tif(hotStatus === \"prepare\" && hotChunksLoading === 0 && hotWaitingFiles === 0) {\r\n \t\t\t\thotUpdateDownloaded();\r\n \t\t\t}\r\n \t\t});\r\n \t}\r\n \t\r\n \tfunction hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars\r\n \t\tif(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])\r\n \t\t\treturn;\r\n \t\thotRequestedFilesMap[chunkId] = false;\r\n \t\tfor(var moduleId in moreModules) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\r\n \t\t\t\thotUpdate[moduleId] = moreModules[moduleId];\r\n \t\t\t}\r\n \t\t}\r\n \t\tif(--hotWaitingFiles === 0 && hotChunksLoading === 0) {\r\n \t\t\thotUpdateDownloaded();\r\n \t\t}\r\n \t}\r\n \t\r\n \tfunction hotEnsureUpdateChunk(chunkId) {\r\n \t\tif(!hotAvailibleFilesMap[chunkId]) {\r\n \t\t\thotWaitingFilesMap[chunkId] = true;\r\n \t\t} else {\r\n \t\t\thotRequestedFilesMap[chunkId] = true;\r\n \t\t\thotWaitingFiles++;\r\n \t\t\thotDownloadUpdateChunk(chunkId);\r\n \t\t}\r\n \t}\r\n \t\r\n \tfunction hotUpdateDownloaded() {\r\n \t\thotSetStatus(\"ready\");\r\n \t\tvar callback = hotCallback;\r\n \t\thotCallback = null;\r\n \t\tif(!callback) return;\r\n \t\tif(hotApplyOnUpdate) {\r\n \t\t\thotApply(hotApplyOnUpdate, callback);\r\n \t\t} else {\r\n \t\t\tvar outdatedModules = [];\r\n \t\t\tfor(var id in hotUpdate) {\r\n \t\t\t\tif(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\r\n \t\t\t\t\toutdatedModules.push(toModuleId(id));\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t\tcallback(null, outdatedModules);\r\n \t\t}\r\n \t}\r\n \t\r\n \tfunction hotApply(options, callback) {\r\n \t\tif(hotStatus !== \"ready\") throw new Error(\"apply() is only allowed in ready status\");\r\n \t\tif(typeof options === \"function\") {\r\n \t\t\tcallback = options;\r\n \t\t\toptions = {};\r\n \t\t} else if(options && typeof options === \"object\") {\r\n \t\t\tcallback = callback || function(err) {\r\n \t\t\t\tif(err) throw err;\r\n \t\t\t};\r\n \t\t} else {\r\n \t\t\toptions = {};\r\n \t\t\tcallback = callback || function(err) {\r\n \t\t\t\tif(err) throw err;\r\n \t\t\t};\r\n \t\t}\r\n \t\r\n \t\tfunction getAffectedStuff(module) {\r\n \t\t\tvar outdatedModules = [module];\r\n \t\t\tvar outdatedDependencies = {};\r\n \t\r\n \t\t\tvar queue = outdatedModules.slice();\r\n \t\t\twhile(queue.length > 0) {\r\n \t\t\t\tvar moduleId = queue.pop();\r\n \t\t\t\tvar module = installedModules[moduleId];\r\n \t\t\t\tif(!module || module.hot._selfAccepted)\r\n \t\t\t\t\tcontinue;\r\n \t\t\t\tif(module.hot._selfDeclined) {\r\n \t\t\t\t\treturn new Error(\"Aborted because of self decline: \" + moduleId);\r\n \t\t\t\t}\r\n \t\t\t\tif(moduleId === 0) {\r\n \t\t\t\t\treturn;\r\n \t\t\t\t}\r\n \t\t\t\tfor(var i = 0; i < module.parents.length; i++) {\r\n \t\t\t\t\tvar parentId = module.parents[i];\r\n \t\t\t\t\tvar parent = installedModules[parentId];\r\n \t\t\t\t\tif(parent.hot._declinedDependencies[moduleId]) {\r\n \t\t\t\t\t\treturn new Error(\"Aborted because of declined dependency: \" + moduleId + \" in \" + parentId);\r\n \t\t\t\t\t}\r\n \t\t\t\t\tif(outdatedModules.indexOf(parentId) >= 0) continue;\r\n \t\t\t\t\tif(parent.hot._acceptedDependencies[moduleId]) {\r\n \t\t\t\t\t\tif(!outdatedDependencies[parentId])\r\n \t\t\t\t\t\t\toutdatedDependencies[parentId] = [];\r\n \t\t\t\t\t\taddAllToSet(outdatedDependencies[parentId], [moduleId]);\r\n \t\t\t\t\t\tcontinue;\r\n \t\t\t\t\t}\r\n \t\t\t\t\tdelete outdatedDependencies[parentId];\r\n \t\t\t\t\toutdatedModules.push(parentId);\r\n \t\t\t\t\tqueue.push(parentId);\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\r\n \t\t\treturn [outdatedModules, outdatedDependencies];\r\n \t\t}\r\n \t\r\n \t\tfunction addAllToSet(a, b) {\r\n \t\t\tfor(var i = 0; i < b.length; i++) {\r\n \t\t\t\tvar item = b[i];\r\n \t\t\t\tif(a.indexOf(item) < 0)\r\n \t\t\t\t\ta.push(item);\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// at begin all updates modules are outdated\r\n \t\t// the \"outdated\" status can propagate to parents if they don't accept the children\r\n \t\tvar outdatedDependencies = {};\r\n \t\tvar outdatedModules = [];\r\n \t\tvar appliedUpdate = {};\r\n \t\tfor(var id in hotUpdate) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {\r\n \t\t\t\tvar moduleId = toModuleId(id);\r\n \t\t\t\tvar result = getAffectedStuff(moduleId);\r\n \t\t\t\tif(!result) {\r\n \t\t\t\t\tif(options.ignoreUnaccepted)\r\n \t\t\t\t\t\tcontinue;\r\n \t\t\t\t\thotSetStatus(\"abort\");\r\n \t\t\t\t\treturn callback(new Error(\"Aborted because \" + moduleId + \" is not accepted\"));\r\n \t\t\t\t}\r\n \t\t\t\tif(result instanceof Error) {\r\n \t\t\t\t\thotSetStatus(\"abort\");\r\n \t\t\t\t\treturn callback(result);\r\n \t\t\t\t}\r\n \t\t\t\tappliedUpdate[moduleId] = hotUpdate[moduleId];\r\n \t\t\t\taddAllToSet(outdatedModules, result[0]);\r\n \t\t\t\tfor(var moduleId in result[1]) {\r\n \t\t\t\t\tif(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {\r\n \t\t\t\t\t\tif(!outdatedDependencies[moduleId])\r\n \t\t\t\t\t\t\toutdatedDependencies[moduleId] = [];\r\n \t\t\t\t\t\taddAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// Store self accepted outdated modules to require them later by the module system\r\n \t\tvar outdatedSelfAcceptedModules = [];\r\n \t\tfor(var i = 0; i < outdatedModules.length; i++) {\r\n \t\t\tvar moduleId = outdatedModules[i];\r\n \t\t\tif(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)\r\n \t\t\t\toutdatedSelfAcceptedModules.push({\r\n \t\t\t\t\tmodule: moduleId,\r\n \t\t\t\t\terrorHandler: installedModules[moduleId].hot._selfAccepted\r\n \t\t\t\t});\r\n \t\t}\r\n \t\r\n \t\t// Now in \"dispose\" phase\r\n \t\thotSetStatus(\"dispose\");\r\n \t\tvar queue = outdatedModules.slice();\r\n \t\twhile(queue.length > 0) {\r\n \t\t\tvar moduleId = queue.pop();\r\n \t\t\tvar module = installedModules[moduleId];\r\n \t\t\tif(!module) continue;\r\n \t\r\n \t\t\tvar data = {};\r\n \t\r\n \t\t\t// Call dispose handlers\r\n \t\t\tvar disposeHandlers = module.hot._disposeHandlers;\r\n \t\t\tfor(var j = 0; j < disposeHandlers.length; j++) {\r\n \t\t\t\tvar cb = disposeHandlers[j];\r\n \t\t\t\tcb(data);\r\n \t\t\t}\r\n \t\t\thotCurrentModuleData[moduleId] = data;\r\n \t\r\n \t\t\t// disable module (this disables requires from this module)\r\n \t\t\tmodule.hot.active = false;\r\n \t\r\n \t\t\t// remove module from cache\r\n \t\t\tdelete installedModules[moduleId];\r\n \t\r\n \t\t\t// remove \"parents\" references from all children\r\n \t\t\tfor(var j = 0; j < module.children.length; j++) {\r\n \t\t\t\tvar child = installedModules[module.children[j]];\r\n \t\t\t\tif(!child) continue;\r\n \t\t\t\tvar idx = child.parents.indexOf(moduleId);\r\n \t\t\t\tif(idx >= 0) {\r\n \t\t\t\t\tchild.parents.splice(idx, 1);\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// remove outdated dependency from module children\r\n \t\tfor(var moduleId in outdatedDependencies) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {\r\n \t\t\t\tvar module = installedModules[moduleId];\r\n \t\t\t\tvar moduleOutdatedDependencies = outdatedDependencies[moduleId];\r\n \t\t\t\tfor(var j = 0; j < moduleOutdatedDependencies.length; j++) {\r\n \t\t\t\t\tvar dependency = moduleOutdatedDependencies[j];\r\n \t\t\t\t\tvar idx = module.children.indexOf(dependency);\r\n \t\t\t\t\tif(idx >= 0) module.children.splice(idx, 1);\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// Not in \"apply\" phase\r\n \t\thotSetStatus(\"apply\");\r\n \t\r\n \t\thotCurrentHash = hotUpdateNewHash;\r\n \t\r\n \t\t// insert new code\r\n \t\tfor(var moduleId in appliedUpdate) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {\r\n \t\t\t\tmodules[moduleId] = appliedUpdate[moduleId];\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// call accept handlers\r\n \t\tvar error = null;\r\n \t\tfor(var moduleId in outdatedDependencies) {\r\n \t\t\tif(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {\r\n \t\t\t\tvar module = installedModules[moduleId];\r\n \t\t\t\tvar moduleOutdatedDependencies = outdatedDependencies[moduleId];\r\n \t\t\t\tvar callbacks = [];\r\n \t\t\t\tfor(var i = 0; i < moduleOutdatedDependencies.length; i++) {\r\n \t\t\t\t\tvar dependency = moduleOutdatedDependencies[i];\r\n \t\t\t\t\tvar cb = module.hot._acceptedDependencies[dependency];\r\n \t\t\t\t\tif(callbacks.indexOf(cb) >= 0) continue;\r\n \t\t\t\t\tcallbacks.push(cb);\r\n \t\t\t\t}\r\n \t\t\t\tfor(var i = 0; i < callbacks.length; i++) {\r\n \t\t\t\t\tvar cb = callbacks[i];\r\n \t\t\t\t\ttry {\r\n \t\t\t\t\t\tcb(outdatedDependencies);\r\n \t\t\t\t\t} catch(err) {\r\n \t\t\t\t\t\tif(!error)\r\n \t\t\t\t\t\t\terror = err;\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// Load self accepted modules\r\n \t\tfor(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {\r\n \t\t\tvar item = outdatedSelfAcceptedModules[i];\r\n \t\t\tvar moduleId = item.module;\r\n \t\t\thotCurrentParents = [moduleId];\r\n \t\t\ttry {\r\n \t\t\t\t__webpack_require__(moduleId);\r\n \t\t\t} catch(err) {\r\n \t\t\t\tif(typeof item.errorHandler === \"function\") {\r\n \t\t\t\t\ttry {\r\n \t\t\t\t\t\titem.errorHandler(err);\r\n \t\t\t\t\t} catch(err) {\r\n \t\t\t\t\t\tif(!error)\r\n \t\t\t\t\t\t\terror = err;\r\n \t\t\t\t\t}\r\n \t\t\t\t} else if(!error)\r\n \t\t\t\t\terror = err;\r\n \t\t\t}\r\n \t\t}\r\n \t\r\n \t\t// handle errors in accept handlers and self accepted module load\r\n \t\tif(error) {\r\n \t\t\thotSetStatus(\"fail\");\r\n \t\t\treturn callback(error);\r\n \t\t}\r\n \t\r\n \t\thotSetStatus(\"idle\");\r\n \t\tcallback(null, outdatedModules);\r\n \t}\r\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false,\n \t\t\thot: hotCreateModule(moduleId),\n \t\t\tparents: hotCurrentParents,\n \t\t\tchildren: []\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/static/\";\n\n \t// __webpack_hash__\n \t__webpack_require__.h = function() { return hotCurrentHash; };\n\n \t// Load entry module and return exports\n \treturn hotCreateRequire(0)(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 719ceb4a230d9234fb2a","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar ComponentInjector = (function () {\n    function ComponentInjector(resolver) {\n        this.resolver = resolver;\n    }\n    /**\n     * Inject a component into a ViewContainerRef element\n     * @param container ViewContainerRef element where to inject the component\n     * @param componentSelector string Selector of the component which should be injected\n     * @returns {ComponentRef<any>} Returns ComponentRef of the injected component\n     */\n    ComponentInjector.prototype.inject = function (container, componentSelector) {\n        var injectedComponent;\n        var componentFactory = this.getComponentFactory(componentSelector);\n        if (componentFactory) {\n            injectedComponent = this.injectComponentFactory(container, componentFactory);\n        }\n        else {\n            console.warn('Component [' + componentSelector + '] cannot be found! ' +\n                'Make sure it is included in the `entryComponents` list.');\n        }\n        return injectedComponent ? injectedComponent : null;\n    };\n    /**\n     * Set public properties of the component specified by the componentRef\n     * @param componentRef ComponentRef object where should be attached the properties\n     * @param properties Object which contains the keys (name of the property) and values (value of the property).\n     */\n    ComponentInjector.prototype.setProperties = function (componentRef, properties) {\n        if (componentRef) {\n            for (var property in properties) {\n                if (properties.hasOwnProperty(property)) {\n                    componentRef.instance[property] = properties[property];\n                }\n            }\n        }\n    };\n    /**\n     * Remove a component by its ComponentRef\n     * @param componentRef ComponentRef which should be removed\n     */\n    ComponentInjector.prototype.remove = function (componentRef) {\n        componentRef.destroy();\n        componentRef = null;\n    };\n    /**\n     * Get the component factory class from the _factories list based on its selector string name\n     * The list of the _factories is created based on the list of components listed in the entryComponents: [...]\n     * section of the @NgModule(...)\n     * @param componentSelector string Selector of the component\n     * @returns {ComponentFactory<any>|null} Returns the factory of the component or NULL if there is no such component\n     */\n    ComponentInjector.prototype.getComponentFactory = function (componentSelector) {\n        var componentFactory;\n        var factories = Array.from(this.resolver['_factories']);\n        var factory = factories.find(function (component) {\n            return component[1].selector === componentSelector;\n        });\n        if (factory) {\n            var factoryClass = factory[0];\n            componentFactory = this.resolver.resolveComponentFactory(factoryClass);\n        }\n        return componentFactory ? componentFactory : null;\n    };\n    /**\n     * Inject a componentFactory into a container element\n     * @param container ViewContainerRef container element where to inject the component\n     * @param componentFactory ComponentFactory which should be injected in the  container element\n     * @returns {ComponentRef<any>} returns ComponentRef of the injected componentFactory\n     */\n    ComponentInjector.prototype.injectComponentFactory = function (container, componentFactory) {\n        return container.createComponent(componentFactory);\n    };\n    return ComponentInjector;\n}());\nComponentInjector = __decorate([\n    core_1.Injectable(),\n    __metadata(\"design:paramtypes\", [core_1.ComponentFactoryResolver])\n], ComponentInjector);\nexports.ComponentInjector = ComponentInjector;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/component-injector.ts\n// module id = 0\n// module chunks = 0","/**\n * @license Angular v2.4.10\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/symbol/observable'), require('rxjs/Subject'), require('rxjs/Observable')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/symbol/observable', 'rxjs/Subject', 'rxjs/Observable'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.rxjs_symbol_observable,global.Rx,global.Rx));\n}(this, function (exports,rxjs_symbol_observable,rxjs_Subject,rxjs_Observable) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */ globalScope;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = (self);\n        }\n        else {\n            globalScope = (global);\n        }\n    }\n    else {\n        globalScope = (window);\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var /** @type {?} */ global$1 = globalScope;\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    function getTypeNameForDebugging(type) {\n        return type['name'] || typeof type;\n    }\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPresent(obj) {\n        return obj != null;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isBlank(obj) {\n        return obj == null;\n    }\n    /**\n     * @param {?} token\n     * @return {?}\n     */\n    function stringify(token) {\n        if (typeof token === 'string') {\n            return token;\n        }\n        if (token == null) {\n            return '' + token;\n        }\n        if (token.overriddenName) {\n            return \"\" + token.overriddenName;\n        }\n        if (token.name) {\n            return \"\" + token.name;\n        }\n        var /** @type {?} */ res = token.toString();\n        var /** @type {?} */ newLineIndex = res.indexOf('\\n');\n        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    /**\n     * @param {?} o\n     * @return {?}\n     */\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function print(obj) {\n        // tslint:disable-next-line:no-console\n        console.log(obj);\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function warn(obj) {\n        console.warn(obj);\n    }\n    var /** @type {?} */ _symbolIterator = null;\n    /**\n     * @return {?}\n     */\n    function getSymbolIterator() {\n        if (!_symbolIterator) {\n            if (((globalScope)).Symbol && Symbol.iterator) {\n                _symbolIterator = Symbol.iterator;\n            }\n            else {\n                // es6-shim specific logic\n                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);\n                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n                    var /** @type {?} */ key = keys[i];\n                    if (key !== 'entries' && key !== 'size' &&\n                        ((Map)).prototype[key] === Map.prototype['entries']) {\n                        _symbolIterator = key;\n                    }\n                }\n            }\n        }\n        return _symbolIterator;\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n\n    var /** @type {?} */ _nextClassId = 0;\n    var /** @type {?} */ Reflect = global$1.Reflect;\n    /**\n     * @param {?} annotation\n     * @return {?}\n     */\n    function extractAnnotation(annotation) {\n        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {\n            // it is a decorator, extract annotation\n            annotation = annotation.annotation;\n        }\n        return annotation;\n    }\n    /**\n     * @param {?} fnOrArray\n     * @param {?} key\n     * @return {?}\n     */\n    function applyParams(fnOrArray, key) {\n        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||\n            fnOrArray === Number || fnOrArray === Array) {\n            throw new Error(\"Can not use native \" + stringify(fnOrArray) + \" as constructor\");\n        }\n        if (typeof fnOrArray === 'function') {\n            return fnOrArray;\n        }\n        if (Array.isArray(fnOrArray)) {\n            var /** @type {?} */ annotations = fnOrArray;\n            var /** @type {?} */ annoLength = annotations.length - 1;\n            var /** @type {?} */ fn = fnOrArray[annoLength];\n            if (typeof fn !== 'function') {\n                throw new Error(\"Last position of Class method array must be Function in key \" + key + \" was '\" + stringify(fn) + \"'\");\n            }\n            if (annoLength != fn.length) {\n                throw new Error(\"Number of annotations (\" + annoLength + \") does not match number of arguments (\" + fn.length + \") in the function: \" + stringify(fn));\n            }\n            var /** @type {?} */ paramsAnnotations = [];\n            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {\n                var /** @type {?} */ paramAnnotations = [];\n                paramsAnnotations.push(paramAnnotations);\n                var /** @type {?} */ annotation = annotations[i];\n                if (Array.isArray(annotation)) {\n                    for (var /** @type {?} */ j = 0; j < annotation.length; j++) {\n                        paramAnnotations.push(extractAnnotation(annotation[j]));\n                    }\n                }\n                else if (typeof annotation === 'function') {\n                    paramAnnotations.push(extractAnnotation(annotation));\n                }\n                else {\n                    paramAnnotations.push(annotation);\n                }\n            }\n            Reflect.defineMetadata('parameters', paramsAnnotations, fn);\n            return fn;\n        }\n        throw new Error(\"Only Function or Array is supported in Class definition for key '\" + key + \"' is '\" + stringify(fnOrArray) + \"'\");\n    }\n    /**\n     * Provides a way for expressing ES6 classes with parameter annotations in ES5.\n     *\n     * ## Basic Example\n     *\n     * ```\n     * var Greeter = ng.Class({\n     *   constructor: function(name) {\n     *     this.name = name;\n     *   },\n     *\n     *   greet: function() {\n     *     alert('Hello ' + this.name + '!');\n     *   }\n     * });\n     * ```\n     *\n     * is equivalent to ES6:\n     *\n     * ```\n     * class Greeter {\n     *   constructor(name) {\n     *     this.name = name;\n     *   }\n     *\n     *   greet() {\n     *     alert('Hello ' + this.name + '!');\n     *   }\n     * }\n     * ```\n     *\n     * or equivalent to ES5:\n     *\n     * ```\n     * var Greeter = function (name) {\n     *   this.name = name;\n     * }\n     *\n     * Greeter.prototype.greet = function () {\n     *   alert('Hello ' + this.name + '!');\n     * }\n     * ```\n     *\n     * ### Example with parameter annotations\n     *\n     * ```\n     * var MyService = ng.Class({\n     *   constructor: [String, [new Optional(), Service], function(name, myService) {\n     *     ...\n     *   }]\n     * });\n     * ```\n     *\n     * is equivalent to ES6:\n     *\n     * ```\n     * class MyService {\n     *   constructor(name: string, \\@Optional() myService: Service) {\n     *     ...\n     *   }\n     * }\n     * ```\n     *\n     * ### Example with inheritance\n     *\n     * ```\n     * var Shape = ng.Class({\n     *   constructor: (color) {\n     *     this.color = color;\n     *   }\n     * });\n     *\n     * var Square = ng.Class({\n     *   extends: Shape,\n     *   constructor: function(color, size) {\n     *     Shape.call(this, color);\n     *     this.size = size;\n     *   }\n     * });\n     * ```\n     * \\@stable\n     * @param {?} clsDef\n     * @return {?}\n     */\n    function Class(clsDef) {\n        var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');\n        var /** @type {?} */ proto = constructor.prototype;\n        if (clsDef.hasOwnProperty('extends')) {\n            if (typeof clsDef.extends === 'function') {\n                ((constructor)).prototype = proto =\n                    Object.create(((clsDef.extends)).prototype);\n            }\n            else {\n                throw new Error(\"Class definition 'extends' property must be a constructor function was: \" + stringify(clsDef.extends));\n            }\n        }\n        for (var key in clsDef) {\n            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {\n                proto[key] = applyParams(clsDef[key], key);\n            }\n        }\n        if (this && this.annotations instanceof Array) {\n            Reflect.defineMetadata('annotations', this.annotations, constructor);\n        }\n        var /** @type {?} */ constructorName = constructor['name'];\n        if (!constructorName || constructorName === 'constructor') {\n            ((constructor))['overriddenName'] = \"class\" + _nextClassId++;\n        }\n        return (constructor);\n    }\n    /**\n     * @param {?} name\n     * @param {?} props\n     * @param {?=} parentClass\n     * @param {?=} chainFn\n     * @return {?}\n     */\n    function makeDecorator(name, props, parentClass, chainFn) {\n        if (chainFn === void 0) { chainFn = null; }\n        var /** @type {?} */ metaCtor = makeMetadataCtor([props]);\n        /**\n         * @param {?} objOrType\n         * @return {?}\n         */\n        function DecoratorFactory(objOrType) {\n            if (!(Reflect && Reflect.getOwnMetadata)) {\n                throw 'reflect-metadata shim is required when using class decorators';\n            }\n            if (this instanceof DecoratorFactory) {\n                metaCtor.call(this, objOrType);\n                return this;\n            }\n            var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);\n            var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];\n            chainAnnotation.push(annotationInstance);\n            var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {\n                var /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];\n                annotations.push(annotationInstance);\n                Reflect.defineMetadata('annotations', annotations, cls);\n                return cls;\n            });\n            TypeDecorator.annotations = chainAnnotation;\n            TypeDecorator.Class = Class;\n            if (chainFn)\n                chainFn(TypeDecorator);\n            return TypeDecorator;\n        }\n        if (parentClass) {\n            DecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        DecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n        ((DecoratorFactory)).annotationCls = DecoratorFactory;\n        return DecoratorFactory;\n    }\n    /**\n     * @param {?} props\n     * @return {?}\n     */\n    function makeMetadataCtor(props) {\n        return function ctor() {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            props.forEach(function (prop, i) {\n                var /** @type {?} */ argVal = args[i];\n                if (Array.isArray(prop)) {\n                    // plain parameter\n                    _this[prop[0]] = argVal === undefined ? prop[1] : argVal;\n                }\n                else {\n                    for (var propName in prop) {\n                        _this[propName] =\n                            argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];\n                    }\n                }\n            });\n        };\n    }\n    /**\n     * @param {?} name\n     * @param {?} props\n     * @param {?=} parentClass\n     * @return {?}\n     */\n    function makeParamDecorator(name, props, parentClass) {\n        var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n        /**\n         * @param {...?} args\n         * @return {?}\n         */\n        function ParamDecoratorFactory() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            if (this instanceof ParamDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var /** @type {?} */ annotationInstance = new ((_a = ((ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n            ((ParamDecorator)).annotation = annotationInstance;\n            return ParamDecorator;\n            /**\n             * @param {?} cls\n             * @param {?} unusedKey\n             * @param {?} index\n             * @return {?}\n             */\n            function ParamDecorator(cls, unusedKey, index) {\n                var /** @type {?} */ parameters = Reflect.getOwnMetadata('parameters', cls) || [];\n                // there might be gaps if some in between parameters do not have annotations.\n                // we pad with nulls.\n                while (parameters.length <= index) {\n                    parameters.push(null);\n                }\n                parameters[index] = parameters[index] || [];\n                parameters[index].push(annotationInstance);\n                Reflect.defineMetadata('parameters', parameters, cls);\n                return cls;\n            }\n            var _a;\n        }\n        if (parentClass) {\n            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        ParamDecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n        ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;\n        return ParamDecoratorFactory;\n    }\n    /**\n     * @param {?} name\n     * @param {?} props\n     * @param {?=} parentClass\n     * @return {?}\n     */\n    function makePropDecorator(name, props, parentClass) {\n        var /** @type {?} */ metaCtor = makeMetadataCtor(props);\n        /**\n         * @param {...?} args\n         * @return {?}\n         */\n        function PropDecoratorFactory() {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            if (this instanceof PropDecoratorFactory) {\n                metaCtor.apply(this, args);\n                return this;\n            }\n            var /** @type {?} */ decoratorInstance = new ((_a = ((PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();\n            return function PropDecorator(target, name) {\n                var /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};\n                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n                meta[name].unshift(decoratorInstance);\n                Reflect.defineMetadata('propMetadata', meta, target.constructor);\n            };\n            var _a;\n        }\n        if (parentClass) {\n            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n        }\n        PropDecoratorFactory.prototype.toString = function () { return (\"@\" + name); };\n        ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;\n        return PropDecoratorFactory;\n    }\n\n    /**\n     * Inject decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Inject = makeParamDecorator('Inject', [['token', undefined]]);\n    /**\n     * Optional decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Optional = makeParamDecorator('Optional', []);\n    /**\n     * Injectable decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Injectable = (makeDecorator('Injectable', []));\n    /**\n     * Self decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Self = makeParamDecorator('Self', []);\n    /**\n     * SkipSelf decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ SkipSelf = makeParamDecorator('SkipSelf', []);\n    /**\n     * Host decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Host = makeParamDecorator('Host', []);\n\n    var OpaqueToken = (function () {\n        /**\n         * @param {?} _desc\n         */\n        function OpaqueToken(_desc) {\n            this._desc = _desc;\n        }\n        /**\n         * @return {?}\n         */\n        OpaqueToken.prototype.toString = function () { return \"Token \" + this._desc; };\n        OpaqueToken.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        OpaqueToken.ctorParameters = function () { return [\n            null,\n        ]; };\n        return OpaqueToken;\n    }());\n\n    /**\n     * This token can be used to create a virtual provider that will populate the\n     * `entryComponents` fields of components and ng modules based on its `useValue`.\n     * All components that are referenced in the `useValue` value (either directly\n     * or in a nested array or map) will be added to the `entryComponents` property.\n     *\n     * ### Example\n     * The following example shows how the router can populate the `entryComponents`\n     * field of an NgModule based on the router configuration which refers\n     * to components.\n     *\n     * ```typescript\n     * // helper function inside the router\n     * function provideRoutes(routes) {\n     *   return [\n     *     {provide: ROUTES, useValue: routes},\n     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n     *   ];\n     * }\n     *\n     * // user code\n     * let routes = [\n     *   {path: '/root', component: RootComp},\n     *   {path: '/teams', component: TeamsComp}\n     * ];\n     *\n     * @NgModule({\n     *   providers: [provideRoutes(routes)]\n     * })\n     * class ModuleWithRoutes {}\n     * ```\n     *\n     * @experimental\n     */\n    var /** @type {?} */ ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');\n    /**\n     * Attribute decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);\n    /**\n     * Base class for query metadata.\n     *\n     * See {\\@link ContentChildren}, {\\@link ContentChild}, {\\@link ViewChildren}, {\\@link ViewChild} for\n     * more information.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var Query = (function () {\n        function Query() {\n        }\n        return Query;\n    }());\n    /**\n     * ContentChildren decorator and metadata.\n     *\n     *  @stable\n     *  @Annotation\n     */\n    var /** @type {?} */ ContentChildren = (makePropDecorator('ContentChildren', [\n        ['selector', undefined], {\n            first: false,\n            isViewQuery: false,\n            descendants: false,\n            read: undefined,\n        }\n    ], Query));\n    /**\n     * ContentChild decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ ContentChild = makePropDecorator('ContentChild', [\n        ['selector', undefined], {\n            first: true,\n            isViewQuery: false,\n            descendants: true,\n            read: undefined,\n        }\n    ], Query);\n    /**\n     * ViewChildren decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ ViewChildren = makePropDecorator('ViewChildren', [\n        ['selector', undefined], {\n            first: false,\n            isViewQuery: true,\n            descendants: true,\n            read: undefined,\n        }\n    ], Query);\n    /**\n     * ViewChild decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ ViewChild = makePropDecorator('ViewChild', [\n        ['selector', undefined], {\n            first: true,\n            isViewQuery: true,\n            descendants: true,\n            read: undefined,\n        }\n    ], Query);\n\n    var ChangeDetectionStrategy = {};\n    ChangeDetectionStrategy.OnPush = 0;\n    ChangeDetectionStrategy.Default = 1;\n    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = \"OnPush\";\n    ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = \"Default\";\n    var ChangeDetectorStatus = {};\n    ChangeDetectorStatus.CheckOnce = 0;\n    ChangeDetectorStatus.Checked = 1;\n    ChangeDetectorStatus.CheckAlways = 2;\n    ChangeDetectorStatus.Detached = 3;\n    ChangeDetectorStatus.Errored = 4;\n    ChangeDetectorStatus.Destroyed = 5;\n    ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = \"CheckOnce\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Checked] = \"Checked\";\n    ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = \"CheckAlways\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Detached] = \"Detached\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Errored] = \"Errored\";\n    ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = \"Destroyed\";\n    /**\n     * @param {?} changeDetectionStrategy\n     * @return {?}\n     */\n    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {\n        return isBlank(changeDetectionStrategy) ||\n            changeDetectionStrategy === ChangeDetectionStrategy.Default;\n    }\n\n    /**\n     * Directive decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Directive = (makeDecorator('Directive', {\n        selector: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        host: undefined,\n        providers: undefined,\n        exportAs: undefined,\n        queries: undefined\n    }));\n    /**\n     * Component decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Component = (makeDecorator('Component', {\n        selector: undefined,\n        inputs: undefined,\n        outputs: undefined,\n        host: undefined,\n        exportAs: undefined,\n        moduleId: undefined,\n        providers: undefined,\n        viewProviders: undefined,\n        changeDetection: ChangeDetectionStrategy.Default,\n        queries: undefined,\n        templateUrl: undefined,\n        template: undefined,\n        styleUrls: undefined,\n        styles: undefined,\n        animations: undefined,\n        encapsulation: undefined,\n        interpolation: undefined,\n        entryComponents: undefined\n    }, Directive));\n    /**\n     * Pipe decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Pipe = (makeDecorator('Pipe', {\n        name: undefined,\n        pure: true,\n    }));\n    /**\n     * Input decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);\n    /**\n     * Output decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);\n    /**\n     * HostBinding decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);\n    /**\n     * HostListener decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var LifecycleHooks = {};\n    LifecycleHooks.OnInit = 0;\n    LifecycleHooks.OnDestroy = 1;\n    LifecycleHooks.DoCheck = 2;\n    LifecycleHooks.OnChanges = 3;\n    LifecycleHooks.AfterContentInit = 4;\n    LifecycleHooks.AfterContentChecked = 5;\n    LifecycleHooks.AfterViewInit = 6;\n    LifecycleHooks.AfterViewChecked = 7;\n    LifecycleHooks[LifecycleHooks.OnInit] = \"OnInit\";\n    LifecycleHooks[LifecycleHooks.OnDestroy] = \"OnDestroy\";\n    LifecycleHooks[LifecycleHooks.DoCheck] = \"DoCheck\";\n    LifecycleHooks[LifecycleHooks.OnChanges] = \"OnChanges\";\n    LifecycleHooks[LifecycleHooks.AfterContentInit] = \"AfterContentInit\";\n    LifecycleHooks[LifecycleHooks.AfterContentChecked] = \"AfterContentChecked\";\n    LifecycleHooks[LifecycleHooks.AfterViewInit] = \"AfterViewInit\";\n    LifecycleHooks[LifecycleHooks.AfterViewChecked] = \"AfterViewChecked\";\n    var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = [\n        LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,\n        LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,\n        LifecycleHooks.AfterViewChecked\n    ];\n    /**\n     * \\@whatItDoes Lifecycle hook that is called when any data-bound property of a directive changes.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n     *\n     * \\@description\n     * `ngOnChanges` is called right after the data-bound properties have been checked and before view\n     * and content children are checked if at least one of them has changed.\n     * The `changes` parameter contains the changed properties.\n     *\n     * See {\\@linkDocs guide/lifecycle-hooks#onchanges \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var OnChanges = (function () {\n        function OnChanges() {\n        }\n        /**\n         * @abstract\n         * @param {?} changes\n         * @return {?}\n         */\n        OnChanges.prototype.ngOnChanges = function (changes) { };\n        return OnChanges;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called after data-bound properties of a directive are\n     * initialized.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n     *\n     * \\@description\n     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\n     * first time, and before any of its children have been checked. It is invoked only once when the\n     * directive is instantiated.\n     *\n     * See {\\@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var OnInit = (function () {\n        function OnInit() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        OnInit.prototype.ngOnInit = function () { };\n        return OnInit;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called when Angular dirty checks a directive.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n     *\n     * \\@description\n     * `ngDoCheck` gets called to check the changes in the directives in addition to the default\n     * algorithm. The default change detection algorithm looks for differences by comparing\n     * bound-property values by reference across change detection runs.\n     *\n     * Note that a directive typically should not use both `DoCheck` and {\\@link OnChanges} to respond to\n     * changes on the same input, as `ngOnChanges` will continue to be called when the default change\n     * detector detects changes.\n     *\n     * See {\\@link KeyValueDiffers} and {\\@link IterableDiffers} for implementing custom dirty checking\n     * for collections.\n     *\n     * See {\\@linkDocs guide/lifecycle-hooks#docheck \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var DoCheck = (function () {\n        function DoCheck() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        DoCheck.prototype.ngDoCheck = function () { };\n        return DoCheck;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called when a directive, pipe or service is destroyed.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n     *\n     * \\@description\n     * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the\n     * instance is destroyed.\n     *\n     * See {\\@linkDocs guide/lifecycle-hooks \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var OnDestroy = (function () {\n        function OnDestroy() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        OnDestroy.prototype.ngOnDestroy = function () { };\n        return OnDestroy;\n    }());\n    /**\n     *\n     * \\@whatItDoes Lifecycle hook that is called after a directive's content has been fully\n     * initialized.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n     *\n     * \\@description\n     * See {\\@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AfterContentInit = (function () {\n        function AfterContentInit() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AfterContentInit.prototype.ngAfterContentInit = function () { };\n        return AfterContentInit;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called after every check of a directive's content.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n     *\n     * \\@description\n     * See {\\@linkDocs guide/lifecycle-hooks#aftercontent \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AfterContentChecked = (function () {\n        function AfterContentChecked() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AfterContentChecked.prototype.ngAfterContentChecked = function () { };\n        return AfterContentChecked;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called after a component's view has been fully\n     * initialized.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n     *\n     * \\@description\n     * See {\\@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AfterViewInit = (function () {\n        function AfterViewInit() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AfterViewInit.prototype.ngAfterViewInit = function () { };\n        return AfterViewInit;\n    }());\n    /**\n     * \\@whatItDoes Lifecycle hook that is called after every check of a component's view.\n     * \\@howToUse\n     * {\\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n     *\n     * \\@description\n     * See {\\@linkDocs guide/lifecycle-hooks#afterview \"Lifecycle Hooks Guide\"}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var AfterViewChecked = (function () {\n        function AfterViewChecked() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AfterViewChecked.prototype.ngAfterViewChecked = function () { };\n        return AfterViewChecked;\n    }());\n\n    /**\n     * Defines a schema that will allow:\n     * - any non-Angular elements with a `-` in their name,\n     * - any properties on elements with a `-` in their name which is the common rule for custom\n     * elements.\n     *\n     * @stable\n     */\n    var /** @type {?} */ CUSTOM_ELEMENTS_SCHEMA = {\n        name: 'custom-elements'\n    };\n    /**\n     * Defines a schema that will allow any property on any element.\n     *\n     * @experimental\n     */\n    var /** @type {?} */ NO_ERRORS_SCHEMA = {\n        name: 'no-errors-schema'\n    };\n    /**\n     * NgModule decorator and metadata.\n     *\n     * @stable\n     * @Annotation\n     */\n    var /** @type {?} */ NgModule = (makeDecorator('NgModule', {\n        providers: undefined,\n        declarations: undefined,\n        imports: undefined,\n        exports: undefined,\n        entryComponents: undefined,\n        bootstrap: undefined,\n        schemas: undefined,\n        id: undefined,\n    }));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var ViewEncapsulation = {};\n    ViewEncapsulation.Emulated = 0;\n    ViewEncapsulation.Native = 1;\n    ViewEncapsulation.None = 2;\n    ViewEncapsulation[ViewEncapsulation.Emulated] = \"Emulated\";\n    ViewEncapsulation[ViewEncapsulation.Native] = \"Native\";\n    ViewEncapsulation[ViewEncapsulation.None] = \"None\";\n    /**\n     * Metadata properties available for configuring Views.\n     *\n     * For details on the `\\@Component` annotation, see {\\@link Component}.\n     *\n     * ### Example\n     *\n     * ```\n     * \\@Component({\n     *   selector: 'greet',\n     *   template: 'Hello {{name}}!',\n     * })\n     * class Greet {\n     *   name: string;\n     *\n     *   constructor() {\n     *     this.name = 'World';\n     *   }\n     * }\n     * ```\n     *\n     * @deprecated Use Component instead.\n     *\n     * {\\@link Component}\n     */\n    var ViewMetadata = (function () {\n        /**\n         * @param {?=} __0\n         */\n        function ViewMetadata(_a) {\n            var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;\n            this.templateUrl = templateUrl;\n            this.template = template;\n            this.styleUrls = styleUrls;\n            this.styles = styles;\n            this.encapsulation = encapsulation;\n            this.animations = animations;\n            this.interpolation = interpolation;\n        }\n        return ViewMetadata;\n    }());\n\n    /**\n     * \\@whatItDoes Represents the version of Angular\n     *\n     * \\@stable\n     */\n    var Version = (function () {\n        /**\n         * @param {?} full\n         */\n        function Version(full) {\n            this.full = full;\n        }\n        Object.defineProperty(Version.prototype, \"major\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.full.split('.')[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Version.prototype, \"minor\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.full.split('.')[1]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Version.prototype, \"patch\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.full.split('.').slice(2).join('.'); },\n            enumerable: true,\n            configurable: true\n        });\n        return Version;\n    }());\n    /**\n     * @stable\n     */\n    var /** @type {?} */ VERSION = new Version('2.4.10');\n\n    /**\n     * Allows to refer to references which are not yet defined.\n     *\n     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of\n     * DI is declared,\n     * but not yet defined. It is also used when the `token` which we use when creating a query is not\n     * yet defined.\n     *\n     * ### Example\n     * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n     * \\@experimental\n     * @param {?} forwardRefFn\n     * @return {?}\n     */\n    function forwardRef(forwardRefFn) {\n        ((forwardRefFn)).__forward_ref__ = forwardRef;\n        ((forwardRefFn)).toString = function () { return stringify(this()); };\n        return (((forwardRefFn)));\n    }\n    /**\n     * Lazily retrieves the reference value from a forwardRef.\n     *\n     * Acts as the identity function when given a non-forward-ref value.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))\n     *\n     * {\\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n     *\n     * See: {\\@link forwardRef}\n     * \\@experimental\n     * @param {?} type\n     * @return {?}\n     */\n    function resolveForwardRef(type) {\n        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&\n            type.__forward_ref__ === forwardRef) {\n            return ((type))();\n        }\n        else {\n            return type;\n        }\n    }\n\n    var /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();\n    var /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n    var _NullInjector = (function () {\n        function _NullInjector() {\n        }\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        _NullInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }\n            if (notFoundValue === _THROW_IF_NOT_FOUND) {\n                throw new Error(\"No provider for \" + stringify(token) + \"!\");\n            }\n            return notFoundValue;\n        };\n        return _NullInjector;\n    }());\n    /**\n     * \\@whatItDoes Injector interface\n     * \\@howToUse\n     * ```\n     * const injector: Injector = ...;\n     * injector.get(...);\n     * ```\n     *\n     * \\@description\n     * For more details, see the {\\@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n     *\n     * ### Example\n     *\n     * {\\@example core/di/ts/injector_spec.ts region='Injector'}\n     *\n     * `Injector` returns itself when given `Injector` as a token:\n     * {\\@example core/di/ts/injector_spec.ts region='injectInjector'}\n     *\n     * \\@stable\n     * @abstract\n     */\n    var Injector = (function () {\n        function Injector() {\n        }\n        /**\n         * Retrieves an instance from the injector based on the provided token.\n         * If not found:\n         * - Throws {\\@link NoProviderError} if no `notFoundValue` that is not equal to\n         * Injector.THROW_IF_NOT_FOUND is given\n         * - Returns the `notFoundValue` otherwise\n         * @abstract\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        Injector.prototype.get = function (token, notFoundValue) { };\n        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n        Injector.NULL = new _NullInjector();\n        return Injector;\n    }());\n\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * \\@stable\n     */\n    var BaseError = (function (_super) {\n        __extends$1(BaseError, _super);\n        /**\n         * @param {?} message\n         */\n        function BaseError(message) {\n            _super.call(this, message);\n            // Errors don't use current this, instead they create a new instance.\n            // We have to do forward all of our api to the nativeInstance.\n            // TODO(bradfordcsmith): Remove this hack when\n            //     google/closure-compiler/issues/2102 is fixed.\n            var nativeError = new Error(message);\n            this._nativeError = nativeError;\n        }\n        Object.defineProperty(BaseError.prototype, \"message\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._nativeError.message; },\n            /**\n             * @param {?} message\n             * @return {?}\n             */\n            set: function (message) { this._nativeError.message = message; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BaseError.prototype, \"name\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._nativeError.name; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(BaseError.prototype, \"stack\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return ((this._nativeError)).stack; },\n            /**\n             * @param {?} value\n             * @return {?}\n             */\n            set: function (value) { ((this._nativeError)).stack = value; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        BaseError.prototype.toString = function () { return this._nativeError.toString(); };\n        return BaseError;\n    }(Error));\n    /**\n     * \\@stable\n     */\n    var WrappedError = (function (_super) {\n        __extends$1(WrappedError, _super);\n        /**\n         * @param {?} message\n         * @param {?} error\n         */\n        function WrappedError(message, error) {\n            _super.call(this, message + \" caused by: \" + (error instanceof Error ? error.message : error));\n            this.originalError = error;\n        }\n        Object.defineProperty(WrappedError.prototype, \"stack\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))\n                    .stack;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return WrappedError;\n    }(BaseError));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @param {?} keys\n     * @return {?}\n     */\n    function findFirstClosedCycle(keys) {\n        var /** @type {?} */ res = [];\n        for (var /** @type {?} */ i = 0; i < keys.length; ++i) {\n            if (res.indexOf(keys[i]) > -1) {\n                res.push(keys[i]);\n                return res;\n            }\n            res.push(keys[i]);\n        }\n        return res;\n    }\n    /**\n     * @param {?} keys\n     * @return {?}\n     */\n    function constructResolvingPath(keys) {\n        if (keys.length > 1) {\n            var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());\n            var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });\n            return ' (' + tokenStrs.join(' -> ') + ')';\n        }\n        return '';\n    }\n    /**\n     * Base class for all errors arising from misconfigured providers.\n     * \\@stable\n     */\n    var AbstractProviderError = (function (_super) {\n        __extends(AbstractProviderError, _super);\n        /**\n         * @param {?} injector\n         * @param {?} key\n         * @param {?} constructResolvingMessage\n         */\n        function AbstractProviderError(injector, key, constructResolvingMessage) {\n            _super.call(this, 'DI Error');\n            this.keys = [key];\n            this.injectors = [injector];\n            this.constructResolvingMessage = constructResolvingMessage;\n            this.message = this.constructResolvingMessage(this.keys);\n        }\n        /**\n         * @param {?} injector\n         * @param {?} key\n         * @return {?}\n         */\n        AbstractProviderError.prototype.addKey = function (injector, key) {\n            this.injectors.push(injector);\n            this.keys.push(key);\n            this.message = this.constructResolvingMessage(this.keys);\n        };\n        return AbstractProviderError;\n    }(BaseError));\n    /**\n     * Thrown when trying to retrieve a dependency by key from {\\@link Injector}, but the\n     * {\\@link Injector} does not have a {\\@link Provider} for the given key.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b:B) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     * \\@stable\n     */\n    var NoProviderError = (function (_super) {\n        __extends(NoProviderError, _super);\n        /**\n         * @param {?} injector\n         * @param {?} key\n         */\n        function NoProviderError(injector, key) {\n            _super.call(this, injector, key, function (keys) {\n                var first = stringify(keys[0].token);\n                return \"No provider for \" + first + \"!\" + constructResolvingPath(keys);\n            });\n        }\n        return NoProviderError;\n    }(AbstractProviderError));\n    /**\n     * Thrown when dependencies form a cycle.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))\n     *\n     * ```typescript\n     * var injector = Injector.resolveAndCreate([\n     *   {provide: \"one\", useFactory: (two) => \"two\", deps: [[new Inject(\"two\")]]},\n     *   {provide: \"two\", useFactory: (one) => \"one\", deps: [[new Inject(\"one\")]]}\n     * ]);\n     *\n     * expect(() => injector.get(\"one\")).toThrowError();\n     * ```\n     *\n     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.\n     * \\@stable\n     */\n    var CyclicDependencyError = (function (_super) {\n        __extends(CyclicDependencyError, _super);\n        /**\n         * @param {?} injector\n         * @param {?} key\n         */\n        function CyclicDependencyError(injector, key) {\n            _super.call(this, injector, key, function (keys) {\n                return \"Cannot instantiate cyclic dependency!\" + constructResolvingPath(keys);\n            });\n        }\n        return CyclicDependencyError;\n    }(AbstractProviderError));\n    /**\n     * Thrown when a constructing type returns with an Error.\n     *\n     * The `InstantiationError` class contains the original error plus the dependency graph which caused\n     * this object to be instantiated.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor() {\n     *     throw new Error('message');\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n     * try {\n     *   injector.get(A);\n     * } catch (e) {\n     *   expect(e instanceof InstantiationError).toBe(true);\n     *   expect(e.originalException.message).toEqual(\"message\");\n     *   expect(e.originalStack).toBeDefined();\n     * }\n     * ```\n     * \\@stable\n     */\n    var InstantiationError = (function (_super) {\n        __extends(InstantiationError, _super);\n        /**\n         * @param {?} injector\n         * @param {?} originalException\n         * @param {?} originalStack\n         * @param {?} key\n         */\n        function InstantiationError(injector, originalException, originalStack, key) {\n            _super.call(this, 'DI Error', originalException);\n            this.keys = [key];\n            this.injectors = [injector];\n        }\n        /**\n         * @param {?} injector\n         * @param {?} key\n         * @return {?}\n         */\n        InstantiationError.prototype.addKey = function (injector, key) {\n            this.injectors.push(injector);\n            this.keys.push(key);\n        };\n        Object.defineProperty(InstantiationError.prototype, \"message\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ first = stringify(this.keys[0].token);\n                return this.originalError.message + \": Error during instantiation of \" + first + \"!\" + constructResolvingPath(this.keys) + \".\";\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(InstantiationError.prototype, \"causeKey\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.keys[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        return InstantiationError;\n    }(WrappedError));\n    /**\n     * Thrown when an object other then {\\@link Provider} (or `Type`) is passed to {\\@link Injector}\n     * creation.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n     * ```\n     * \\@stable\n     */\n    var InvalidProviderError = (function (_super) {\n        __extends(InvalidProviderError, _super);\n        /**\n         * @param {?} provider\n         */\n        function InvalidProviderError(provider) {\n            _super.call(this, \"Invalid provider - only instances of Provider and Type are allowed, got: \" + provider);\n        }\n        return InvalidProviderError;\n    }(BaseError));\n    /**\n     * Thrown when the class has no annotation information.\n     *\n     * Lack of annotation information prevents the {\\@link Injector} from determining which dependencies\n     * need to be injected into the constructor.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))\n     *\n     * ```typescript\n     * class A {\n     *   constructor(b) {}\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A])).toThrowError();\n     * ```\n     *\n     * This error is also thrown when the class not marked with {\\@link Injectable} has parameter types.\n     *\n     * ```typescript\n     * class B {}\n     *\n     * class A {\n     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n     * }\n     *\n     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();\n     * ```\n     * \\@stable\n     */\n    var NoAnnotationError = (function (_super) {\n        __extends(NoAnnotationError, _super);\n        /**\n         * @param {?} typeOrFunc\n         * @param {?} params\n         */\n        function NoAnnotationError(typeOrFunc, params) {\n            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));\n        }\n        /**\n         * @param {?} typeOrFunc\n         * @param {?} params\n         * @return {?}\n         */\n        NoAnnotationError._genMessage = function (typeOrFunc, params) {\n            var /** @type {?} */ signature = [];\n            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {\n                var /** @type {?} */ parameter = params[i];\n                if (!parameter || parameter.length == 0) {\n                    signature.push('?');\n                }\n                else {\n                    signature.push(parameter.map(stringify).join(' '));\n                }\n            }\n            return 'Cannot resolve all parameters for \\'' + stringify(typeOrFunc) + '\\'(' +\n                signature.join(', ') + '). ' +\n                'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \\'' +\n                stringify(typeOrFunc) + '\\' is decorated with Injectable.';\n        };\n        return NoAnnotationError;\n    }(BaseError));\n    /**\n     * Thrown when getting an object by index.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))\n     *\n     * ```typescript\n     * class A {}\n     *\n     * var injector = Injector.resolveAndCreate([A]);\n     *\n     * expect(() => injector.getAt(100)).toThrowError();\n     * ```\n     * \\@stable\n     */\n    var OutOfBoundsError = (function (_super) {\n        __extends(OutOfBoundsError, _super);\n        /**\n         * @param {?} index\n         */\n        function OutOfBoundsError(index) {\n            _super.call(this, \"Index \" + index + \" is out-of-bounds.\");\n        }\n        return OutOfBoundsError;\n    }(BaseError));\n    /**\n     * Thrown when a multi provider and a regular provider are bound to the same token.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * expect(() => Injector.resolveAndCreate([\n     *   { provide: \"Strings\", useValue: \"string1\", multi: true},\n     *   { provide: \"Strings\", useValue: \"string2\", multi: false}\n     * ])).toThrowError();\n     * ```\n     */\n    var MixingMultiProvidersWithRegularProvidersError = (function (_super) {\n        __extends(MixingMultiProvidersWithRegularProvidersError, _super);\n        /**\n         * @param {?} provider1\n         * @param {?} provider2\n         */\n        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {\n            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +\n                provider2.toString());\n        }\n        return MixingMultiProvidersWithRegularProvidersError;\n    }(BaseError));\n\n    /**\n     * A unique object used for retrieving items from the {\\@link ReflectiveInjector}.\n     *\n     * Keys have:\n     * - a system-wide unique `id`.\n     * - a `token`.\n     *\n     * `Key` is used internally by {\\@link ReflectiveInjector} because its system-wide unique `id` allows\n     * the\n     * injector to store created objects in a more efficient way.\n     *\n     * `Key` should not be created directly. {\\@link ReflectiveInjector} creates keys automatically when\n     * resolving\n     * providers.\n     * \\@experimental\n     */\n    var ReflectiveKey = (function () {\n        /**\n         * Private\n         * @param {?} token\n         * @param {?} id\n         */\n        function ReflectiveKey(token, id) {\n            this.token = token;\n            this.id = id;\n            if (!token) {\n                throw new Error('Token must be defined!');\n            }\n        }\n        Object.defineProperty(ReflectiveKey.prototype, \"displayName\", {\n            /**\n             * Returns a stringified token.\n             * @return {?}\n             */\n            get: function () { return stringify(this.token); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Retrieves a `Key` for a token.\n         * @param {?} token\n         * @return {?}\n         */\n        ReflectiveKey.get = function (token) {\n            return _globalKeyRegistry.get(resolveForwardRef(token));\n        };\n        Object.defineProperty(ReflectiveKey, \"numberOfKeys\", {\n            /**\n             * @return {?} the number of keys registered in the system.\n             */\n            get: function () { return _globalKeyRegistry.numberOfKeys; },\n            enumerable: true,\n            configurable: true\n        });\n        return ReflectiveKey;\n    }());\n    /**\n     * \\@internal\n     */\n    var KeyRegistry = (function () {\n        function KeyRegistry() {\n            this._allKeys = new Map();\n        }\n        /**\n         * @param {?} token\n         * @return {?}\n         */\n        KeyRegistry.prototype.get = function (token) {\n            if (token instanceof ReflectiveKey)\n                return token;\n            if (this._allKeys.has(token)) {\n                return this._allKeys.get(token);\n            }\n            var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);\n            this._allKeys.set(token, newKey);\n            return newKey;\n        };\n        Object.defineProperty(KeyRegistry.prototype, \"numberOfKeys\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._allKeys.size; },\n            enumerable: true,\n            configurable: true\n        });\n        return KeyRegistry;\n    }());\n    var /** @type {?} */ _globalKeyRegistry = new KeyRegistry();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @whatItDoes Represents a type that a Component or other object is instances of.\n     *\n     * @description\n     *\n     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by\n     * the `MyCustomComponent` constructor function.\n     *\n     * @stable\n     */\n    var /** @type {?} */ Type = Function;\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    function isType(v) {\n        return typeof v === 'function';\n    }\n\n    /**\n     * Attention: This regex has to hold even if the code is minified!\n     */\n    var /** @type {?} */ DELEGATE_CTOR = /^function\\s+\\S+\\(\\)\\s*{\\s*(\"use strict\";)?\\s*(return\\s+)?\\S+\\.apply\\(this,\\s*arguments\\)/;\n    var ReflectionCapabilities = (function () {\n        /**\n         * @param {?=} reflect\n         */\n        function ReflectionCapabilities(reflect) {\n            this._reflect = reflect || global$1.Reflect;\n        }\n        /**\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };\n        /**\n         * @param {?} t\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.factory = function (t) { return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new (t.bind.apply(t, [void 0].concat(args)))();\n        }; };\n        /**\n         * \\@internal\n         * @param {?} paramTypes\n         * @param {?} paramAnnotations\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {\n            var /** @type {?} */ result;\n            if (typeof paramTypes === 'undefined') {\n                result = new Array(paramAnnotations.length);\n            }\n            else {\n                result = new Array(paramTypes.length);\n            }\n            for (var /** @type {?} */ i = 0; i < result.length; i++) {\n                // TS outputs Object for parameters without types, while Traceur omits\n                // the annotations. For now we preserve the Traceur behavior to aid\n                // migration, but this can be revisited.\n                if (typeof paramTypes === 'undefined') {\n                    result[i] = [];\n                }\n                else if (paramTypes[i] != Object) {\n                    result[i] = [paramTypes[i]];\n                }\n                else {\n                    result[i] = [];\n                }\n                if (paramAnnotations && isPresent(paramAnnotations[i])) {\n                    result[i] = result[i].concat(paramAnnotations[i]);\n                }\n            }\n            return result;\n        };\n        /**\n         * @param {?} type\n         * @param {?} parentCtor\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {\n            // If we have no decorators, we only have function.length as metadata.\n            // In that case, to detect whether a child class declared an own constructor or not,\n            // we need to look inside of that constructor to check whether it is\n            // just calling the parent.\n            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439\n            // that sets 'design:paramtypes' to []\n            // if a class inherits from another class but has no ctor declared itself.\n            if (DELEGATE_CTOR.exec(type.toString())) {\n                return null;\n            }\n            // Prefer the direct API.\n            if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {\n                return ((type)).parameters;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;\n            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {\n                // Newer tsickle uses a function closure\n                // Retain the non-function case for compatibility with older tsickle\n                var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;\n                var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });\n                var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) {\n                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);\n                });\n                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n            }\n            // API for metadata created by invoking the decorators.\n            if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {\n                var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);\n                var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);\n                if (paramTypes || paramAnnotations) {\n                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);\n                }\n            }\n            // If a class has no decorators, at least create metadata\n            // based on function.length.\n            // Note: We know that this is a real constructor as we checked\n            // the content of the constructor above.\n            return new Array(((type.length))).fill(undefined);\n        };\n        /**\n         * @param {?} type\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.parameters = function (type) {\n            // Note: only report metadata if we have at least one class decorator\n            // to stay in sync with the static reflector.\n            if (!isType(type)) {\n                return [];\n            }\n            var /** @type {?} */ parentCtor = getParentCtor(type);\n            var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);\n            if (!parameters && parentCtor !== Object) {\n                parameters = this.parameters(parentCtor);\n            }\n            return parameters || [];\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @param {?} parentCtor\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {\n            // Prefer the direct API.\n            if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {\n                var /** @type {?} */ annotations = ((typeOrFunc)).annotations;\n                if (typeof annotations === 'function' && annotations.annotations) {\n                    annotations = annotations.annotations;\n                }\n                return annotations;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {\n                return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);\n            }\n            // API for metadata created by invoking the decorators.\n            if (this._reflect && this._reflect.getOwnMetadata) {\n                return this._reflect.getOwnMetadata('annotations', typeOrFunc);\n            }\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return [];\n            }\n            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n            var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];\n            var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];\n            return parentAnnotations.concat(ownAnnotations);\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @param {?} parentCtor\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {\n            // Prefer the direct API.\n            if (((typeOrFunc)).propMetadata &&\n                ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {\n                var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;\n                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {\n                    propMetadata = propMetadata.propMetadata;\n                }\n                return propMetadata;\n            }\n            // API of tsickle for lowering decorators to properties on the class.\n            if (((typeOrFunc)).propDecorators &&\n                ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {\n                var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;\n                var /** @type {?} */ propMetadata_1 = ({});\n                Object.keys(propDecorators_1).forEach(function (prop) {\n                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);\n                });\n                return propMetadata_1;\n            }\n            // API for metadata created by invoking the decorators.\n            if (this._reflect && this._reflect.getOwnMetadata) {\n                return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);\n            }\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {\n            if (!isType(typeOrFunc)) {\n                return {};\n            }\n            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);\n            var /** @type {?} */ propMetadata = {};\n            if (parentCtor !== Object) {\n                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);\n                Object.keys(parentPropMetadata_1).forEach(function (propName) {\n                    propMetadata[propName] = parentPropMetadata_1[propName];\n                });\n            }\n            var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);\n            if (ownPropMetadata) {\n                Object.keys(ownPropMetadata).forEach(function (propName) {\n                    var /** @type {?} */ decorators = [];\n                    if (propMetadata.hasOwnProperty(propName)) {\n                        decorators.push.apply(decorators, propMetadata[propName]);\n                    }\n                    decorators.push.apply(decorators, ownPropMetadata[propName]);\n                    propMetadata[propName] = decorators;\n                });\n            }\n            return propMetadata;\n        };\n        /**\n         * @param {?} type\n         * @param {?} lcProperty\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {\n            return type instanceof Type && lcProperty in type.prototype;\n        };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.getter = function (name) { return ((new Function('o', 'return o.' + name + ';'))); };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.setter = function (name) {\n            return ((new Function('o', 'v', 'return o.' + name + ' = v;')));\n        };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.method = function (name) {\n            var /** @type {?} */ functionBody = \"if (!o.\" + name + \") throw new Error('\\\"\" + name + \"\\\" is undefined');\\n        return o.\" + name + \".apply(o, args);\";\n            return ((new Function('o', 'args', functionBody)));\n        };\n        /**\n         * @param {?} type\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.importUri = function (type) {\n            // StaticSymbol\n            if (typeof type === 'object' && type['filePath']) {\n                return type['filePath'];\n            }\n            // Runtime type\n            return \"./\" + stringify(type);\n        };\n        /**\n         * @param {?} name\n         * @param {?} moduleUrl\n         * @param {?} runtime\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };\n        /**\n         * @param {?} enumIdentifier\n         * @param {?} name\n         * @return {?}\n         */\n        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };\n        return ReflectionCapabilities;\n    }());\n    /**\n     * @param {?} decoratorInvocations\n     * @return {?}\n     */\n    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {\n        if (!decoratorInvocations) {\n            return [];\n        }\n        return decoratorInvocations.map(function (decoratorInvocation) {\n            var /** @type {?} */ decoratorType = decoratorInvocation.type;\n            var /** @type {?} */ annotationCls = decoratorType.annotationCls;\n            var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];\n            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();\n        });\n    }\n    /**\n     * @param {?} ctor\n     * @return {?}\n     */\n    function getParentCtor(ctor) {\n        var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);\n        var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;\n        // Note: We always use `Object` as the null value\n        // to simplify checking later on.\n        return parentCtor || Object;\n    }\n\n    /**\n     * Provides read-only access to reflection data about symbols. Used internally by Angular\n     * to power dependency injection and compilation.\n     * @abstract\n     */\n    var ReflectorReader = (function () {\n        function ReflectorReader() {\n        }\n        /**\n         * @abstract\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectorReader.prototype.parameters = function (typeOrFunc) { };\n        /**\n         * @abstract\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectorReader.prototype.annotations = function (typeOrFunc) { };\n        /**\n         * @abstract\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };\n        /**\n         * @abstract\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        ReflectorReader.prototype.importUri = function (typeOrFunc) { };\n        /**\n         * @abstract\n         * @param {?} name\n         * @param {?} moduleUrl\n         * @param {?} runtime\n         * @return {?}\n         */\n        ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { };\n        /**\n         * @abstract\n         * @param {?} identifier\n         * @param {?} name\n         * @return {?}\n         */\n        ReflectorReader.prototype.resolveEnum = function (identifier, name) { };\n        return ReflectorReader;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Provides access to reflection data about symbols. Used internally by Angular\n     * to power dependency injection and compilation.\n     */\n    var Reflector = (function (_super) {\n        __extends$2(Reflector, _super);\n        /**\n         * @param {?} reflectionCapabilities\n         */\n        function Reflector(reflectionCapabilities) {\n            _super.call(this);\n            this.reflectionCapabilities = reflectionCapabilities;\n        }\n        /**\n         * @param {?} caps\n         * @return {?}\n         */\n        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };\n        /**\n         * @param {?} type\n         * @return {?}\n         */\n        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };\n        /**\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        Reflector.prototype.parameters = function (typeOrFunc) {\n            return this.reflectionCapabilities.parameters(typeOrFunc);\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        Reflector.prototype.annotations = function (typeOrFunc) {\n            return this.reflectionCapabilities.annotations(typeOrFunc);\n        };\n        /**\n         * @param {?} typeOrFunc\n         * @return {?}\n         */\n        Reflector.prototype.propMetadata = function (typeOrFunc) {\n            return this.reflectionCapabilities.propMetadata(typeOrFunc);\n        };\n        /**\n         * @param {?} type\n         * @param {?} lcProperty\n         * @return {?}\n         */\n        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {\n            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);\n        };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };\n        /**\n         * @param {?} name\n         * @return {?}\n         */\n        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };\n        /**\n         * @param {?} type\n         * @return {?}\n         */\n        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };\n        /**\n         * @param {?} name\n         * @param {?} moduleUrl\n         * @param {?} runtime\n         * @return {?}\n         */\n        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {\n            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);\n        };\n        /**\n         * @param {?} identifier\n         * @param {?} name\n         * @return {?}\n         */\n        Reflector.prototype.resolveEnum = function (identifier, name) {\n            return this.reflectionCapabilities.resolveEnum(identifier, name);\n        };\n        return Reflector;\n    }(ReflectorReader));\n\n    /**\n     * The {@link Reflector} used internally in Angular to access metadata\n     * about symbols.\n     */\n    var /** @type {?} */ reflector = new Reflector(new ReflectionCapabilities());\n\n    /**\n     * `Dependency` is used by the framework to extend DI.\n     * This is internal to Angular and should not be used directly.\n     */\n    var ReflectiveDependency = (function () {\n        /**\n         * @param {?} key\n         * @param {?} optional\n         * @param {?} visibility\n         */\n        function ReflectiveDependency(key, optional, visibility) {\n            this.key = key;\n            this.optional = optional;\n            this.visibility = visibility;\n        }\n        /**\n         * @param {?} key\n         * @return {?}\n         */\n        ReflectiveDependency.fromKey = function (key) {\n            return new ReflectiveDependency(key, false, null);\n        };\n        return ReflectiveDependency;\n    }());\n    var /** @type {?} */ _EMPTY_LIST = [];\n    var ResolvedReflectiveProvider_ = (function () {\n        /**\n         * @param {?} key\n         * @param {?} resolvedFactories\n         * @param {?} multiProvider\n         */\n        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {\n            this.key = key;\n            this.resolvedFactories = resolvedFactories;\n            this.multiProvider = multiProvider;\n        }\n        Object.defineProperty(ResolvedReflectiveProvider_.prototype, \"resolvedFactory\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.resolvedFactories[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        return ResolvedReflectiveProvider_;\n    }());\n    /**\n     * An internal resolved representation of a factory function created by resolving {\\@link\n     * Provider}.\n     * \\@experimental\n     */\n    var ResolvedReflectiveFactory = (function () {\n        /**\n         * @param {?} factory\n         * @param {?} dependencies\n         */\n        function ResolvedReflectiveFactory(factory, dependencies) {\n            this.factory = factory;\n            this.dependencies = dependencies;\n        }\n        return ResolvedReflectiveFactory;\n    }());\n    /**\n     * Resolve a single provider.\n     * @param {?} provider\n     * @return {?}\n     */\n    function resolveReflectiveFactory(provider) {\n        var /** @type {?} */ factoryFn;\n        var /** @type {?} */ resolvedDeps;\n        if (provider.useClass) {\n            var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);\n            factoryFn = reflector.factory(useClass);\n            resolvedDeps = _dependenciesFor(useClass);\n        }\n        else if (provider.useExisting) {\n            factoryFn = function (aliasInstance) { return aliasInstance; };\n            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];\n        }\n        else if (provider.useFactory) {\n            factoryFn = provider.useFactory;\n            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);\n        }\n        else {\n            factoryFn = function () { return provider.useValue; };\n            resolvedDeps = _EMPTY_LIST;\n        }\n        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);\n    }\n    /**\n     * Converts the {\\@link Provider} into {\\@link ResolvedProvider}.\n     *\n     * {\\@link Injector} internally only uses {\\@link ResolvedProvider}, {\\@link Provider} contains\n     * convenience provider syntax.\n     * @param {?} provider\n     * @return {?}\n     */\n    function resolveReflectiveProvider(provider) {\n        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);\n    }\n    /**\n     * Resolve a list of Providers.\n     * @param {?} providers\n     * @return {?}\n     */\n    function resolveReflectiveProviders(providers) {\n        var /** @type {?} */ normalized = _normalizeProviders(providers, []);\n        var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);\n        var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());\n        return Array.from(resolvedProviderMap.values());\n    }\n    /**\n     * Merges a list of ResolvedProviders into a list where\n     * each key is contained exactly once and multi providers\n     * have been merged.\n     * @param {?} providers\n     * @param {?} normalizedProvidersMap\n     * @return {?}\n     */\n    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {\n        for (var /** @type {?} */ i = 0; i < providers.length; i++) {\n            var /** @type {?} */ provider = providers[i];\n            var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);\n            if (existing) {\n                if (provider.multiProvider !== existing.multiProvider) {\n                    throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);\n                }\n                if (provider.multiProvider) {\n                    for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {\n                        existing.resolvedFactories.push(provider.resolvedFactories[j]);\n                    }\n                }\n                else {\n                    normalizedProvidersMap.set(provider.key.id, provider);\n                }\n            }\n            else {\n                var /** @type {?} */ resolvedProvider = void 0;\n                if (provider.multiProvider) {\n                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);\n                }\n                else {\n                    resolvedProvider = provider;\n                }\n                normalizedProvidersMap.set(provider.key.id, resolvedProvider);\n            }\n        }\n        return normalizedProvidersMap;\n    }\n    /**\n     * @param {?} providers\n     * @param {?} res\n     * @return {?}\n     */\n    function _normalizeProviders(providers, res) {\n        providers.forEach(function (b) {\n            if (b instanceof Type) {\n                res.push({ provide: b, useClass: b });\n            }\n            else if (b && typeof b == 'object' && ((b)).provide !== undefined) {\n                res.push(/** @type {?} */ (b));\n            }\n            else if (b instanceof Array) {\n                _normalizeProviders(b, res);\n            }\n            else {\n                throw new InvalidProviderError(b);\n            }\n        });\n        return res;\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} dependencies\n     * @return {?}\n     */\n    function constructDependencies(typeOrFunc, dependencies) {\n        if (!dependencies) {\n            return _dependenciesFor(typeOrFunc);\n        }\n        else {\n            var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });\n            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });\n        }\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @return {?}\n     */\n    function _dependenciesFor(typeOrFunc) {\n        var /** @type {?} */ params = reflector.parameters(typeOrFunc);\n        if (!params)\n            return [];\n        if (params.some(function (p) { return p == null; })) {\n            throw new NoAnnotationError(typeOrFunc, params);\n        }\n        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });\n    }\n    /**\n     * @param {?} typeOrFunc\n     * @param {?} metadata\n     * @param {?} params\n     * @return {?}\n     */\n    function _extractToken(typeOrFunc, metadata, params) {\n        var /** @type {?} */ token = null;\n        var /** @type {?} */ optional = false;\n        if (!Array.isArray(metadata)) {\n            if (metadata instanceof Inject) {\n                return _createDependency(metadata.token, optional, null);\n            }\n            else {\n                return _createDependency(metadata, optional, null);\n            }\n        }\n        var /** @type {?} */ visibility = null;\n        for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {\n            var /** @type {?} */ paramMetadata = metadata[i];\n            if (paramMetadata instanceof Type) {\n                token = paramMetadata;\n            }\n            else if (paramMetadata instanceof Inject) {\n                token = paramMetadata.token;\n            }\n            else if (paramMetadata instanceof Optional) {\n                optional = true;\n            }\n            else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {\n                visibility = paramMetadata;\n            }\n        }\n        token = resolveForwardRef(token);\n        if (token != null) {\n            return _createDependency(token, optional, visibility);\n        }\n        else {\n            throw new NoAnnotationError(typeOrFunc, params);\n        }\n    }\n    /**\n     * @param {?} token\n     * @param {?} optional\n     * @param {?} visibility\n     * @return {?}\n     */\n    function _createDependency(token, optional, visibility) {\n        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);\n    }\n\n    // Threshold for the dynamic version\n    var /** @type {?} */ UNDEFINED = new Object();\n    /**\n     * A ReflectiveDependency injection container used for instantiating objects and resolving\n     * dependencies.\n     *\n     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the\n     * constructor dependencies.\n     *\n     * In typical use, application code asks for the dependencies in the constructor and they are\n     * resolved by the `Injector`.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))\n     *\n     * The following example creates an `Injector` configured to create `Engine` and `Car`.\n     *\n     * ```typescript\n     * \\@Injectable()\n     * class Engine {\n     * }\n     *\n     * \\@Injectable()\n     * class Car {\n     *   constructor(public engine:Engine) {}\n     * }\n     *\n     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n     * var car = injector.get(Car);\n     * expect(car instanceof Car).toBe(true);\n     * expect(car.engine instanceof Engine).toBe(true);\n     * ```\n     *\n     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`\n     * resolve all of the object's dependencies automatically.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var ReflectiveInjector = (function () {\n        function ReflectiveInjector() {\n        }\n        /**\n         * Turns an array of provider definitions into an array of resolved providers.\n         *\n         * A resolution is a process of flattening multiple nested arrays and converting individual\n         * providers into an array of {\\@link ResolvedReflectiveProvider}s.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))\n         *\n         * ```typescript\n         * \\@Injectable()\n         * class Engine {\n         * }\n         *\n         * \\@Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n         *\n         * expect(providers.length).toEqual(2);\n         *\n         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n         * expect(providers[0].key.displayName).toBe(\"Car\");\n         * expect(providers[0].dependencies.length).toEqual(1);\n         * expect(providers[0].factory).toBeDefined();\n         *\n         * expect(providers[1].key.displayName).toBe(\"Engine\");\n         * });\n         * ```\n         *\n         * See {\\@link ReflectiveInjector#fromResolvedProviders} for more info.\n         * @param {?} providers\n         * @return {?}\n         */\n        ReflectiveInjector.resolve = function (providers) {\n            return resolveReflectiveProviders(providers);\n        };\n        /**\n         * Resolves an array of providers and creates an injector from those providers.\n         *\n         * The passed-in providers can be an array of `Type`, {\\@link Provider},\n         * or a recursive array of more providers.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))\n         *\n         * ```typescript\n         * \\@Injectable()\n         * class Engine {\n         * }\n         *\n         * \\@Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         *\n         * This function is slower than the corresponding `fromResolvedProviders`\n         * because it needs to resolve the passed-in providers first.\n         * See {\\@link Injector#resolve} and {\\@link Injector#fromResolvedProviders}.\n         * @param {?} providers\n         * @param {?=} parent\n         * @return {?}\n         */\n        ReflectiveInjector.resolveAndCreate = function (providers, parent) {\n            if (parent === void 0) { parent = null; }\n            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);\n        };\n        /**\n         * Creates an injector from previously resolved providers.\n         *\n         * This API is the recommended way to construct injectors in performance-sensitive parts.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))\n         *\n         * ```typescript\n         * \\@Injectable()\n         * class Engine {\n         * }\n         *\n         * \\@Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var providers = ReflectiveInjector.resolve([Car, Engine]);\n         * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n         * expect(injector.get(Car) instanceof Car).toBe(true);\n         * ```\n         * \\@experimental\n         * @param {?} providers\n         * @param {?=} parent\n         * @return {?}\n         */\n        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {\n            if (parent === void 0) { parent = null; }\n            return new ReflectiveInjector_(providers, parent);\n        };\n        /**\n         * Parent of this injector.\n         *\n         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n         * -->\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))\n         *\n         * ```typescript\n         * var parent = ReflectiveInjector.resolveAndCreate([]);\n         * var child = parent.resolveAndCreateChild([]);\n         * expect(child.parent).toBe(parent);\n         * ```\n         * @abstract\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.parent = function () { };\n        /**\n         * Resolves an array of providers and creates a child injector from those providers.\n         *\n         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n         * -->\n         *\n         * The passed-in providers can be an array of `Type`, {\\@link Provider},\n         * or a recursive array of more providers.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))\n         *\n         * ```typescript\n         * class ParentProvider {}\n         * class ChildProvider {}\n         *\n         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n         * var child = parent.resolveAndCreateChild([ChildProvider]);\n         *\n         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n         * ```\n         *\n         * This function is slower than the corresponding `createChildFromResolved`\n         * because it needs to resolve the passed-in providers first.\n         * See {\\@link Injector#resolve} and {\\@link Injector#createChildFromResolved}.\n         * @abstract\n         * @param {?} providers\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };\n        /**\n         * Creates a child injector from previously resolved providers.\n         *\n         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n         * -->\n         *\n         * This API is the recommended way to construct injectors in performance-sensitive parts.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))\n         *\n         * ```typescript\n         * class ParentProvider {}\n         * class ChildProvider {}\n         *\n         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n         *\n         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n         * var child = parent.createChildFromResolved(childProviders);\n         *\n         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n         * ```\n         * @abstract\n         * @param {?} providers\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };\n        /**\n         * Resolves a provider and instantiates an object in the context of the injector.\n         *\n         * The created object does not get cached by the injector.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))\n         *\n         * ```typescript\n         * \\@Injectable()\n         * class Engine {\n         * }\n         *\n         * \\@Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n         *\n         * var car = injector.resolveAndInstantiate(Car);\n         * expect(car.engine).toBe(injector.get(Engine));\n         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n         * ```\n         * @abstract\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };\n        /**\n         * Instantiates an object using a resolved provider in the context of the injector.\n         *\n         * The created object does not get cached by the injector.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))\n         *\n         * ```typescript\n         * \\@Injectable()\n         * class Engine {\n         * }\n         *\n         * \\@Injectable()\n         * class Car {\n         *   constructor(public engine:Engine) {}\n         * }\n         *\n         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n         * var carProvider = ReflectiveInjector.resolve([Car])[0];\n         * var car = injector.instantiateResolved(carProvider);\n         * expect(car.engine).toBe(injector.get(Engine));\n         * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n         * ```\n         * @abstract\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.instantiateResolved = function (provider) { };\n        /**\n         * @abstract\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        ReflectiveInjector.prototype.get = function (token, notFoundValue) { };\n        return ReflectiveInjector;\n    }());\n    var ReflectiveInjector_ = (function () {\n        /**\n         * Private\n         * @param {?} _providers\n         * @param {?=} _parent\n         */\n        function ReflectiveInjector_(_providers, _parent) {\n            if (_parent === void 0) { _parent = null; }\n            /** @internal */\n            this._constructionCounter = 0;\n            this._providers = _providers;\n            this._parent = _parent;\n            var len = _providers.length;\n            this.keyIds = new Array(len);\n            this.objs = new Array(len);\n            for (var i = 0; i < len; i++) {\n                this.keyIds[i] = _providers[i].key.id;\n                this.objs[i] = UNDEFINED;\n            }\n        }\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);\n        };\n        Object.defineProperty(ReflectiveInjector_.prototype, \"parent\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parent; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} providers\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {\n            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);\n            return this.createChildFromResolved(ResolvedReflectiveProviders);\n        };\n        /**\n         * @param {?} providers\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {\n            var /** @type {?} */ inj = new ReflectiveInjector_(providers);\n            inj._parent = this;\n            return inj;\n        };\n        /**\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {\n            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);\n        };\n        /**\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {\n            return this._instantiateProvider(provider);\n        };\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {\n            if (index < 0 || index >= this._providers.length) {\n                throw new OutOfBoundsError(index);\n            }\n            return this._providers[index];\n        };\n        /**\n         * \\@internal\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._new = function (provider) {\n            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {\n                throw new CyclicDependencyError(this, provider.key);\n            }\n            return this._instantiateProvider(provider);\n        };\n        /**\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };\n        /**\n         * @param {?} provider\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {\n            if (provider.multiProvider) {\n                var /** @type {?} */ res = new Array(provider.resolvedFactories.length);\n                for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {\n                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);\n                }\n                return res;\n            }\n            else {\n                return this._instantiate(provider, provider.resolvedFactories[0]);\n            }\n        };\n        /**\n         * @param {?} provider\n         * @param {?} ResolvedReflectiveFactory\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {\n            var _this = this;\n            var /** @type {?} */ factory = ResolvedReflectiveFactory.factory;\n            var /** @type {?} */ deps;\n            try {\n                deps =\n                    ResolvedReflectiveFactory.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });\n            }\n            catch (e) {\n                if (e instanceof AbstractProviderError || e instanceof InstantiationError) {\n                    e.addKey(this, provider.key);\n                }\n                throw e;\n            }\n            var /** @type {?} */ obj;\n            try {\n                obj = factory.apply(void 0, deps);\n            }\n            catch (e) {\n                throw new InstantiationError(this, e, e.stack, provider.key);\n            }\n            return obj;\n        };\n        /**\n         * @param {?} dep\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {\n            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);\n        };\n        /**\n         * @param {?} key\n         * @param {?} visibility\n         * @param {?} notFoundValue\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {\n            if (key === INJECTOR_KEY) {\n                return this;\n            }\n            if (visibility instanceof Self) {\n                return this._getByKeySelf(key, notFoundValue);\n            }\n            else {\n                return this._getByKeyDefault(key, notFoundValue, visibility);\n            }\n        };\n        /**\n         * @param {?} keyId\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {\n            for (var /** @type {?} */ i = 0; i < this.keyIds.length; i++) {\n                if (this.keyIds[i] === keyId) {\n                    if (this.objs[i] === UNDEFINED) {\n                        this.objs[i] = this._new(this._providers[i]);\n                    }\n                    return this.objs[i];\n                }\n            }\n            return UNDEFINED;\n        };\n        /**\n         * \\@internal\n         * @param {?} key\n         * @param {?} notFoundValue\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {\n            if (notFoundValue !== THROW_IF_NOT_FOUND) {\n                return notFoundValue;\n            }\n            else {\n                throw new NoProviderError(this, key);\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} key\n         * @param {?} notFoundValue\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {\n            var /** @type {?} */ obj = this._getObjByKeyId(key.id);\n            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);\n        };\n        /**\n         * \\@internal\n         * @param {?} key\n         * @param {?} notFoundValue\n         * @param {?} visibility\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {\n            var /** @type {?} */ inj;\n            if (visibility instanceof SkipSelf) {\n                inj = this._parent;\n            }\n            else {\n                inj = this;\n            }\n            while (inj instanceof ReflectiveInjector_) {\n                var /** @type {?} */ inj_ = (inj);\n                var /** @type {?} */ obj = inj_._getObjByKeyId(key.id);\n                if (obj !== UNDEFINED)\n                    return obj;\n                inj = inj_._parent;\n            }\n            if (inj !== null) {\n                return inj.get(key.token, notFoundValue);\n            }\n            else {\n                return this._throwOrNull(key, notFoundValue);\n            }\n        };\n        Object.defineProperty(ReflectiveInjector_.prototype, \"displayName\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' \"' + b.key.displayName + '\" '; })\n                    .join(', ');\n                return \"ReflectiveInjector(providers: [\" + providers + \"])\";\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };\n        return ReflectiveInjector_;\n    }());\n    var /** @type {?} */ INJECTOR_KEY = ReflectiveKey.get(Injector);\n    /**\n     * @param {?} injector\n     * @param {?} fn\n     * @return {?}\n     */\n    function _mapProviders(injector, fn) {\n        var /** @type {?} */ res = new Array(injector._providers.length);\n        for (var /** @type {?} */ i = 0; i < injector._providers.length; ++i) {\n            res[i] = fn(injector.getProviderAtIndex(i));\n        }\n        return res;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * \\@whatItDoes Provides a hook for centralized exception handling.\n     *\n     * \\@description\n     *\n     * The default implementation of `ErrorHandler` prints error messages to the `console`. To\n     * intercept error handling, write a custom exception handler that replaces this default as\n     * appropriate for your app.\n     *\n     * ### Example\n     *\n     * ```\n     * class MyErrorHandler implements ErrorHandler {\n     *   handleError(error) {\n     *     // do something with the exception\n     *   }\n     * }\n     *\n     * \\@NgModule({\n     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n     * })\n     * class MyModule {}\n     * ```\n     *\n     * \\@stable\n     */\n    var ErrorHandler = (function () {\n        /**\n         * @param {?=} rethrowError\n         */\n        function ErrorHandler(rethrowError) {\n            if (rethrowError === void 0) { rethrowError = true; }\n            /**\n             * @internal\n             */\n            this._console = console;\n            this.rethrowError = rethrowError;\n        }\n        /**\n         * @param {?} error\n         * @return {?}\n         */\n        ErrorHandler.prototype.handleError = function (error) {\n            var /** @type {?} */ originalError = this._findOriginalError(error);\n            var /** @type {?} */ originalStack = this._findOriginalStack(error);\n            var /** @type {?} */ context = this._findContext(error);\n            this._console.error(\"EXCEPTION: \" + this._extractMessage(error));\n            if (originalError) {\n                this._console.error(\"ORIGINAL EXCEPTION: \" + this._extractMessage(originalError));\n            }\n            if (originalStack) {\n                this._console.error('ORIGINAL STACKTRACE:');\n                this._console.error(originalStack);\n            }\n            if (context) {\n                this._console.error('ERROR CONTEXT:');\n                this._console.error(context);\n            }\n            // We rethrow exceptions, so operations like 'bootstrap' will result in an error\n            // when an error happens. If we do not rethrow, bootstrap will always succeed.\n            if (this.rethrowError)\n                throw error;\n        };\n        /**\n         * \\@internal\n         * @param {?} error\n         * @return {?}\n         */\n        ErrorHandler.prototype._extractMessage = function (error) {\n            return error instanceof Error ? error.message : error.toString();\n        };\n        /**\n         * \\@internal\n         * @param {?} error\n         * @return {?}\n         */\n        ErrorHandler.prototype._findContext = function (error) {\n            if (error) {\n                return error.context ? error.context :\n                    this._findContext(((error)).originalError);\n            }\n            return null;\n        };\n        /**\n         * \\@internal\n         * @param {?} error\n         * @return {?}\n         */\n        ErrorHandler.prototype._findOriginalError = function (error) {\n            var /** @type {?} */ e = ((error)).originalError;\n            while (e && ((e)).originalError) {\n                e = ((e)).originalError;\n            }\n            return e;\n        };\n        /**\n         * \\@internal\n         * @param {?} error\n         * @return {?}\n         */\n        ErrorHandler.prototype._findOriginalStack = function (error) {\n            if (!(error instanceof Error))\n                return null;\n            var /** @type {?} */ e = error;\n            var /** @type {?} */ stack = e.stack;\n            while (e instanceof Error && ((e)).originalError) {\n                e = ((e)).originalError;\n                if (e instanceof Error && e.stack) {\n                    stack = e.stack;\n                }\n            }\n            return stack;\n        };\n        return ErrorHandler;\n    }());\n\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.merge = function (m1, m2) {\n            var /** @type {?} */ m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        /**\n         * @param {?} m1\n         * @param {?} m2\n         * @return {?}\n         */\n        StringMapWrapper.equals = function (m1, m2) {\n            var /** @type {?} */ k1 = Object.keys(m1);\n            var /** @type {?} */ k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            for (var /** @type {?} */ i = 0; i < k1.length; i++) {\n                var /** @type {?} */ key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        /**\n         * @param {?} arr\n         * @param {?} condition\n         * @return {?}\n         */\n        ListWrapper.findLast = function (arr, condition) {\n            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {\n                if (condition(arr[i])) {\n                    return arr[i];\n                }\n            }\n            return null;\n        };\n        /**\n         * @param {?} list\n         * @param {?} items\n         * @return {?}\n         */\n        ListWrapper.removeAll = function (list, items) {\n            for (var /** @type {?} */ i = 0; i < items.length; ++i) {\n                var /** @type {?} */ index = list.indexOf(items[i]);\n                if (index > -1) {\n                    list.splice(index, 1);\n                }\n            }\n        };\n        /**\n         * @param {?} list\n         * @param {?} el\n         * @return {?}\n         */\n        ListWrapper.remove = function (list, el) {\n            var /** @type {?} */ index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        /**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var /** @type {?} */ i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        /**\n         * @param {?} list\n         * @return {?}\n         */\n        ListWrapper.flatten = function (list) {\n            return list.reduce(function (flat, item) {\n                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;\n                return ((flat)).concat(flatItem);\n            }, []);\n        };\n        return ListWrapper;\n    }());\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n    function isListLikeIterable(obj) {\n        if (!isJsObject(obj))\n            return false;\n        return Array.isArray(obj) ||\n            (!(obj instanceof Map) &&\n                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop\n    }\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @param {?} comparator\n     * @return {?}\n     */\n    function areIterablesEqual(a, b, comparator) {\n        var /** @type {?} */ iterator1 = a[getSymbolIterator()]();\n        var /** @type {?} */ iterator2 = b[getSymbolIterator()]();\n        while (true) {\n            var /** @type {?} */ item1 = iterator1.next();\n            var /** @type {?} */ item2 = iterator2.next();\n            if (item1.done && item2.done)\n                return true;\n            if (item1.done || item2.done)\n                return false;\n            if (!comparator(item1.value, item2.value))\n                return false;\n        }\n    }\n    /**\n     * @param {?} obj\n     * @param {?} fn\n     * @return {?}\n     */\n    function iterateListLike(obj, fn) {\n        if (Array.isArray(obj)) {\n            for (var /** @type {?} */ i = 0; i < obj.length; i++) {\n                fn(obj[i]);\n            }\n        }\n        else {\n            var /** @type {?} */ iterator = obj[getSymbolIterator()]();\n            var /** @type {?} */ item = void 0;\n            while (!((item = iterator.next()).done)) {\n                fn(item.value);\n            }\n        }\n    }\n\n    /**\n     * Determine if the argument is shaped like a Promise\n     * @param {?} obj\n     * @return {?}\n     */\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return !!obj && typeof obj.then === 'function';\n    }\n    /**\n     * Determine if the argument is an Observable\n     * @param {?} obj\n     * @return {?}\n     */\n    function isObservable(obj) {\n        return !!(obj && obj[rxjs_symbol_observable.$$observable]);\n    }\n\n    /**\n     * A function that will be executed when an application is initialized.\n     * @experimental\n     */\n    var /** @type {?} */ APP_INITIALIZER = new OpaqueToken('Application Initializer');\n    /**\n     * A class that reflects the state of running {\\@link APP_INITIALIZER}s.\n     *\n     * \\@experimental\n     */\n    var ApplicationInitStatus = (function () {\n        /**\n         * @param {?} appInits\n         */\n        function ApplicationInitStatus(appInits) {\n            var _this = this;\n            this._done = false;\n            var asyncInitPromises = [];\n            if (appInits) {\n                for (var i = 0; i < appInits.length; i++) {\n                    var initResult = appInits[i]();\n                    if (isPromise(initResult)) {\n                        asyncInitPromises.push(initResult);\n                    }\n                }\n            }\n            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });\n            if (asyncInitPromises.length === 0) {\n                this._done = true;\n            }\n        }\n        Object.defineProperty(ApplicationInitStatus.prototype, \"done\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._done; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ApplicationInitStatus.prototype, \"donePromise\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._donePromise; },\n            enumerable: true,\n            configurable: true\n        });\n        ApplicationInitStatus.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        ApplicationInitStatus.ctorParameters = function () { return [\n            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },\n        ]; };\n        return ApplicationInitStatus;\n    }());\n\n    /**\n     * A DI Token representing a unique string id assigned to the application by Angular and used\n     * primarily for prefixing application attributes and CSS styles when\n     * {@link ViewEncapsulation#Emulated} is being used.\n     *\n     * If you need to avoid randomly generated value to be used as an application id, you can provide\n     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}\n     * using this token.\n     * @experimental\n     */\n    var /** @type {?} */ APP_ID = new OpaqueToken('AppId');\n    /**\n     * @return {?}\n     */\n    function _appIdRandomProviderFactory() {\n        return \"\" + _randomChar() + _randomChar() + _randomChar();\n    }\n    /**\n     * Providers that will generate a random APP_ID_TOKEN.\n     * @experimental\n     */\n    var /** @type {?} */ APP_ID_RANDOM_PROVIDER = {\n        provide: APP_ID,\n        useFactory: _appIdRandomProviderFactory,\n        deps: /** @type {?} */ ([]),\n    };\n    /**\n     * @return {?}\n     */\n    function _randomChar() {\n        return String.fromCharCode(97 + Math.floor(Math.random() * 25));\n    }\n    /**\n     * A function that will be executed when a platform is initialized.\n     * @experimental\n     */\n    var /** @type {?} */ PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');\n    /**\n     * All callbacks provided via this token will be called for every component that is bootstrapped.\n     * Signature of the callback:\n     *\n     * `(componentRef: ComponentRef) => void`.\n     *\n     * @experimental\n     */\n    var /** @type {?} */ APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');\n    /**\n     * A token which indicates the root directory of the application\n     * @experimental\n     */\n    var /** @type {?} */ PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');\n\n    var Console = (function () {\n        function Console() {\n        }\n        /**\n         * @param {?} message\n         * @return {?}\n         */\n        Console.prototype.log = function (message) { print(message); };\n        /**\n         * @param {?} message\n         * @return {?}\n         */\n        Console.prototype.warn = function (message) { warn(message); };\n        Console.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        Console.ctorParameters = function () { return []; };\n        return Console;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a component is still being loaded in a synchronous compile.\n     *\n     * \\@stable\n     */\n    var ComponentStillLoadingError = (function (_super) {\n        __extends$4(ComponentStillLoadingError, _super);\n        /**\n         * @param {?} compType\n         */\n        function ComponentStillLoadingError(compType) {\n            _super.call(this, \"Can't compile synchronously as \" + stringify(compType) + \" is still being loaded!\");\n            this.compType = compType;\n        }\n        return ComponentStillLoadingError;\n    }(BaseError));\n    /**\n     * Combination of NgModuleFactory and ComponentFactorys.\n     *\n     * \\@experimental\n     */\n    var ModuleWithComponentFactories = (function () {\n        /**\n         * @param {?} ngModuleFactory\n         * @param {?} componentFactories\n         */\n        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {\n            this.ngModuleFactory = ngModuleFactory;\n            this.componentFactories = componentFactories;\n        }\n        return ModuleWithComponentFactories;\n    }());\n    /**\n     * @return {?}\n     */\n    function _throwError() {\n        throw new Error(\"Runtime compiler is not loaded\");\n    }\n    /**\n     * Low-level service for running the angular compiler during runtime\n     * to create {\\@link ComponentFactory}s, which\n     * can later be used to create and render a Component instance.\n     *\n     * Each `\\@NgModule` provides an own `Compiler` to its injector,\n     * that will use the directives/pipes of the ng module for compilation\n     * of components.\n     * \\@stable\n     */\n    var Compiler = (function () {\n        function Compiler() {\n        }\n        /**\n         * Compiles the given NgModule and all of its components. All templates of the components listed\n         * in `entryComponents`\n         * have to be inlined. Otherwise throws a {\\@link ComponentStillLoadingError}.\n         * @param {?} moduleType\n         * @return {?}\n         */\n        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };\n        /**\n         * Compiles the given NgModule and all of its components\n         * @param {?} moduleType\n         * @return {?}\n         */\n        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };\n        /**\n         * Same as {\\@link compileModuleSync} but also creates ComponentFactories for all components.\n         * @param {?} moduleType\n         * @return {?}\n         */\n        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n            throw _throwError();\n        };\n        /**\n         * Same as {\\@link compileModuleAsync} but also creates ComponentFactories for all components.\n         * @param {?} moduleType\n         * @return {?}\n         */\n        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n            throw _throwError();\n        };\n        /**\n         * Exposes the CSS-style selectors that have been used in `ngContent` directives within\n         * the template of the given component.\n         * This is used by the `upgrade` library to compile the appropriate transclude content\n         * in the Angular 1 wrapper component.\n         * @param {?} component\n         * @return {?}\n         */\n        Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };\n        /**\n         * Clears all caches.\n         * @return {?}\n         */\n        Compiler.prototype.clearCache = function () { };\n        /**\n         * Clears the cache for the given component/ngModule.\n         * @param {?} type\n         * @return {?}\n         */\n        Compiler.prototype.clearCacheFor = function (type) { };\n        Compiler.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        Compiler.ctorParameters = function () { return []; };\n        return Compiler;\n    }());\n    /**\n     * Token to provide CompilerOptions in the platform injector.\n     *\n     * @experimental\n     */\n    var /** @type {?} */ COMPILER_OPTIONS = new OpaqueToken('compilerOptions');\n    /**\n     * A factory for creating a Compiler\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var CompilerFactory = (function () {\n        function CompilerFactory() {\n        }\n        /**\n         * @abstract\n         * @param {?=} options\n         * @return {?}\n         */\n        CompilerFactory.prototype.createCompiler = function (options) { };\n        return CompilerFactory;\n    }());\n\n    var ElementRef = (function () {\n        /**\n         * @param {?} nativeElement\n         */\n        function ElementRef(nativeElement) {\n            this.nativeElement = nativeElement;\n        }\n        return ElementRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Use by directives and components to emit custom Events.\n     *\n     * ### Examples\n     *\n     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n     * title gets clicked:\n     *\n     * ```\n     * \\@Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   \\@Output() open: EventEmitter<any> = new EventEmitter();\n     *   \\@Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * The events payload can be accessed by the parameter `$event` on the components output event\n     * handler:\n     *\n     * ```\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n     * https://github.com/jhusain/observable-spec\n     *\n     * Once a reference implementation of the spec is available, switch to it.\n     * \\@stable\n     */\n    var EventEmitter = (function (_super) {\n        __extends$6(EventEmitter, _super);\n        /**\n         * Creates an instance of [EventEmitter], which depending on [isAsync],\n         * delivers events synchronously or asynchronously.\n         * @param {?=} isAsync\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        /**\n         * @param {?=} value\n         * @return {?}\n         */\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        /**\n         * @param {?=} generatorOrNext\n         * @param {?=} error\n         * @param {?=} complete\n         * @return {?}\n         */\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var /** @type {?} */ schedulerFn;\n            var /** @type {?} */ errorFn = function (err) { return null; };\n            var /** @type {?} */ completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :\n                    function (value) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * An injectable service for executing work inside or outside of the Angular zone.\n     *\n     * The most common use of this service is to optimize performance when starting a work consisting of\n     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n     * Angular. Such tasks can be kicked off via {\\@link runOutsideAngular} and if needed, these tasks\n     * can reenter the Angular zone via {\\@link run}.\n     *\n     * <!-- TODO: add/fix links to:\n     *   - docs explaining zones and the use of zones in Angular and change-detection\n     *   - link to runOutsideAngular/run (throughout this file!)\n     *   -->\n     *\n     * ### Example\n     *\n     * ```\n     * import {Component, NgZone} from '\\@angular/core';\n     * import {NgIf} from '\\@angular/common';\n     *\n     * \\@Component({\n     *   selector: 'ng-zone-demo'.\n     *   template: `\n     *     <h2>Demo: NgZone</h2>\n     *\n     *     <p>Progress: {{progress}}%</p>\n     *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n     *\n     *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n     *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n     *   `,\n     * })\n     * export class NgZoneDemo {\n     *   progress: number = 0;\n     *   label: string;\n     *\n     *   constructor(private _ngZone: NgZone) {}\n     *\n     *   // Loop inside the Angular zone\n     *   // so the UI DOES refresh after each setTimeout cycle\n     *   processWithinAngularZone() {\n     *     this.label = 'inside';\n     *     this.progress = 0;\n     *     this._increaseProgress(() => console.log('Inside Done!'));\n     *   }\n     *\n     *   // Loop outside of the Angular zone\n     *   // so the UI DOES NOT refresh after each setTimeout cycle\n     *   processOutsideOfAngularZone() {\n     *     this.label = 'outside';\n     *     this.progress = 0;\n     *     this._ngZone.runOutsideAngular(() => {\n     *       this._increaseProgress(() => {\n     *       // reenter the Angular zone and display done\n     *       this._ngZone.run(() => {console.log('Outside Done!') });\n     *     }}));\n     *   }\n     *\n     *   _increaseProgress(doneCallback: () => void) {\n     *     this.progress += 1;\n     *     console.log(`Current progress: ${this.progress}%`);\n     *\n     *     if (this.progress < 100) {\n     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n     *     } else {\n     *       doneCallback();\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * \\@experimental\n     */\n    var NgZone = (function () {\n        /**\n         * @param {?} __0\n         */\n        function NgZone(_a) {\n            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;\n            this._hasPendingMicrotasks = false;\n            this._hasPendingMacrotasks = false;\n            this._isStable = true;\n            this._nesting = 0;\n            this._onUnstable = new EventEmitter(false);\n            this._onMicrotaskEmpty = new EventEmitter(false);\n            this._onStable = new EventEmitter(false);\n            this._onErrorEvents = new EventEmitter(false);\n            if (typeof Zone == 'undefined') {\n                throw new Error('Angular requires Zone.js prolyfill.');\n            }\n            Zone.assertZonePatched();\n            this.outer = this.inner = Zone.current;\n            if (Zone['wtfZoneSpec']) {\n                this.inner = this.inner.fork(Zone['wtfZoneSpec']);\n            }\n            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {\n                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);\n            }\n            this.forkInnerZoneWithAngularBehavior();\n        }\n        /**\n         * @return {?}\n         */\n        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };\n        /**\n         * @return {?}\n         */\n        NgZone.assertInAngularZone = function () {\n            if (!NgZone.isInAngularZone()) {\n                throw new Error('Expected to be in Angular Zone, but it is not!');\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgZone.assertNotInAngularZone = function () {\n            if (NgZone.isInAngularZone()) {\n                throw new Error('Expected to not be in Angular Zone, but it is!');\n            }\n        };\n        /**\n         * Executes the `fn` function synchronously within the Angular zone and returns value returned by\n         * the function.\n         *\n         * Running functions via `run` allows you to reenter Angular zone from a task that was executed\n         * outside of the Angular zone (typically started via {\\@link runOutsideAngular}).\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * within the Angular zone.\n         *\n         * If a synchronous error happens it will be rethrown and not reported via `onError`.\n         * @param {?} fn\n         * @return {?}\n         */\n        NgZone.prototype.run = function (fn) { return this.inner.run(fn); };\n        /**\n         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not\n         * rethrown.\n         * @param {?} fn\n         * @return {?}\n         */\n        NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };\n        /**\n         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by\n         * the function.\n         *\n         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that\n         * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n         *\n         * Any future tasks or microtasks scheduled from within this function will continue executing from\n         * outside of the Angular zone.\n         *\n         * Use {\\@link run} to reenter the Angular zone and do work that updates the application model.\n         * @param {?} fn\n         * @return {?}\n         */\n        NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };\n        Object.defineProperty(NgZone.prototype, \"onUnstable\", {\n            /**\n             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n             * @return {?}\n             */\n            get: function () { return this._onUnstable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"onMicrotaskEmpty\", {\n            /**\n             * Notifies when there is no more microtasks enqueue in the current VM Turn.\n             * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n             * For this reason this event can fire multiple times per VM Turn.\n             * @return {?}\n             */\n            get: function () { return this._onMicrotaskEmpty; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"onStable\", {\n            /**\n             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which\n             * implies we are about to relinquish VM turn.\n             * This event gets called just once.\n             * @return {?}\n             */\n            get: function () { return this._onStable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"onError\", {\n            /**\n             * Notify that an error has been delivered.\n             * @return {?}\n             */\n            get: function () { return this._onErrorEvents; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"isStable\", {\n            /**\n             * Whether there are no outstanding microtasks or macrotasks.\n             * @return {?}\n             */\n            get: function () { return this._isStable; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"hasPendingMicrotasks\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._hasPendingMicrotasks; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgZone.prototype, \"hasPendingMacrotasks\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._hasPendingMacrotasks; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        NgZone.prototype.checkStable = function () {\n            var _this = this;\n            if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {\n                try {\n                    this._nesting++;\n                    this._onMicrotaskEmpty.emit(null);\n                }\n                finally {\n                    this._nesting--;\n                    if (!this._hasPendingMicrotasks) {\n                        try {\n                            this.runOutsideAngular(function () { return _this._onStable.emit(null); });\n                        }\n                        finally {\n                            this._isStable = true;\n                        }\n                    }\n                }\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {\n            var _this = this;\n            this.inner = this.inner.fork({\n                name: 'angular',\n                properties: /** @type {?} */ ({ 'isAngularZone': true }),\n                onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {\n                    try {\n                        _this.onEnter();\n                        return delegate.invokeTask(target, task, applyThis, applyArgs);\n                    }\n                    finally {\n                        _this.onLeave();\n                    }\n                },\n                onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {\n                    try {\n                        _this.onEnter();\n                        return delegate.invoke(target, callback, applyThis, applyArgs, source);\n                    }\n                    finally {\n                        _this.onLeave();\n                    }\n                },\n                onHasTask: function (delegate, current, target, hasTaskState) {\n                    delegate.hasTask(target, hasTaskState);\n                    if (current === target) {\n                        // We are only interested in hasTask events which originate from our zone\n                        // (A child hasTask event is not interesting to us)\n                        if (hasTaskState.change == 'microTask') {\n                            _this.setHasMicrotask(hasTaskState.microTask);\n                        }\n                        else if (hasTaskState.change == 'macroTask') {\n                            _this.setHasMacrotask(hasTaskState.macroTask);\n                        }\n                    }\n                },\n                onHandleError: function (delegate, current, target, error) {\n                    delegate.handleError(target, error);\n                    _this.triggerError(error);\n                    return false;\n                }\n            });\n        };\n        /**\n         * @return {?}\n         */\n        NgZone.prototype.onEnter = function () {\n            this._nesting++;\n            if (this._isStable) {\n                this._isStable = false;\n                this._onUnstable.emit(null);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        NgZone.prototype.onLeave = function () {\n            this._nesting--;\n            this.checkStable();\n        };\n        /**\n         * @param {?} hasMicrotasks\n         * @return {?}\n         */\n        NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {\n            this._hasPendingMicrotasks = hasMicrotasks;\n            this.checkStable();\n        };\n        /**\n         * @param {?} hasMacrotasks\n         * @return {?}\n         */\n        NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };\n        /**\n         * @param {?} error\n         * @return {?}\n         */\n        NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };\n        return NgZone;\n    }());\n\n    var AnimationQueue = (function () {\n        /**\n         * @param {?} _zone\n         */\n        function AnimationQueue(_zone) {\n            this._zone = _zone;\n            this.entries = [];\n        }\n        /**\n         * @param {?} player\n         * @return {?}\n         */\n        AnimationQueue.prototype.enqueue = function (player) { this.entries.push(player); };\n        /**\n         * @return {?}\n         */\n        AnimationQueue.prototype.flush = function () {\n            var _this = this;\n            // given that each animation player may set aside\n            // microtasks and rely on DOM-based events, this\n            // will cause Angular to run change detection after\n            // each request. This sidesteps the issue. If a user\n            // hooks into an animation via (@anim.start) or (@anim.done)\n            // then those methods will automatically trigger change\n            // detection by wrapping themselves inside of a zone\n            if (this.entries.length) {\n                this._zone.runOutsideAngular(function () {\n                    // this code is wrapped into a single promise such that the\n                    // onStart and onDone player callbacks are triggered outside\n                    // of the digest cycle of animations\n                    Promise.resolve(null).then(function () { return _this._triggerAnimations(); });\n                });\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationQueue.prototype._triggerAnimations = function () {\n            NgZone.assertNotInAngularZone();\n            while (this.entries.length) {\n                var /** @type {?} */ player = this.entries.shift();\n                // in the event that an animation throws an error then we do\n                // not want to re-run animations on any previous animations\n                // if they have already been kicked off beforehand\n                if (!player.hasStarted()) {\n                    player.play();\n                }\n            }\n        };\n        AnimationQueue.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        AnimationQueue.ctorParameters = function () { return [\n            { type: NgZone, },\n        ]; };\n        return AnimationQueue;\n    }());\n\n    var DefaultIterableDifferFactory = (function () {\n        function DefaultIterableDifferFactory() {\n        }\n        /**\n         * @param {?} obj\n         * @return {?}\n         */\n        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };\n        /**\n         * @param {?} cdRef\n         * @param {?=} trackByFn\n         * @return {?}\n         */\n        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {\n            return new DefaultIterableDiffer(trackByFn);\n        };\n        return DefaultIterableDifferFactory;\n    }());\n    var /** @type {?} */ trackByIdentity = function (index, item) { return item; };\n    /**\n     * \\@stable\n     */\n    var DefaultIterableDiffer = (function () {\n        /**\n         * @param {?=} _trackByFn\n         */\n        function DefaultIterableDiffer(_trackByFn) {\n            this._trackByFn = _trackByFn;\n            this._length = null;\n            this._collection = null;\n            this._linkedRecords = null;\n            this._unlinkedRecords = null;\n            this._previousItHead = null;\n            this._itHead = null;\n            this._itTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._movesHead = null;\n            this._movesTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n            this._identityChangesHead = null;\n            this._identityChangesTail = null;\n            this._trackByFn = this._trackByFn || trackByIdentity;\n        }\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"collection\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._collection; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"length\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._itHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {\n            var /** @type {?} */ nextIt = this._itHead;\n            var /** @type {?} */ nextRemove = this._removalsHead;\n            var /** @type {?} */ addRemoveOffset = 0;\n            var /** @type {?} */ moveOffsets = null;\n            while (nextIt || nextRemove) {\n                // Figure out which is the next record to process\n                // Order: remove, add, move\n                var /** @type {?} */ record = !nextRemove ||\n                    nextIt &&\n                        nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?\n                    nextIt :\n                    nextRemove;\n                var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);\n                var /** @type {?} */ currentIndex = record.currentIndex;\n                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary\n                if (record === nextRemove) {\n                    addRemoveOffset--;\n                    nextRemove = nextRemove._nextRemoved;\n                }\n                else {\n                    nextIt = nextIt._next;\n                    if (record.previousIndex == null) {\n                        addRemoveOffset++;\n                    }\n                    else {\n                        // INVARIANT:  currentIndex < previousIndex\n                        if (!moveOffsets)\n                            moveOffsets = [];\n                        var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;\n                        var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;\n                        if (localMovePreviousIndex != localCurrentIndex) {\n                            for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {\n                                var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);\n                                var /** @type {?} */ index = offset + i;\n                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {\n                                    moveOffsets[i] = offset + 1;\n                                }\n                            }\n                            var /** @type {?} */ previousIndex = record.previousIndex;\n                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;\n                        }\n                    }\n                }\n                if (adjPreviousIndex !== currentIndex) {\n                    fn(record, adjPreviousIndex, currentIndex);\n                }\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._movesHead; record !== null; record = record._nextMoved) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} collection\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.diff = function (collection) {\n            if (isBlank(collection))\n                collection = [];\n            if (!isListLikeIterable(collection)) {\n                throw new Error(\"Error trying to diff '\" + collection + \"'\");\n            }\n            if (this.check(collection)) {\n                return this;\n            }\n            else {\n                return null;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.onDestroy = function () { };\n        /**\n         * @param {?} collection\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.check = function (collection) {\n            var _this = this;\n            this._reset();\n            var /** @type {?} */ record = this._itHead;\n            var /** @type {?} */ mayBeDirty = false;\n            var /** @type {?} */ index;\n            var /** @type {?} */ item;\n            var /** @type {?} */ itemTrackBy;\n            if (Array.isArray(collection)) {\n                var /** @type {?} */ list = collection;\n                this._length = collection.length;\n                for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {\n                    item = list[index_1];\n                    itemTrackBy = this._trackByFn(index_1, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = this._mismatch(record, item, itemTrackBy, index_1);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                }\n            }\n            else {\n                index = 0;\n                iterateListLike(collection, function (item /** TODO #9100 */) {\n                    itemTrackBy = _this._trackByFn(index, item);\n                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {\n                        record = _this._mismatch(record, item, itemTrackBy, index);\n                        mayBeDirty = true;\n                    }\n                    else {\n                        if (mayBeDirty) {\n                            // TODO(misko): can we limit this to duplicates only?\n                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);\n                        }\n                        if (!looseIdentical(record.item, item))\n                            _this._addIdentityChange(record, item);\n                    }\n                    record = record._next;\n                    index++;\n                });\n                this._length = index;\n            }\n            this._truncate(record);\n            this._collection = collection;\n            return this.isDirty;\n        };\n        Object.defineProperty(DefaultIterableDiffer.prototype, \"isDirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._additionsHead !== null || this._movesHead !== null ||\n                    this._removalsHead !== null || this._identityChangesHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Reset the state of the change objects to show no changes. This means set previousKey to\n         * currentKey, and clear all of the queues (additions, moves, removals).\n         * Set the previousIndexes of moved and added items to their currentIndexes\n         * Reset the list of additions, moves and removals\n         *\n         * \\@internal\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var /** @type {?} */ record = void 0;\n                var /** @type {?} */ nextRecord = void 0;\n                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                    record.previousIndex = record.currentIndex;\n                }\n                this._additionsHead = this._additionsTail = null;\n                for (record = this._movesHead; record !== null; record = nextRecord) {\n                    record.previousIndex = record.currentIndex;\n                    nextRecord = record._nextMoved;\n                }\n                this._movesHead = this._movesTail = null;\n                this._removalsHead = this._removalsTail = null;\n                this._identityChangesHead = this._identityChangesTail = null;\n            }\n        };\n        /**\n         * This is the core function which handles differences between collections.\n         *\n         * - `record` is the record which we saw at this position last time. If null then it is a new\n         *   item.\n         * - `item` is the current item in the collection\n         * - `index` is the position of the item in the collection\n         *\n         * \\@internal\n         * @param {?} record\n         * @param {?} item\n         * @param {?} itemTrackBy\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {\n            // The previous record after which we will append the current one.\n            var /** @type {?} */ previousRecord;\n            if (record === null) {\n                previousRecord = this._itTail;\n            }\n            else {\n                previousRecord = record._prev;\n                // Remove the record from the collection since we know it does not match the item.\n                this._remove(record);\n            }\n            // Attempt to see if we have seen the item before.\n            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);\n            if (record !== null) {\n                // We have seen this before, we need to move it forward in the collection.\n                // But first we need to check if identity changed, so we can update in view if necessary\n                if (!looseIdentical(record.item, item))\n                    this._addIdentityChange(record, item);\n                this._moveAfter(record, previousRecord, index);\n            }\n            else {\n                // Never seen it, check evicted list.\n                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n                if (record !== null) {\n                    // It is an item which we have evicted earlier: reinsert it back into the list.\n                    // But first we need to check if identity changed, so we can update in view if necessary\n                    if (!looseIdentical(record.item, item))\n                        this._addIdentityChange(record, item);\n                    this._reinsertAfter(record, previousRecord, index);\n                }\n                else {\n                    // It is a new item: add it.\n                    record =\n                        this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);\n                }\n            }\n            return record;\n        };\n        /**\n         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)\n         *\n         * Use case: `[a, a]` => `[b, a, a]`\n         *\n         * If we did not have this check then the insertion of `b` would:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) leave `a` at index `1` as is. <-- this is wrong!\n         *   3) reinsert `a` at index 2. <-- this is wrong!\n         *\n         * The correct behavior is:\n         *   1) evict first `a`\n         *   2) insert `b` at `0` index.\n         *   3) reinsert `a` at index 1.\n         *   3) move `a` at from `1` to `2`.\n         *\n         *\n         * Double check that we have not evicted a duplicate item. We need to check if the item type may\n         * have already been removed:\n         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted\n         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a\n         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'\n         * at the end.\n         *\n         * \\@internal\n         * @param {?} record\n         * @param {?} item\n         * @param {?} itemTrackBy\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {\n            var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);\n            if (reinsertRecord !== null) {\n                record = this._reinsertAfter(reinsertRecord, record._prev, index);\n            }\n            else if (record.currentIndex != index) {\n                record.currentIndex = index;\n                this._addToMoves(record, index);\n            }\n            return record;\n        };\n        /**\n         * Get rid of any excess {\\@link CollectionChangeRecord}s from the previous collection\n         *\n         * - `record` The first excess {\\@link CollectionChangeRecord}.\n         *\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._truncate = function (record) {\n            // Anything after that needs to be removed;\n            while (record !== null) {\n                var /** @type {?} */ nextRecord = record._next;\n                this._addToRemovals(this._unlink(record));\n                record = nextRecord;\n            }\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.clear();\n            }\n            if (this._additionsTail !== null) {\n                this._additionsTail._nextAdded = null;\n            }\n            if (this._movesTail !== null) {\n                this._movesTail._nextMoved = null;\n            }\n            if (this._itTail !== null) {\n                this._itTail._next = null;\n            }\n            if (this._removalsTail !== null) {\n                this._removalsTail._nextRemoved = null;\n            }\n            if (this._identityChangesTail !== null) {\n                this._identityChangesTail._nextIdentityChange = null;\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} prevRecord\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {\n            if (this._unlinkedRecords !== null) {\n                this._unlinkedRecords.remove(record);\n            }\n            var /** @type {?} */ prev = record._prevRemoved;\n            var /** @type {?} */ next = record._nextRemoved;\n            if (prev === null) {\n                this._removalsHead = next;\n            }\n            else {\n                prev._nextRemoved = next;\n            }\n            if (next === null) {\n                this._removalsTail = prev;\n            }\n            else {\n                next._prevRemoved = prev;\n            }\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} prevRecord\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {\n            this._unlink(record);\n            this._insertAfter(record, prevRecord, index);\n            this._addToMoves(record, index);\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} prevRecord\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {\n            this._insertAfter(record, prevRecord, index);\n            if (this._additionsTail === null) {\n                // todo(vicb)\n                // assert(this._additionsHead === null);\n                this._additionsTail = this._additionsHead = record;\n            }\n            else {\n                // todo(vicb)\n                // assert(_additionsTail._nextAdded === null);\n                // assert(record._nextAdded === null);\n                this._additionsTail = this._additionsTail._nextAdded = record;\n            }\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} prevRecord\n         * @param {?} index\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {\n            // todo(vicb)\n            // assert(record != prevRecord);\n            // assert(record._next === null);\n            // assert(record._prev === null);\n            var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;\n            // todo(vicb)\n            // assert(next != record);\n            // assert(prevRecord != record);\n            record._next = next;\n            record._prev = prevRecord;\n            if (next === null) {\n                this._itTail = record;\n            }\n            else {\n                next._prev = record;\n            }\n            if (prevRecord === null) {\n                this._itHead = record;\n            }\n            else {\n                prevRecord._next = record;\n            }\n            if (this._linkedRecords === null) {\n                this._linkedRecords = new _DuplicateMap();\n            }\n            this._linkedRecords.put(record);\n            record.currentIndex = index;\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._remove = function (record) {\n            return this._addToRemovals(this._unlink(record));\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._unlink = function (record) {\n            if (this._linkedRecords !== null) {\n                this._linkedRecords.remove(record);\n            }\n            var /** @type {?} */ prev = record._prev;\n            var /** @type {?} */ next = record._next;\n            // todo(vicb)\n            // assert((record._prev = null) === null);\n            // assert((record._next = null) === null);\n            if (prev === null) {\n                this._itHead = next;\n            }\n            else {\n                prev._next = next;\n            }\n            if (next === null) {\n                this._itTail = prev;\n            }\n            else {\n                next._prev = prev;\n            }\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} toIndex\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {\n            // todo(vicb)\n            // assert(record._nextMoved === null);\n            if (record.previousIndex === toIndex) {\n                return record;\n            }\n            if (this._movesTail === null) {\n                // todo(vicb)\n                // assert(_movesHead === null);\n                this._movesTail = this._movesHead = record;\n            }\n            else {\n                // todo(vicb)\n                // assert(_movesTail._nextMoved === null);\n                this._movesTail = this._movesTail._nextMoved = record;\n            }\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._addToRemovals = function (record) {\n            if (this._unlinkedRecords === null) {\n                this._unlinkedRecords = new _DuplicateMap();\n            }\n            this._unlinkedRecords.put(record);\n            record.currentIndex = null;\n            record._nextRemoved = null;\n            if (this._removalsTail === null) {\n                // todo(vicb)\n                // assert(_removalsHead === null);\n                this._removalsTail = this._removalsHead = record;\n                record._prevRemoved = null;\n            }\n            else {\n                // todo(vicb)\n                // assert(_removalsTail._nextRemoved === null);\n                // assert(record._nextRemoved === null);\n                record._prevRemoved = this._removalsTail;\n                this._removalsTail = this._removalsTail._nextRemoved = record;\n            }\n            return record;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @param {?} item\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {\n            record.item = item;\n            if (this._identityChangesTail === null) {\n                this._identityChangesTail = this._identityChangesHead = record;\n            }\n            else {\n                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;\n            }\n            return record;\n        };\n        /**\n         * @return {?}\n         */\n        DefaultIterableDiffer.prototype.toString = function () {\n            var /** @type {?} */ list = [];\n            this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });\n            var /** @type {?} */ previous = [];\n            this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });\n            var /** @type {?} */ additions = [];\n            this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });\n            var /** @type {?} */ moves = [];\n            this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });\n            var /** @type {?} */ removals = [];\n            this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });\n            var /** @type {?} */ identityChanges = [];\n            this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });\n            return 'collection: ' + list.join(', ') + '\\n' +\n                'previous: ' + previous.join(', ') + '\\n' +\n                'additions: ' + additions.join(', ') + '\\n' +\n                'moves: ' + moves.join(', ') + '\\n' +\n                'removals: ' + removals.join(', ') + '\\n' +\n                'identityChanges: ' + identityChanges.join(', ') + '\\n';\n        };\n        return DefaultIterableDiffer;\n    }());\n    /**\n     * \\@stable\n     */\n    var CollectionChangeRecord = (function () {\n        /**\n         * @param {?} item\n         * @param {?} trackById\n         */\n        function CollectionChangeRecord(item, trackById) {\n            this.item = item;\n            this.trackById = trackById;\n            this.currentIndex = null;\n            this.previousIndex = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._prev = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._prevDup = null;\n            /** @internal */\n            this._nextDup = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextMoved = null;\n            /** @internal */\n            this._nextIdentityChange = null;\n        }\n        /**\n         * @return {?}\n         */\n        CollectionChangeRecord.prototype.toString = function () {\n            return this.previousIndex === this.currentIndex ? stringify(this.item) :\n                stringify(this.item) + '[' +\n                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';\n        };\n        return CollectionChangeRecord;\n    }());\n    var _DuplicateItemRecordList = (function () {\n        function _DuplicateItemRecordList() {\n            /** @internal */\n            this._head = null;\n            /** @internal */\n            this._tail = null;\n        }\n        /**\n         * Append the record to the list of duplicates.\n         *\n         * Note: by design all records in the list of duplicates hold the same value in record.item.\n         * @param {?} record\n         * @return {?}\n         */\n        _DuplicateItemRecordList.prototype.add = function (record) {\n            if (this._head === null) {\n                this._head = this._tail = record;\n                record._nextDup = null;\n                record._prevDup = null;\n            }\n            else {\n                // todo(vicb)\n                // assert(record.item ==  _head.item ||\n                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);\n                this._tail._nextDup = record;\n                record._prevDup = this._tail;\n                record._nextDup = null;\n                this._tail = record;\n            }\n        };\n        /**\n         * @param {?} trackById\n         * @param {?} afterIndex\n         * @return {?}\n         */\n        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {\n            var /** @type {?} */ record;\n            for (record = this._head; record !== null; record = record._nextDup) {\n                if ((afterIndex === null || afterIndex < record.currentIndex) &&\n                    looseIdentical(record.trackById, trackById)) {\n                    return record;\n                }\n            }\n            return null;\n        };\n        /**\n         * Remove one {\\@link CollectionChangeRecord} from the list of duplicates.\n         *\n         * Returns whether the list of duplicates is empty.\n         * @param {?} record\n         * @return {?}\n         */\n        _DuplicateItemRecordList.prototype.remove = function (record) {\n            // todo(vicb)\n            // assert(() {\n            //  // verify that the record being removed is in the list.\n            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {\n            //    if (identical(cursor, record)) return true;\n            //  }\n            //  return false;\n            //});\n            var /** @type {?} */ prev = record._prevDup;\n            var /** @type {?} */ next = record._nextDup;\n            if (prev === null) {\n                this._head = next;\n            }\n            else {\n                prev._nextDup = next;\n            }\n            if (next === null) {\n                this._tail = prev;\n            }\n            else {\n                next._prevDup = prev;\n            }\n            return this._head === null;\n        };\n        return _DuplicateItemRecordList;\n    }());\n    var _DuplicateMap = (function () {\n        function _DuplicateMap() {\n            this.map = new Map();\n        }\n        /**\n         * @param {?} record\n         * @return {?}\n         */\n        _DuplicateMap.prototype.put = function (record) {\n            var /** @type {?} */ key = record.trackById;\n            var /** @type {?} */ duplicates = this.map.get(key);\n            if (!duplicates) {\n                duplicates = new _DuplicateItemRecordList();\n                this.map.set(key, duplicates);\n            }\n            duplicates.add(record);\n        };\n        /**\n         * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we\n         * have already iterated over, we use the afterIndex to pretend it is not there.\n         *\n         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we\n         * have any more `a`s needs to return the last `a` not the first or second.\n         * @param {?} trackById\n         * @param {?=} afterIndex\n         * @return {?}\n         */\n        _DuplicateMap.prototype.get = function (trackById, afterIndex) {\n            if (afterIndex === void 0) { afterIndex = null; }\n            var /** @type {?} */ key = trackById;\n            var /** @type {?} */ recordList = this.map.get(key);\n            return recordList ? recordList.get(trackById, afterIndex) : null;\n        };\n        /**\n         * Removes a {\\@link CollectionChangeRecord} from the list of duplicates.\n         *\n         * The list of duplicates also is removed from the map if it gets empty.\n         * @param {?} record\n         * @return {?}\n         */\n        _DuplicateMap.prototype.remove = function (record) {\n            var /** @type {?} */ key = record.trackById;\n            var /** @type {?} */ recordList = this.map.get(key);\n            // Remove the list of duplicates when it gets empty\n            if (recordList.remove(record)) {\n                this.map.delete(key);\n            }\n            return record;\n        };\n        Object.defineProperty(_DuplicateMap.prototype, \"isEmpty\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.map.size === 0; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        _DuplicateMap.prototype.clear = function () { this.map.clear(); };\n        /**\n         * @return {?}\n         */\n        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };\n        return _DuplicateMap;\n    }());\n    /**\n     * @param {?} item\n     * @param {?} addRemoveOffset\n     * @param {?} moveOffsets\n     * @return {?}\n     */\n    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {\n        var /** @type {?} */ previousIndex = item.previousIndex;\n        if (previousIndex === null)\n            return previousIndex;\n        var /** @type {?} */ moveOffset = 0;\n        if (moveOffsets && previousIndex < moveOffsets.length) {\n            moveOffset = moveOffsets[previousIndex];\n        }\n        return previousIndex + addRemoveOffset + moveOffset;\n    }\n\n    var DefaultKeyValueDifferFactory = (function () {\n        function DefaultKeyValueDifferFactory() {\n        }\n        /**\n         * @param {?} obj\n         * @return {?}\n         */\n        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };\n        /**\n         * @param {?} cdRef\n         * @return {?}\n         */\n        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };\n        return DefaultKeyValueDifferFactory;\n    }());\n    var DefaultKeyValueDiffer = (function () {\n        function DefaultKeyValueDiffer() {\n            this._records = new Map();\n            this._mapHead = null;\n            this._previousMapHead = null;\n            this._changesHead = null;\n            this._changesTail = null;\n            this._additionsHead = null;\n            this._additionsTail = null;\n            this._removalsHead = null;\n            this._removalsTail = null;\n        }\n        Object.defineProperty(DefaultKeyValueDiffer.prototype, \"isDirty\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._additionsHead !== null || this._changesHead !== null ||\n                    this._removalsHead !== null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._mapHead; record !== null; record = record._next) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {\n            var /** @type {?} */ record;\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                fn(record);\n            }\n        };\n        /**\n         * @param {?} map\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.diff = function (map) {\n            if (!map) {\n                map = new Map();\n            }\n            else if (!(map instanceof Map || isJsObject(map))) {\n                throw new Error(\"Error trying to diff '\" + map + \"'\");\n            }\n            return this.check(map) ? this : null;\n        };\n        /**\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.onDestroy = function () { };\n        /**\n         * @param {?} map\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.check = function (map) {\n            var _this = this;\n            this._reset();\n            var /** @type {?} */ records = this._records;\n            var /** @type {?} */ oldSeqRecord = this._mapHead;\n            var /** @type {?} */ lastOldSeqRecord = null;\n            var /** @type {?} */ lastNewSeqRecord = null;\n            var /** @type {?} */ seqChanged = false;\n            this._forEach(map, function (value, key) {\n                var /** @type {?} */ newSeqRecord;\n                if (oldSeqRecord && key === oldSeqRecord.key) {\n                    newSeqRecord = oldSeqRecord;\n                    _this._maybeAddToChanges(newSeqRecord, value);\n                }\n                else {\n                    seqChanged = true;\n                    if (oldSeqRecord !== null) {\n                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);\n                        _this._addToRemovals(oldSeqRecord);\n                    }\n                    if (records.has(key)) {\n                        newSeqRecord = records.get(key);\n                        _this._maybeAddToChanges(newSeqRecord, value);\n                    }\n                    else {\n                        newSeqRecord = new KeyValueChangeRecord(key);\n                        records.set(key, newSeqRecord);\n                        newSeqRecord.currentValue = value;\n                        _this._addToAdditions(newSeqRecord);\n                    }\n                }\n                if (seqChanged) {\n                    if (_this._isInRemovals(newSeqRecord)) {\n                        _this._removeFromRemovals(newSeqRecord);\n                    }\n                    if (lastNewSeqRecord == null) {\n                        _this._mapHead = newSeqRecord;\n                    }\n                    else {\n                        lastNewSeqRecord._next = newSeqRecord;\n                    }\n                }\n                lastOldSeqRecord = oldSeqRecord;\n                lastNewSeqRecord = newSeqRecord;\n                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;\n            });\n            this._truncate(lastOldSeqRecord, oldSeqRecord);\n            return this.isDirty;\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._reset = function () {\n            if (this.isDirty) {\n                var /** @type {?} */ record = void 0;\n                // Record the state of the mapping\n                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {\n                    record._nextPrevious = record._next;\n                }\n                for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                    record.previousValue = record.currentValue;\n                }\n                for (record = this._additionsHead; record != null; record = record._nextAdded) {\n                    record.previousValue = record.currentValue;\n                }\n                this._changesHead = this._changesTail = null;\n                this._additionsHead = this._additionsTail = null;\n                this._removalsHead = this._removalsTail = null;\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} lastRecord\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {\n            while (record !== null) {\n                if (lastRecord === null) {\n                    this._mapHead = null;\n                }\n                else {\n                    lastRecord._next = null;\n                }\n                var /** @type {?} */ nextRecord = record._next;\n                this._addToRemovals(record);\n                lastRecord = record;\n                record = nextRecord;\n            }\n            for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {\n                rec.previousValue = rec.currentValue;\n                rec.currentValue = null;\n                this._records.delete(rec.key);\n            }\n        };\n        /**\n         * @param {?} record\n         * @param {?} newValue\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {\n            if (!looseIdentical(newValue, record.currentValue)) {\n                record.previousValue = record.currentValue;\n                record.currentValue = newValue;\n                this._addToChanges(record);\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {\n            return record === this._removalsHead || record._nextRemoved !== null ||\n                record._prevRemoved !== null;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {\n            if (this._removalsHead === null) {\n                this._removalsHead = this._removalsTail = record;\n            }\n            else {\n                this._removalsTail._nextRemoved = record;\n                record._prevRemoved = this._removalsTail;\n                this._removalsTail = record;\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} prev\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {\n            var /** @type {?} */ next = record._next;\n            if (prev === null) {\n                this._mapHead = next;\n            }\n            else {\n                prev._next = next;\n            }\n            record._next = null;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {\n            var /** @type {?} */ prev = record._prevRemoved;\n            var /** @type {?} */ next = record._nextRemoved;\n            if (prev === null) {\n                this._removalsHead = next;\n            }\n            else {\n                prev._nextRemoved = next;\n            }\n            if (next === null) {\n                this._removalsTail = prev;\n            }\n            else {\n                next._prevRemoved = prev;\n            }\n            record._prevRemoved = record._nextRemoved = null;\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {\n            if (this._additionsHead === null) {\n                this._additionsHead = this._additionsTail = record;\n            }\n            else {\n                this._additionsTail._nextAdded = record;\n                this._additionsTail = record;\n            }\n        };\n        /**\n         * \\@internal\n         * @param {?} record\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {\n            if (this._changesHead === null) {\n                this._changesHead = this._changesTail = record;\n            }\n            else {\n                this._changesTail._nextChanged = record;\n                this._changesTail = record;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype.toString = function () {\n            var /** @type {?} */ items = [];\n            var /** @type {?} */ previous = [];\n            var /** @type {?} */ changes = [];\n            var /** @type {?} */ additions = [];\n            var /** @type {?} */ removals = [];\n            var /** @type {?} */ record;\n            for (record = this._mapHead; record !== null; record = record._next) {\n                items.push(stringify(record));\n            }\n            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {\n                previous.push(stringify(record));\n            }\n            for (record = this._changesHead; record !== null; record = record._nextChanged) {\n                changes.push(stringify(record));\n            }\n            for (record = this._additionsHead; record !== null; record = record._nextAdded) {\n                additions.push(stringify(record));\n            }\n            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {\n                removals.push(stringify(record));\n            }\n            return 'map: ' + items.join(', ') + '\\n' +\n                'previous: ' + previous.join(', ') + '\\n' +\n                'additions: ' + additions.join(', ') + '\\n' +\n                'changes: ' + changes.join(', ') + '\\n' +\n                'removals: ' + removals.join(', ') + '\\n';\n        };\n        /**\n         * \\@internal\n         * @param {?} obj\n         * @param {?} fn\n         * @return {?}\n         */\n        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {\n            if (obj instanceof Map) {\n                obj.forEach(fn);\n            }\n            else {\n                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });\n            }\n        };\n        return DefaultKeyValueDiffer;\n    }());\n    /**\n     * \\@stable\n     */\n    var KeyValueChangeRecord = (function () {\n        /**\n         * @param {?} key\n         */\n        function KeyValueChangeRecord(key) {\n            this.key = key;\n            this.previousValue = null;\n            this.currentValue = null;\n            /** @internal */\n            this._nextPrevious = null;\n            /** @internal */\n            this._next = null;\n            /** @internal */\n            this._nextAdded = null;\n            /** @internal */\n            this._nextRemoved = null;\n            /** @internal */\n            this._prevRemoved = null;\n            /** @internal */\n            this._nextChanged = null;\n        }\n        /**\n         * @return {?}\n         */\n        KeyValueChangeRecord.prototype.toString = function () {\n            return looseIdentical(this.previousValue, this.currentValue) ?\n                stringify(this.key) :\n                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +\n                    stringify(this.currentValue) + ']');\n        };\n        return KeyValueChangeRecord;\n    }());\n\n    /**\n     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n     * \\@stable\n     */\n    var IterableDiffers = (function () {\n        /**\n         * @param {?} factories\n         */\n        function IterableDiffers(factories) {\n            this.factories = factories;\n        }\n        /**\n         * @param {?} factories\n         * @param {?=} parent\n         * @return {?}\n         */\n        IterableDiffers.create = function (factories, parent) {\n            if (isPresent(parent)) {\n                var /** @type {?} */ copied = parent.factories.slice();\n                factories = factories.concat(copied);\n                return new IterableDiffers(factories);\n            }\n            else {\n                return new IterableDiffers(factories);\n            }\n        };\n        /**\n         * Takes an array of {\\@link IterableDifferFactory} and returns a provider used to extend the\n         * inherited {\\@link IterableDiffers} instance with the provided factories and return a new\n         * {\\@link IterableDiffers} instance.\n         *\n         * The following example shows how to extend an existing list of factories,\n         * which will only be applied to the injector for this component and its children.\n         * This step is all that's required to make a new {\\@link IterableDiffer} available.\n         *\n         * ### Example\n         *\n         * ```\n         * \\@Component({\n         *   viewProviders: [\n         *     IterableDiffers.extend([new ImmutableListDiffer()])\n         *   ]\n         * })\n         * ```\n         * @param {?} factories\n         * @return {?}\n         */\n        IterableDiffers.extend = function (factories) {\n            return {\n                provide: IterableDiffers,\n                useFactory: function (parent) {\n                    if (!parent) {\n                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed\n                        // to\n                        // bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend IterableDiffers without a parent injector');\n                    }\n                    return IterableDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]\n            };\n        };\n        /**\n         * @param {?} iterable\n         * @return {?}\n         */\n        IterableDiffers.prototype.find = function (iterable) {\n            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });\n            if (isPresent(factory)) {\n                return factory;\n            }\n            else {\n                throw new Error(\"Cannot find a differ supporting object '\" + iterable + \"' of type '\" + getTypeNameForDebugging(iterable) + \"'\");\n            }\n        };\n        return IterableDiffers;\n    }());\n\n    /**\n     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n     * \\@stable\n     */\n    var KeyValueDiffers = (function () {\n        /**\n         * @param {?} factories\n         */\n        function KeyValueDiffers(factories) {\n            this.factories = factories;\n        }\n        /**\n         * @param {?} factories\n         * @param {?=} parent\n         * @return {?}\n         */\n        KeyValueDiffers.create = function (factories, parent) {\n            if (isPresent(parent)) {\n                var /** @type {?} */ copied = parent.factories.slice();\n                factories = factories.concat(copied);\n                return new KeyValueDiffers(factories);\n            }\n            else {\n                return new KeyValueDiffers(factories);\n            }\n        };\n        /**\n         * Takes an array of {\\@link KeyValueDifferFactory} and returns a provider used to extend the\n         * inherited {\\@link KeyValueDiffers} instance with the provided factories and return a new\n         * {\\@link KeyValueDiffers} instance.\n         *\n         * The following example shows how to extend an existing list of factories,\n         * which will only be applied to the injector for this component and its children.\n         * This step is all that's required to make a new {\\@link KeyValueDiffer} available.\n         *\n         * ### Example\n         *\n         * ```\n         * \\@Component({\n         *   viewProviders: [\n         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n         *   ]\n         * })\n         * ```\n         * @param {?} factories\n         * @return {?}\n         */\n        KeyValueDiffers.extend = function (factories) {\n            return {\n                provide: KeyValueDiffers,\n                useFactory: function (parent) {\n                    if (!parent) {\n                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed\n                        // to\n                        // bootstrap(), which would override default pipes instead of extending them.\n                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');\n                    }\n                    return KeyValueDiffers.create(factories, parent);\n                },\n                // Dependency technically isn't optional, but we can provide a better error message this way.\n                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]\n            };\n        };\n        /**\n         * @param {?} kv\n         * @return {?}\n         */\n        KeyValueDiffers.prototype.find = function (kv) {\n            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });\n            if (isPresent(factory)) {\n                return factory;\n            }\n            else {\n                throw new Error(\"Cannot find a differ supporting object '\" + kv + \"'\");\n            }\n        };\n        return KeyValueDiffers;\n    }());\n\n    var /** @type {?} */ UNINITIALIZED = {\n        toString: function () { return 'CD_INIT_VALUE'; }\n    };\n    /**\n     * @param {?} a\n     * @param {?} b\n     * @return {?}\n     */\n    function devModeEqual(a, b) {\n        if (isListLikeIterable(a) && isListLikeIterable(b)) {\n            return areIterablesEqual(a, b, devModeEqual);\n        }\n        else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {\n            return true;\n        }\n        else {\n            return looseIdentical(a, b);\n        }\n    }\n    /**\n     * Indicates that the result of a {\\@link Pipe} transformation has changed even though the\n     * reference\n     * has not changed.\n     *\n     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.\n     *\n     * Example:\n     *\n     * ```\n     * if (this._latestValue === this._latestReturnedValue) {\n     *    return this._latestReturnedValue;\n     *  } else {\n     *    this._latestReturnedValue = this._latestValue;\n     *    return WrappedValue.wrap(this._latestValue); // this will force update\n     *  }\n     * ```\n     * \\@stable\n     */\n    var WrappedValue = (function () {\n        /**\n         * @param {?} wrapped\n         */\n        function WrappedValue(wrapped) {\n            this.wrapped = wrapped;\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        WrappedValue.wrap = function (value) { return new WrappedValue(value); };\n        return WrappedValue;\n    }());\n    /**\n     * Helper class for unwrapping WrappedValue s\n     */\n    var ValueUnwrapper = (function () {\n        function ValueUnwrapper() {\n            this.hasWrappedValue = false;\n        }\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        ValueUnwrapper.prototype.unwrap = function (value) {\n            if (value instanceof WrappedValue) {\n                this.hasWrappedValue = true;\n                return value.wrapped;\n            }\n            return value;\n        };\n        /**\n         * @return {?}\n         */\n        ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };\n        return ValueUnwrapper;\n    }());\n    /**\n     * Represents a basic change from a previous to a new value.\n     * \\@stable\n     */\n    var SimpleChange = (function () {\n        /**\n         * @param {?} previousValue\n         * @param {?} currentValue\n         */\n        function SimpleChange(previousValue, currentValue) {\n            this.previousValue = previousValue;\n            this.currentValue = currentValue;\n        }\n        /**\n         * Check whether the new value is the first value assigned.\n         * @return {?}\n         */\n        SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };\n        return SimpleChange;\n    }());\n\n    /**\n     * \\@stable\n     * @abstract\n     */\n    var ChangeDetectorRef = (function () {\n        function ChangeDetectorRef() {\n        }\n        /**\n         * Marks all {\\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.\n         *\n         * <!-- TODO: Add a link to a chapter on OnPush components -->\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))\n         *\n         * ```typescript\n         * \\@Component({\n         *   selector: 'cmp',\n         *   changeDetection: ChangeDetectionStrategy.OnPush,\n         *   template: `Number of ticks: {{numberOfTicks}}`\n         * })\n         * class Cmp {\n         *   numberOfTicks = 0;\n         *\n         *   constructor(ref: ChangeDetectorRef) {\n         *     setInterval(() => {\n         *       this.numberOfTicks ++\n         *       // the following is required, otherwise the view will not be updated\n         *       this.ref.markForCheck();\n         *     }, 1000);\n         *   }\n         * }\n         *\n         * \\@Component({\n         *   selector: 'app',\n         *   changeDetection: ChangeDetectionStrategy.OnPush,\n         *   template: `\n         *     <cmp><cmp>\n         *   `,\n         * })\n         * class App {\n         * }\n         * ```\n         * @abstract\n         * @return {?}\n         */\n        ChangeDetectorRef.prototype.markForCheck = function () { };\n        /**\n         * Detaches the change detector from the change detector tree.\n         *\n         * The detached change detector will not be checked until it is reattached.\n         *\n         * This can also be used in combination with {\\@link ChangeDetectorRef#detectChanges} to implement\n         * local change\n         * detection checks.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n         *\n         * ### Example\n         *\n         * The following example defines a component with a large list of readonly data.\n         * Imagine the data changes constantly, many times per second. For performance reasons,\n         * we want to check and update the list every five seconds. We can do that by detaching\n         * the component's change detector and doing a local check every five seconds.\n         *\n         * ```typescript\n         * class DataProvider {\n         *   // in a real application the returned data will be different every time\n         *   get data() {\n         *     return [1,2,3,4,5];\n         *   }\n         * }\n         *\n         * \\@Component({\n         *   selector: 'giant-list',\n         *   template: `\n         *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</lig>\n         *   `,\n         * })\n         * class GiantList {\n         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {\n         *     ref.detach();\n         *     setInterval(() => {\n         *       this.ref.detectChanges();\n         *     }, 5000);\n         *   }\n         * }\n         *\n         * \\@Component({\n         *   selector: 'app',\n         *   providers: [DataProvider],\n         *   template: `\n         *     <giant-list><giant-list>\n         *   `,\n         * })\n         * class App {\n         * }\n         * ```\n         * @abstract\n         * @return {?}\n         */\n        ChangeDetectorRef.prototype.detach = function () { };\n        /**\n         * Checks the change detector and its children.\n         *\n         * This can also be used in combination with {\\@link ChangeDetectorRef#detach} to implement local\n         * change detection\n         * checks.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n         *\n         * ### Example\n         *\n         * The following example defines a component with a large list of readonly data.\n         * Imagine, the data changes constantly, many times per second. For performance reasons,\n         * we want to check and update the list every five seconds.\n         *\n         * We can do that by detaching the component's change detector and doing a local change detection\n         * check\n         * every five seconds.\n         *\n         * See {\\@link ChangeDetectorRef#detach} for more information.\n         * @abstract\n         * @return {?}\n         */\n        ChangeDetectorRef.prototype.detectChanges = function () { };\n        /**\n         * Checks the change detector and its children, and throws if any changes are detected.\n         *\n         * This is used in development mode to verify that running change detection doesn't introduce\n         * other changes.\n         * @abstract\n         * @return {?}\n         */\n        ChangeDetectorRef.prototype.checkNoChanges = function () { };\n        /**\n         * Reattach the change detector to the change detector tree.\n         *\n         * This also marks OnPush ancestors as to be checked. This reattached change detector will be\n         * checked during the next change detection run.\n         *\n         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))\n         *\n         * The following example creates a component displaying `live` data. The component will detach\n         * its change detector from the main change detector tree when the component's live property\n         * is set to false.\n         *\n         * ```typescript\n         * class DataProvider {\n         *   data = 1;\n         *\n         *   constructor() {\n         *     setInterval(() => {\n         *       this.data = this.data * 2;\n         *     }, 500);\n         *   }\n         * }\n         *\n         * \\@Component({\n         *   selector: 'live-data',\n         *   inputs: ['live'],\n         *   template: 'Data: {{dataProvider.data}}'\n         * })\n         * class LiveData {\n         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}\n         *\n         *   set live(value) {\n         *     if (value)\n         *       this.ref.reattach();\n         *     else\n         *       this.ref.detach();\n         *   }\n         * }\n         *\n         * \\@Component({\n         *   selector: 'app',\n         *   providers: [DataProvider],\n         *   template: `\n         *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n         *     <live-data [live]=\"live\"><live-data>\n         *   `,\n         * })\n         * class App {\n         *   live = true;\n         * }\n         * ```\n         * @abstract\n         * @return {?}\n         */\n        ChangeDetectorRef.prototype.reattach = function () { };\n        return ChangeDetectorRef;\n    }());\n\n    /**\n     * Structural diffing for `Object`s and `Map`s.\n     */\n    var /** @type {?} */ keyValDiff = [new DefaultKeyValueDifferFactory()];\n    /**\n     * Structural diffing for `Iterable` types such as `Array`s.\n     */\n    var /** @type {?} */ iterableDiff = [new DefaultIterableDifferFactory()];\n    var /** @type {?} */ defaultIterableDiffers = new IterableDiffers(iterableDiff);\n    var /** @type {?} */ defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var RenderComponentType = (function () {\n        /**\n         * @param {?} id\n         * @param {?} templateUrl\n         * @param {?} slotCount\n         * @param {?} encapsulation\n         * @param {?} styles\n         * @param {?} animations\n         */\n        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {\n            this.id = id;\n            this.templateUrl = templateUrl;\n            this.slotCount = slotCount;\n            this.encapsulation = encapsulation;\n            this.styles = styles;\n            this.animations = animations;\n        }\n        return RenderComponentType;\n    }());\n    /**\n     * @abstract\n     */\n    var RenderDebugInfo = (function () {\n        function RenderDebugInfo() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.injector = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.component = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.providerTokens = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.references = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.context = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        RenderDebugInfo.prototype.source = function () { };\n        return RenderDebugInfo;\n    }());\n    /**\n     * \\@experimental\n     * @abstract\n     */\n    var Renderer = (function () {\n        function Renderer() {\n        }\n        /**\n         * @abstract\n         * @param {?} selectorOrNode\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };\n        /**\n         * @abstract\n         * @param {?} parentElement\n         * @param {?} name\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };\n        /**\n         * @abstract\n         * @param {?} hostElement\n         * @return {?}\n         */\n        Renderer.prototype.createViewRoot = function (hostElement) { };\n        /**\n         * @abstract\n         * @param {?} parentElement\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };\n        /**\n         * @abstract\n         * @param {?} parentElement\n         * @param {?} value\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        Renderer.prototype.createText = function (parentElement, value, debugInfo) { };\n        /**\n         * @abstract\n         * @param {?} parentElement\n         * @param {?} nodes\n         * @return {?}\n         */\n        Renderer.prototype.projectNodes = function (parentElement, nodes) { };\n        /**\n         * @abstract\n         * @param {?} node\n         * @param {?} viewRootNodes\n         * @return {?}\n         */\n        Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };\n        /**\n         * @abstract\n         * @param {?} viewRootNodes\n         * @return {?}\n         */\n        Renderer.prototype.detachView = function (viewRootNodes) { };\n        /**\n         * @abstract\n         * @param {?} hostElement\n         * @param {?} viewAllNodes\n         * @return {?}\n         */\n        Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} name\n         * @param {?} callback\n         * @return {?}\n         */\n        Renderer.prototype.listen = function (renderElement, name, callback) { };\n        /**\n         * @abstract\n         * @param {?} target\n         * @param {?} name\n         * @param {?} callback\n         * @return {?}\n         */\n        Renderer.prototype.listenGlobal = function (target, name, callback) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} propertyName\n         * @param {?} propertyValue\n         * @return {?}\n         */\n        Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} attributeName\n         * @param {?} attributeValue\n         * @return {?}\n         */\n        Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };\n        /**\n         * Used only in debug mode to serialize property changes to dom nodes as attributes.\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} propertyName\n         * @param {?} propertyValue\n         * @return {?}\n         */\n        Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} className\n         * @param {?} isAdd\n         * @return {?}\n         */\n        Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} styleName\n         * @param {?} styleValue\n         * @return {?}\n         */\n        Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };\n        /**\n         * @abstract\n         * @param {?} renderElement\n         * @param {?} methodName\n         * @param {?=} args\n         * @return {?}\n         */\n        Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };\n        /**\n         * @abstract\n         * @param {?} renderNode\n         * @param {?} text\n         * @return {?}\n         */\n        Renderer.prototype.setText = function (renderNode, text) { };\n        /**\n         * @abstract\n         * @param {?} element\n         * @param {?} startingStyles\n         * @param {?} keyframes\n         * @param {?} duration\n         * @param {?} delay\n         * @param {?} easing\n         * @param {?=} previousPlayers\n         * @return {?}\n         */\n        Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };\n        return Renderer;\n    }());\n    /**\n     * Injectable service that provides a low-level interface for modifying the UI.\n     *\n     * Use this service to bypass Angular's templating and make custom UI changes that can't be\n     * expressed declaratively. For example if you need to set a property or an attribute whose name is\n     * not statically known, use {\\@link #setElementProperty} or {\\@link #setElementAttribute}\n     * respectively.\n     *\n     * If you are implementing a custom renderer, you must implement this interface.\n     *\n     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.\n     * \\@experimental\n     * @abstract\n     */\n    var RootRenderer = (function () {\n        function RootRenderer() {\n        }\n        /**\n         * @abstract\n         * @param {?} componentType\n         * @return {?}\n         */\n        RootRenderer.prototype.renderComponent = function (componentType) { };\n        return RootRenderer;\n    }());\n\n    var SecurityContext = {};\n    SecurityContext.NONE = 0;\n    SecurityContext.HTML = 1;\n    SecurityContext.STYLE = 2;\n    SecurityContext.SCRIPT = 3;\n    SecurityContext.URL = 4;\n    SecurityContext.RESOURCE_URL = 5;\n    SecurityContext[SecurityContext.NONE] = \"NONE\";\n    SecurityContext[SecurityContext.HTML] = \"HTML\";\n    SecurityContext[SecurityContext.STYLE] = \"STYLE\";\n    SecurityContext[SecurityContext.SCRIPT] = \"SCRIPT\";\n    SecurityContext[SecurityContext.URL] = \"URL\";\n    SecurityContext[SecurityContext.RESOURCE_URL] = \"RESOURCE_URL\";\n    /**\n     * Sanitizer is used by the views to sanitize potentially dangerous values.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var Sanitizer = (function () {\n        function Sanitizer() {\n        }\n        /**\n         * @abstract\n         * @param {?} context\n         * @param {?} value\n         * @return {?}\n         */\n        Sanitizer.prototype.sanitize = function (context, value) { };\n        return Sanitizer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * An error thrown if application changes model breaking the top-down data flow.\n     *\n     * This exception is only thrown in dev mode.\n     *\n     * <!-- TODO: Add a link once the dev mode option is configurable -->\n     *\n     * ### Example\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'parent',\n     *   template: '<child [prop]=\"parentProp\"></child>',\n     * })\n     * class Parent {\n     *   parentProp = 'init';\n     * }\n     *\n     * \\@Directive({selector: 'child', inputs: ['prop']})\n     * class Child {\n     *   constructor(public parent: Parent) {}\n     *\n     *   set prop(v) {\n     *     // this updates the parent property, which is disallowed during change detection\n     *     // this will result in ExpressionChangedAfterItHasBeenCheckedError\n     *     this.parent.parentProp = 'updated';\n     *   }\n     * }\n     * ```\n     * \\@stable\n     */\n    var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {\n        __extends$7(ExpressionChangedAfterItHasBeenCheckedError, _super);\n        /**\n         * @param {?} oldValue\n         * @param {?} currValue\n         */\n        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {\n            var msg = \"Expression has changed after it was checked. Previous value: '\" + oldValue + \"'. Current value: '\" + currValue + \"'.\";\n            if (oldValue === UNINITIALIZED) {\n                msg +=\n                    \" It seems like the view has been created after its parent and its children have been dirty checked.\" +\n                        \" Has it been created in a change detection hook ?\";\n            }\n            _super.call(this, msg);\n        }\n        return ExpressionChangedAfterItHasBeenCheckedError;\n    }(BaseError));\n    /**\n     * Thrown when an exception was raised during view creation, change detection or destruction.\n     *\n     * This error wraps the original exception to attach additional contextual information that can\n     * be useful for debugging.\n     * \\@stable\n     */\n    var ViewWrappedError = (function (_super) {\n        __extends$7(ViewWrappedError, _super);\n        /**\n         * @param {?} originalError\n         * @param {?} context\n         */\n        function ViewWrappedError(originalError, context) {\n            _super.call(this, \"Error in \" + context.source, originalError);\n            this.context = context;\n        }\n        return ViewWrappedError;\n    }(WrappedError));\n    /**\n     * Thrown when a destroyed view is used.\n     *\n     * This error indicates a bug in the framework.\n     *\n     * This is an internal Angular error.\n     * \\@stable\n     */\n    var ViewDestroyedError = (function (_super) {\n        __extends$7(ViewDestroyedError, _super);\n        /**\n         * @param {?} details\n         */\n        function ViewDestroyedError(details) {\n            _super.call(this, \"Attempt to use a destroyed view: \" + details);\n        }\n        return ViewDestroyedError;\n    }(BaseError));\n\n    var ViewUtils = (function () {\n        /**\n         * @param {?} _renderer\n         * @param {?} sanitizer\n         * @param {?} animationQueue\n         */\n        function ViewUtils(_renderer, sanitizer, animationQueue) {\n            this._renderer = _renderer;\n            this.animationQueue = animationQueue;\n            this.sanitizer = sanitizer;\n        }\n        /**\n         * \\@internal\n         * @param {?} renderComponentType\n         * @return {?}\n         */\n        ViewUtils.prototype.renderComponent = function (renderComponentType) {\n            return this._renderer.renderComponent(renderComponentType);\n        };\n        ViewUtils.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        ViewUtils.ctorParameters = function () { return [\n            { type: RootRenderer, },\n            { type: Sanitizer, },\n            { type: AnimationQueue, },\n        ]; };\n        return ViewUtils;\n    }());\n    var /** @type {?} */ nextRenderComponentTypeId = 0;\n    /**\n     * @param {?} templateUrl\n     * @param {?} slotCount\n     * @param {?} encapsulation\n     * @param {?} styles\n     * @param {?} animations\n     * @return {?}\n     */\n    function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {\n        return new RenderComponentType(\"\" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);\n    }\n    /**\n     * @param {?} e\n     * @param {?} array\n     * @return {?}\n     */\n    function addToArray(e, array) {\n        array.push(e);\n    }\n    /**\n     * @param {?} valueCount\n     * @param {?} constAndInterp\n     * @return {?}\n     */\n    function interpolate(valueCount, constAndInterp) {\n        var /** @type {?} */ result = '';\n        for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {\n            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);\n        }\n        return result + constAndInterp[valueCount * 2];\n    }\n    /**\n     * @param {?} valueCount\n     * @param {?} c0\n     * @param {?} a1\n     * @param {?} c1\n     * @param {?=} a2\n     * @param {?=} c2\n     * @param {?=} a3\n     * @param {?=} c3\n     * @param {?=} a4\n     * @param {?=} c4\n     * @param {?=} a5\n     * @param {?=} c5\n     * @param {?=} a6\n     * @param {?=} c6\n     * @param {?=} a7\n     * @param {?=} c7\n     * @param {?=} a8\n     * @param {?=} c8\n     * @param {?=} a9\n     * @param {?=} c9\n     * @return {?}\n     */\n    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {\n        switch (valueCount) {\n            case 1:\n                return c0 + _toStringWithNull(a1) + c1;\n            case 2:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;\n            case 3:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3;\n            case 4:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4;\n            case 5:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;\n            case 6:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;\n            case 7:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7;\n            case 8:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;\n            case 9:\n                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +\n                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +\n                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;\n            default:\n                throw new Error(\"Does not support more than 9 expressions\");\n        }\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    function _toStringWithNull(v) {\n        return v != null ? v.toString() : '';\n    }\n    /**\n     * @param {?} throwOnChange\n     * @param {?} oldValue\n     * @param {?} newValue\n     * @return {?}\n     */\n    function checkBinding(throwOnChange, oldValue, newValue) {\n        if (throwOnChange) {\n            if (!devModeEqual(oldValue, newValue)) {\n                throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);\n            }\n            return false;\n        }\n        else {\n            return !looseIdentical(oldValue, newValue);\n        }\n    }\n    /**\n     * @param {?} input\n     * @param {?} value\n     * @return {?}\n     */\n    function castByValue(input, value) {\n        return (input);\n    }\n    var /** @type {?} */ EMPTY_ARRAY = [];\n    var /** @type {?} */ EMPTY_MAP = {};\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy1(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0 = UNINITIALIZED;\n        return function (p0) {\n            if (!looseIdentical(v0, p0)) {\n                v0 = p0;\n                result = fn(p0);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy2(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0 = UNINITIALIZED;\n        var /** @type {?} */ v1 = UNINITIALIZED;\n        return function (p0, p1) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {\n                v0 = p0;\n                v1 = p1;\n                result = fn(p0, p1);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy3(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0 = UNINITIALIZED;\n        var /** @type {?} */ v1 = UNINITIALIZED;\n        var /** @type {?} */ v2 = UNINITIALIZED;\n        return function (p0, p1, p2) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                result = fn(p0, p1, p2);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy4(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3;\n        v0 = v1 = v2 = v3 = UNINITIALIZED;\n        return function (p0, p1, p2, p3) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                result = fn(p0, p1, p2, p3);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy5(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4;\n        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                result = fn(p0, p1, p2, p3, p4);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy6(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5;\n        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                result = fn(p0, p1, p2, p3, p4, p5);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy7(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                result = fn(p0, p1, p2, p3, p4, p5, p6);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy8(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy9(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                v8 = p8;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    function pureProxy10(fn) {\n        var /** @type {?} */ result;\n        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8, /** @type {?} */ v9;\n        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;\n        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {\n            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||\n                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||\n                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||\n                !looseIdentical(v9, p9)) {\n                v0 = p0;\n                v1 = p1;\n                v2 = p2;\n                v3 = p3;\n                v4 = p4;\n                v5 = p5;\n                v6 = p6;\n                v7 = p7;\n                v8 = p8;\n                v9 = p9;\n                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);\n            }\n            return result;\n        };\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} el\n     * @param {?} changes\n     * @return {?}\n     */\n    function setBindingDebugInfoForChanges(renderer, el, changes) {\n        Object.keys(changes).forEach(function (propName) {\n            setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);\n        });\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} el\n     * @param {?} propName\n     * @param {?} value\n     * @return {?}\n     */\n    function setBindingDebugInfo(renderer, el, propName, value) {\n        try {\n            renderer.setBindingDebugInfo(el, \"ng-reflect-\" + camelCaseToDashCase(propName), value ? value.toString() : null);\n        }\n        catch (e) {\n            renderer.setBindingDebugInfo(el, \"ng-reflect-\" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');\n        }\n    }\n    var /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    function camelCaseToDashCase(input) {\n        return input.replace(CAMEL_CASE_REGEXP, function () {\n            var m = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                m[_i - 0] = arguments[_i];\n            }\n            return '-' + m[1].toLowerCase();\n        });\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} parentElement\n     * @param {?} name\n     * @param {?} attrs\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {\n        var /** @type {?} */ el = renderer.createElement(parentElement, name, debugInfo);\n        for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n            renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));\n        }\n        return el;\n    }\n    /**\n     * @param {?} renderer\n     * @param {?} elementName\n     * @param {?} attrs\n     * @param {?} rootSelectorOrNode\n     * @param {?=} debugInfo\n     * @return {?}\n     */\n    function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {\n        var /** @type {?} */ hostElement;\n        if (isPresent(rootSelectorOrNode)) {\n            hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);\n            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {\n                renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));\n            }\n            renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);\n        }\n        else {\n            hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);\n        }\n        return hostElement;\n    }\n    /**\n     * @param {?} view\n     * @param {?} element\n     * @param {?} eventNamesAndTargets\n     * @param {?} listener\n     * @return {?}\n     */\n    function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {\n        var /** @type {?} */ disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);\n        for (var /** @type {?} */ i = 0; i < eventNamesAndTargets.length; i += 2) {\n            var /** @type {?} */ eventName = eventNamesAndTargets.get(i);\n            var /** @type {?} */ eventTarget = eventNamesAndTargets.get(i + 1);\n            var /** @type {?} */ disposable = void 0;\n            if (eventTarget) {\n                disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + \":\" + eventName));\n            }\n            else {\n                disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));\n            }\n            disposables.set(i / 2, disposable);\n        }\n        return disposeInlineArray.bind(null, disposables);\n    }\n    /**\n     * @param {?} disposables\n     * @return {?}\n     */\n    function disposeInlineArray(disposables) {\n        for (var /** @type {?} */ i = 0; i < disposables.length; i++) {\n            disposables.get(i)();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    function noop() { }\n    /**\n     * @param {?} length\n     * @return {?}\n     */\n    function createEmptyInlineArray(length) {\n        var /** @type {?} */ ctor;\n        if (length <= 2) {\n            ctor = InlineArray2;\n        }\n        else if (length <= 4) {\n            ctor = InlineArray4;\n        }\n        else if (length <= 8) {\n            ctor = InlineArray8;\n        }\n        else if (length <= 16) {\n            ctor = InlineArray16;\n        }\n        else {\n            ctor = InlineArrayDynamic;\n        }\n        return new ctor(length);\n    }\n    var InlineArray0 = (function () {\n        function InlineArray0() {\n            this.length = 0;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArray0.prototype.get = function (index) { return undefined; };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArray0.prototype.set = function (index, value) { };\n        return InlineArray0;\n    }());\n    var InlineArray2 = (function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         */\n        function InlineArray2(length, _v0, _v1) {\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArray2.prototype.get = function (index) {\n            switch (index) {\n                case 0:\n                    return this._v0;\n                case 1:\n                    return this._v1;\n                default:\n                    return undefined;\n            }\n        };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArray2.prototype.set = function (index, value) {\n            switch (index) {\n                case 0:\n                    this._v0 = value;\n                    break;\n                case 1:\n                    this._v1 = value;\n                    break;\n            }\n        };\n        return InlineArray2;\n    }());\n    var InlineArray4 = (function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         * @param {?=} _v2\n         * @param {?=} _v3\n         */\n        function InlineArray4(length, _v0, _v1, _v2, _v3) {\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n            this._v2 = _v2;\n            this._v3 = _v3;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArray4.prototype.get = function (index) {\n            switch (index) {\n                case 0:\n                    return this._v0;\n                case 1:\n                    return this._v1;\n                case 2:\n                    return this._v2;\n                case 3:\n                    return this._v3;\n                default:\n                    return undefined;\n            }\n        };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArray4.prototype.set = function (index, value) {\n            switch (index) {\n                case 0:\n                    this._v0 = value;\n                    break;\n                case 1:\n                    this._v1 = value;\n                    break;\n                case 2:\n                    this._v2 = value;\n                    break;\n                case 3:\n                    this._v3 = value;\n                    break;\n            }\n        };\n        return InlineArray4;\n    }());\n    var InlineArray8 = (function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         * @param {?=} _v2\n         * @param {?=} _v3\n         * @param {?=} _v4\n         * @param {?=} _v5\n         * @param {?=} _v6\n         * @param {?=} _v7\n         */\n        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n            this._v2 = _v2;\n            this._v3 = _v3;\n            this._v4 = _v4;\n            this._v5 = _v5;\n            this._v6 = _v6;\n            this._v7 = _v7;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArray8.prototype.get = function (index) {\n            switch (index) {\n                case 0:\n                    return this._v0;\n                case 1:\n                    return this._v1;\n                case 2:\n                    return this._v2;\n                case 3:\n                    return this._v3;\n                case 4:\n                    return this._v4;\n                case 5:\n                    return this._v5;\n                case 6:\n                    return this._v6;\n                case 7:\n                    return this._v7;\n                default:\n                    return undefined;\n            }\n        };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArray8.prototype.set = function (index, value) {\n            switch (index) {\n                case 0:\n                    this._v0 = value;\n                    break;\n                case 1:\n                    this._v1 = value;\n                    break;\n                case 2:\n                    this._v2 = value;\n                    break;\n                case 3:\n                    this._v3 = value;\n                    break;\n                case 4:\n                    this._v4 = value;\n                    break;\n                case 5:\n                    this._v5 = value;\n                    break;\n                case 6:\n                    this._v6 = value;\n                    break;\n                case 7:\n                    this._v7 = value;\n                    break;\n            }\n        };\n        return InlineArray8;\n    }());\n    var InlineArray16 = (function () {\n        /**\n         * @param {?} length\n         * @param {?=} _v0\n         * @param {?=} _v1\n         * @param {?=} _v2\n         * @param {?=} _v3\n         * @param {?=} _v4\n         * @param {?=} _v5\n         * @param {?=} _v6\n         * @param {?=} _v7\n         * @param {?=} _v8\n         * @param {?=} _v9\n         * @param {?=} _v10\n         * @param {?=} _v11\n         * @param {?=} _v12\n         * @param {?=} _v13\n         * @param {?=} _v14\n         * @param {?=} _v15\n         */\n        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {\n            this.length = length;\n            this._v0 = _v0;\n            this._v1 = _v1;\n            this._v2 = _v2;\n            this._v3 = _v3;\n            this._v4 = _v4;\n            this._v5 = _v5;\n            this._v6 = _v6;\n            this._v7 = _v7;\n            this._v8 = _v8;\n            this._v9 = _v9;\n            this._v10 = _v10;\n            this._v11 = _v11;\n            this._v12 = _v12;\n            this._v13 = _v13;\n            this._v14 = _v14;\n            this._v15 = _v15;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArray16.prototype.get = function (index) {\n            switch (index) {\n                case 0:\n                    return this._v0;\n                case 1:\n                    return this._v1;\n                case 2:\n                    return this._v2;\n                case 3:\n                    return this._v3;\n                case 4:\n                    return this._v4;\n                case 5:\n                    return this._v5;\n                case 6:\n                    return this._v6;\n                case 7:\n                    return this._v7;\n                case 8:\n                    return this._v8;\n                case 9:\n                    return this._v9;\n                case 10:\n                    return this._v10;\n                case 11:\n                    return this._v11;\n                case 12:\n                    return this._v12;\n                case 13:\n                    return this._v13;\n                case 14:\n                    return this._v14;\n                case 15:\n                    return this._v15;\n                default:\n                    return undefined;\n            }\n        };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArray16.prototype.set = function (index, value) {\n            switch (index) {\n                case 0:\n                    this._v0 = value;\n                    break;\n                case 1:\n                    this._v1 = value;\n                    break;\n                case 2:\n                    this._v2 = value;\n                    break;\n                case 3:\n                    this._v3 = value;\n                    break;\n                case 4:\n                    this._v4 = value;\n                    break;\n                case 5:\n                    this._v5 = value;\n                    break;\n                case 6:\n                    this._v6 = value;\n                    break;\n                case 7:\n                    this._v7 = value;\n                    break;\n                case 8:\n                    this._v8 = value;\n                    break;\n                case 9:\n                    this._v9 = value;\n                    break;\n                case 10:\n                    this._v10 = value;\n                    break;\n                case 11:\n                    this._v11 = value;\n                    break;\n                case 12:\n                    this._v12 = value;\n                    break;\n                case 13:\n                    this._v13 = value;\n                    break;\n                case 14:\n                    this._v14 = value;\n                    break;\n                case 15:\n                    this._v15 = value;\n                    break;\n            }\n        };\n        return InlineArray16;\n    }());\n    var InlineArrayDynamic = (function () {\n        /**\n         * @param {?} length\n         * @param {...?} values\n         */\n        function InlineArrayDynamic(length) {\n            var values = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                values[_i - 1] = arguments[_i];\n            }\n            this.length = length;\n            this._values = values;\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };\n        /**\n         * @param {?} index\n         * @param {?} value\n         * @return {?}\n         */\n        InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };\n        return InlineArrayDynamic;\n    }());\n    var /** @type {?} */ EMPTY_INLINE_ARRAY = new InlineArray0();\n\n\n    var view_utils = Object.freeze({\n        ViewUtils: ViewUtils,\n        createRenderComponentType: createRenderComponentType,\n        addToArray: addToArray,\n        interpolate: interpolate,\n        inlineInterpolate: inlineInterpolate,\n        checkBinding: checkBinding,\n        castByValue: castByValue,\n        EMPTY_ARRAY: EMPTY_ARRAY,\n        EMPTY_MAP: EMPTY_MAP,\n        pureProxy1: pureProxy1,\n        pureProxy2: pureProxy2,\n        pureProxy3: pureProxy3,\n        pureProxy4: pureProxy4,\n        pureProxy5: pureProxy5,\n        pureProxy6: pureProxy6,\n        pureProxy7: pureProxy7,\n        pureProxy8: pureProxy8,\n        pureProxy9: pureProxy9,\n        pureProxy10: pureProxy10,\n        setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,\n        setBindingDebugInfo: setBindingDebugInfo,\n        createRenderElement: createRenderElement,\n        selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,\n        subscribeToRenderElement: subscribeToRenderElement,\n        noop: noop,\n        InlineArray2: InlineArray2,\n        InlineArray4: InlineArray4,\n        InlineArray8: InlineArray8,\n        InlineArray16: InlineArray16,\n        InlineArrayDynamic: InlineArrayDynamic,\n        EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY\n    });\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Represents an instance of a Component created via a {\\@link ComponentFactory}.\n     *\n     * `ComponentRef` provides access to the Component Instance as well other objects related to this\n     * Component Instance and allows you to destroy the Component Instance via the {\\@link #destroy}\n     * method.\n     * \\@stable\n     * @abstract\n     */\n    var ComponentRef = (function () {\n        function ComponentRef() {\n        }\n        /**\n         * Location of the Host Element of this Component Instance.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.location = function () { };\n        /**\n         * The injector on which the component instance exists.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.injector = function () { };\n        /**\n         * The instance of the Component.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.instance = function () { };\n        /**\n         * The {\\@link ViewRef} of the Host View of this Component instance.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.hostView = function () { };\n        /**\n         * The {\\@link ChangeDetectorRef} of the Component instance.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.changeDetectorRef = function () { };\n        /**\n         * The component type.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.componentType = function () { };\n        /**\n         * Destroys the component instance and all of the data structures associated with it.\n         * @abstract\n         * @return {?}\n         */\n        ComponentRef.prototype.destroy = function () { };\n        /**\n         * Allows to register a callback that will be called when the component is destroyed.\n         * @abstract\n         * @param {?} callback\n         * @return {?}\n         */\n        ComponentRef.prototype.onDestroy = function (callback) { };\n        return ComponentRef;\n    }());\n    var ComponentRef_ = (function (_super) {\n        __extends$5(ComponentRef_, _super);\n        /**\n         * @param {?} _index\n         * @param {?} _parentView\n         * @param {?} _nativeElement\n         * @param {?} _component\n         */\n        function ComponentRef_(_index, _parentView, _nativeElement, _component) {\n            _super.call(this);\n            this._index = _index;\n            this._parentView = _parentView;\n            this._nativeElement = _nativeElement;\n            this._component = _component;\n        }\n        Object.defineProperty(ComponentRef_.prototype, \"location\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return new ElementRef(this._nativeElement); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parentView.injector(this._index); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ComponentRef_.prototype, \"instance\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._component; },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef_.prototype, \"hostView\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parentView.ref; },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef_.prototype, \"changeDetectorRef\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._parentView.ref; },\n            enumerable: true,\n            configurable: true\n        });\n        ;\n        Object.defineProperty(ComponentRef_.prototype, \"componentType\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return (this._component.constructor); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };\n        return ComponentRef_;\n    }(ComponentRef));\n    /**\n     * \\@stable\n     */\n    var ComponentFactory = (function () {\n        /**\n         * @param {?} selector\n         * @param {?} _viewClass\n         * @param {?} _componentType\n         */\n        function ComponentFactory(selector, _viewClass, _componentType) {\n            this.selector = selector;\n            this._viewClass = _viewClass;\n            this._componentType = _componentType;\n        }\n        Object.defineProperty(ComponentFactory.prototype, \"componentType\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._componentType; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Creates a new component.\n         * @param {?} injector\n         * @param {?=} projectableNodes\n         * @param {?=} rootSelectorOrNode\n         * @return {?}\n         */\n        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {\n            if (projectableNodes === void 0) { projectableNodes = null; }\n            if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }\n            var /** @type {?} */ vu = injector.get(ViewUtils);\n            if (!projectableNodes) {\n                projectableNodes = [];\n            }\n            var /** @type {?} */ hostView = new this._viewClass(vu, null, null, null);\n            return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);\n        };\n        return ComponentFactory;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * \\@stable\n     */\n    var NoComponentFactoryError = (function (_super) {\n        __extends$8(NoComponentFactoryError, _super);\n        /**\n         * @param {?} component\n         */\n        function NoComponentFactoryError(component) {\n            _super.call(this, \"No component factory found for \" + stringify(component) + \". Did you add it to @NgModule.entryComponents?\");\n            this.component = component;\n        }\n        return NoComponentFactoryError;\n    }(BaseError));\n    var _NullComponentFactoryResolver = (function () {\n        function _NullComponentFactoryResolver() {\n        }\n        /**\n         * @param {?} component\n         * @return {?}\n         */\n        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            throw new NoComponentFactoryError(component);\n        };\n        return _NullComponentFactoryResolver;\n    }());\n    /**\n     * \\@stable\n     * @abstract\n     */\n    var ComponentFactoryResolver = (function () {\n        function ComponentFactoryResolver() {\n        }\n        /**\n         * @abstract\n         * @param {?} component\n         * @return {?}\n         */\n        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };\n        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();\n        return ComponentFactoryResolver;\n    }());\n    var CodegenComponentFactoryResolver = (function () {\n        /**\n         * @param {?} factories\n         * @param {?} _parent\n         */\n        function CodegenComponentFactoryResolver(factories, _parent) {\n            this._parent = _parent;\n            this._factories = new Map();\n            for (var i = 0; i < factories.length; i++) {\n                var factory = factories[i];\n                this._factories.set(factory.componentType, factory);\n            }\n        }\n        /**\n         * @param {?} component\n         * @return {?}\n         */\n        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {\n            var /** @type {?} */ result = this._factories.get(component);\n            if (!result) {\n                result = this._parent.resolveComponentFactory(component);\n            }\n            return result;\n        };\n        return CodegenComponentFactoryResolver;\n    }());\n\n    var /** @type {?} */ trace;\n    var /** @type {?} */ events;\n    /**\n     * @return {?}\n     */\n    function detectWTF() {\n        var /** @type {?} */ wtf = ((global$1) /** TODO #9100 */)['wtf'];\n        if (wtf) {\n            trace = wtf['trace'];\n            if (trace) {\n                events = trace['events'];\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * @param {?} signature\n     * @param {?=} flags\n     * @return {?}\n     */\n    function createScope(signature, flags) {\n        if (flags === void 0) { flags = null; }\n        return events.createScope(signature, flags);\n    }\n    /**\n     * @param {?} scope\n     * @param {?=} returnValue\n     * @return {?}\n     */\n    function leave(scope, returnValue) {\n        trace.leaveScope(scope, returnValue);\n        return returnValue;\n    }\n    /**\n     * @param {?} rangeType\n     * @param {?} action\n     * @return {?}\n     */\n    function startTimeRange(rangeType, action) {\n        return trace.beginTimeRange(rangeType, action);\n    }\n    /**\n     * @param {?} range\n     * @return {?}\n     */\n    function endTimeRange(range) {\n        trace.endTimeRange(range);\n    }\n\n    /**\n     * True if WTF is enabled.\n     */\n    var /** @type {?} */ wtfEnabled = detectWTF();\n    /**\n     * @param {?=} arg0\n     * @param {?=} arg1\n     * @return {?}\n     */\n    function noopScope(arg0, arg1) {\n        return null;\n    }\n    /**\n     * Create trace scope.\n     *\n     * Scopes must be strictly nested and are analogous to stack frames, but\n     * do not have to follow the stack frames. Instead it is recommended that they follow logical\n     * nesting. You may want to use\n     * [Event\n     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)\n     * as they are defined in WTF.\n     *\n     * Used to mark scope entry. The return value is used to leave the scope.\n     *\n     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n     *\n     *     someMethod() {\n     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n     *        // DO SOME WORK HERE\n     *        return wtfLeave(s, 123); // Return value 123\n     *     }\n     *\n     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can\n     * negatively impact the performance of your application. For this reason we recommend that\n     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and\n     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to\n     * exception, will produce incorrect trace, but presence of exception signifies logic error which\n     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that\n     * an exception is expected during normal execution while profiling.\n     *\n     * @experimental\n     */\n    var /** @type {?} */ wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };\n    /**\n     * Used to mark end of Scope.\n     *\n     * - `scope` to end.\n     * - `returnValue` (optional) to be passed to the WTF.\n     *\n     * Returns the `returnValue for easy chaining.\n     * @experimental\n     */\n    var /** @type {?} */ wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };\n    /**\n     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.\n     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been\n     * enabled.\n     *\n     *     someMethod() {\n     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n     *        var future = new Future.delay(5).then((_) {\n     *          wtfEndTimeRange(s);\n     *        });\n     *     }\n     * @experimental\n     */\n    var /** @type {?} */ wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };\n    /**\n     * Ends a async time range operation.\n     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been\n     * enabled.\n     * @experimental\n     */\n    var /** @type {?} */ wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };\n\n    /**\n     * The Testability service provides testing hooks that can be accessed from\n     * the browser and by services such as Protractor. Each bootstrapped Angular\n     * application on the page will have an instance of Testability.\n     * \\@experimental\n     */\n    var Testability = (function () {\n        /**\n         * @param {?} _ngZone\n         */\n        function Testability(_ngZone) {\n            this._ngZone = _ngZone;\n            /** @internal */\n            this._pendingCount = 0;\n            /** @internal */\n            this._isZoneStable = true;\n            /**\n             * Whether any work was done since the last 'whenStable' callback. This is\n             * useful to detect if this could have potentially destabilized another\n             * component while it is stabilizing.\n             * @internal\n             */\n            this._didWork = false;\n            /** @internal */\n            this._callbacks = [];\n            this._watchAngularEvents();\n        }\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        Testability.prototype._watchAngularEvents = function () {\n            var _this = this;\n            this._ngZone.onUnstable.subscribe({\n                next: function () {\n                    _this._didWork = true;\n                    _this._isZoneStable = false;\n                }\n            });\n            this._ngZone.runOutsideAngular(function () {\n                _this._ngZone.onStable.subscribe({\n                    next: function () {\n                        NgZone.assertNotInAngularZone();\n                        scheduleMicroTask(function () {\n                            _this._isZoneStable = true;\n                            _this._runCallbacksIfReady();\n                        });\n                    }\n                });\n            });\n        };\n        /**\n         * @return {?}\n         */\n        Testability.prototype.increasePendingRequestCount = function () {\n            this._pendingCount += 1;\n            this._didWork = true;\n            return this._pendingCount;\n        };\n        /**\n         * @return {?}\n         */\n        Testability.prototype.decreasePendingRequestCount = function () {\n            this._pendingCount -= 1;\n            if (this._pendingCount < 0) {\n                throw new Error('pending async requests below zero');\n            }\n            this._runCallbacksIfReady();\n            return this._pendingCount;\n        };\n        /**\n         * @return {?}\n         */\n        Testability.prototype.isStable = function () {\n            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;\n        };\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        Testability.prototype._runCallbacksIfReady = function () {\n            var _this = this;\n            if (this.isStable()) {\n                // Schedules the call backs in a new frame so that it is always async.\n                scheduleMicroTask(function () {\n                    while (_this._callbacks.length !== 0) {\n                        (_this._callbacks.pop())(_this._didWork);\n                    }\n                    _this._didWork = false;\n                });\n            }\n            else {\n                // Not Ready\n                this._didWork = true;\n            }\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        Testability.prototype.whenStable = function (callback) {\n            this._callbacks.push(callback);\n            this._runCallbacksIfReady();\n        };\n        /**\n         * @return {?}\n         */\n        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };\n        /**\n         * @deprecated use findProviders\n         * @param {?} using\n         * @param {?} provider\n         * @param {?} exactMatch\n         * @return {?}\n         */\n        Testability.prototype.findBindings = function (using, provider, exactMatch) {\n            // TODO(juliemr): implement.\n            return [];\n        };\n        /**\n         * @param {?} using\n         * @param {?} provider\n         * @param {?} exactMatch\n         * @return {?}\n         */\n        Testability.prototype.findProviders = function (using, provider, exactMatch) {\n            // TODO(juliemr): implement.\n            return [];\n        };\n        Testability.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        Testability.ctorParameters = function () { return [\n            { type: NgZone, },\n        ]; };\n        return Testability;\n    }());\n    /**\n     * A global registry of {\\@link Testability} instances for specific elements.\n     * \\@experimental\n     */\n    var TestabilityRegistry = (function () {\n        function TestabilityRegistry() {\n            /** @internal */\n            this._applications = new Map();\n            _testabilityGetter.addToWindow(this);\n        }\n        /**\n         * @param {?} token\n         * @param {?} testability\n         * @return {?}\n         */\n        TestabilityRegistry.prototype.registerApplication = function (token, testability) {\n            this._applications.set(token, testability);\n        };\n        /**\n         * @param {?} elem\n         * @return {?}\n         */\n        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };\n        /**\n         * @return {?}\n         */\n        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };\n        /**\n         * @return {?}\n         */\n        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };\n        /**\n         * @param {?} elem\n         * @param {?=} findInAncestors\n         * @return {?}\n         */\n        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {\n            if (findInAncestors === void 0) { findInAncestors = true; }\n            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);\n        };\n        TestabilityRegistry.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        TestabilityRegistry.ctorParameters = function () { return []; };\n        return TestabilityRegistry;\n    }());\n    var _NoopGetTestability = (function () {\n        function _NoopGetTestability() {\n        }\n        /**\n         * @param {?} registry\n         * @return {?}\n         */\n        _NoopGetTestability.prototype.addToWindow = function (registry) { };\n        /**\n         * @param {?} registry\n         * @param {?} elem\n         * @param {?} findInAncestors\n         * @return {?}\n         */\n        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {\n            return null;\n        };\n        return _NoopGetTestability;\n    }());\n    /**\n     * Set the {\\@link GetTestability} implementation used by the Angular testing framework.\n     * \\@experimental\n     * @param {?} getter\n     * @return {?}\n     */\n    function setTestabilityGetter(getter) {\n        _testabilityGetter = getter;\n    }\n    var /** @type {?} */ _testabilityGetter = new _NoopGetTestability();\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ _devMode = true;\n    var /** @type {?} */ _runModeLocked = false;\n    var /** @type {?} */ _platform;\n    /**\n     * Disable Angular's development mode, which turns off assertions and other\n     * checks within the framework.\n     *\n     * One important assertion this disables verifies that a change detection pass\n     * does not result in additional changes to any bindings (also known as\n     * unidirectional data flow).\n     *\n     * \\@stable\n     * @return {?}\n     */\n    function enableProdMode() {\n        if (_runModeLocked) {\n            throw new Error('Cannot enable prod mode after platform setup.');\n        }\n        _devMode = false;\n    }\n    /**\n     * Returns whether Angular is in development mode. After called once,\n     * the value is locked and won't change any more.\n     *\n     * By default, this is true, unless a user calls `enableProdMode` before calling this.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @return {?}\n     */\n    function isDevMode() {\n        _runModeLocked = true;\n        return _devMode;\n    }\n    /**\n     * A token for third-party components that can register themselves with NgProbe.\n     *\n     * \\@experimental\n     */\n    var NgProbeToken = (function () {\n        /**\n         * @param {?} name\n         * @param {?} token\n         */\n        function NgProbeToken(name, token) {\n            this.name = name;\n            this.token = token;\n        }\n        return NgProbeToken;\n    }());\n    /**\n     * Creates a platform.\n     * Platforms have to be eagerly created via this function.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @param {?} injector\n     * @return {?}\n     */\n    function createPlatform(injector) {\n        if (_platform && !_platform.destroyed) {\n            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');\n        }\n        _platform = injector.get(PlatformRef);\n        var /** @type {?} */ inits = (injector.get(PLATFORM_INITIALIZER, null));\n        if (inits)\n            inits.forEach(function (init) { return init(); });\n        return _platform;\n    }\n    /**\n     * Creates a factory for a platform\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @param {?} parentPlatformFactory\n     * @param {?} name\n     * @param {?=} providers\n     * @return {?}\n     */\n    function createPlatformFactory(parentPlatformFactory, name, providers) {\n        if (providers === void 0) { providers = []; }\n        var /** @type {?} */ marker = new OpaqueToken(\"Platform: \" + name);\n        return function (extraProviders) {\n            if (extraProviders === void 0) { extraProviders = []; }\n            if (!getPlatform()) {\n                if (parentPlatformFactory) {\n                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));\n                }\n                else {\n                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));\n                }\n            }\n            return assertPlatform(marker);\n        };\n    }\n    /**\n     * Checks that there currently is a platform\n     * which contains the given token as a provider.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @param {?} requiredToken\n     * @return {?}\n     */\n    function assertPlatform(requiredToken) {\n        var /** @type {?} */ platform = getPlatform();\n        if (!platform) {\n            throw new Error('No platform exists!');\n        }\n        if (!platform.injector.get(requiredToken, null)) {\n            throw new Error('A platform with a different configuration has been created. Please destroy it first.');\n        }\n        return platform;\n    }\n    /**\n     * Destroy the existing platform.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @return {?}\n     */\n    function destroyPlatform() {\n        if (_platform && !_platform.destroyed) {\n            _platform.destroy();\n        }\n    }\n    /**\n     * Returns the current platform.\n     *\n     * \\@experimental APIs related to application bootstrap are currently under review.\n     * @return {?}\n     */\n    function getPlatform() {\n        return _platform && !_platform.destroyed ? _platform : null;\n    }\n    /**\n     * The Angular platform is the entry point for Angular on a web page. Each page\n     * has exactly one platform, and services (such as reflection) which are common\n     * to every Angular application running on the page are bound in its scope.\n     *\n     * A page's platform is initialized implicitly when {\\@link bootstrap}() is called, or\n     * explicitly by calling {\\@link createPlatform}().\n     *\n     * \\@stable\n     * @abstract\n     */\n    var PlatformRef = (function () {\n        function PlatformRef() {\n        }\n        /**\n         * Creates an instance of an `\\@NgModule` for the given platform\n         * for offline compilation.\n         *\n         * ## Simple Example\n         *\n         * ```typescript\n         * my_module.ts:\n         *\n         * \\@NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * main.ts:\n         * import {MyModuleNgFactory} from './my_module.ngfactory';\n         * import {platformBrowser} from '\\@angular/platform-browser';\n         *\n         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n         * ```\n         *\n         * \\@experimental APIs related to application bootstrap are currently under review.\n         * @abstract\n         * @param {?} moduleFactory\n         * @return {?}\n         */\n        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };\n        /**\n         * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n         *\n         * ## Simple Example\n         *\n         * ```typescript\n         * \\@NgModule({\n         *   imports: [BrowserModule]\n         * })\n         * class MyModule {}\n         *\n         * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n         * ```\n         * \\@stable\n         * @abstract\n         * @param {?} moduleType\n         * @param {?=} compilerOptions\n         * @return {?}\n         */\n        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };\n        /**\n         * Register a listener to be called when the platform is disposed.\n         * @abstract\n         * @param {?} callback\n         * @return {?}\n         */\n        PlatformRef.prototype.onDestroy = function (callback) { };\n        /**\n         * Retrieve the platform {\\@link Injector}, which is the parent injector for\n         * every Angular application on the page and provides singleton providers.\n         * @abstract\n         * @return {?}\n         */\n        PlatformRef.prototype.injector = function () { };\n        /**\n         * Destroy the Angular platform and all Angular applications on the page.\n         * @abstract\n         * @return {?}\n         */\n        PlatformRef.prototype.destroy = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        PlatformRef.prototype.destroyed = function () { };\n        return PlatformRef;\n    }());\n    /**\n     * @param {?} errorHandler\n     * @param {?} callback\n     * @return {?}\n     */\n    function _callAndReportToErrorHandler(errorHandler, callback) {\n        try {\n            var /** @type {?} */ result = callback();\n            if (isPromise(result)) {\n                return result.catch(function (e) {\n                    errorHandler.handleError(e);\n                    // rethrow as the exception handler might not do it\n                    throw e;\n                });\n            }\n            return result;\n        }\n        catch (e) {\n            errorHandler.handleError(e);\n            // rethrow as the exception handler might not do it\n            throw e;\n        }\n    }\n    var PlatformRef_ = (function (_super) {\n        __extends$3(PlatformRef_, _super);\n        /**\n         * @param {?} _injector\n         */\n        function PlatformRef_(_injector) {\n            _super.call(this);\n            this._injector = _injector;\n            this._modules = [];\n            this._destroyListeners = [];\n            this._destroyed = false;\n        }\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        Object.defineProperty(PlatformRef_.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(PlatformRef_.prototype, \"destroyed\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        PlatformRef_.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error('The platform has already been destroyed!');\n            }\n            this._modules.slice().forEach(function (module) { return module.destroy(); });\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n            this._destroyed = true;\n        };\n        /**\n         * @param {?} moduleFactory\n         * @return {?}\n         */\n        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {\n            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);\n        };\n        /**\n         * @param {?} moduleFactory\n         * @param {?} ngZone\n         * @return {?}\n         */\n        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {\n            var _this = this;\n            // Note: We need to create the NgZone _before_ we instantiate the module,\n            // as instantiating the module creates some providers eagerly.\n            // So we create a mini parent injector that just contains the new NgZone and\n            // pass that as parent to the NgModuleFactory.\n            if (!ngZone)\n                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });\n            // Attention: Don't use ApplicationRef.run here,\n            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n            return ngZone.run(function () {\n                var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);\n                var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));\n                var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);\n                if (!exceptionHandler) {\n                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n                }\n                moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });\n                ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });\n                return _callAndReportToErrorHandler(exceptionHandler, function () {\n                    var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);\n                    return initStatus.donePromise.then(function () {\n                        _this._moduleDoBootstrap(moduleRef);\n                        return moduleRef;\n                    });\n                });\n            });\n        };\n        /**\n         * @param {?} moduleType\n         * @param {?=} compilerOptions\n         * @return {?}\n         */\n        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {\n            if (compilerOptions === void 0) { compilerOptions = []; }\n            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);\n        };\n        /**\n         * @param {?} moduleType\n         * @param {?=} compilerOptions\n         * @param {?} ngZone\n         * @param {?=} componentFactoryCallback\n         * @return {?}\n         */\n        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {\n            var _this = this;\n            if (compilerOptions === void 0) { compilerOptions = []; }\n            var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);\n            var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);\n            // ugly internal api hack: generate host component factories for all declared components and\n            // pass the factories into the callback - this is used by UpdateAdapter to get hold of all\n            // factories.\n            if (componentFactoryCallback) {\n                return compiler.compileModuleAndAllComponentsAsync(moduleType)\n                    .then(function (_a) {\n                    var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;\n                    componentFactoryCallback(componentFactories);\n                    return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);\n                });\n            }\n            return compiler.compileModuleAsync(moduleType)\n                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });\n        };\n        /**\n         * @param {?} moduleRef\n         * @return {?}\n         */\n        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {\n            var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);\n            if (moduleRef.bootstrapFactories.length > 0) {\n                moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });\n            }\n            else if (moduleRef.instance.ngDoBootstrap) {\n                moduleRef.instance.ngDoBootstrap(appRef);\n            }\n            else {\n                throw new Error((\"The module \" + stringify(moduleRef.instance.constructor) + \" was bootstrapped, but it does not declare \\\"@NgModule.bootstrap\\\" components nor a \\\"ngDoBootstrap\\\" method. \") +\n                    \"Please define one of these.\");\n            }\n            this._modules.push(moduleRef);\n        };\n        PlatformRef_.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        PlatformRef_.ctorParameters = function () { return [\n            { type: Injector, },\n        ]; };\n        return PlatformRef_;\n    }(PlatformRef));\n    /**\n     * A reference to an Angular application running on a page.\n     *\n     * For more about Angular applications, see the documentation for {\\@link bootstrap}.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var ApplicationRef = (function () {\n        function ApplicationRef() {\n        }\n        /**\n         * Bootstrap a new component at the root level of the application.\n         *\n         * ### Bootstrap process\n         *\n         * When bootstrapping a new root component into an application, Angular mounts the\n         * specified application component onto DOM elements identified by the [componentType]'s\n         * selector and kicks off automatic change detection to finish initializing the component.\n         *\n         * ### Example\n         * {\\@example core/ts/platform/platform.ts region='longform'}\n         * @abstract\n         * @param {?} componentFactory\n         * @return {?}\n         */\n        ApplicationRef.prototype.bootstrap = function (componentFactory) { };\n        /**\n         * Invoke this method to explicitly process change detection and its side-effects.\n         *\n         * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n         * further changes are detected. If additional changes are picked up during this second cycle,\n         * bindings in the app have side-effects that cannot be resolved in a single change detection\n         * pass.\n         * In this case, Angular throws an error, since an Angular application can only have one change\n         * detection pass during which all change detection must complete.\n         * @abstract\n         * @return {?}\n         */\n        ApplicationRef.prototype.tick = function () { };\n        /**\n         * Get a list of component types registered to this application.\n         * This list is populated even before the component is created.\n         * @abstract\n         * @return {?}\n         */\n        ApplicationRef.prototype.componentTypes = function () { };\n        /**\n         * Get a list of components registered to this application.\n         * @abstract\n         * @return {?}\n         */\n        ApplicationRef.prototype.components = function () { };\n        /**\n         * Attaches a view so that it will be dirty checked.\n         * The view will be automatically detached when it is destroyed.\n         * This will throw if the view is already attached to a ViewContainer.\n         * @abstract\n         * @param {?} view\n         * @return {?}\n         */\n        ApplicationRef.prototype.attachView = function (view) { };\n        /**\n         * Detaches a view from dirty checking again.\n         * @abstract\n         * @param {?} view\n         * @return {?}\n         */\n        ApplicationRef.prototype.detachView = function (view) { };\n        /**\n         * Returns the number of attached views.\n         * @abstract\n         * @return {?}\n         */\n        ApplicationRef.prototype.viewCount = function () { };\n        return ApplicationRef;\n    }());\n    var ApplicationRef_ = (function (_super) {\n        __extends$3(ApplicationRef_, _super);\n        /**\n         * @param {?} _zone\n         * @param {?} _console\n         * @param {?} _injector\n         * @param {?} _exceptionHandler\n         * @param {?} _componentFactoryResolver\n         * @param {?} _initStatus\n         * @param {?} _testabilityRegistry\n         * @param {?} _testability\n         */\n        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {\n            var _this = this;\n            _super.call(this);\n            this._zone = _zone;\n            this._console = _console;\n            this._injector = _injector;\n            this._exceptionHandler = _exceptionHandler;\n            this._componentFactoryResolver = _componentFactoryResolver;\n            this._initStatus = _initStatus;\n            this._testabilityRegistry = _testabilityRegistry;\n            this._testability = _testability;\n            this._bootstrapListeners = [];\n            this._rootComponents = [];\n            this._rootComponentTypes = [];\n            this._views = [];\n            this._runningTick = false;\n            this._enforceNoNewChanges = false;\n            this._enforceNoNewChanges = isDevMode();\n            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });\n        }\n        /**\n         * @param {?} viewRef\n         * @return {?}\n         */\n        ApplicationRef_.prototype.attachView = function (viewRef) {\n            var /** @type {?} */ view = ((viewRef)).internalView;\n            this._views.push(view);\n            view.attachToAppRef(this);\n        };\n        /**\n         * @param {?} viewRef\n         * @return {?}\n         */\n        ApplicationRef_.prototype.detachView = function (viewRef) {\n            var /** @type {?} */ view = ((viewRef)).internalView;\n            ListWrapper.remove(this._views, view);\n            view.detach();\n        };\n        /**\n         * @param {?} componentOrFactory\n         * @return {?}\n         */\n        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {\n            var _this = this;\n            if (!this._initStatus.done) {\n                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n            }\n            var /** @type {?} */ componentFactory;\n            if (componentOrFactory instanceof ComponentFactory) {\n                componentFactory = componentOrFactory;\n            }\n            else {\n                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n            }\n            this._rootComponentTypes.push(componentFactory.componentType);\n            var /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);\n            compRef.onDestroy(function () { _this._unloadComponent(compRef); });\n            var /** @type {?} */ testability = compRef.injector.get(Testability, null);\n            if (testability) {\n                compRef.injector.get(TestabilityRegistry)\n                    .registerApplication(compRef.location.nativeElement, testability);\n            }\n            this._loadComponent(compRef);\n            if (isDevMode()) {\n                this._console.log(\"Angular is running in the development mode. Call enableProdMode() to enable the production mode.\");\n            }\n            return compRef;\n        };\n        /**\n         * @param {?} componentRef\n         * @return {?}\n         */\n        ApplicationRef_.prototype._loadComponent = function (componentRef) {\n            this.attachView(componentRef.hostView);\n            this.tick();\n            this._rootComponents.push(componentRef);\n            // Get the listeners lazily to prevent DI cycles.\n            var /** @type {?} */ listeners = (this._injector.get(APP_BOOTSTRAP_LISTENER, [])\n                .concat(this._bootstrapListeners));\n            listeners.forEach(function (listener) { return listener(componentRef); });\n        };\n        /**\n         * @param {?} componentRef\n         * @return {?}\n         */\n        ApplicationRef_.prototype._unloadComponent = function (componentRef) {\n            this.detachView(componentRef.hostView);\n            ListWrapper.remove(this._rootComponents, componentRef);\n        };\n        /**\n         * @return {?}\n         */\n        ApplicationRef_.prototype.tick = function () {\n            if (this._runningTick) {\n                throw new Error('ApplicationRef.tick is called recursively');\n            }\n            var /** @type {?} */ scope = ApplicationRef_._tickScope();\n            try {\n                this._runningTick = true;\n                this._views.forEach(function (view) { return view.ref.detectChanges(); });\n                if (this._enforceNoNewChanges) {\n                    this._views.forEach(function (view) { return view.ref.checkNoChanges(); });\n                }\n            }\n            finally {\n                this._runningTick = false;\n                wtfLeave(scope);\n            }\n        };\n        /**\n         * @return {?}\n         */\n        ApplicationRef_.prototype.ngOnDestroy = function () {\n            // TODO(alxhub): Dispose of the NgZone.\n            this._views.slice().forEach(function (view) { return view.destroy(); });\n        };\n        Object.defineProperty(ApplicationRef_.prototype, \"viewCount\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._views.length; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ApplicationRef_.prototype, \"componentTypes\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._rootComponentTypes; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ApplicationRef_.prototype, \"components\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._rootComponents; },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');\n        ApplicationRef_.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        ApplicationRef_.ctorParameters = function () { return [\n            { type: NgZone, },\n            { type: Console, },\n            { type: Injector, },\n            { type: ErrorHandler, },\n            { type: ComponentFactoryResolver, },\n            { type: ApplicationInitStatus, },\n            { type: TestabilityRegistry, decorators: [{ type: Optional },] },\n            { type: Testability, decorators: [{ type: Optional },] },\n        ]; };\n        return ApplicationRef_;\n    }(ApplicationRef));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Represents an instance of an NgModule created via a {\\@link NgModuleFactory}.\n     *\n     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this\n     * NgModule Instance.\n     *\n     * \\@stable\n     * @abstract\n     */\n    var NgModuleRef = (function () {\n        function NgModuleRef() {\n        }\n        /**\n         * The injector that contains all of the providers of the NgModule.\n         * @abstract\n         * @return {?}\n         */\n        NgModuleRef.prototype.injector = function () { };\n        /**\n         * The ComponentFactoryResolver to get hold of the ComponentFactories\n         * declared in the `entryComponents` property of the module.\n         * @abstract\n         * @return {?}\n         */\n        NgModuleRef.prototype.componentFactoryResolver = function () { };\n        /**\n         * The NgModule instance.\n         * @abstract\n         * @return {?}\n         */\n        NgModuleRef.prototype.instance = function () { };\n        /**\n         * Destroys the module instance and all of the data structures associated with it.\n         * @abstract\n         * @return {?}\n         */\n        NgModuleRef.prototype.destroy = function () { };\n        /**\n         * Allows to register a callback that will be called when the module is destroyed.\n         * @abstract\n         * @param {?} callback\n         * @return {?}\n         */\n        NgModuleRef.prototype.onDestroy = function (callback) { };\n        return NgModuleRef;\n    }());\n    /**\n     * \\@experimental\n     */\n    var NgModuleFactory = (function () {\n        /**\n         * @param {?} _injectorClass\n         * @param {?} _moduleType\n         */\n        function NgModuleFactory(_injectorClass, _moduleType) {\n            this._injectorClass = _injectorClass;\n            this._moduleType = _moduleType;\n        }\n        Object.defineProperty(NgModuleFactory.prototype, \"moduleType\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._moduleType; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} parentInjector\n         * @return {?}\n         */\n        NgModuleFactory.prototype.create = function (parentInjector) {\n            if (!parentInjector) {\n                parentInjector = Injector.NULL;\n            }\n            var /** @type {?} */ instance = new this._injectorClass(parentInjector);\n            instance.create();\n            return instance;\n        };\n        return NgModuleFactory;\n    }());\n    var /** @type {?} */ _UNDEFINED = new Object();\n    /**\n     * @abstract\n     */\n    var NgModuleInjector = (function (_super) {\n        __extends$9(NgModuleInjector, _super);\n        /**\n         * @param {?} parent\n         * @param {?} factories\n         * @param {?} bootstrapFactories\n         */\n        function NgModuleInjector(parent, factories, bootstrapFactories) {\n            _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));\n            this.parent = parent;\n            this.bootstrapFactories = bootstrapFactories;\n            this._destroyListeners = [];\n            this._destroyed = false;\n        }\n        /**\n         * @return {?}\n         */\n        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        NgModuleInjector.prototype.createInternal = function () { };\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        NgModuleInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            if (token === Injector || token === ComponentFactoryResolver) {\n                return this;\n            }\n            var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);\n            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;\n        };\n        /**\n         * @abstract\n         * @param {?} token\n         * @param {?} notFoundValue\n         * @return {?}\n         */\n        NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };\n        Object.defineProperty(NgModuleInjector.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModuleInjector.prototype, \"componentFactoryResolver\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        NgModuleInjector.prototype.destroy = function () {\n            if (this._destroyed) {\n                throw new Error(\"The ng module \" + stringify(this.instance.constructor) + \" has already been destroyed.\");\n            }\n            this._destroyed = true;\n            this.destroyInternal();\n            this._destroyListeners.forEach(function (listener) { return listener(); });\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        NgModuleInjector.prototype.destroyInternal = function () { };\n        return NgModuleInjector;\n    }(CodegenComponentFactoryResolver));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to load ng module factories.\n     * \\@stable\n     * @abstract\n     */\n    var NgModuleFactoryLoader = (function () {\n        function NgModuleFactoryLoader() {\n        }\n        /**\n         * @abstract\n         * @param {?} path\n         * @return {?}\n         */\n        NgModuleFactoryLoader.prototype.load = function (path) { };\n        return NgModuleFactoryLoader;\n    }());\n    var /** @type {?} */ moduleFactories = new Map();\n    /**\n     * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n     * \\@experimental\n     * @param {?} id\n     * @param {?} factory\n     * @return {?}\n     */\n    function registerModuleFactory(id, factory) {\n        var /** @type {?} */ existing = moduleFactories.get(id);\n        if (existing) {\n            throw new Error(\"Duplicate module registered for \" + id + \" - \" + existing.moduleType.name + \" vs \" + factory.moduleType.name);\n        }\n        moduleFactories.set(id, factory);\n    }\n    /**\n     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n     * cannot be found.\n     * \\@experimental\n     * @param {?} id\n     * @return {?}\n     */\n    function getModuleFactory(id) {\n        var /** @type {?} */ factory = moduleFactories.get(id);\n        if (!factory)\n            throw new Error(\"No module with ID \" + id + \" loaded\");\n        return factory;\n    }\n\n    /**\n     * An unmodifiable list of items that Angular keeps up to date when the state\n     * of the application changes.\n     *\n     * The type of object that {\\@link Query} and {\\@link ViewQueryMetadata} provide.\n     *\n     * Implements an iterable interface, therefore it can be used in both ES6\n     * javascript `for (var i of items)` loops as well as in Angular templates with\n     * `*ngFor=\"let i of myList\"`.\n     *\n     * Changes can be observed by subscribing to the changes `Observable`.\n     *\n     * NOTE: In the future this class will implement an `Observable` interface.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))\n     * ```typescript\n     * \\@Component({...})\n     * class Container {\n     *   \\@ViewChildren(Item) items:QueryList<Item>;\n     * }\n     * ```\n     * \\@stable\n     */\n    var QueryList = (function () {\n        function QueryList() {\n            this._dirty = true;\n            this._results = [];\n            this._emitter = new EventEmitter();\n        }\n        Object.defineProperty(QueryList.prototype, \"changes\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._emitter; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryList.prototype, \"length\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._results.length; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryList.prototype, \"first\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._results[0]; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(QueryList.prototype, \"last\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._results[this.length - 1]; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * See\n         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n         * @param {?} fn\n         * @return {?}\n         */\n        QueryList.prototype.map = function (fn) { return this._results.map(fn); };\n        /**\n         * See\n         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n         * @param {?} fn\n         * @return {?}\n         */\n        QueryList.prototype.filter = function (fn) {\n            return this._results.filter(fn);\n        };\n        /**\n         * See\n         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n         * @param {?} fn\n         * @return {?}\n         */\n        QueryList.prototype.find = function (fn) { return this._results.find(fn); };\n        /**\n         * See\n         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n         * @param {?} fn\n         * @param {?} init\n         * @return {?}\n         */\n        QueryList.prototype.reduce = function (fn, init) {\n            return this._results.reduce(fn, init);\n        };\n        /**\n         * See\n         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n         * @param {?} fn\n         * @return {?}\n         */\n        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };\n        /**\n         * See\n         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n         * @param {?} fn\n         * @return {?}\n         */\n        QueryList.prototype.some = function (fn) {\n            return this._results.some(fn);\n        };\n        /**\n         * @return {?}\n         */\n        QueryList.prototype.toArray = function () { return this._results.slice(); };\n        /**\n         * @return {?}\n         */\n        QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };\n        /**\n         * @return {?}\n         */\n        QueryList.prototype.toString = function () { return this._results.toString(); };\n        /**\n         * @param {?} res\n         * @return {?}\n         */\n        QueryList.prototype.reset = function (res) {\n            this._results = ListWrapper.flatten(res);\n            this._dirty = false;\n        };\n        /**\n         * @return {?}\n         */\n        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };\n        /**\n         * internal\n         * @return {?}\n         */\n        QueryList.prototype.setDirty = function () { this._dirty = true; };\n        Object.defineProperty(QueryList.prototype, \"dirty\", {\n            /**\n             * internal\n             * @return {?}\n             */\n            get: function () { return this._dirty; },\n            enumerable: true,\n            configurable: true\n        });\n        return QueryList;\n    }());\n\n    var /** @type {?} */ _SEPARATOR = '#';\n    var /** @type {?} */ FACTORY_CLASS_SUFFIX = 'NgFactory';\n    /**\n     * Configuration for SystemJsNgModuleLoader.\n     * token.\n     *\n     * \\@experimental\n     * @abstract\n     */\n    var SystemJsNgModuleLoaderConfig = (function () {\n        function SystemJsNgModuleLoaderConfig() {\n        }\n        return SystemJsNgModuleLoaderConfig;\n    }());\n    var /** @type {?} */ DEFAULT_CONFIG = {\n        factoryPathPrefix: '',\n        factoryPathSuffix: '.ngfactory',\n    };\n    /**\n     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory\n     * \\@experimental\n     */\n    var SystemJsNgModuleLoader = (function () {\n        /**\n         * @param {?} _compiler\n         * @param {?=} config\n         */\n        function SystemJsNgModuleLoader(_compiler, config) {\n            this._compiler = _compiler;\n            this._config = config || DEFAULT_CONFIG;\n        }\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n        SystemJsNgModuleLoader.prototype.load = function (path) {\n            var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;\n            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);\n        };\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {\n            var _this = this;\n            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n            if (exportName === undefined) {\n                exportName = 'default';\n            }\n            return System.import(module)\n                .then(function (module) { return module[exportName]; })\n                .then(function (type) { return checkNotEmpty(type, module, exportName); })\n                .then(function (type) { return _this._compiler.compileModuleAsync(type); });\n        };\n        /**\n         * @param {?} path\n         * @return {?}\n         */\n        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {\n            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];\n            var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;\n            if (exportName === undefined) {\n                exportName = 'default';\n                factoryClassSuffix = '';\n            }\n            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)\n                .then(function (module) { return module[exportName + factoryClassSuffix]; })\n                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });\n        };\n        SystemJsNgModuleLoader.decorators = [\n            { type: Injectable },\n        ];\n        /** @nocollapse */\n        SystemJsNgModuleLoader.ctorParameters = function () { return [\n            { type: Compiler, },\n            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },\n        ]; };\n        return SystemJsNgModuleLoader;\n    }());\n    /**\n     * @param {?} value\n     * @param {?} modulePath\n     * @param {?} exportName\n     * @return {?}\n     */\n    function checkNotEmpty(value, modulePath, exportName) {\n        if (!value) {\n            throw new Error(\"Cannot find '\" + exportName + \"' in '\" + modulePath + \"'\");\n        }\n        return value;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Represents an Embedded Template that can be used to instantiate Embedded Views.\n     *\n     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or\n     * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the\n     * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the\n     * `TemplateRef` from a Component or a Directive via {\\@link Query}.\n     *\n     * To instantiate Embedded Views based on a Template, use\n     * {\\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the\n     * View Container.\n     * \\@stable\n     * @abstract\n     */\n    var TemplateRef = (function () {\n        function TemplateRef() {\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        TemplateRef.prototype.elementRef = function () { };\n        /**\n         * @abstract\n         * @param {?} context\n         * @return {?}\n         */\n        TemplateRef.prototype.createEmbeddedView = function (context) { };\n        return TemplateRef;\n    }());\n    var TemplateRef_ = (function (_super) {\n        __extends$10(TemplateRef_, _super);\n        /**\n         * @param {?} _parentView\n         * @param {?} _nodeIndex\n         * @param {?} _nativeElement\n         */\n        function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {\n            _super.call(this);\n            this._parentView = _parentView;\n            this._nodeIndex = _nodeIndex;\n            this._nativeElement = _nativeElement;\n        }\n        /**\n         * @param {?} context\n         * @return {?}\n         */\n        TemplateRef_.prototype.createEmbeddedView = function (context) {\n            var /** @type {?} */ view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);\n            view.create(context || ({}));\n            return view.ref;\n        };\n        Object.defineProperty(TemplateRef_.prototype, \"elementRef\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return new ElementRef(this._nativeElement); },\n            enumerable: true,\n            configurable: true\n        });\n        return TemplateRef_;\n    }(TemplateRef));\n\n    /**\n     * Represents a container where one or more Views can be attached.\n     *\n     * The container can contain two kinds of Views. Host Views, created by instantiating a\n     * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\n     * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\n     *\n     * The location of the View Container within the containing View is specified by the Anchor\n     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n     * have a single View Container.\n     *\n     * Root elements of Views attached to this container become siblings of the Anchor Element in\n     * the Rendered View.\n     *\n     * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\n     * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\n     * \\@stable\n     * @abstract\n     */\n    var ViewContainerRef = (function () {\n        function ViewContainerRef() {\n        }\n        /**\n         * Anchor element that specifies the location of this container in the containing View.\n         * <!-- TODO: rename to anchorElement -->\n         * @abstract\n         * @return {?}\n         */\n        ViewContainerRef.prototype.element = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        ViewContainerRef.prototype.injector = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        ViewContainerRef.prototype.parentInjector = function () { };\n        /**\n         * Destroys all Views in this container.\n         * @abstract\n         * @return {?}\n         */\n        ViewContainerRef.prototype.clear = function () { };\n        /**\n         * Returns the {\\@link ViewRef} for the View located in this container at the specified index.\n         * @abstract\n         * @param {?} index\n         * @return {?}\n         */\n        ViewContainerRef.prototype.get = function (index) { };\n        /**\n         * Returns the number of Views currently attached to this container.\n         * @abstract\n         * @return {?}\n         */\n        ViewContainerRef.prototype.length = function () { };\n        /**\n         * Instantiates an Embedded View based on the {\\@link TemplateRef `templateRef`} and inserts it\n         * into this container at the specified `index`.\n         *\n         * If `index` is not specified, the new View will be inserted as the last View in the container.\n         *\n         * Returns the {\\@link ViewRef} for the newly created View.\n         * @abstract\n         * @param {?} templateRef\n         * @param {?=} context\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };\n        /**\n         * Instantiates a single {\\@link Component} and inserts its Host View into this container at the\n         * specified `index`.\n         *\n         * The component is instantiated using its {\\@link ComponentFactory} which can be\n         * obtained via {\\@link ComponentFactoryResolver#resolveComponentFactory}.\n         *\n         * If `index` is not specified, the new View will be inserted as the last View in the container.\n         *\n         * You can optionally specify the {\\@link Injector} that will be used as parent for the Component.\n         *\n         * Returns the {\\@link ComponentRef} of the Host View created for the newly instantiated Component.\n         * @abstract\n         * @param {?} componentFactory\n         * @param {?=} index\n         * @param {?=} injector\n         * @param {?=} projectableNodes\n         * @return {?}\n         */\n        ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { };\n        /**\n         * Inserts a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n         *\n         * If `index` is not specified, the new View will be inserted as the last View in the container.\n         *\n         * Returns the inserted {\\@link ViewRef}.\n         * @abstract\n         * @param {?} viewRef\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef.prototype.insert = function (viewRef, index) { };\n        /**\n         * Moves a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n         *\n         * Returns the inserted {\\@link ViewRef}.\n         * @abstract\n         * @param {?} viewRef\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };\n        /**\n         * Returns the index of the View, specified via {\\@link ViewRef}, within the current container or\n         * `-1` if this container doesn't contain the View.\n         * @abstract\n         * @param {?} viewRef\n         * @return {?}\n         */\n        ViewContainerRef.prototype.indexOf = function (viewRef) { };\n        /**\n         * Destroys a View attached to this container at the specified `index`.\n         *\n         * If `index` is not specified, the last View in the container will be removed.\n         * @abstract\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef.prototype.remove = function (index) { };\n        /**\n         * Use along with {\\@link #insert} to move a View within the current container.\n         *\n         * If the `index` param is omitted, the last {\\@link ViewRef} is detached.\n         * @abstract\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef.prototype.detach = function (index) { };\n        return ViewContainerRef;\n    }());\n    var ViewContainerRef_ = (function () {\n        /**\n         * @param {?} _element\n         */\n        function ViewContainerRef_(_element) {\n            this._element = _element;\n            /** @internal */\n            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');\n            /** @internal */\n            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');\n            /** @internal */\n            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');\n            /** @internal */\n            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');\n        }\n        /**\n         * @param {?} index\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };\n        Object.defineProperty(ViewContainerRef_.prototype, \"length\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ views = this._element.nestedViews;\n                return isPresent(views) ? views.length : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"element\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._element.elementRef; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._element.injector; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainerRef_.prototype, \"parentInjector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._element.parentInjector; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} templateRef\n         * @param {?=} context\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {\n            if (context === void 0) { context = null; }\n            if (index === void 0) { index = -1; }\n            var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context);\n            this.insert(viewRef, index);\n            return viewRef;\n        };\n        /**\n         * @param {?} componentFactory\n         * @param {?=} index\n         * @param {?=} injector\n         * @param {?=} projectableNodes\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {\n            if (index === void 0) { index = -1; }\n            if (injector === void 0) { injector = null; }\n            if (projectableNodes === void 0) { projectableNodes = null; }\n            var /** @type {?} */ s = this._createComponentInContainerScope();\n            var /** @type {?} */ contextInjector = injector || this._element.parentInjector;\n            var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);\n            this.insert(componentRef.hostView, index);\n            return wtfLeave(s, componentRef);\n        };\n        /**\n         * @param {?} viewRef\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.insert = function (viewRef, index) {\n            if (index === void 0) { index = -1; }\n            var /** @type {?} */ s = this._insertScope();\n            if (index == -1)\n                index = this.length;\n            var /** @type {?} */ viewRef_ = (viewRef);\n            this._element.attachView(viewRef_.internalView, index);\n            return wtfLeave(s, viewRef_);\n        };\n        /**\n         * @param {?} viewRef\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {\n            var /** @type {?} */ s = this._insertScope();\n            if (currentIndex == -1)\n                return;\n            var /** @type {?} */ viewRef_ = (viewRef);\n            this._element.moveView(viewRef_.internalView, currentIndex);\n            return wtfLeave(s, viewRef_);\n        };\n        /**\n         * @param {?} viewRef\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.indexOf = function (viewRef) {\n            return this.length ? this._element.nestedViews.indexOf(((viewRef)).internalView) :\n                -1;\n        };\n        /**\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.remove = function (index) {\n            if (index === void 0) { index = -1; }\n            var /** @type {?} */ s = this._removeScope();\n            if (index == -1)\n                index = this.length - 1;\n            var /** @type {?} */ view = this._element.detachView(index);\n            view.destroy();\n            // view is intentionally not returned to the client.\n            wtfLeave(s);\n        };\n        /**\n         * @param {?=} index\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.detach = function (index) {\n            if (index === void 0) { index = -1; }\n            var /** @type {?} */ s = this._detachScope();\n            if (index == -1)\n                index = this.length - 1;\n            var /** @type {?} */ view = this._element.detachView(index);\n            return wtfLeave(s, view.ref);\n        };\n        /**\n         * @return {?}\n         */\n        ViewContainerRef_.prototype.clear = function () {\n            for (var /** @type {?} */ i = this.length - 1; i >= 0; i--) {\n                this.remove(i);\n            }\n        };\n        return ViewContainerRef_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * \\@stable\n     * @abstract\n     */\n    var ViewRef = (function (_super) {\n        __extends$11(ViewRef, _super);\n        function ViewRef() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * Destroys the view and all of the data structures associated with it.\n         * @abstract\n         * @return {?}\n         */\n        ViewRef.prototype.destroy = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        ViewRef.prototype.destroyed = function () { };\n        /**\n         * @abstract\n         * @param {?} callback\n         * @return {?}\n         */\n        ViewRef.prototype.onDestroy = function (callback) { };\n        return ViewRef;\n    }(ChangeDetectorRef));\n    /**\n     * Represents an Angular View.\n     *\n     * <!-- TODO: move the next two paragraphs to the dev guide -->\n     * A View is a fundamental building block of the application UI. It is the smallest grouping of\n     * Elements which are created and destroyed together.\n     *\n     * Properties of elements in a View can change, but the structure (number and order) of elements in\n     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n     * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n     * <!-- /TODO -->\n     *\n     * ### Example\n     *\n     * Given this template...\n     *\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <li *ngFor=\"let  item of items\">{{item}}</li>\n     * </ul>\n     * ```\n     *\n     * We have two {\\@link TemplateRef}s:\n     *\n     * Outer {\\@link TemplateRef}:\n     * ```\n     * Count: {{items.length}}\n     * <ul>\n     *   <template ngFor let-item [ngForOf]=\"items\"></template>\n     * </ul>\n     * ```\n     *\n     * Inner {\\@link TemplateRef}:\n     * ```\n     *   <li>{{item}}</li>\n     * ```\n     *\n     * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n     *\n     * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n     *\n     * ```\n     * <!-- ViewRef: outer-0 -->\n     * Count: 2\n     * <ul>\n     *   <template view-container-ref></template>\n     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n     * </ul>\n     * <!-- /ViewRef: outer-0 -->\n     * ```\n     * \\@experimental\n     * @abstract\n     */\n    var EmbeddedViewRef = (function (_super) {\n        __extends$11(EmbeddedViewRef, _super);\n        function EmbeddedViewRef() {\n            _super.apply(this, arguments);\n        }\n        /**\n         * @abstract\n         * @return {?}\n         */\n        EmbeddedViewRef.prototype.context = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        EmbeddedViewRef.prototype.rootNodes = function () { };\n        return EmbeddedViewRef;\n    }(ViewRef));\n    var ViewRef_ = (function () {\n        /**\n         * @param {?} _view\n         * @param {?} animationQueue\n         */\n        function ViewRef_(_view, animationQueue) {\n            this._view = _view;\n            this.animationQueue = animationQueue;\n            this._view = _view;\n            this._originalMode = this._view.cdMode;\n        }\n        Object.defineProperty(ViewRef_.prototype, \"internalView\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"rootNodes\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view.flatRootNodes; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"context\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewRef_.prototype, \"destroyed\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view.destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.detectChanges = function () {\n            this._view.detectChanges(false);\n            this.animationQueue.flush();\n        };\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.reattach = function () {\n            this._view.cdMode = this._originalMode;\n            this.markForCheck();\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        ViewRef_.prototype.onDestroy = function (callback) {\n            if (!this._view.disposables) {\n                this._view.disposables = [];\n            }\n            this._view.disposables.push(callback);\n        };\n        /**\n         * @return {?}\n         */\n        ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy(); };\n        return ViewRef_;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var EventListener = (function () {\n        /**\n         * @param {?} name\n         * @param {?} callback\n         */\n        function EventListener(name, callback) {\n            this.name = name;\n            this.callback = callback;\n        }\n        ;\n        return EventListener;\n    }());\n    /**\n     * \\@experimental All debugging apis are currently experimental.\n     */\n    var DebugNode = (function () {\n        /**\n         * @param {?} nativeNode\n         * @param {?} parent\n         * @param {?} _debugInfo\n         */\n        function DebugNode(nativeNode, parent, _debugInfo) {\n            this._debugInfo = _debugInfo;\n            this.nativeNode = nativeNode;\n            if (parent && parent instanceof DebugElement) {\n                parent.addChild(this);\n            }\n            else {\n                this.parent = null;\n            }\n            this.listeners = [];\n        }\n        Object.defineProperty(DebugNode.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._debugInfo ? this._debugInfo.injector : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"componentInstance\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._debugInfo ? this._debugInfo.component : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"context\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._debugInfo ? this._debugInfo.context : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"references\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._debugInfo ? this._debugInfo.references : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"providerTokens\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugNode.prototype, \"source\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._debugInfo ? this._debugInfo.source : null; },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugNode;\n    }());\n    /**\n     * \\@experimental All debugging apis are currently experimental.\n     */\n    var DebugElement = (function (_super) {\n        __extends$12(DebugElement, _super);\n        /**\n         * @param {?} nativeNode\n         * @param {?} parent\n         * @param {?} _debugInfo\n         */\n        function DebugElement(nativeNode, parent, _debugInfo) {\n            _super.call(this, nativeNode, parent, _debugInfo);\n            this.properties = {};\n            this.attributes = {};\n            this.classes = {};\n            this.styles = {};\n            this.childNodes = [];\n            this.nativeElement = nativeNode;\n        }\n        /**\n         * @param {?} child\n         * @return {?}\n         */\n        DebugElement.prototype.addChild = function (child) {\n            if (child) {\n                this.childNodes.push(child);\n                child.parent = this;\n            }\n        };\n        /**\n         * @param {?} child\n         * @return {?}\n         */\n        DebugElement.prototype.removeChild = function (child) {\n            var /** @type {?} */ childIndex = this.childNodes.indexOf(child);\n            if (childIndex !== -1) {\n                child.parent = null;\n                this.childNodes.splice(childIndex, 1);\n            }\n        };\n        /**\n         * @param {?} child\n         * @param {?} newChildren\n         * @return {?}\n         */\n        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {\n            var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);\n            if (siblingIndex !== -1) {\n                var /** @type {?} */ previousChildren = this.childNodes.slice(0, siblingIndex + 1);\n                var /** @type {?} */ nextChildren = this.childNodes.slice(siblingIndex + 1);\n                this.childNodes = previousChildren.concat(newChildren, nextChildren);\n                for (var /** @type {?} */ i = 0; i < newChildren.length; ++i) {\n                    var /** @type {?} */ newChild = newChildren[i];\n                    if (newChild.parent) {\n                        newChild.parent.removeChild(newChild);\n                    }\n                    newChild.parent = this;\n                }\n            }\n        };\n        /**\n         * @param {?} predicate\n         * @return {?}\n         */\n        DebugElement.prototype.query = function (predicate) {\n            var /** @type {?} */ results = this.queryAll(predicate);\n            return results[0] || null;\n        };\n        /**\n         * @param {?} predicate\n         * @return {?}\n         */\n        DebugElement.prototype.queryAll = function (predicate) {\n            var /** @type {?} */ matches = [];\n            _queryElementChildren(this, predicate, matches);\n            return matches;\n        };\n        /**\n         * @param {?} predicate\n         * @return {?}\n         */\n        DebugElement.prototype.queryAllNodes = function (predicate) {\n            var /** @type {?} */ matches = [];\n            _queryNodeChildren(this, predicate, matches);\n            return matches;\n        };\n        Object.defineProperty(DebugElement.prototype, \"children\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} eventName\n         * @param {?} eventObj\n         * @return {?}\n         */\n        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {\n            this.listeners.forEach(function (listener) {\n                if (listener.name == eventName) {\n                    listener.callback(eventObj);\n                }\n            });\n        };\n        return DebugElement;\n    }(DebugNode));\n    /**\n     * \\@experimental\n     * @param {?} debugEls\n     * @return {?}\n     */\n    function asNativeElements(debugEls) {\n        return debugEls.map(function (el) { return el.nativeElement; });\n    }\n    /**\n     * @param {?} element\n     * @param {?} predicate\n     * @param {?} matches\n     * @return {?}\n     */\n    function _queryElementChildren(element, predicate, matches) {\n        element.childNodes.forEach(function (node) {\n            if (node instanceof DebugElement) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                _queryElementChildren(node, predicate, matches);\n            }\n        });\n    }\n    /**\n     * @param {?} parentNode\n     * @param {?} predicate\n     * @param {?} matches\n     * @return {?}\n     */\n    function _queryNodeChildren(parentNode, predicate, matches) {\n        if (parentNode instanceof DebugElement) {\n            parentNode.childNodes.forEach(function (node) {\n                if (predicate(node)) {\n                    matches.push(node);\n                }\n                if (node instanceof DebugElement) {\n                    _queryNodeChildren(node, predicate, matches);\n                }\n            });\n        }\n    }\n    // Need to keep the nodes in a global Map so that multiple angular apps are supported.\n    var /** @type {?} */ _nativeNodeToDebugNode = new Map();\n    /**\n     * \\@experimental\n     * @param {?} nativeNode\n     * @return {?}\n     */\n    function getDebugNode(nativeNode) {\n        return _nativeNodeToDebugNode.get(nativeNode);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function indexDebugNode(node) {\n        _nativeNodeToDebugNode.set(node.nativeNode, node);\n    }\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    function removeDebugNodeFromIndex(node) {\n        _nativeNodeToDebugNode.delete(node.nativeNode);\n    }\n\n    /**\n     * @return {?}\n     */\n    function _reflector() {\n        return reflector;\n    }\n    var /** @type {?} */ _CORE_PLATFORM_PROVIDERS = [\n        PlatformRef_,\n        { provide: PlatformRef, useExisting: PlatformRef_ },\n        { provide: Reflector, useFactory: _reflector, deps: [] },\n        { provide: ReflectorReader, useExisting: Reflector },\n        TestabilityRegistry,\n        Console,\n    ];\n    /**\n     * This platform has to be included in any other platform\n     *\n     * @experimental\n     */\n    var /** @type {?} */ platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);\n\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var /** @type {?} */ LOCALE_ID = new OpaqueToken('LocaleId');\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var /** @type {?} */ TRANSLATIONS = new OpaqueToken('Translations');\n    /**\n     * @experimental i18n support is experimental.\n     */\n    var /** @type {?} */ TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');\n\n    /**\n     * @return {?}\n     */\n    function _iterableDiffersFactory() {\n        return defaultIterableDiffers;\n    }\n    /**\n     * @return {?}\n     */\n    function _keyValueDiffersFactory() {\n        return defaultKeyValueDiffers;\n    }\n    /**\n     * @param {?=} locale\n     * @return {?}\n     */\n    function _localeFactory(locale) {\n        return locale || 'en-US';\n    }\n    /**\n     * This module includes the providers of \\@angular/core that are needed\n     * to bootstrap components via `ApplicationRef`.\n     *\n     * \\@experimental\n     */\n    var ApplicationModule = (function () {\n        function ApplicationModule() {\n        }\n        ApplicationModule.decorators = [\n            { type: NgModule, args: [{\n                        providers: [\n                            ApplicationRef_,\n                            { provide: ApplicationRef, useExisting: ApplicationRef_ },\n                            ApplicationInitStatus,\n                            Compiler,\n                            APP_ID_RANDOM_PROVIDER,\n                            ViewUtils,\n                            AnimationQueue,\n                            { provide: IterableDiffers, useFactory: _iterableDiffersFactory },\n                            { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },\n                            {\n                                provide: LOCALE_ID,\n                                useFactory: _localeFactory,\n                                deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]\n                            },\n                        ]\n                    },] },\n        ];\n        /** @nocollapse */\n        ApplicationModule.ctorParameters = function () { return []; };\n        return ApplicationModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var /** @type {?} */ FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean\n    var /** @type {?} */ ANY_STATE = '*';\n    var /** @type {?} */ DEFAULT_STATE = '*';\n    var /** @type {?} */ EMPTY_STATE = 'void';\n\n    var AnimationGroupPlayer = (function () {\n        /**\n         * @param {?} _players\n         */\n        function AnimationGroupPlayer(_players) {\n            var _this = this;\n            this._players = _players;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._finished = false;\n            this._started = false;\n            this._destroyed = false;\n            this.parentPlayer = null;\n            var count = 0;\n            var total = this._players.length;\n            if (total == 0) {\n                scheduleMicroTask(function () { return _this._onFinish(); });\n            }\n            else {\n                this._players.forEach(function (player) {\n                    player.parentPlayer = _this;\n                    player.onDone(function () {\n                        if (++count >= total) {\n                            _this._onFinish();\n                        }\n                    });\n                });\n            }\n        }\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype._onFinish = function () {\n            if (!this._finished) {\n                this._finished = true;\n                this._onDoneFns.forEach(function (fn) { return fn(); });\n                this._onDoneFns = [];\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.play = function () {\n            if (!isPresent(this.parentPlayer)) {\n                this.init();\n            }\n            if (!this.hasStarted()) {\n                this._onStartFns.forEach(function (fn) { return fn(); });\n                this._onStartFns = [];\n                this._started = true;\n            }\n            this._players.forEach(function (player) { return player.play(); });\n        };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.finish = function () {\n            this._onFinish();\n            this._players.forEach(function (player) { return player.finish(); });\n        };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.destroy = function () {\n            if (!this._destroyed) {\n                this._onFinish();\n                this._players.forEach(function (player) { return player.destroy(); });\n                this._destroyed = true;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.reset = function () {\n            this._players.forEach(function (player) { return player.reset(); });\n            this._destroyed = false;\n            this._finished = false;\n            this._started = false;\n        };\n        /**\n         * @param {?} p\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.setPosition = function (p) {\n            this._players.forEach(function (player) { player.setPosition(p); });\n        };\n        /**\n         * @return {?}\n         */\n        AnimationGroupPlayer.prototype.getPosition = function () {\n            var /** @type {?} */ min = 0;\n            this._players.forEach(function (player) {\n                var /** @type {?} */ p = player.getPosition();\n                min = Math.min(p, min);\n            });\n            return min;\n        };\n        Object.defineProperty(AnimationGroupPlayer.prototype, \"players\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._players; },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationGroupPlayer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `AnimationKeyframe` consists of a series of styles (contained within {\\@link AnimationStyles\n     * `AnimationStyles`})\n     * and an offset value indicating when those styles are applied within the `duration/delay/easing`\n     * timings.\n     * `AnimationKeyframe` is mostly an internal class which is designed to be used alongside {\\@link\n     * Renderer#animate-anchor `Renderer.animate`}.\n     *\n     * \\@experimental Animation support is experimental\n     */\n    var AnimationKeyframe = (function () {\n        /**\n         * @param {?} offset\n         * @param {?} styles\n         */\n        function AnimationKeyframe(offset, styles) {\n            this.offset = offset;\n            this.styles = styles;\n        }\n        return AnimationKeyframe;\n    }());\n\n    /**\n     * \\@experimental Animation support is experimental.\n     * @abstract\n     */\n    var AnimationPlayer = (function () {\n        function AnimationPlayer() {\n        }\n        /**\n         * @abstract\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationPlayer.prototype.onDone = function (fn) { };\n        /**\n         * @abstract\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationPlayer.prototype.onStart = function (fn) { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.init = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.hasStarted = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.play = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.pause = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.restart = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.finish = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.destroy = function () { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.reset = function () { };\n        /**\n         * @abstract\n         * @param {?} p\n         * @return {?}\n         */\n        AnimationPlayer.prototype.setPosition = function (p) { };\n        /**\n         * @abstract\n         * @return {?}\n         */\n        AnimationPlayer.prototype.getPosition = function () { };\n        Object.defineProperty(AnimationPlayer.prototype, \"parentPlayer\", {\n            /**\n             * @return {?}\n             */\n            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n            /**\n             * @param {?} player\n             * @return {?}\n             */\n            set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationPlayer;\n    }());\n    var NoOpAnimationPlayer = (function () {\n        function NoOpAnimationPlayer() {\n            var _this = this;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._started = false;\n            this.parentPlayer = null;\n            scheduleMicroTask(function () { return _this._onFinish(); });\n        }\n        /**\n         * \\@internal\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype._onFinish = function () {\n            this._onDoneFns.forEach(function (fn) { return fn(); });\n            this._onDoneFns = [];\n        };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.init = function () { };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.play = function () {\n            if (!this.hasStarted()) {\n                this._onStartFns.forEach(function (fn) { return fn(); });\n                this._onStartFns = [];\n            }\n            this._started = true;\n        };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.pause = function () { };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.restart = function () { };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.destroy = function () { };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.reset = function () { };\n        /**\n         * @param {?} p\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.setPosition = function (p) { };\n        /**\n         * @return {?}\n         */\n        NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };\n        return NoOpAnimationPlayer;\n    }());\n\n    var AnimationSequencePlayer = (function () {\n        /**\n         * @param {?} _players\n         */\n        function AnimationSequencePlayer(_players) {\n            var _this = this;\n            this._players = _players;\n            this._currentIndex = 0;\n            this._onDoneFns = [];\n            this._onStartFns = [];\n            this._finished = false;\n            this._started = false;\n            this._destroyed = false;\n            this.parentPlayer = null;\n            this._players.forEach(function (player) { player.parentPlayer = _this; });\n            this._onNext(false);\n        }\n        /**\n         * @param {?} start\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype._onNext = function (start) {\n            var _this = this;\n            if (this._finished)\n                return;\n            if (this._players.length == 0) {\n                this._activePlayer = new NoOpAnimationPlayer();\n                scheduleMicroTask(function () { return _this._onFinish(); });\n            }\n            else if (this._currentIndex >= this._players.length) {\n                this._activePlayer = new NoOpAnimationPlayer();\n                this._onFinish();\n            }\n            else {\n                var /** @type {?} */ player = this._players[this._currentIndex++];\n                player.onDone(function () { return _this._onNext(true); });\n                this._activePlayer = player;\n                if (start) {\n                    player.play();\n                }\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype._onFinish = function () {\n            if (!this._finished) {\n                this._finished = true;\n                this._onDoneFns.forEach(function (fn) { return fn(); });\n                this._onDoneFns = [];\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };\n        /**\n         * @param {?} fn\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.play = function () {\n            if (!isPresent(this.parentPlayer)) {\n                this.init();\n            }\n            if (!this.hasStarted()) {\n                this._onStartFns.forEach(function (fn) { return fn(); });\n                this._onStartFns = [];\n                this._started = true;\n            }\n            this._activePlayer.play();\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.restart = function () {\n            this.reset();\n            if (this._players.length > 0) {\n                this._players[0].restart();\n            }\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.reset = function () {\n            this._players.forEach(function (player) { return player.reset(); });\n            this._destroyed = false;\n            this._finished = false;\n            this._started = false;\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.finish = function () {\n            this._onFinish();\n            this._players.forEach(function (player) { return player.finish(); });\n        };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.destroy = function () {\n            if (!this._destroyed) {\n                this._onFinish();\n                this._players.forEach(function (player) { return player.destroy(); });\n                this._destroyed = true;\n                this._activePlayer = new NoOpAnimationPlayer();\n            }\n        };\n        /**\n         * @param {?} p\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p); };\n        /**\n         * @return {?}\n         */\n        AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };\n        Object.defineProperty(AnimationSequencePlayer.prototype, \"players\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._players; },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationSequencePlayer;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$13 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * @experimental Animation support is experimental.\n     */\n    var /** @type {?} */ AUTO_STYLE = '*';\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link trigger trigger\n     * animation function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationEntryMetadata = (function () {\n        /**\n         * @param {?} name\n         * @param {?} definitions\n         */\n        function AnimationEntryMetadata(name, definitions) {\n            this.name = name;\n            this.definitions = definitions;\n        }\n        return AnimationEntryMetadata;\n    }());\n    /**\n     * \\@experimental Animation support is experimental.\n     * @abstract\n     */\n    var AnimationStateMetadata = (function () {\n        function AnimationStateMetadata() {\n        }\n        return AnimationStateMetadata;\n    }());\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link state state animation\n     * function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationStateDeclarationMetadata = (function (_super) {\n        __extends$13(AnimationStateDeclarationMetadata, _super);\n        /**\n         * @param {?} stateNameExpr\n         * @param {?} styles\n         */\n        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {\n            _super.call(this);\n            this.stateNameExpr = stateNameExpr;\n            this.styles = styles;\n        }\n        return AnimationStateDeclarationMetadata;\n    }(AnimationStateMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the\n     * {\\@link transition transition animation function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationStateTransitionMetadata = (function (_super) {\n        __extends$13(AnimationStateTransitionMetadata, _super);\n        /**\n         * @param {?} stateChangeExpr\n         * @param {?} steps\n         */\n        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {\n            _super.call(this);\n            this.stateChangeExpr = stateChangeExpr;\n            this.steps = steps;\n        }\n        return AnimationStateTransitionMetadata;\n    }(AnimationStateMetadata));\n    /**\n     * \\@experimental Animation support is experimental.\n     * @abstract\n     */\n    var AnimationMetadata = (function () {\n        function AnimationMetadata() {\n        }\n        return AnimationMetadata;\n    }());\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link keyframes keyframes\n     * animation function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationKeyframesSequenceMetadata = (function (_super) {\n        __extends$13(AnimationKeyframesSequenceMetadata, _super);\n        /**\n         * @param {?} steps\n         */\n        function AnimationKeyframesSequenceMetadata(steps) {\n            _super.call(this);\n            this.steps = steps;\n        }\n        return AnimationKeyframesSequenceMetadata;\n    }(AnimationMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link style style animation\n     * function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationStyleMetadata = (function (_super) {\n        __extends$13(AnimationStyleMetadata, _super);\n        /**\n         * @param {?} styles\n         * @param {?=} offset\n         */\n        function AnimationStyleMetadata(styles, offset) {\n            if (offset === void 0) { offset = null; }\n            _super.call(this);\n            this.styles = styles;\n            this.offset = offset;\n        }\n        return AnimationStyleMetadata;\n    }(AnimationMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link animate animate\n     * animation function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationAnimateMetadata = (function (_super) {\n        __extends$13(AnimationAnimateMetadata, _super);\n        /**\n         * @param {?} timings\n         * @param {?} styles\n         */\n        function AnimationAnimateMetadata(timings, styles) {\n            _super.call(this);\n            this.timings = timings;\n            this.styles = styles;\n        }\n        return AnimationAnimateMetadata;\n    }(AnimationMetadata));\n    /**\n     * \\@experimental Animation support is experimental.\n     * @abstract\n     */\n    var AnimationWithStepsMetadata = (function (_super) {\n        __extends$13(AnimationWithStepsMetadata, _super);\n        function AnimationWithStepsMetadata() {\n            _super.call(this);\n        }\n        Object.defineProperty(AnimationWithStepsMetadata.prototype, \"steps\", {\n            /**\n             * @return {?}\n             */\n            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationWithStepsMetadata;\n    }(AnimationMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link sequence sequence\n     * animation function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationSequenceMetadata = (function (_super) {\n        __extends$13(AnimationSequenceMetadata, _super);\n        /**\n         * @param {?} _steps\n         */\n        function AnimationSequenceMetadata(_steps) {\n            _super.call(this);\n            this._steps = _steps;\n        }\n        Object.defineProperty(AnimationSequenceMetadata.prototype, \"steps\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._steps; },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationSequenceMetadata;\n    }(AnimationWithStepsMetadata));\n    /**\n     * Metadata representing the entry of animations.\n     * Instances of this class are provided via the animation DSL when the {\\@link group group animation\n     * function} is called.\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationGroupMetadata = (function (_super) {\n        __extends$13(AnimationGroupMetadata, _super);\n        /**\n         * @param {?} _steps\n         */\n        function AnimationGroupMetadata(_steps) {\n            _super.call(this);\n            this._steps = _steps;\n        }\n        Object.defineProperty(AnimationGroupMetadata.prototype, \"steps\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._steps; },\n            enumerable: true,\n            configurable: true\n        });\n        return AnimationGroupMetadata;\n    }(AnimationWithStepsMetadata));\n    /**\n     * `animate` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `animate` specifies an animation step that will apply the provided `styles` data for a given\n     * amount of\n     * time based on the provided `timing` expression value. Calls to `animate` are expected to be\n     * used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link transition\n     * transition}.\n     *\n     * ### Usage\n     *\n     * The `animate` function accepts two input parameters: `timing` and `styles`:\n     *\n     * - `timing` is a string based value that can be a combination of a duration with optional\n     * delay and easing values. The format for the expression breaks down to `duration delay easing`\n     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n     * delay=100, easing=ease-out`.\n     * If a numeric value is provided then that will be used as the `duration` value in millisecond\n     * form.\n     * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n     * keyframes keyframes}.\n     * If left empty then the styles from the destination state will be collected and used (this is\n     * useful when\n     * describing an animation step that will complete an animation by {\\@link\n     * transition#the-final-animate-call animating to the final state}).\n     *\n     * ```typescript\n     * // various functions for specifying timing data\n     * animate(500, style(...))\n     * animate(\"1s\", style(...))\n     * animate(\"100ms 0.5s\", style(...))\n     * animate(\"5s ease\", style(...))\n     * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n     *\n     * // either style() of keyframes() can be used\n     * animate(500, style({ background: \"red\" }))\n     * animate(500, keyframes([\n     *   style({ background: \"blue\" })),\n     *   style({ background: \"red\" }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} timing\n     * @param {?=} styles\n     * @return {?}\n     */\n    function animate(timing, styles) {\n        if (styles === void 0) { styles = null; }\n        var /** @type {?} */ stylesEntry = styles;\n        if (!isPresent(stylesEntry)) {\n            var /** @type {?} */ EMPTY_STYLE = {};\n            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);\n        }\n        return new AnimationAnimateMetadata(timing, stylesEntry);\n    }\n    /**\n     * `group` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations\n     * are useful when a series of styles must be animated/closed off\n     * at different statrting/ending times.\n     *\n     * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n     * transition}\n     * and it will only continue to the next instruction once all of the inner animation steps\n     * have completed.\n     *\n     * ### Usage\n     *\n     * The `steps` data that is passed into the `group` animation function can either consist\n     * of {\\@link style style} or {\\@link animate animate} function calls. Each call to `style()` or\n     * `animate()`\n     * within a group will be executed instantly (use {\\@link keyframes keyframes} or a\n     * {\\@link animate#usage animate() with a delay value} to offset styles to be applied at a later\n     * time).\n     *\n     * ```typescript\n     * group([\n     *   animate(\"1s\", { background: \"black\" }))\n     *   animate(\"2s\", { color: \"white\" }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} steps\n     * @return {?}\n     */\n    function group(steps) {\n        return new AnimationGroupMetadata(steps);\n    }\n    /**\n     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used\n     * by default when an array is passed as animation data into {\\@link transition transition}.)\n     *\n     * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n     * transition}\n     * and it will only continue to the next instruction once each of the inner animation steps\n     * have completed.\n     *\n     * To perform animation styling in parallel with other animation steps then\n     * have a look at the {\\@link group group} animation function.\n     *\n     * ### Usage\n     *\n     * The `steps` data that is passed into the `sequence` animation function can either consist\n     * of {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply\n     * the\n     * provided styling data immediately while a call to `animate()` will apply its styling\n     * data over a given time depending on its timing data.\n     *\n     * ```typescript\n     * sequence([\n     *   style({ opacity: 0 })),\n     *   animate(\"1s\", { opacity: 1 }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} steps\n     * @return {?}\n     */\n    function sequence(steps) {\n        return new AnimationSequenceMetadata(steps);\n    }\n    /**\n     * `style` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `style` declares a key/value object containing CSS properties/styles that can then\n     * be used for {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as\n     * styling data for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n     *\n     * ### Usage\n     *\n     * `style` takes in a key/value string map as data and expects one or more CSS property/value\n     * pairs to be defined.\n     *\n     * ```typescript\n     * // string values are used for css properties\n     * style({ background: \"red\", color: \"blue\" })\n     *\n     * // numerical (pixel) values are also supported\n     * style({ width: 100, height: 0 })\n     * ```\n     *\n     * #### Auto-styles (using `*`)\n     *\n     * When an asterix (`*`) character is used as a value then it will be detected from the element\n     * being animated\n     * and applied as animation data when the animation starts.\n     *\n     * This feature proves useful for a state depending on layout and/or environment factors; in such\n     * cases\n     * the styles are calculated just before the animation starts.\n     *\n     * ```typescript\n     * // the steps below will animate from 0 to the\n     * // actual height of the element\n     * style({ height: 0 }),\n     * animate(\"1s\", style({ height: \"*\" }))\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} tokens\n     * @return {?}\n     */\n    function style(tokens) {\n        var /** @type {?} */ input;\n        var /** @type {?} */ offset = null;\n        if (typeof tokens === 'string') {\n            input = [(tokens)];\n        }\n        else {\n            if (Array.isArray(tokens)) {\n                input = (tokens);\n            }\n            else {\n                input = [(tokens)];\n            }\n            input.forEach(function (entry) {\n                var /** @type {?} */ entryOffset = ((entry) /** TODO #9100 */)['offset'];\n                if (isPresent(entryOffset)) {\n                    offset = offset == null ? parseFloat(entryOffset) : offset;\n                }\n            });\n        }\n        return new AnimationStyleMetadata(input, offset);\n    }\n    /**\n     * `state` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `state` declares an animation state within the given trigger. When a state is\n     * active within a component then its associated styles will persist on\n     * the element that the trigger is attached to (even when the animation ends).\n     *\n     * To animate between states, have a look at the animation {\\@link transition transition}\n     * DSL function. To register states to an animation trigger please have a look\n     * at the {\\@link trigger trigger} function.\n     *\n     * #### The `void` state\n     *\n     * The `void` state value is a reserved word that angular uses to determine when the element is not\n     * apart\n     * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n     * associated element\n     * is void).\n     *\n     * #### The `*` (default) state\n     *\n     * The `*` state (when styled) is a fallback state that will be used if\n     * the state that is being animated is not declared within the trigger.\n     *\n     * ### Usage\n     *\n     * `state` will declare an animation state with its associated styles\n     * within the given trigger.\n     *\n     * - `stateNameExpr` can be one or more state names separated by commas.\n     * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n     * the state\n     * has been reached.\n     *\n     * ```typescript\n     * // \"void\" is a reserved name for a state and is used to represent\n     * // the state in which an element is detached from from the application.\n     * state(\"void\", style({ height: 0 }))\n     *\n     * // user-defined states\n     * state(\"closed\", style({ height: 0 }))\n     * state(\"open, visible\", style({ height: \"*\" }))\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} stateNameExpr\n     * @param {?} styles\n     * @return {?}\n     */\n    function state(stateNameExpr, styles) {\n        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);\n    }\n    /**\n     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n     * by an `offset` value.\n     *\n     * ### Usage\n     *\n     * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n     * animation function. Instead of applying animations from where they are\n     * currently to their destination, keyframes can describe how each style entry is applied\n     * and at what point within the animation arc (much like CSS Keyframe Animations do).\n     *\n     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at\n     * what percentage of the animate time the styles will be applied.\n     *\n     * ```typescript\n     * // the provided offset values describe when each backgroundColor value is applied.\n     * animate(\"5s\", keyframes([\n     *   style({ backgroundColor: \"red\", offset: 0 }),\n     *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n     *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n     *   style({ backgroundColor: \"black\", offset: 1 })\n     * ]))\n     * ```\n     *\n     * Alternatively, if there are no `offset` values used within the style entries then the offsets\n     * will\n     * be calculated automatically.\n     *\n     * ```typescript\n     * animate(\"5s\", keyframes([\n     *   style({ backgroundColor: \"red\" }) // offset = 0\n     *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n     *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n     *   style({ backgroundColor: \"black\" }) // offset = 1\n     * ]))\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} steps\n     * @return {?}\n     */\n    function keyframes(steps) {\n        return new AnimationKeyframesSequenceMetadata(steps);\n    }\n    /**\n     * `transition` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n     * provided\n     * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`\n     * which consists\n     * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).\n     *\n     * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n     * to animate to\n     * a state value and persist its styles then one or more {\\@link state animation states} is expected\n     * to be defined.\n     *\n     * ### Usage\n     *\n     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n     * what the\n     * previous state is and what the current state has become. In other words, if a transition is\n     * defined that\n     * matches the old/current state criteria then the associated animation will be triggered.\n     *\n     * ```typescript\n     * // all transition/state changes are defined within an animation trigger\n     * trigger(\"myAnimationTrigger\", [\n     *   // if a state is defined then its styles will be persisted when the\n     *   // animation has fully completed itself\n     *   state(\"on\", style({ background: \"green\" })),\n     *   state(\"off\", style({ background: \"grey\" })),\n     *\n     *   // a transition animation that will be kicked off when the state value\n     *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n     *   transition(\"on => off\", animate(500)),\n     *\n     *   // it is also possible to do run the same animation for both directions\n     *   transition(\"on <=> off\", animate(500)),\n     *\n     *   // or to define multiple states pairs separated by commas\n     *   transition(\"on => off, off => void\", animate(500)),\n     *\n     *   // this is a catch-all state change for when an element is inserted into\n     *   // the page and the destination state is unknown\n     *   transition(\"void => *\", [\n     *     style({ opacity: 0 }),\n     *     animate(500)\n     *   ]),\n     *\n     *   // this will capture a state change between any states\n     *   transition(\"* => *\", animate(\"1s 0s\")),\n     * ])\n     * ```\n     *\n     * The template associated with this component will make use of the `myAnimationTrigger`\n     * animation trigger by binding to an element within its template code.\n     *\n     * ```html\n     * <!-- somewhere inside of my-component-tpl.html -->\n     * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n     * ```\n     *\n     * #### The final `animate` call\n     *\n     * If the final step within the transition steps is a call to `animate()` that **only**\n     * uses a timing value with **no style data** then it will be automatically used as the final\n     * animation\n     * arc for the element to animate itself to the final state. This involves an automatic mix of\n     * adding/removing CSS styles so that the element will be in the exact state it should be for the\n     * applied state to be presented correctly.\n     *\n     * ```\n     * // start off by hiding the element, but make sure that it animates properly to whatever state\n     * // is currently active for \"myAnimationTrigger\"\n     * transition(\"void => *\", [\n     *   style({ opacity: 0 }),\n     *   animate(500)\n     * ])\n     * ```\n     *\n     * ### Transition Aliases (`:enter` and `:leave`)\n     *\n     * Given that enter (insertion) and leave (removal) animations are so common,\n     * the `transition` function accepts both `:enter` and `:leave` values which\n     * are aliases for the `void => *` and `* => void` state changes.\n     *\n     * ```\n     * transition(\":enter\", [\n     *   style({ opacity: 0 }),\n     *   animate(500, style({ opacity: 1 }))\n     * ])\n     * transition(\":leave\", [\n     *   animate(500, style({ opacity: 0 }))\n     * ])\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} stateChangeExpr\n     * @param {?} steps\n     * @return {?}\n     */\n    function transition(stateChangeExpr, steps) {\n        var /** @type {?} */ animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;\n        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);\n    }\n    /**\n     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's\n     * animation\n     * DSL language. If this information is new, please navigate to the\n     * {\\@link Component#animations-anchor component animations metadata\n     * page} to gain a better understanding of how animations in Angular2 are used.\n     *\n     * `trigger` Creates an animation trigger which will a list of {\\@link state state} and {\\@link\n     * transition transition}\n     * entries that will be evaluated when the expression bound to the trigger changes.\n     *\n     * Triggers are registered within the component annotation data under the\n     * {\\@link Component#animations-anchor animations section}. An animation trigger can\n     * be placed on an element within a template by referencing the name of the\n     * trigger followed by the expression value that the trigger is bound to\n     * (in the form of `[\\@triggerName]=\"expression\"`.\n     *\n     * ### Usage\n     *\n     * `trigger` will create an animation trigger reference based on the provided `name` value.\n     * The provided `animation` value is expected to be an array consisting of {\\@link state state} and\n     * {\\@link transition transition}\n     * declarations.\n     *\n     * ```typescript\n     * \\@Component({\n     *   selector: 'my-component',\n     *   templateUrl: 'my-component-tpl.html',\n     *   animations: [\n     *     trigger(\"myAnimationTrigger\", [\n     *       state(...),\n     *       state(...),\n     *       transition(...),\n     *       transition(...)\n     *     ])\n     *   ]\n     * })\n     * class MyComponent {\n     *   myStatusExp = \"something\";\n     * }\n     * ```\n     *\n     * The template associated with this component will make use of the `myAnimationTrigger`\n     * animation trigger by binding to an element within its template code.\n     *\n     * ```html\n     * <!-- somewhere inside of my-component-tpl.html -->\n     * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n     * ```\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n     *\n     * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n     *\n     * \\@experimental Animation support is experimental.\n     * @param {?} name\n     * @param {?} animation\n     * @return {?}\n     */\n    function trigger(name, animation) {\n        return new AnimationEntryMetadata(name, animation);\n    }\n\n    /**\n     * @param {?} previousStyles\n     * @param {?} newStyles\n     * @param {?=} nullValue\n     * @return {?}\n     */\n    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {\n        if (nullValue === void 0) { nullValue = null; }\n        var /** @type {?} */ finalStyles = {};\n        Object.keys(newStyles).forEach(function (prop) {\n            var /** @type {?} */ value = newStyles[prop];\n            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();\n        });\n        Object.keys(previousStyles).forEach(function (prop) {\n            if (!isPresent(finalStyles[prop])) {\n                finalStyles[prop] = nullValue;\n            }\n        });\n        return finalStyles;\n    }\n    /**\n     * @param {?} collectedStyles\n     * @param {?} finalStateStyles\n     * @param {?} keyframes\n     * @return {?}\n     */\n    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {\n        var /** @type {?} */ limit = keyframes.length - 1;\n        var /** @type {?} */ firstKeyframe = keyframes[0];\n        // phase 1: copy all the styles from the first keyframe into the lookup map\n        var /** @type {?} */ flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);\n        var /** @type {?} */ extraFirstKeyframeStyles = {};\n        var /** @type {?} */ hasExtraFirstStyles = false;\n        Object.keys(collectedStyles).forEach(function (prop) {\n            var /** @type {?} */ value = (collectedStyles[prop]);\n            // if the style is already defined in the first keyframe then\n            // we do not replace it.\n            if (!flatenedFirstKeyframeStyles[prop]) {\n                flatenedFirstKeyframeStyles[prop] = value;\n                extraFirstKeyframeStyles[prop] = value;\n                hasExtraFirstStyles = true;\n            }\n        });\n        var /** @type {?} */ keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);\n        // phase 2: normalize the final keyframe\n        var /** @type {?} */ finalKeyframe = keyframes[limit];\n        finalKeyframe.styles.styles.unshift(finalStateStyles);\n        var /** @type {?} */ flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);\n        var /** @type {?} */ extraFinalKeyframeStyles = {};\n        var /** @type {?} */ hasExtraFinalStyles = false;\n        Object.keys(keyframeCollectedStyles).forEach(function (prop) {\n            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {\n                extraFinalKeyframeStyles[prop] = AUTO_STYLE;\n                hasExtraFinalStyles = true;\n            }\n        });\n        if (hasExtraFinalStyles) {\n            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);\n        }\n        Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {\n            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {\n                extraFirstKeyframeStyles[prop] = AUTO_STYLE;\n                hasExtraFirstStyles = true;\n            }\n        });\n        if (hasExtraFirstStyles) {\n            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);\n        }\n        collectAndResolveStyles(collectedStyles, [finalStateStyles]);\n        return keyframes;\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    function clearStyles(styles) {\n        var /** @type {?} */ finalStyles = {};\n        Object.keys(styles).forEach(function (key) { finalStyles[key] = null; });\n        return finalStyles;\n    }\n    /**\n     * @param {?} collection\n     * @param {?} styles\n     * @return {?}\n     */\n    function collectAndResolveStyles(collection, styles) {\n        return styles.map(function (entry) {\n            var /** @type {?} */ stylesObj = {};\n            Object.keys(entry).forEach(function (prop) {\n                var /** @type {?} */ value = entry[prop];\n                if (value == FILL_STYLE_FLAG) {\n                    value = collection[prop];\n                    if (!isPresent(value)) {\n                        value = AUTO_STYLE;\n                    }\n                }\n                collection[prop] = value;\n                stylesObj[prop] = value;\n            });\n            return stylesObj;\n        });\n    }\n    /**\n     * @param {?} element\n     * @param {?} renderer\n     * @param {?} styles\n     * @return {?}\n     */\n    function renderStyles(element, renderer, styles) {\n        Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]); });\n    }\n    /**\n     * @param {?} styles\n     * @return {?}\n     */\n    function flattenStyles(styles) {\n        var /** @type {?} */ finalStyles = {};\n        styles.forEach(function (entry) {\n            Object.keys(entry).forEach(function (prop) { finalStyles[prop] = (entry[prop]); });\n        });\n        return finalStyles;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * `AnimationStyles` consists of a collection of key/value maps containing CSS-based style data\n     * that can either be used as initial styling data or apart of a series of keyframes within an\n     * animation.\n     * This class is mostly internal, and it is designed to be used alongside\n     * {\\@link AnimationKeyframe `AnimationKeyframe`} and {\\@link Renderer#animate-anchor\n     * `Renderer.animate`}.\n     *\n     * \\@experimental Animation support is experimental\n     */\n    var AnimationStyles = (function () {\n        /**\n         * @param {?} styles\n         */\n        function AnimationStyles(styles) {\n            this.styles = styles;\n        }\n        return AnimationStyles;\n    }());\n\n    /**\n     * An instance of this class is returned as an event parameter when an animation\n     * callback is captured for an animation either during the start or done phase.\n     *\n     * ```typescript\n     * \\@Component({\n     *   host: {\n     *     '[\\@myAnimationTrigger]': 'someExpression',\n     *     '(\\@myAnimationTrigger.start)': 'captureStartEvent($event)',\n     *     '(\\@myAnimationTrigger.done)': 'captureDoneEvent($event)',\n     *   },\n     *   animations: [\n     *     trigger(\"myAnimationTrigger\", [\n     *        // ...\n     *     ])\n     *   ]\n     * })\n     * class MyComponent {\n     *   someExpression: any = false;\n     *   captureStartEvent(event: AnimationTransitionEvent) {\n     *     // the toState, fromState and totalTime data is accessible from the event variable\n     *   }\n     *\n     *   captureDoneEvent(event: AnimationTransitionEvent) {\n     *     // the toState, fromState and totalTime data is accessible from the event variable\n     *   }\n     * }\n     * ```\n     *\n     * \\@experimental Animation support is experimental.\n     */\n    var AnimationTransitionEvent = (function () {\n        /**\n         * @param {?} __0\n         */\n        function AnimationTransitionEvent(_a) {\n            var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;\n            this.fromState = fromState;\n            this.toState = toState;\n            this.totalTime = totalTime;\n            this.phaseName = phaseName;\n        }\n        return AnimationTransitionEvent;\n    }());\n\n    var AnimationTransition = (function () {\n        /**\n         * @param {?} _player\n         * @param {?} _fromState\n         * @param {?} _toState\n         * @param {?} _totalTime\n         */\n        function AnimationTransition(_player, _fromState, _toState, _totalTime) {\n            this._player = _player;\n            this._fromState = _fromState;\n            this._toState = _toState;\n            this._totalTime = _totalTime;\n        }\n        /**\n         * @param {?} phaseName\n         * @return {?}\n         */\n        AnimationTransition.prototype._createEvent = function (phaseName) {\n            return new AnimationTransitionEvent({\n                fromState: this._fromState,\n                toState: this._toState,\n                totalTime: this._totalTime,\n                phaseName: phaseName\n            });\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        AnimationTransition.prototype.onStart = function (callback) {\n            var _this = this;\n            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('start')); }, 'player.onStart'));\n            this._player.onStart(fn);\n        };\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        AnimationTransition.prototype.onDone = function (callback) {\n            var _this = this;\n            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('done')); }, 'player.onDone'));\n            this._player.onDone(fn);\n        };\n        return AnimationTransition;\n    }());\n\n    var DebugDomRootRenderer = (function () {\n        /**\n         * @param {?} _delegate\n         */\n        function DebugDomRootRenderer(_delegate) {\n            this._delegate = _delegate;\n        }\n        /**\n         * @param {?} componentProto\n         * @return {?}\n         */\n        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {\n            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));\n        };\n        return DebugDomRootRenderer;\n    }());\n    var DebugDomRenderer = (function () {\n        /**\n         * @param {?} _delegate\n         */\n        function DebugDomRenderer(_delegate) {\n            this._delegate = _delegate;\n        }\n        /**\n         * @param {?} selectorOrNode\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {\n            var /** @type {?} */ nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);\n            var /** @type {?} */ debugEl = new DebugElement(nativeEl, null, debugInfo);\n            indexDebugNode(debugEl);\n            return nativeEl;\n        };\n        /**\n         * @param {?} parentElement\n         * @param {?} name\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {\n            var /** @type {?} */ nativeEl = this._delegate.createElement(parentElement, name, debugInfo);\n            var /** @type {?} */ debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);\n            debugEl.name = name;\n            indexDebugNode(debugEl);\n            return nativeEl;\n        };\n        /**\n         * @param {?} hostElement\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };\n        /**\n         * @param {?} parentElement\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {\n            var /** @type {?} */ comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);\n            var /** @type {?} */ debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);\n            indexDebugNode(debugEl);\n            return comment;\n        };\n        /**\n         * @param {?} parentElement\n         * @param {?} value\n         * @param {?=} debugInfo\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {\n            var /** @type {?} */ text = this._delegate.createText(parentElement, value, debugInfo);\n            var /** @type {?} */ debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);\n            indexDebugNode(debugEl);\n            return text;\n        };\n        /**\n         * @param {?} parentElement\n         * @param {?} nodes\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {\n            var /** @type {?} */ debugParent = getDebugNode(parentElement);\n            if (isPresent(debugParent) && debugParent instanceof DebugElement) {\n                var /** @type {?} */ debugElement_1 = debugParent;\n                nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });\n            }\n            this._delegate.projectNodes(parentElement, nodes);\n        };\n        /**\n         * @param {?} node\n         * @param {?} viewRootNodes\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {\n            var /** @type {?} */ debugNode = getDebugNode(node);\n            if (isPresent(debugNode)) {\n                var /** @type {?} */ debugParent = debugNode.parent;\n                if (viewRootNodes.length > 0 && isPresent(debugParent)) {\n                    var /** @type {?} */ debugViewRootNodes_1 = [];\n                    viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode(rootNode)); });\n                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);\n                }\n            }\n            this._delegate.attachViewAfter(node, viewRootNodes);\n        };\n        /**\n         * @param {?} viewRootNodes\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {\n            viewRootNodes.forEach(function (node) {\n                var /** @type {?} */ debugNode = getDebugNode(node);\n                if (isPresent(debugNode) && isPresent(debugNode.parent)) {\n                    debugNode.parent.removeChild(debugNode);\n                }\n            });\n            this._delegate.detachView(viewRootNodes);\n        };\n        /**\n         * @param {?} hostElement\n         * @param {?} viewAllNodes\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {\n            viewAllNodes = viewAllNodes || [];\n            viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });\n            this._delegate.destroyView(hostElement, viewAllNodes);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} name\n         * @param {?} callback\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {\n            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl)) {\n                debugEl.listeners.push(new EventListener(name, callback));\n            }\n            return this._delegate.listen(renderElement, name, callback);\n        };\n        /**\n         * @param {?} target\n         * @param {?} name\n         * @param {?} callback\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {\n            return this._delegate.listenGlobal(target, name, callback);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} propertyName\n         * @param {?} propertyValue\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {\n            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.properties[propertyName] = propertyValue;\n            }\n            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} attributeName\n         * @param {?} attributeValue\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {\n            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.attributes[attributeName] = attributeValue;\n            }\n            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} propertyName\n         * @param {?} propertyValue\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {\n            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} className\n         * @param {?} isAdd\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {\n            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.classes[className] = isAdd;\n            }\n            this._delegate.setElementClass(renderElement, className, isAdd);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} styleName\n         * @param {?} styleValue\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {\n            var /** @type {?} */ debugEl = getDebugNode(renderElement);\n            if (isPresent(debugEl) && debugEl instanceof DebugElement) {\n                debugEl.styles[styleName] = styleValue;\n            }\n            this._delegate.setElementStyle(renderElement, styleName, styleValue);\n        };\n        /**\n         * @param {?} renderElement\n         * @param {?} methodName\n         * @param {?=} args\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {\n            this._delegate.invokeElementMethod(renderElement, methodName, args);\n        };\n        /**\n         * @param {?} renderNode\n         * @param {?} text\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };\n        /**\n         * @param {?} element\n         * @param {?} startingStyles\n         * @param {?} keyframes\n         * @param {?} duration\n         * @param {?} delay\n         * @param {?} easing\n         * @param {?=} previousPlayers\n         * @return {?}\n         */\n        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {\n            if (previousPlayers === void 0) { previousPlayers = []; }\n            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);\n        };\n        return DebugDomRenderer;\n    }());\n\n    var ViewType = {};\n    ViewType.HOST = 0;\n    ViewType.COMPONENT = 1;\n    ViewType.EMBEDDED = 2;\n    ViewType[ViewType.HOST] = \"HOST\";\n    ViewType[ViewType.COMPONENT] = \"COMPONENT\";\n    ViewType[ViewType.EMBEDDED] = \"EMBEDDED\";\n\n    var StaticNodeDebugInfo = (function () {\n        /**\n         * @param {?} providerTokens\n         * @param {?} componentToken\n         * @param {?} refTokens\n         */\n        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {\n            this.providerTokens = providerTokens;\n            this.componentToken = componentToken;\n            this.refTokens = refTokens;\n        }\n        return StaticNodeDebugInfo;\n    }());\n    var DebugContext = (function () {\n        /**\n         * @param {?} _view\n         * @param {?} _nodeIndex\n         * @param {?} _tplRow\n         * @param {?} _tplCol\n         */\n        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {\n            this._view = _view;\n            this._nodeIndex = _nodeIndex;\n            this._tplRow = _tplRow;\n            this._tplCol = _tplCol;\n        }\n        Object.defineProperty(DebugContext.prototype, \"_staticNodeInfo\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"context\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view.context; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"component\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {\n                    return this.injector.get(staticNodeInfo.componentToken);\n                }\n                return null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"componentRenderElement\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ componentView = this._view;\n                while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {\n                    componentView = (componentView.parentView);\n                }\n                return componentView.parentElement;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this._view.injector(this._nodeIndex); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"renderNode\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                if (isPresent(this._nodeIndex) && this._view.allNodes) {\n                    return this._view.allNodes[this._nodeIndex];\n                }\n                else {\n                    return null;\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"providerTokens\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"source\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                return this._view.componentType.templateUrl + \":\" + this._tplRow + \":\" + this._tplCol;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DebugContext.prototype, \"references\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var _this = this;\n                var /** @type {?} */ varValues = {};\n                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n                if (isPresent(staticNodeInfo)) {\n                    var /** @type {?} */ refs_1 = staticNodeInfo.refTokens;\n                    Object.keys(refs_1).forEach(function (refName) {\n                        var /** @type {?} */ refToken = refs_1[refName];\n                        var /** @type {?} */ varValue;\n                        if (isBlank(refToken)) {\n                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;\n                        }\n                        else {\n                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);\n                        }\n                        varValues[refName] = varValue;\n                    });\n                }\n                return varValues;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return DebugContext;\n    }());\n\n    var ViewAnimationMap = (function () {\n        function ViewAnimationMap() {\n            this._map = new Map();\n            this._allPlayers = [];\n        }\n        /**\n         * @param {?} element\n         * @param {?} animationName\n         * @return {?}\n         */\n        ViewAnimationMap.prototype.find = function (element, animationName) {\n            var /** @type {?} */ playersByAnimation = this._map.get(element);\n            if (isPresent(playersByAnimation)) {\n                return playersByAnimation[animationName];\n            }\n        };\n        /**\n         * @param {?} element\n         * @return {?}\n         */\n        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {\n            var /** @type {?} */ el = this._map.get(element);\n            return el ? Object.keys(el).map(function (k) { return el[k]; }) : [];\n        };\n        /**\n         * @param {?} element\n         * @param {?} animationName\n         * @param {?} player\n         * @return {?}\n         */\n        ViewAnimationMap.prototype.set = function (element, animationName, player) {\n            var /** @type {?} */ playersByAnimation = this._map.get(element);\n            if (!isPresent(playersByAnimation)) {\n                playersByAnimation = {};\n            }\n            var /** @type {?} */ existingEntry = playersByAnimation[animationName];\n            if (isPresent(existingEntry)) {\n                this.remove(element, animationName);\n            }\n            playersByAnimation[animationName] = player;\n            this._allPlayers.push(player);\n            this._map.set(element, playersByAnimation);\n        };\n        /**\n         * @return {?}\n         */\n        ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };\n        /**\n         * @param {?} element\n         * @param {?} animationName\n         * @param {?=} targetPlayer\n         * @return {?}\n         */\n        ViewAnimationMap.prototype.remove = function (element, animationName, targetPlayer) {\n            if (targetPlayer === void 0) { targetPlayer = null; }\n            var /** @type {?} */ playersByAnimation = this._map.get(element);\n            if (playersByAnimation) {\n                var /** @type {?} */ player = playersByAnimation[animationName];\n                if (!targetPlayer || player === targetPlayer) {\n                    delete playersByAnimation[animationName];\n                    var /** @type {?} */ index = this._allPlayers.indexOf(player);\n                    this._allPlayers.splice(index, 1);\n                    if (Object.keys(playersByAnimation).length === 0) {\n                        this._map.delete(element);\n                    }\n                }\n            }\n        };\n        return ViewAnimationMap;\n    }());\n\n    var AnimationViewContext = (function () {\n        /**\n         * @param {?} _animationQueue\n         */\n        function AnimationViewContext(_animationQueue) {\n            this._animationQueue = _animationQueue;\n            this._players = new ViewAnimationMap();\n        }\n        /**\n         * @param {?} callback\n         * @return {?}\n         */\n        AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {\n            var /** @type {?} */ activeAnimationPlayers = this._players.getAllPlayers();\n            // we check for the length to avoid having GroupAnimationPlayer\n            // issue an unnecessary microtask when zero players are passed in\n            if (activeAnimationPlayers.length) {\n                new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback(); });\n            }\n            else {\n                callback();\n            }\n        };\n        /**\n         * @param {?} element\n         * @param {?} animationName\n         * @param {?} player\n         * @return {?}\n         */\n        AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {\n            var _this = this;\n            this._animationQueue.enqueue(player);\n            this._players.set(element, animationName, player);\n            player.onDone(function () { return _this._players.remove(element, animationName, player); });\n        };\n        /**\n         * @param {?} element\n         * @param {?=} animationName\n         * @return {?}\n         */\n        AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName) {\n            if (animationName === void 0) { animationName = null; }\n            var /** @type {?} */ players = [];\n            if (animationName) {\n                var /** @type {?} */ currentPlayer = this._players.find(element, animationName);\n                if (currentPlayer) {\n                    _recursePlayers(currentPlayer, players);\n                }\n            }\n            else {\n                this._players.findAllPlayersByElement(element).forEach(function (player) { return _recursePlayers(player, players); });\n            }\n            return players;\n        };\n        return AnimationViewContext;\n    }());\n    /**\n     * @param {?} player\n     * @param {?} collectedPlayers\n     * @return {?}\n     */\n    function _recursePlayers(player, collectedPlayers) {\n        if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {\n            player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers); });\n        }\n        else {\n            collectedPlayers.push(player);\n        }\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$15 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var ElementInjector = (function (_super) {\n        __extends$15(ElementInjector, _super);\n        /**\n         * @param {?} _view\n         * @param {?} _nodeIndex\n         */\n        function ElementInjector(_view, _nodeIndex) {\n            _super.call(this);\n            this._view = _view;\n            this._nodeIndex = _nodeIndex;\n        }\n        /**\n         * @param {?} token\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        ElementInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            return this._view.injectorGet(token, this._nodeIndex, notFoundValue);\n        };\n        return ElementInjector;\n    }(Injector));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$14 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var /** @type {?} */ _scope_check = wtfCreateScope(\"AppView#check(ascii id)\");\n    /**\n     * @experimental\n     */\n    var /** @type {?} */ EMPTY_CONTEXT = new Object();\n    var /** @type {?} */ UNDEFINED$1 = new Object();\n    /**\n     * Cost of making objects: http://jsperf.com/instantiate-size-of-object\n     *\n     * @abstract\n     */\n    var AppView = (function () {\n        /**\n         * @param {?} clazz\n         * @param {?} componentType\n         * @param {?} type\n         * @param {?} viewUtils\n         * @param {?} parentView\n         * @param {?} parentIndex\n         * @param {?} parentElement\n         * @param {?} cdMode\n         * @param {?=} declaredViewContainer\n         */\n        function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {\n            if (declaredViewContainer === void 0) { declaredViewContainer = null; }\n            this.clazz = clazz;\n            this.componentType = componentType;\n            this.type = type;\n            this.viewUtils = viewUtils;\n            this.parentView = parentView;\n            this.parentIndex = parentIndex;\n            this.parentElement = parentElement;\n            this.cdMode = cdMode;\n            this.declaredViewContainer = declaredViewContainer;\n            this.numberOfChecks = 0;\n            this.ref = new ViewRef_(this, viewUtils.animationQueue);\n            if (type === ViewType.COMPONENT || type === ViewType.HOST) {\n                this.renderer = viewUtils.renderComponent(componentType);\n            }\n            else {\n                this.renderer = parentView.renderer;\n            }\n            this._directRenderer = this.renderer.directRenderer;\n        }\n        Object.defineProperty(AppView.prototype, \"animationContext\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                if (!this._animationContext) {\n                    this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);\n                }\n                return this._animationContext;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AppView.prototype, \"destroyed\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} context\n         * @return {?}\n         */\n        AppView.prototype.create = function (context) {\n            this.context = context;\n            return this.createInternal(null);\n        };\n        /**\n         * @param {?} rootSelectorOrNode\n         * @param {?} hostInjector\n         * @param {?} projectableNodes\n         * @return {?}\n         */\n        AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {\n            this.context = (EMPTY_CONTEXT);\n            this._hasExternalHostElement = isPresent(rootSelectorOrNode);\n            this._hostInjector = hostInjector;\n            this._hostProjectableNodes = projectableNodes;\n            return this.createInternal(rootSelectorOrNode);\n        };\n        /**\n         * Overwritten by implementations.\n         * Returns the ComponentRef for the host element for ViewType.HOST.\n         * @param {?} rootSelectorOrNode\n         * @return {?}\n         */\n        AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };\n        /**\n         * Overwritten by implementations.\n         * @param {?} templateNodeIndex\n         * @return {?}\n         */\n        AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };\n        /**\n         * @param {?} lastRootNode\n         * @param {?} allNodes\n         * @param {?} disposables\n         * @return {?}\n         */\n        AppView.prototype.init = function (lastRootNode, allNodes, disposables) {\n            this.lastRootNode = lastRootNode;\n            this.allNodes = allNodes;\n            this.disposables = disposables;\n            if (this.type === ViewType.COMPONENT) {\n                this.dirtyParentQueriesInternal();\n            }\n        };\n        /**\n         * @param {?} token\n         * @param {?} nodeIndex\n         * @param {?=} notFoundValue\n         * @return {?}\n         */\n        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {\n            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }\n            var /** @type {?} */ result = UNDEFINED$1;\n            var /** @type {?} */ view = this;\n            while (result === UNDEFINED$1) {\n                if (isPresent(nodeIndex)) {\n                    result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);\n                }\n                if (result === UNDEFINED$1 && view.type === ViewType.HOST) {\n                    result = view._hostInjector.get(token, notFoundValue);\n                }\n                nodeIndex = view.parentIndex;\n                view = view.parentView;\n            }\n            return result;\n        };\n        /**\n         * Overwritten by implementations\n         * @param {?} token\n         * @param {?} nodeIndex\n         * @param {?} notFoundResult\n         * @return {?}\n         */\n        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {\n            return notFoundResult;\n        };\n        /**\n         * @param {?} nodeIndex\n         * @return {?}\n         */\n        AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };\n        /**\n         * @return {?}\n         */\n        AppView.prototype.detachAndDestroy = function () {\n            if (this.viewContainer) {\n                this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));\n            }\n            else if (this.appRef) {\n                this.appRef.detachView(this.ref);\n            }\n            else if (this._hasExternalHostElement) {\n                this.detach();\n            }\n            this.destroy();\n        };\n        /**\n         * @return {?}\n         */\n        AppView.prototype.destroy = function () {\n            var _this = this;\n            if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n                return;\n            }\n            var /** @type {?} */ hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;\n            if (this.disposables) {\n                for (var /** @type {?} */ i = 0; i < this.disposables.length; i++) {\n                    this.disposables[i]();\n                }\n            }\n            this.destroyInternal();\n            this.dirtyParentQueriesInternal();\n            if (this._animationContext) {\n                this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });\n            }\n            else {\n                this.renderer.destroyView(hostElement, this.allNodes);\n            }\n            this.cdMode = ChangeDetectorStatus.Destroyed;\n        };\n        /**\n         * Overwritten by implementations\n         * @return {?}\n         */\n        AppView.prototype.destroyInternal = function () { };\n        /**\n         * Overwritten by implementations\n         * @return {?}\n         */\n        AppView.prototype.detachInternal = function () { };\n        /**\n         * @return {?}\n         */\n        AppView.prototype.detach = function () {\n            var _this = this;\n            this.detachInternal();\n            if (this._animationContext) {\n                this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });\n            }\n            else {\n                this._renderDetach();\n            }\n            if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer &&\n                this.declaredViewContainer.projectedViews) {\n                var /** @type {?} */ projectedViews = this.declaredViewContainer.projectedViews;\n                var /** @type {?} */ index = projectedViews.indexOf(this);\n                // perf: pop is faster than splice!\n                if (index >= projectedViews.length - 1) {\n                    projectedViews.pop();\n                }\n                else {\n                    projectedViews.splice(index, 1);\n                }\n            }\n            this.appRef = null;\n            this.viewContainer = null;\n            this.dirtyParentQueriesInternal();\n        };\n        /**\n         * @return {?}\n         */\n        AppView.prototype._renderDetach = function () {\n            if (this._directRenderer) {\n                this.visitRootNodesInternal(this._directRenderer.remove, null);\n            }\n            else {\n                this.renderer.detachView(this.flatRootNodes);\n            }\n        };\n        /**\n         * @param {?} appRef\n         * @return {?}\n         */\n        AppView.prototype.attachToAppRef = function (appRef) {\n            if (this.viewContainer) {\n                throw new Error('This view is already attached to a ViewContainer!');\n            }\n            this.appRef = appRef;\n            this.dirtyParentQueriesInternal();\n        };\n        /**\n         * @param {?} viewContainer\n         * @param {?} prevView\n         * @return {?}\n         */\n        AppView.prototype.attachAfter = function (viewContainer, prevView) {\n            if (this.appRef) {\n                throw new Error('This view is already attached directly to the ApplicationRef!');\n            }\n            this._renderAttach(viewContainer, prevView);\n            this.viewContainer = viewContainer;\n            if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {\n                if (!this.declaredViewContainer.projectedViews) {\n                    this.declaredViewContainer.projectedViews = [];\n                }\n                this.declaredViewContainer.projectedViews.push(this);\n            }\n            this.dirtyParentQueriesInternal();\n        };\n        /**\n         * @param {?} viewContainer\n         * @param {?} prevView\n         * @return {?}\n         */\n        AppView.prototype.moveAfter = function (viewContainer, prevView) {\n            this._renderAttach(viewContainer, prevView);\n            this.dirtyParentQueriesInternal();\n        };\n        /**\n         * @param {?} viewContainer\n         * @param {?} prevView\n         * @return {?}\n         */\n        AppView.prototype._renderAttach = function (viewContainer, prevView) {\n            var /** @type {?} */ prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;\n            if (this._directRenderer) {\n                var /** @type {?} */ nextSibling = this._directRenderer.nextSibling(prevNode);\n                if (nextSibling) {\n                    this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);\n                }\n                else {\n                    var /** @type {?} */ parentElement = this._directRenderer.parentElement(prevNode);\n                    if (parentElement) {\n                        this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);\n                    }\n                }\n            }\n            else {\n                this.renderer.attachViewAfter(prevNode, this.flatRootNodes);\n            }\n        };\n        Object.defineProperty(AppView.prototype, \"changeDetectorRef\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.ref; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AppView.prototype, \"flatRootNodes\", {\n            /**\n             * @return {?}\n             */\n            get: function () {\n                var /** @type {?} */ nodes = [];\n                this.visitRootNodesInternal(addToArray, nodes);\n                return nodes;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} parentElement\n         * @param {?} ngContentIndex\n         * @return {?}\n         */\n        AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {\n            if (this._directRenderer) {\n                this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);\n            }\n            else {\n                var /** @type {?} */ nodes = [];\n                this.visitProjectedNodes(ngContentIndex, addToArray, nodes);\n                this.renderer.projectNodes(parentElement, nodes);\n            }\n        };\n        /**\n         * @param {?} ngContentIndex\n         * @param {?} cb\n         * @param {?} c\n         * @return {?}\n         */\n        AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {\n            switch (this.type) {\n                case ViewType.EMBEDDED:\n                    this.parentView.visitProjectedNodes(ngContentIndex, cb, c);\n                    break;\n                case ViewType.COMPONENT:\n                    if (this.parentView.type === ViewType.HOST) {\n                        var /** @type {?} */ nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];\n                        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {\n                            cb(nodes[i], c);\n                        }\n                    }\n                    else {\n                        this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);\n                    }\n                    break;\n            }\n        };\n        /**\n         * Overwritten by implementations\n         * @param {?} cb\n         * @param {?} c\n         * @return {?}\n         */\n        AppView.prototype.visitRootNodesInternal = function (cb, c) { };\n        /**\n         * Overwritten by implementations\n         * @param {?} nodeIndex\n         * @param {?} ngContentIndex\n         * @param {?} cb\n         * @param {?} c\n         * @return {?}\n         */\n        AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };\n        /**\n         * Overwritten by implementations\n         * @return {?}\n         */\n        AppView.prototype.dirtyParentQueriesInternal = function () { };\n        /**\n         * @param {?} throwOnChange\n         * @return {?}\n         */\n        AppView.prototype.internalDetectChanges = function (throwOnChange) {\n            if (this.cdMode !== ChangeDetectorStatus.Detached) {\n                this.detectChanges(throwOnChange);\n            }\n        };\n        /**\n         * @param {?} throwOnChange\n         * @return {?}\n         */\n        AppView.prototype.detectChanges = function (throwOnChange) {\n            var /** @type {?} */ s = _scope_check(this.clazz);\n            if (this.cdMode === ChangeDetectorStatus.Checked ||\n                this.cdMode === ChangeDetectorStatus.Errored)\n                return;\n            if (this.cdMode === ChangeDetectorStatus.Destroyed) {\n                this.throwDestroyedError('detectChanges');\n            }\n            this.detectChangesInternal(throwOnChange);\n            if (this.cdMode === ChangeDetectorStatus.CheckOnce)\n                this.cdMode = ChangeDetectorStatus.Checked;\n            this.numberOfChecks++;\n            wtfLeave(s);\n        };\n        /**\n         * Overwritten by implementations\n         * @param {?} throwOnChange\n         * @return {?}\n         */\n        AppView.prototype.detectChangesInternal = function (throwOnChange) { };\n        /**\n         * @return {?}\n         */\n        AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };\n        /**\n         * @return {?}\n         */\n        AppView.prototype.markPathToRootAsCheckOnce = function () {\n            var /** @type {?} */ c = this;\n            while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {\n                if (c.cdMode === ChangeDetectorStatus.Checked) {\n                    c.cdMode = ChangeDetectorStatus.CheckOnce;\n                }\n                if (c.type === ViewType.COMPONENT) {\n                    c = c.parentView;\n                }\n                else {\n                    c = c.viewContainer ? c.viewContainer.parentView : null;\n                }\n            }\n        };\n        /**\n         * @param {?} cb\n         * @return {?}\n         */\n        AppView.prototype.eventHandler = function (cb) {\n            return cb;\n        };\n        /**\n         * @param {?} details\n         * @return {?}\n         */\n        AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };\n        return AppView;\n    }());\n    var DebugAppView = (function (_super) {\n        __extends$14(DebugAppView, _super);\n        /**\n         * @param {?} clazz\n         * @param {?} componentType\n         * @param {?} type\n         * @param {?} viewUtils\n         * @param {?} parentView\n         * @param {?} parentIndex\n         * @param {?} parentNode\n         * @param {?} cdMode\n         * @param {?} staticNodeDebugInfos\n         * @param {?=} declaredViewContainer\n         */\n        function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {\n            if (declaredViewContainer === void 0) { declaredViewContainer = null; }\n            _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);\n            this.staticNodeDebugInfos = staticNodeDebugInfos;\n            this._currentDebugContext = null;\n        }\n        /**\n         * @param {?} context\n         * @return {?}\n         */\n        DebugAppView.prototype.create = function (context) {\n            this._resetDebug();\n            try {\n                return _super.prototype.create.call(this, context);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @param {?} rootSelectorOrNode\n         * @param {?} injector\n         * @param {?=} projectableNodes\n         * @return {?}\n         */\n        DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {\n            if (projectableNodes === void 0) { projectableNodes = null; }\n            this._resetDebug();\n            try {\n                return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @param {?} token\n         * @param {?} nodeIndex\n         * @param {?=} notFoundResult\n         * @return {?}\n         */\n        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {\n            this._resetDebug();\n            try {\n                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        DebugAppView.prototype.detach = function () {\n            this._resetDebug();\n            try {\n                _super.prototype.detach.call(this);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        DebugAppView.prototype.destroy = function () {\n            this._resetDebug();\n            try {\n                _super.prototype.destroy.call(this);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @param {?} throwOnChange\n         * @return {?}\n         */\n        DebugAppView.prototype.detectChanges = function (throwOnChange) {\n            this._resetDebug();\n            try {\n                _super.prototype.detectChanges.call(this, throwOnChange);\n            }\n            catch (e) {\n                this._rethrowWithContext(e);\n                throw e;\n            }\n        };\n        /**\n         * @return {?}\n         */\n        DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };\n        /**\n         * @param {?} nodeIndex\n         * @param {?} rowNum\n         * @param {?} colNum\n         * @return {?}\n         */\n        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {\n            return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);\n        };\n        /**\n         * @param {?} e\n         * @return {?}\n         */\n        DebugAppView.prototype._rethrowWithContext = function (e) {\n            if (!(e instanceof ViewWrappedError)) {\n                if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {\n                    this.cdMode = ChangeDetectorStatus.Errored;\n                }\n                if (isPresent(this._currentDebugContext)) {\n                    throw new ViewWrappedError(e, this._currentDebugContext);\n                }\n            }\n        };\n        /**\n         * @param {?} cb\n         * @return {?}\n         */\n        DebugAppView.prototype.eventHandler = function (cb) {\n            var _this = this;\n            var /** @type {?} */ superHandler = _super.prototype.eventHandler.call(this, cb);\n            return function (eventName, event) {\n                _this._resetDebug();\n                try {\n                    return superHandler.call(_this, eventName, event);\n                }\n                catch (e) {\n                    _this._rethrowWithContext(e);\n                    throw e;\n                }\n            };\n        };\n        return DebugAppView;\n    }(AppView));\n\n    /**\n     * A ViewContainer is created for elements that have a ViewContainerRef\n     * to keep track of the nested views.\n     */\n    var ViewContainer = (function () {\n        /**\n         * @param {?} index\n         * @param {?} parentIndex\n         * @param {?} parentView\n         * @param {?} nativeElement\n         */\n        function ViewContainer(index, parentIndex, parentView, nativeElement) {\n            this.index = index;\n            this.parentIndex = parentIndex;\n            this.parentView = parentView;\n            this.nativeElement = nativeElement;\n        }\n        Object.defineProperty(ViewContainer.prototype, \"elementRef\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return new ElementRef(this.nativeElement); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainer.prototype, \"vcRef\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return new ViewContainerRef_(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainer.prototype, \"parentInjector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.parentView.injector(this.parentIndex); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ViewContainer.prototype, \"injector\", {\n            /**\n             * @return {?}\n             */\n            get: function () { return this.parentView.injector(this.index); },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * @param {?} throwOnChange\n         * @return {?}\n         */\n        ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {\n            if (this.nestedViews) {\n                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n                    this.nestedViews[i].detectChanges(throwOnChange);\n                }\n            }\n        };\n        /**\n         * @return {?}\n         */\n        ViewContainer.prototype.destroyNestedViews = function () {\n            if (this.nestedViews) {\n                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n                    this.nestedViews[i].destroy();\n                }\n            }\n        };\n        /**\n         * @param {?} cb\n         * @param {?} c\n         * @return {?}\n         */\n        ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {\n            if (this.nestedViews) {\n                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n                    this.nestedViews[i].visitRootNodesInternal(cb, c);\n                }\n            }\n        };\n        /**\n         * @param {?} nestedViewClass\n         * @param {?} callback\n         * @return {?}\n         */\n        ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {\n            var /** @type {?} */ result = [];\n            if (this.nestedViews) {\n                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {\n                    var /** @type {?} */ nestedView = this.nestedViews[i];\n                    if (nestedView.clazz === nestedViewClass) {\n                        result.push(callback(nestedView));\n                    }\n                }\n            }\n            if (this.projectedViews) {\n                for (var /** @type {?} */ i = 0; i < this.projectedViews.length; i++) {\n                    var /** @type {?} */ projectedView = this.projectedViews[i];\n                    if (projectedView.clazz === nestedViewClass) {\n                        result.push(callback(projectedView));\n                    }\n                }\n            }\n            return result;\n        };\n        /**\n         * @param {?} view\n         * @param {?} currentIndex\n         * @return {?}\n         */\n        ViewContainer.prototype.moveView = function (view, currentIndex) {\n            var /** @type {?} */ previousIndex = this.nestedViews.indexOf(view);\n            if (view.type === ViewType.COMPONENT) {\n                throw new Error(\"Component views can't be moved!\");\n            }\n            var /** @type {?} */ nestedViews = this.nestedViews;\n            if (nestedViews == null) {\n                nestedViews = [];\n                this.nestedViews = nestedViews;\n            }\n            nestedViews.splice(previousIndex, 1);\n            nestedViews.splice(currentIndex, 0, view);\n            var /** @type {?} */ prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;\n            view.moveAfter(this, prevView);\n        };\n        /**\n         * @param {?} view\n         * @param {?} viewIndex\n         * @return {?}\n         */\n        ViewContainer.prototype.attachView = function (view, viewIndex) {\n            if (view.type === ViewType.COMPONENT) {\n                throw new Error(\"Component views can't be moved!\");\n            }\n            var /** @type {?} */ nestedViews = this.nestedViews;\n            if (nestedViews == null) {\n                nestedViews = [];\n                this.nestedViews = nestedViews;\n            }\n            // perf: array.push is faster than array.splice!\n            if (viewIndex >= nestedViews.length) {\n                nestedViews.push(view);\n            }\n            else {\n                nestedViews.splice(viewIndex, 0, view);\n            }\n            var /** @type {?} */ prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;\n            view.attachAfter(this, prevView);\n        };\n        /**\n         * @param {?} viewIndex\n         * @return {?}\n         */\n        ViewContainer.prototype.detachView = function (viewIndex) {\n            var /** @type {?} */ view = this.nestedViews[viewIndex];\n            // perf: array.pop is faster than array.splice!\n            if (viewIndex >= this.nestedViews.length - 1) {\n                this.nestedViews.pop();\n            }\n            else {\n                this.nestedViews.splice(viewIndex, 1);\n            }\n            if (view.type === ViewType.COMPONENT) {\n                throw new Error(\"Component views can't be moved!\");\n            }\n            view.detach();\n            return view;\n        };\n        return ViewContainer;\n    }());\n\n    var /** @type {?} */ __core_private__ = {\n        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,\n        ChangeDetectorStatus: ChangeDetectorStatus,\n        constructDependencies: constructDependencies,\n        LifecycleHooks: LifecycleHooks,\n        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,\n        ReflectorReader: ReflectorReader,\n        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,\n        ComponentRef_: ComponentRef_,\n        ViewContainer: ViewContainer,\n        AppView: AppView,\n        DebugAppView: DebugAppView,\n        NgModuleInjector: NgModuleInjector,\n        registerModuleFactory: registerModuleFactory,\n        ViewType: ViewType,\n        view_utils: view_utils,\n        ViewMetadata: ViewMetadata,\n        DebugContext: DebugContext,\n        StaticNodeDebugInfo: StaticNodeDebugInfo,\n        devModeEqual: devModeEqual,\n        UNINITIALIZED: UNINITIALIZED,\n        ValueUnwrapper: ValueUnwrapper,\n        RenderDebugInfo: RenderDebugInfo,\n        TemplateRef_: TemplateRef_,\n        ReflectionCapabilities: ReflectionCapabilities,\n        makeDecorator: makeDecorator,\n        DebugDomRootRenderer: DebugDomRootRenderer,\n        Console: Console,\n        reflector: reflector,\n        Reflector: Reflector,\n        NoOpAnimationPlayer: NoOpAnimationPlayer,\n        AnimationPlayer: AnimationPlayer,\n        AnimationSequencePlayer: AnimationSequencePlayer,\n        AnimationGroupPlayer: AnimationGroupPlayer,\n        AnimationKeyframe: AnimationKeyframe,\n        prepareFinalAnimationStyles: prepareFinalAnimationStyles,\n        balanceAnimationKeyframes: balanceAnimationKeyframes,\n        flattenStyles: flattenStyles,\n        clearStyles: clearStyles,\n        renderStyles: renderStyles,\n        collectAndResolveStyles: collectAndResolveStyles,\n        APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,\n        AnimationStyles: AnimationStyles,\n        ANY_STATE: ANY_STATE,\n        DEFAULT_STATE: DEFAULT_STATE,\n        EMPTY_STATE: EMPTY_STATE,\n        FILL_STYLE_FLAG: FILL_STYLE_FLAG,\n        ComponentStillLoadingError: ComponentStillLoadingError,\n        isPromise: isPromise,\n        isObservable: isObservable,\n        AnimationTransition: AnimationTransition\n    };\n\n    exports.createPlatform = createPlatform;\n    exports.assertPlatform = assertPlatform;\n    exports.destroyPlatform = destroyPlatform;\n    exports.getPlatform = getPlatform;\n    exports.PlatformRef = PlatformRef;\n    exports.ApplicationRef = ApplicationRef;\n    exports.enableProdMode = enableProdMode;\n    exports.isDevMode = isDevMode;\n    exports.createPlatformFactory = createPlatformFactory;\n    exports.NgProbeToken = NgProbeToken;\n    exports.APP_ID = APP_ID;\n    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;\n    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;\n    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;\n    exports.APP_INITIALIZER = APP_INITIALIZER;\n    exports.ApplicationInitStatus = ApplicationInitStatus;\n    exports.DebugElement = DebugElement;\n    exports.DebugNode = DebugNode;\n    exports.asNativeElements = asNativeElements;\n    exports.getDebugNode = getDebugNode;\n    exports.Testability = Testability;\n    exports.TestabilityRegistry = TestabilityRegistry;\n    exports.setTestabilityGetter = setTestabilityGetter;\n    exports.TRANSLATIONS = TRANSLATIONS;\n    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;\n    exports.LOCALE_ID = LOCALE_ID;\n    exports.ApplicationModule = ApplicationModule;\n    exports.wtfCreateScope = wtfCreateScope;\n    exports.wtfLeave = wtfLeave;\n    exports.wtfStartTimeRange = wtfStartTimeRange;\n    exports.wtfEndTimeRange = wtfEndTimeRange;\n    exports.Type = Type;\n    exports.EventEmitter = EventEmitter;\n    exports.ErrorHandler = ErrorHandler;\n    exports.AnimationTransitionEvent = AnimationTransitionEvent;\n    exports.AnimationPlayer = AnimationPlayer;\n    exports.AnimationStyles = AnimationStyles;\n    exports.AnimationKeyframe = AnimationKeyframe;\n    exports.Sanitizer = Sanitizer;\n    exports.SecurityContext = SecurityContext;\n    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;\n    exports.Attribute = Attribute;\n    exports.ContentChild = ContentChild;\n    exports.ContentChildren = ContentChildren;\n    exports.Query = Query;\n    exports.ViewChild = ViewChild;\n    exports.ViewChildren = ViewChildren;\n    exports.Component = Component;\n    exports.Directive = Directive;\n    exports.HostBinding = HostBinding;\n    exports.HostListener = HostListener;\n    exports.Input = Input;\n    exports.Output = Output;\n    exports.Pipe = Pipe;\n    exports.AfterContentChecked = AfterContentChecked;\n    exports.AfterContentInit = AfterContentInit;\n    exports.AfterViewChecked = AfterViewChecked;\n    exports.AfterViewInit = AfterViewInit;\n    exports.DoCheck = DoCheck;\n    exports.OnChanges = OnChanges;\n    exports.OnDestroy = OnDestroy;\n    exports.OnInit = OnInit;\n    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;\n    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;\n    exports.NgModule = NgModule;\n    exports.ViewEncapsulation = ViewEncapsulation;\n    exports.Version = Version;\n    exports.VERSION = VERSION;\n    exports.Class = Class;\n    exports.forwardRef = forwardRef;\n    exports.resolveForwardRef = resolveForwardRef;\n    exports.Injector = Injector;\n    exports.ReflectiveInjector = ReflectiveInjector;\n    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;\n    exports.ReflectiveKey = ReflectiveKey;\n    exports.OpaqueToken = OpaqueToken;\n    exports.Inject = Inject;\n    exports.Optional = Optional;\n    exports.Injectable = Injectable;\n    exports.Self = Self;\n    exports.SkipSelf = SkipSelf;\n    exports.Host = Host;\n    exports.NgZone = NgZone;\n    exports.RenderComponentType = RenderComponentType;\n    exports.Renderer = Renderer;\n    exports.RootRenderer = RootRenderer;\n    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;\n    exports.Compiler = Compiler;\n    exports.CompilerFactory = CompilerFactory;\n    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;\n    exports.ComponentFactory = ComponentFactory;\n    exports.ComponentRef = ComponentRef;\n    exports.ComponentFactoryResolver = ComponentFactoryResolver;\n    exports.ElementRef = ElementRef;\n    exports.NgModuleFactory = NgModuleFactory;\n    exports.NgModuleRef = NgModuleRef;\n    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;\n    exports.getModuleFactory = getModuleFactory;\n    exports.QueryList = QueryList;\n    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;\n    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;\n    exports.TemplateRef = TemplateRef;\n    exports.ViewContainerRef = ViewContainerRef;\n    exports.EmbeddedViewRef = EmbeddedViewRef;\n    exports.ViewRef = ViewRef;\n    exports.ChangeDetectionStrategy = ChangeDetectionStrategy;\n    exports.ChangeDetectorRef = ChangeDetectorRef;\n    exports.CollectionChangeRecord = CollectionChangeRecord;\n    exports.DefaultIterableDiffer = DefaultIterableDiffer;\n    exports.IterableDiffers = IterableDiffers;\n    exports.KeyValueChangeRecord = KeyValueChangeRecord;\n    exports.KeyValueDiffers = KeyValueDiffers;\n    exports.SimpleChange = SimpleChange;\n    exports.WrappedValue = WrappedValue;\n    exports.platformCore = platformCore;\n    exports.__core_private__ = __core_private__;\n    exports.AUTO_STYLE = AUTO_STYLE;\n    exports.AnimationEntryMetadata = AnimationEntryMetadata;\n    exports.AnimationStateMetadata = AnimationStateMetadata;\n    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;\n    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;\n    exports.AnimationMetadata = AnimationMetadata;\n    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;\n    exports.AnimationStyleMetadata = AnimationStyleMetadata;\n    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;\n    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;\n    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;\n    exports.AnimationGroupMetadata = AnimationGroupMetadata;\n    exports.animate = animate;\n    exports.group = group;\n    exports.sequence = sequence;\n    exports.style = style;\n    exports.state = state;\n    exports.keyframes = keyframes;\n    exports.transition = transition;\n    exports.trigger = trigger;\n\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/core/bundles/core.umd.js\n// module id = 1\n// module chunks = 0","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/symbol/observable.js\n// module id = 2\n// module chunks = 0","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/root.js\n// module id = 3\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subject.js\n// module id = 4\n// module chunks = 0","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is  called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Observable.js\n// module id = 5\n// module chunks = 0","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/toSubscriber.js\n// module id = 6\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=Subscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subscriber.js\n// module id = 7\n// module chunks = 0","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isFunction.js\n// module id = 8\n// module chunks = 0","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Subscription.js\n// module id = 9\n// module chunks = 0","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isArray.js\n// module id = 10\n// module chunks = 0","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/isObject.js\n// module id = 11\n// module chunks = 0","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/tryCatch.js\n// module id = 12\n// module chunks = 0","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/errorObject.js\n// module id = 13\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/UnsubscriptionError.js\n// module id = 14\n// module chunks = 0","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/Observer.js\n// module id = 15\n// module chunks = 0","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/symbol/rxSubscriber.js\n// module id = 16\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/util/ObjectUnsubscribedError.js\n// module id = 17\n// module chunks = 0","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/rxjs/SubjectSubscription.js\n// module id = 18\n// module chunks = 0"],"sourceRoot":""}